/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:12:05 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean("java.lang.Short");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      
      Boolean[] booleanArray2 = new Boolean[8];
      booleanArray2[0] = boolean3;
      booleanArray2[1] = boolean3;
      booleanArray2[2] = boolean4;
      booleanArray2[3] = boolean2;
      booleanArray2[4] = boolean3;
      Boolean boolean5 = Boolean.valueOf("java.lang.Short");
      assertFalse(boolean5);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      
      booleanArray2[5] = boolean5;
      booleanArray2[6] = boolean2;
      booleanArray2[7] = (Boolean) false;
      Boolean boolean6 = ArrayUtils.get(booleanArray2, (-1270));
      assertNull(boolean6);
      assertEquals(8, booleanArray2.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) booleanArray2, (Object) boolean2, (-1483));
      assertEquals(2, int0);
      assertEquals(8, booleanArray2.length);
      assertTrue(boolean2.equals((Object)boolean5));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean3));
      assertTrue(boolean2.equals((Object)boolean4));
      assertTrue(boolean2.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 1.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1967.9F);
      floatArray0[1] = (-1967.9F);
      floatArray0[2] = (-1967.9F);
      floatArray0[3] = (-1967.9F);
      floatArray0[4] = (-1967.9F);
      floatArray0[5] = (-1967.9F);
      floatArray0[6] = (-1967.9F);
      floatArray0[7] = 1005.13F;
      floatArray0[8] = (-1967.9F);
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1967.9F), (-1967.9F), (-1967.9F), (-1967.9F), (-1967.9F), (-1967.9F), 1005.13F, (-1967.9F), (-1967.9F)}, floatArray0, 0.01F);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'A');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = '`';
      charArray0[2] = 'G';
      charArray0[3] = '\"';
      charArray0[4] = '\\';
      charArray0[5] = 'F';
      charArray0[6] = 'j';
      charArray0[7] = '1';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertArrayEquals(new char[] {'k', '`', 'G', '\"', '\\', 'F', 'j', '1'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'k';
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(objectArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)6, 72);
      assertEquals(5, int0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)89, (byte) (-6), (byte)2, (byte)4, (byte)6, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)4142;
      shortArray0[1] = (short) (-567);
      shortArray0[2] = (short)3109;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)3158;
      shortArray0[5] = (short)3;
      shortArray0[6] = (short)1;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)122);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)4142, (short) (-567), (short)3109, (short)2, (short)3158, (short)3, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)4142, (short) (-567), (short)3109, (short)2, (short)3158, (short)3, (short)1}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)3109;
      longArray0[1] = (long) (short)3;
      longArray0[2] = (-4191L);
      longArray0[3] = (long) (short)122;
      longArray0[4] = (long) (short)3;
      longArray0[5] = (long) (short) (-567);
      longArray0[6] = (long) (short)1;
      longArray0[7] = (long) (short) (-567);
      longArray0[8] = (-550L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals((-1), int0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {3109L, 3L, (-4191L), 122L, 3L, (-567L), 1L, (-567L), (-550L)}, longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1500.5245097007);
      assertEquals(1500.5245097007, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(5084.5579808);
      assertEquals(5084.5579808, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[1] = double0;
      Double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, 2, (-1218), 32);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true, false}, booleanArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = 2375L;
      longArray0[1] = 3934L;
      longArray0[2] = (long) (-1218);
      longArray0[3] = (long) (-1218);
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) 2;
      int int0 = ArrayUtils.indexOf(longArray0, 3934L, (-2272));
      assertEquals(1, int0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {2375L, 3934L, (-1218L), (-1218L), 2L, 2L, 2L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 11;
      intArray0[4] = (-209);
      intArray0[5] = 0;
      ArrayUtils.shift(intArray0, (-209), 0, 11);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 11, (-209), 0}, intArray0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = ";";
      stringArray0[1] = "java.lang.Integer";
      stringArray0[2] = "ne Hlr";
      stringArray0[3] = "java.lang.String";
      stringArray0[4] = "java.lang.Float";
      stringArray0[5] = "#";
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(stringArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-213.131F), 2);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 65536, 12, 2);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 12;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1), 12}, intArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 65536;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 2;
      longArray0[6] = (long) 2;
      longArray0[7] = (long) 12;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {2L, 65536L, 2L, (-1L), 2L, 2L, 12L, 2L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.reverse(longArray0, 3496, 3496);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[0] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '-');
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'f', 'f', '\u0000', 'f', 'f'}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1678;
      shortArray0[1] = (short)1731;
      shortArray0[2] = (short)3080;
      shortArray0[3] = (short) (-2951);
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)2709;
      ArrayUtils.shift(shortArray0, 4, 0, (int) (short)3080);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1678, (short)1731, (short)3080, (short) (-2951), (short)4, (short)2709}, shortArray0);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1678, (short)1731, (short)3080, (short) (-2951), (short)4, (short)2709}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Character character0 = new Character('Y');
      assertEquals('Y', (char)character0);
      assertNotNull(character0);
      
      ArrayUtils.shift((Object[]) booleanArray1, 434);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      ArrayUtils.shift(booleanArray0, 434, 605, 434);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      ArrayUtils.shift(longArray0, (-897));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      ArrayUtils.shift((char[]) null, 0, 0, 0);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 40);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'L');
      assertNull(charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      int int1 = ArrayUtils.indexOf(floatArray0, 2.14722176E9F, 40);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 'L';
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      
      ArrayUtils.shift(floatArray0, (int) 'L', 0, (-1));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 76L}, longArray1);
      assertArrayEquals(new long[] {0L, 76L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'W');
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-3464), (-4334));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2146466190;
      floatArray0[1] = 227.79F;
      int[] intArray0 = new int[8];
      intArray0[0] = (-2185);
      intArray0[1] = 2146466190;
      intArray0[2] = 2146466190;
      intArray0[3] = 2146466190;
      intArray0[4] = 2146466190;
      intArray0[5] = 2146466190;
      intArray0[6] = (-2185);
      intArray0[7] = (-2185);
      int int0 = ArrayUtils.indexOf(intArray0, (-1722));
      assertEquals((-1), int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-2185), 2146466190, 2146466190, 2146466190, 2146466190, 2146466190, (-2185), (-2185)}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(1.0, (double) 2146466190);
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs((-736L), (long) (-2185));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = 66;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 2031.8444, 66, (-4577.60805));
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 66;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      int int2 = ArrayUtils.indexOf(floatArray0, Float.NaN, 0);
      assertEquals((-1), int2);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {66.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      Long long0 = null;
      Long[] longArray0 = null;
      int int3 = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.add((Long[]) null, 1, (Long) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1163.15598168);
      doubleArray0[1] = (-1163.15598168);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1163.15598168), (-1163.15598168)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-2147483648L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (-3507L);
      longArray0[4] = (-2147483648L);
      Double double0 = new Double((-458.4983523633578));
      assertEquals((-458.4983523633578), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2008.645183378);
      assertEquals(2008.645183378, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)1, (int) (short)1);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\'';
      charArray0[1] = 'w';
      charArray0[2] = 'x';
      charArray0[3] = '~';
      charArray0[4] = '5';
      charArray0[5] = 'A';
      charArray0[6] = 'o';
      charArray0[7] = 'r';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'A', (-351));
      assertEquals(6, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\'', 'w', 'x', '~', '5', 'A', 'o', 'r'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)74;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)3, (int) (byte)121);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-86), (byte)121, (byte)74, (byte)74}, byteArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)74;
      shortArray0[1] = (short) (byte)74;
      shortArray0[2] = (short) (byte)121;
      shortArray0[3] = (short) (byte)121;
      shortArray0[4] = (short) (-653);
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (byte) (-86);
      shortArray0[7] = (short) (byte) (-86);
      shortArray0[8] = (short) (byte)121;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (short)1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)74, (short)121, (short)121, (short) (-653), (short)1, (short) (-86), (short) (-86), (short)121}, shortArray1);
      assertArrayEquals(new short[] {(short)74, (short)74, (short)121, (short)121, (short) (-653), (short)1, (short) (-86), (short) (-86), (short)121}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1));
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(9, shortArray2.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)74, (short)74, (short)121, (short)121, (short) (-653), (short)1, (short) (-86), (short) (-86), (short)121}, shortArray2);
      assertArrayEquals(new short[] {(short)74, (short)74, (short)121, (short)121, (short) (-653), (short)1, (short) (-86), (short) (-86), (short)121}, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      ArrayUtils.reverse((boolean[]) null, (-2916), (-482));
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-4501), 2303);
      assertNull(floatArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-86), (byte)121, (byte)74, (byte)74}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-255);
      intArray0[1] = (-3205);
      intArray0[2] = (-3205);
      intArray0[3] = (-3205);
      intArray0[4] = 0;
      intArray0[5] = (-3205);
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0, 0);
      assertEquals(9, bitSet0.length());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{4, 6, 7, 8}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-255), (-3205), (-3205), (-3205), 0, (-3205), 0, 0, 0}, intArray0);
      
      char[] charArray0 = new char[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'y');
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      bitSet0.and(bitSet1);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(9, intArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new int[] {(-255), (-3205), (-3205), (-3205), 0, (-3205), 0, 0, 0}, intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      int int0 = bitSet0.previousClearBit(0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(bitSet0, bitSet1);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-255), (-3205), (-3205), (-3205), 0, (-3205), 0, 0, 0}, intArray0);
      assertTrue(bitSet0.equals((Object)bitSet1));
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 0;
      ArrayUtils.shift(floatArray0, 0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2.0F;
      doubleArray0[1] = (-2043.6);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2;
      int int0 = ArrayUtils.indexOf(doubleArray0, 9.0, (-1329), (-1055.987));
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, (-2043.6), 0.0, 0.0, 2.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, 3168);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)4}, shortArray1);
      assertArrayEquals(new short[] {(short)4}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray1, (Random) mockRandom0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)4}, shortArray1);
      assertArrayEquals(new short[] {(short)4}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Character character0 = Character.valueOf('P');
      assertEquals('P', (char)character0);
      assertNotNull(character0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'P';
      floatArray0[1] = (float) 'P';
      floatArray0[2] = (float) (byte) (-29);
      ArrayUtils.shift(floatArray0, (int) (byte) (-29));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-29.0F), 80.0F, 80.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-760);
      shortArray0[2] = (short)369;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)80;
      shortArray0[5] = (short)1276;
      shortArray0[6] = (short)54;
      shortArray0[7] = (short)289;
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(16, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-760), (short)0, (short)369, (short)0, (short)80, (short)1276, (short)54, (short)289}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-715.6390751126), (-822.8189));
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-30);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-30), 0);
      assertEquals((-1), int1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte) (-30)}, byteArray0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3326.664574302574;
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 757;
      intArray0[1] = 121;
      int[] intArray1 = ArrayUtils.add(intArray0, 8);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {757, 121}, intArray0);
      assertArrayEquals(new int[] {757, 121, 8}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 757;
      objectArray0[1] = (Object) 3326.664574302574;
      Object object0 = ArrayUtils.get(objectArray0, 121);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, 1412, (-1), (-2431));
      assertEquals(2, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) 121);
      assertFalse(boolean1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3326.664574302574}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.reverse((int[]) null);
      Short short0 = new Short((short)114);
      assertEquals((short)114, (short)short0);
      assertNotNull(short0);
      
      Integer integer0 = new Integer(2147483644);
      assertEquals(2147483644, (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(2147483644, object1);
      assertNotNull(object1);
      
      String string0 = ArrayUtils.toString(object1, "java.lang.Short");
      assertEquals("2147483644", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 1412;
      longArray0[2] = (long) 1412;
      longArray0[3] = (-582L);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 757;
      longArray0[6] = (long) 121;
      longArray0[7] = (long) 121;
      ArrayUtils.shift(longArray0, 64);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 1412L, 1412L, (-582L), (-1L), 757L, 121L, 121L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 0;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 1;
      ArrayUtils.swap(intArray0, 2146647074, Integer.MAX_VALUE, 4142);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 2, 1}, intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-103);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-95));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-43), (byte)15, (byte) (-103)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-43), (byte)15, (byte) (-103), (byte) (-95)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {2.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, 0.0F, 2.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-10L);
      ArrayUtils.swap(longArray0, 1, 2, (-258));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-10L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2272);
      intArray0[0] = (-2272);
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = 'e';
      charArray0[2] = ',';
      charArray0[3] = ']';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ',');
      assertEquals(2, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'.', 'e', ',', ']'}, charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 667.5203354;
      doubleArray0[1] = (double) (-2272);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-324.6751), (-2272), (-1.0));
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {667.5203354, (-2272.0)}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      charArray0[5] = ')';
      charArray0[6] = ')';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(14, charArray1.length);
      assertArrayEquals(new char[] {')', ')', ')', ')', ')', ')', ')'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) ')';
      doubleArray0[1] = (double) ')';
      doubleArray0[2] = 1321.130694564792;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {41.0, 41.0, 1321.130694564792}, doubleArray0, 0.01);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 757);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {757}, intArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ')';
      objectArray0[1] = (Object) 1321.130694564792;
      Object object0 = ArrayUtils.get(objectArray0, 121);
      assertNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) ')';
      objectArray0[4] = (Object) ')';
      objectArray0[5] = (Object) ')';
      objectArray0[6] = (Object) ')';
      objectArray0[7] = (Object) ')';
      objectArray0[8] = (Object) 41.0;
      ArrayUtils.shift(objectArray0, (-1), 0, 3496);
      assertEquals(9, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1.5);
      assertFalse(boolean1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {41.0, 41.0, 1321.130694564792}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.reverse((int[]) null);
      Short short0 = new Short((short)114);
      assertEquals((short)114, (short)short0);
      assertNotNull(short0);
      
      String string0 = ArrayUtils.toString((Object) short0, "MACTw");
      assertEquals("114", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3326.664574302574;
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 757;
      intArray0[1] = 121;
      int[] intArray1 = ArrayUtils.add(intArray0, 8);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {757, 121}, intArray0);
      assertArrayEquals(new int[] {757, 121, 8}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 757;
      objectArray0[1] = (Object) 3326.664574302574;
      Object object0 = ArrayUtils.get(objectArray0, 121);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, 1412, (-1), (-2431));
      assertEquals(2, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) 121);
      assertFalse(boolean1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3326.664574302574}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.reverse((int[]) null);
      Integer integer0 = new Integer(2147483644);
      assertEquals(2147483644, (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertEquals(2147483644, object1);
      assertNotNull(object1);
      
      String string0 = ArrayUtils.toString(object1, "java.lang.Short");
      assertEquals("2147483644", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 1412;
      longArray0[2] = (long) 1412;
      longArray0[3] = (-582L);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 121;
      longArray0[6] = (long) 121;
      longArray0[7] = (long) 121;
      ArrayUtils.shift(longArray0, 64);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 1412L, 1412L, (-582L), (-1L), 121L, 121L, 121L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short) (-2773);
      shortArray0[1] = (short)20696;
      shortArray0[2] = (short) (-2596);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(13, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, (-265), 36, (-1));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      short[] shortArray0 = new short[13];
      shortArray0[1] = (short)20696;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(13, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, (-265), 36, (-1));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[3] = 'o';
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {';', '(', 'u', 'o', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray1 = ArrayUtils.add(intArray0, (-2145028933));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-2145028933)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) 'u';
      Character character0 = new Character('4');
      assertEquals('4', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('C');
      assertEquals('C', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[2] = character1;
      characterArray0[3] = (Character) ';';
      Character character2 = new Character('4');
      assertEquals('4', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      
      characterArray0[4] = character2;
      characterArray0[5] = (Character) 'o';
      characterArray0[6] = (Character) '(';
      characterArray0[7] = (Character) 'o';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, 'G');
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertEquals(8, charArray2.length);
      assertEquals(8, characterArray0.length);
      assertArrayEquals(new char[] {'u', 'G', 'C', ';', '4', 'o', '(', 'o'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      Character character0 = Character.valueOf('D');
      assertEquals('D', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('P');
      assertEquals('P', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = new Character('\\');
      assertEquals('\\', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character2;
      Character character3 = Character.valueOf('P');
      assertEquals('P', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      
      characterArray0[1] = character3;
      Comparator<Character> comparator0 = (Comparator<Character>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyChar() , anyChar());
      boolean boolean0 = ArrayUtils.isSorted(characterArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(2, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)6;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)106, (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-11), (byte) (-5), (byte)106, (byte)13, (byte)6}, byteArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)6;
      objectArray0[1] = (Object) (byte)106;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1]);
      assertEquals(1, int1);
      assertEquals(2, objectArray0.length);
      assertFalse(int1 == int0);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1L);
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long((-1506L));
      assertEquals((-1506L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 412L);
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 1L, (-1506L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-58);
      floatArray0[1] = (float) (byte) (-58);
      floatArray0[2] = (float) (short) (-2596);
      floatArray0[3] = (-2549.326F);
      floatArray0[4] = (float) (byte) (-58);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) (byte) (-58));
      assertTrue(boolean1);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-58.0F), (-58.0F), (-2596.0F), (-2549.326F), (-58.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = '_';
      charArray0[2] = 'f';
      charArray0[3] = ' ';
      charArray0[4] = 'S';
      charArray0[5] = 'G';
      charArray0[6] = 'z';
      charArray0[7] = '@';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '1');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {' ', '_', 'f', ' ', 'S', 'G', 'z', '@'}, charArray1);
      assertArrayEquals(new char[] {' ', '_', 'f', ' ', 'S', 'G', 'z', '@'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray1 = ArrayUtils.subarray((float[]) null, (int) (short) (-2596), (-617));
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      float[] floatArray0 = new float[2];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (-1), (-1));
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1945;
      shortArray0[3] = (short)7;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)1945;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      ArrayUtils.shift(shortArray0, 2141339764, 381, 1057);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1945, (short)7, (short)0, (short)1945, (short)0, (short)0, (short)0}, shortArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) "0x");
      assertEquals("0x", object0);
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString((Object) "0x");
      assertEquals("0x", string0);
      assertNotNull(string0);
      assertTrue(string0.equals((Object)object0));
      
      ArrayUtils.shift((boolean[]) null, 0, (int) (short)1945, (int) (short)0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (int) (short)7;
      intArray0[2] = (int) (short)7;
      intArray0[3] = 18;
      intArray0[4] = (int) (short)0;
      intArray0[5] = 8;
      intArray0[6] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short)1945, (-6));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-1), 7, 7, 18, 0, 8, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      float[] floatArray0 = new float[18];
      floatArray0[4] = 0.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2.683147F, (-1));
      assertEquals((-1), int0);
      assertEquals(18, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1037L;
      longArray0[1] = (long) (-1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 855.042656;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-1620.0);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (-3500.0828);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1L);
      ArrayUtils.swap(doubleArray0, (-1), (-1), (-1));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {855.042656, (-1.0), (-1620.0), (-1.0), (-3500.0828), (-1.0), (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('3');
      assertEquals('3', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('I');
      assertEquals('I', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'3', 'I'}, charArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)31118;
      shortArray0[1] = (short)1546;
      shortArray0[2] = (short) (-26598);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)1363;
      shortArray0[6] = (short) (-2362);
      shortArray0[7] = (short) (-370);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);
      assertEquals(4, int0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)31118, (short)1546, (short) (-26598), (short)2, (short)0, (short)1363, (short) (-2362), (short) (-370)}, shortArray0);
      
      Short[] shortArray1 = new Short[2];
      shortArray1[0] = (Short) (short)0;
      shortArray1[1] = (Short) (short) (-26598);
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)1546);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short) (-26598)}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 111L;
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-89);
      shortArray0[1] = (short) (byte) (-89);
      shortArray0[2] = (short) (byte) (-89);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-89), (short) (-89), (short) (-89)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Short[] shortArray2 = new Short[1];
      shortArray2[0] = (Short) (short) (-89);
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2, (short) (-89));
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertNotNull(shortArray3);
      assertEquals(1, shortArray2.length);
      assertEquals(1, shortArray3.length);
      assertArrayEquals(new short[] {(short) (-89)}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 111L;
      doubleArray0[1] = (double) (byte) (-89);
      doubleArray0[2] = (double) (short)shortArray2[0];
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (short) (-89);
      doubleArray0[6] = (double) (short)shortArray2[0];
      doubleArray0[7] = (double) (byte) (-89);
      doubleArray0[8] = (double) 111L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1147.877);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {111.0, (-89.0), (-89.0), 1.0, 1.0, (-89.0), (-89.0), (-89.0), 111.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {111.0, (-89.0), (-89.0), (-89.0), 1.0, 1.0, (-89.0), (-89.0), 111.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2084);
      shortArray0[1] = (short) (-1);
      ArrayUtils.swap(shortArray0, (int) (short) (-1), 0, (-305));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2084), (short) (-1)}, shortArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-2084);
      floatArray0[1] = (float) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, (int) (short) (-2084));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-2084.0F), 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = 2617;
      intArray0[2] = 4414;
      intArray0[3] = (int) (short) (-1);
      intArray0[4] = 2;
      intArray0[5] = (-561);
      intArray0[6] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 4414);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1), 2617, 4414, (-1), 2, (-561), 0}, intArray1);
      assertArrayEquals(new int[] {(-1), 2617, 4414, (-1), 2, (-561), 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-2084.0F), 0.0F}, floatArray0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[3];
      Long long0 = new Long((-1506L));
      assertEquals((-1506L), (long)long0);
      assertNotNull(long0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) long0);
      assertEquals((-1506L), object1);
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = (Object) (-1);
      objectArray0[2] = object0;
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-147.3135039356);
      doubleArray0[7] = (-1703.5);
      doubleArray0[3] = (-940.1);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      Float float0 = new Float(99.0F);
      assertEquals(99.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-940.1));
      assertEquals((-940.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {99.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      ArrayUtils.shift((boolean[]) null, 1, 1, 68);
      int int0 = ArrayUtils.indexOf(charArray0, '.');
      assertEquals(0, int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 68, (-189));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'.', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(3961.0);
      assertEquals(3961.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1.0));
      assertEquals((-1.0), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-151.32380896));
      assertEquals((-151.32380896), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      
      doubleArray0[5] = double5;
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0, (-428), (-428));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotNull(booleanArray2);
      assertEquals(4, booleanArray2.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      long[] longArray2 = ArrayUtils.addFirst(longArray0, (long) (-428));
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotNull(longArray2);
      assertEquals(5, longArray2.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-428L), 0L, 0L, 0L, 0L}, longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      
      int int0 = ArrayUtils.indexOf(longArray1, (long) (-428), (-428));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertEquals((-1), int0);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.5;
      doubleArray1[1] = 3961.0;
      doubleArray1[2] = (double) doubleArray0[0];
      doubleArray1[3] = (double) doubleArray0[5];
      doubleArray1[4] = 3961.0;
      doubleArray1[5] = (-151.32380896);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 3296.8079808;
      objectArray0[1] = (Object) 3296.8079808;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(2, objectArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1332.9109F);
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, (-305), (-305), (-305));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Double double0 = new Double((-1332.9109F));
      assertEquals((-1332.910888671875), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-305));
      assertEquals((-305.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(3296.8079808);
      assertEquals(3296.8079808, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = double3;
      doubleArray1[1] = (Double) 3296.8079808;
      doubleArray1[2] = double2;
      doubleArray1[3] = (Double) 3296.8079808;
      doubleArray1[4] = double1;
      doubleArray1[5] = double1;
      doubleArray1[6] = double3;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 1156.862123);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3296.8079808, 3296.8079808, 3296.8079808, (-305.0), (-305.0), 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = 2125L;
      longArray0[1] = (long) (-305);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      ArrayUtils.shuffle(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-305L), 0L, 0L, 2125L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, 2375);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3496;
      longArray0[1] = (-1L);
      longArray0[2] = (long) 3496;
      longArray0[3] = (long) 3496;
      longArray0[4] = (long) 2375;
      ArrayUtils.reverse(longArray0, 3496, 2375);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {3496L, (-1L), 3496L, 3496L, 2375L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 3496L, 3496L, 2375L, 3496L}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1.0, 2375);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-108L), 1545);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 3496L, 3496L, 2375L, 3496L}, longArray0);
      
      Byte byte0 = new Byte((byte)116);
      assertEquals((byte)116, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, 0, 1.5);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1787.75;
      doubleArray1[1] = 1787.75;
      doubleArray1[2] = (-4613.0);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = 2.5;
      doubleArray1[5] = 3296.8079808;
      doubleArray1[6] = (-2002.95);
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = 1.5;
      int int1 = ArrayUtils.indexOf(doubleArray1, (-2419.727), (-1), (-1080.3558));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1), int1);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {1787.75, 1787.75, (-4613.0), 0.0, 2.5, 3296.8079808, (-2002.95), 0.0, 1.5}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = ' ';
      ArrayUtils.shuffle(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {' ', 'k'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2272);
      intArray0[4] = (-2272);
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 1;
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) boolean0);
      assertEquals(false, object1);
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Short short0 = new Short((short)1502);
      assertEquals((short)1502, (short)short0);
      assertNotNull(short0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) short0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(2, objectArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-1));
      assertNull(shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2272);
      longArray0[1] = (-1012L);
      longArray0[2] = (long) (-2272);
      longArray0[3] = (long) (short) (-1);
      longArray0[4] = (long) (-2272);
      longArray0[5] = (long) 1;
      longArray0[6] = 115L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1012L), 2135);
      assertEquals(1, int0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-2272L), (-1012L), (-2272L), (-1L), (-2272L), 1L, 115L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Character character0 = new Character('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-3490), 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 66.0F;
      floatArray0[1] = (float) (-561);
      floatArray0[2] = (float) (-3490);
      floatArray0[3] = 2058.2922F;
      floatArray0[4] = (float) 512;
      floatArray0[5] = (float) 512;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {66.0F, (-561.0F), (-3490.0F), 2058.2922F, 512.0F, 512.0F}, floatArray0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      IntStream intStream0 = mockRandom1.ints(0L, (-448), (-16));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotNull(intStream0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      try { 
        mockRandom1.ints(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-147.3135039356);
      ArrayUtils.swap(doubleArray0, 260, 260, 260);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-147.3135039356), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)64;
      shortArray0[1] = (short) (-3317);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)64, (short) (-3317)}, shortArray0);
      
      Character character0 = new Character('V');
      assertEquals('V', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'V');
      assertNull(charArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      Integer integer0 = new Integer((short) (-3317));
      assertEquals((-3317), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("~\"%2nn%sc>TM$B$*L", integer0);
      assertEquals((-3317), (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short)64);
      assertNotNull(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertArrayEquals(new int[] {(-3317), (-3317), (-3317), (-3317), (-3317), (-3317)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {';', '(', 'u', 'q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray1 = ArrayUtils.add(intArray0, (-2145028933));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-2145028933)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) 'u';
      Character character0 = new Character('4');
      assertEquals('4', (char)character0);
      assertNotNull(character0);
      
      characterArray0[1] = character0;
      Character character1 = new Character('C');
      assertEquals('C', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[2] = character1;
      characterArray0[3] = (Character) ';';
      Character character2 = new Character('4');
      assertEquals('4', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      
      characterArray0[4] = character2;
      characterArray0[5] = (Character) 'q';
      characterArray0[6] = (Character) '(';
      characterArray0[7] = (Character) 'q';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, 'G');
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertEquals(8, charArray2.length);
      assertEquals(8, characterArray0.length);
      assertArrayEquals(new char[] {'u', '4', 'C', ';', '4', 'q', '(', 'q'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0);
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, characterArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("~\"%2nn%sc>TM$B$*L", integer0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[0] = integer1;
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0, (int) characterArray0[0]);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertEquals(1, integerArray0.length);
      assertEquals(8, characterArray0.length);
      assertEquals(1, intArray2.length);
      assertArrayEquals(new int[] {0}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 67L);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      Character[] characterArray0 = new Character[7];
      char char0 = 'P';
      Character character0 = Character.valueOf('P');
      assertEquals('P', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('O');
      assertEquals('O', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertEquals('P', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('#');
      assertEquals('#', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf(']');
      assertEquals(']', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      
      characterArray0[4] = character4;
      Character character5 = new Character('P');
      assertEquals('P', (char)character5);
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character0));
      assertTrue(character5.equals((Object)char0));
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('@');
      assertEquals('@', (char)character6);
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character1));
      
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.addAll(characterArray0, characterArray0);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      assertEquals(14, characterArray1.length);
      assertEquals(7, characterArray0.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-225.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-225.0), 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-225.0)}, doubleArray0, 0.01);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = 'I';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '&';
      doubleArray0[0] = (double) 'c';
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, 0, 2589.502771667157);
      assertEquals(0, int1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {99.0}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)1);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1147.877);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {99.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {99.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 3296.8079808;
      objectArray0[1] = (Object) 3296.8079808;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(2, objectArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1332.9109F);
      floatArray0[1] = (-1332.9109F);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 94;
      intArray0[1] = (-1433);
      intArray0[2] = 326;
      intArray0[3] = (-3496);
      intArray0[4] = 0;
      intArray0[5] = 99;
      intArray0[6] = 102;
      intArray0[7] = 46;
      intArray0[8] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(10, intArray1.length);
      assertArrayEquals(new int[] {94, (-1433), 326, (-3496), 0, 99, 102, 46, 0}, intArray0);
      assertArrayEquals(new int[] {94, (-1433), 326, (-3496), 0, 99, 102, 46, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((String[]) null, comparator0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)82;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)44, (int) (byte) (-6));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)63, (byte) (-6), (byte) (-15), (byte)11, (byte)82}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1163.15598168);
      doubleArray0[1] = (-1163.15598168);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Byte byte0 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte0);
      assertNotNull(byte0);
      
      Long long0 = new Long(541L);
      assertEquals(541L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      Character character0 = Character.valueOf('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) character0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      ArrayUtils.reverse((short[]) null);
      BitSet bitSet1 = ArrayUtils.indexesOf((short[]) null, (short)1, (-1));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'K';
      intArray0[1] = 0;
      intArray0[2] = (-1);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {75, 0, (-1)}, intArray0);
      assertArrayEquals(new int[] {75, 0, (-1), 75, 0, (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      ArrayUtils.shift(charArray0, (-1));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'K', 'K', 'K', 'K', 'K'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.reverse(longArray0, 3496, 3496);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '-');
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f', 'f'}, charArray0);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 662);
      assertNull(intArray0);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) byteArray2, 3496, 868);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, objectArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray3 = ArrayUtils.removeAllOccurences(byteArray0, (byte)9);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray3.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 2.5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.5}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 1L);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean2);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f', 'f'}, charArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-4195L);
      longArray0[1] = 0L;
      longArray0[2] = (-1680L);
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      Boolean boolean3 = Boolean.valueOf("");
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      
      Boolean boolean4 = new Boolean(true);
      assertTrue(boolean4);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      
      Boolean boolean5 = Boolean.valueOf(true);
      assertTrue(boolean5);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      
      Boolean boolean6 = new Boolean("B");
      assertFalse(boolean6);
      assertNotNull(boolean6);
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean2));
      
      Boolean boolean7 = Boolean.TRUE;
      assertTrue(boolean7);
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean3));
      
      Boolean boolean8 = Boolean.FALSE;
      assertFalse(boolean8);
      assertNotNull(boolean8);
      assertFalse(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean5));
      assertFalse(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean0));
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean8;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean6;
      booleanArray0[3] = boolean6;
      booleanArray0[4] = boolean4;
      booleanArray0[5] = boolean8;
      booleanArray0[6] = boolean8;
      Boolean boolean9 = ArrayUtils.get(booleanArray0, (-1191));
      assertNull(boolean9);
      assertEquals(7, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) boolean1, (-1));
      assertEquals(0, int0);
      assertEquals(7, booleanArray0.length);
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean5));
      assertFalse(boolean1.equals((Object)boolean7));
      assertFalse(boolean1.equals((Object)boolean4));
      assertTrue(boolean1.equals((Object)boolean6));
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[20];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(20, booleanArray0.length);
      assertEquals(40, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true);
      assertEquals("{1, 2, 3, 4, 21, 22, 23, 24}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(25, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.cardinality());
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(bitSet0);
      assertEquals(20, booleanArray0.length);
      assertEquals(40, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0, 1287, (-1078.355514));
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1287);
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals((-1), int0);
      assertEquals(20, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2146466190;
      intArray0[1] = (-861);
      int int0 = ArrayUtils.indexOf(intArray0, (-284), (-861));
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-861)}, intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)2;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)36, (byte)36, (byte)2}, byteArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)36;
      objectArray0[1] = (Object) (-861);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], 2146466190);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.reverse(longArray0, 3496, 3496);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = 1.0;
      ArrayUtils.shuffle(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-463.13727), 3496);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = '5';
      charArray0[2] = 'n';
      charArray0[3] = 'Q';
      charArray0[4] = 'K';
      charArray0[5] = 'D';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'K');
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'E', '5', 'n', 'Q', 'K', 'D'}, charArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 1L);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.removeElement(floatArray0, (float) 3496);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertArrayEquals(new long[] {1L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 1.0;
      doubleArray0[2] = 1.0;
      int[] intArray0 = new int[0];
      short short0 = (short)120;
      Short short1 = new Short((short)120);
      assertEquals((short)120, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)49);
      assertEquals((short)49, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short2;
      shortArray0[1] = short2;
      shortArray0[2] = short2;
      shortArray0[3] = short2;
      shortArray0[4] = short1;
      shortArray0[5] = short1;
      shortArray0[6] = short1;
      shortArray0[7] = short1;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(8, shortArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) short0, (int) (short)49);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'i');
      assertTrue(boolean1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'i', 'i', 'i'}, charArray0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-147.0), 9, (-1476.1482786));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)55;
      shortArray0[1] = (short)55;
      shortArray0[2] = (short)55;
      shortArray0[3] = (short)55;
      shortArray0[4] = (short)55;
      shortArray0[5] = (short)55;
      shortArray0[6] = (short)55;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)55, (short)55, (short)55, (short)55, (short)55, (short)55, (short)55}, shortArray0);
      
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)55;
      shortArray1[1] = (short)0;
      shortArray1[2] = (short)55;
      shortArray1[3] = (short)3066;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray2.length);
      assertEquals(7, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)3066}, shortArray2);
      assertArrayEquals(new short[] {(short)55, (short)55, (short)55, (short)55, (short)55, (short)55, (short)55}, shortArray0);
      assertArrayEquals(new short[] {(short)55, (short)0, (short)55, (short)3066}, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, 2, 7);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      ArrayUtils.swap(longArray0, (int) (short)0, (int) (short)0, 61);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 793.1734327082, 0, 1234.42463174);
      assertEquals((-1), int0);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      long[] longArray0 = new long[3];
      int[] intArray0 = ArrayUtils.add((int[]) null, 0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-10L), 0);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'I';
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) '+';
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 'I';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2142199624), (-1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {73.0F, (-1.0F), 43.0F, (-1.0F), 73.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = 'I';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'I', 11);
      assertEquals(1, int1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'+', 'I'}, charArray0);
      assertFalse(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertTrue(boolean1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      char char0 = '7';
      Character character0 = Character.valueOf('7');
      assertEquals('7', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = new Character(char0);
      assertEquals('7', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      
      characterArray0[2] = (Character) char0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      Double double0 = new Double((-2147483648L));
      assertEquals((-2.147483648E9), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(5589.18670133);
      assertEquals(5589.18670133, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)97;
      shortArray0[1] = (short)2;
      shortArray0[4] = (short)97;
      ArrayUtils.reverse(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)97, (short)0, (short)0, (short)2, (short)97}, shortArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)3;
      ArrayUtils.shift(byteArray0, (int) (byte)1, (int) (short)2, (int) (byte)1);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)122, (byte)3}, byteArray0);
      
      AbstractMap.SimpleImmutableEntry<Double, String>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Double, String>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
      Double double0 = new Double((short)97);
      assertEquals(97.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      AbstractMap.SimpleImmutableEntry<Double, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, String>(double0, (String) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Double, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Double, String>(double0, "DB{})+2G>~r +]W Q<");
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Double, String> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Double, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Double, String> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Double, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      
      Comparator<Map.Entry<Character, MutableInt>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Double, String>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeElement(abstractMap_SimpleImmutableEntryArray0, (Object) abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry2);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(3, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-147.3135039356);
      doubleArray0[2] = (-1703.5);
      doubleArray0[3] = (-940.1);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1644.0;
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'f');
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)9;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)20, (byte)84, (byte)90, (byte) (-57), (byte)85, (byte)9}, byteArray0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, Integer.MAX_VALUE);
      assertNull(intArray0);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) null, 149, (-2147165432));
      assertNull(objectArray0);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray0, (byte)84);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray2.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)20, (byte)90, (byte) (-57), (byte)85, (byte)9}, byteArray2);
      assertArrayEquals(new byte[] {(byte)20, (byte)84, (byte)90, (byte) (-57), (byte)85, (byte)9}, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-30);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-86);
      shortArray0[3] = (short)100;
      ArrayUtils.shift(shortArray0, 12, (int) (short) (-86), 57);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-30), (short)2, (short) (-86), (short)100}, shortArray0);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-30), (short)2, (short) (-86), (short)100}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)76;
      shortArray0[2] = (short) (-6575);
      shortArray0[3] = (short)2652;
      shortArray0[4] = (short)89;
      shortArray0[5] = (short)42;
      shortArray0[6] = (short)31118;
      shortArray0[7] = (short) (-986);
      ArrayUtils.shift(shortArray0, (int) (short)2652, (-1315), (int) (short)89);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)76, (short) (-6575), (short)2652, (short)89, (short)42, (short)31118, (short) (-986)}, shortArray0);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)2, (short)76, (short) (-6575), (short)2652, (short)89, (short)42, (short)31118, (short) (-986)}, shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)76;
      doubleArray0[1] = (double) (short)2;
      doubleArray0[2] = (double) (short)2652;
      doubleArray0[3] = (double) (short)31118;
      doubleArray0[4] = (double) (short)31118;
      doubleArray0[5] = (double) (short)42;
      doubleArray0[6] = (double) (-1315);
      doubleArray0[7] = (double) (short)2652;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {76.0, 2.0, 2652.0, 31118.0, 31118.0, 42.0, (-1315.0), 2652.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {76.0, 2.0, 2652.0, 31118.0, 31118.0, 42.0, (-1315.0), 2652.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-213.131F), 2);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Long long0 = new Long(2043L);
      assertEquals(2043L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1147.877);
      assertEquals(1147.877, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1515.68832998);
      assertEquals(1515.68832998, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.insert((-635), doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray2 = ArrayUtils.addAll(longArray1, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Character character0 = Character.valueOf('P');
      assertEquals('P', (char)character0);
      assertNotNull(character0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), (-4613));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) character0;
      objectArray0[1] = (Object) character0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) character0;
      objectArray0[4] = (Object) character0;
      ArrayUtils.reverse(objectArray0, (int) (byte) (-1), (-2235));
      assertEquals(5, objectArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (-4613);
      doubleArray0[3] = (double) (-2235);
      doubleArray0[4] = (double) (-2235);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) (-4613);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2137.51294527147, 496, 3.0);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-4613.0), (-2235.0), (-2235.0), 1.0, (-4613.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, (-4613), (-2866));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.0);
      assertEquals(5, int1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-4613.0), (-2235.0), (-2235.0), 1.0, (-4613.0)}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'Y';
      charArray0[2] = 'X';
      charArray0[3] = '8';
      charArray0[4] = 'L';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'1', 'Y', 'X', '8', 'L'}, charArray0);
      assertArrayEquals(new char[] {'1', 'Y', 'X', '8', 'L'}, charArray1);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-3829));
      assertEquals((short) (-3829), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(stringArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'Y';
      doubleArray0[1] = (double) 'L';
      doubleArray0[2] = (double) 'L';
      doubleArray0[3] = (double) 'L';
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {89.0, 76.0, 76.0, 76.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)23;
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)78, (byte) (-106), (byte)23}, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 42, 0.0);
      assertEquals(2, int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 42;
      intArray0[1] = 42;
      intArray0[2] = 42;
      intArray0[3] = 2;
      intArray0[4] = 42;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 42;
      intArray0[8] = 42;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {42, 42, 42, 2, 42, 2, 2, 42, 42}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      ArrayUtils.shift((long[]) null, (-2142614069), 2145882584, (-2142614069));
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(2, classArray0.length);
      assertEquals(2, classArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-88);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-11), (byte)94, (byte)1, (byte) (-1), (byte)30, (byte) (-60), (byte) (-88)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(1);
      assertEquals(1, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer(1144);
      assertEquals(1144, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      
      Integer integer5 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer1));
      
      Integer integer6 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer6);
      assertNotNull(integer6);
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer1));
      
      Integer integer7 = new Integer(1);
      assertEquals(1, (int)integer7);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      
      Integer integer8 = new Integer(512);
      assertEquals(512, (int)integer8);
      assertNotNull(integer8);
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer6));
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[3] = integer3;
      integerArray0[1] = integer5;
      integerArray0[2] = integer4;
      integerArray0[3] = integer6;
      integerArray0[4] = integer1;
      integerArray0[5] = integer3;
      integerArray0[6] = integer6;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, 2375);
      long[] longArray0 = new long[7];
      longArray0[0] = (-1L);
      longArray0[1] = (long) 2375;
      longArray0[2] = 2043L;
      longArray0[3] = 2043L;
      longArray0[4] = 1122L;
      longArray0[5] = 441L;
      longArray0[6] = (-1L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {(-1L), 2375L, 2043L, 2043L, 1122L, 441L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), 2375L, 2043L, 2043L, 1122L, 441L, (-1L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(2375);
      assertEquals(2375, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1144);
      assertEquals(1144, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      int int0 = 1;
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      assertEquals(1, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertEquals(1, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(512);
      assertEquals(512, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      assertEquals(1, (int)integer6);
      assertNotNull(integer6);
      assertTrue(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)int0));
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(1144);
      assertEquals(1144, (int)integer7);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)int0));
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((int) integerArray0[7]);
      assertEquals(1144, (int)integer8);
      assertNotNull(integer8);
      assertEquals(9, integerArray0.length);
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer6));
      
      integerArray0[8] = integer8;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {2375, 1144, 1, 1, 1, 512, 1, 1144, 1144}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray0 = new long[0];
      int int0 = 9;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      long long0 = 122L;
      int int0 = ArrayUtils.indexOf(longArray0, 122L, 309);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1);
      longArray1[1] = 122L;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray1, 309);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 309, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Character character0 = new Character('Y');
      assertEquals('Y', (char)character0);
      assertNotNull(character0);
      
      Double double0 = new Double(2634.295093);
      assertEquals(2634.295093, (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-89);
      shortArray0[1] = (short) (byte) (-89);
      shortArray0[2] = (short) (byte) (-89);
      shortArray0[3] = (short) (byte) (-89);
      shortArray0[4] = (short) (byte) (-89);
      shortArray0[5] = (short) (-1883);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-89), (short) (-89), (short) (-89), (short) (-89), (short) (-89), (short) (-1883)}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-89), (short) (-89), (short) (-89), (short) (-89), (short) (-89), (short) (-1883)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ", Length: ";
      objectArray0[6] = (Object) ", Length: ";
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) ", Length: ";
      objectArray1[1] = (Object) ", Length: ";
      objectArray1[2] = (Object) ", Length: ";
      Object object0 = ArrayUtils.toPrimitive((Object) ", Length: ");
      assertEquals(", Length: ", object0);
      assertNotNull(object0);
      
      objectArray1[3] = (Object) ", Length: ";
      objectArray1[4] = (Object) ", Length: ";
      Object object1 = ArrayUtils.get(objectArray1, 57, objectArray1[2]);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(", Length: ", object1);
      assertNotNull(object1);
      assertEquals(5, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertTrue(object1.equals((Object)object0));
      
      objectArray0[2] = (Object) ", Length: ";
      objectArray0[3] = (Object) ", Length: ";
      objectArray0[4] = (Object) ", Length: ";
      objectArray0[5] = (Object) ", Length: ";
      objectArray0[6] = (Object) ", Length: ";
      objectArray0[7] = (Object) ", Length: ";
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) ", Length: ", 690);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(7, int0);
      assertEquals(8, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Float float0 = new Float((-2042.9F));
      assertEquals((-2042.9F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertEquals((-2042.9F), object0);
      assertNotNull(object0);
      
      MutableInt mutableInt0 = new MutableInt((Number) 2);
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) mutableInt0);
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2L, mutableInt0.longValue());
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '^';
      doubleArray0[1] = (double) 2;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 1);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {94.0, 2.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-2144893196));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)90;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)13);
      assertEquals((-1), int0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)85, (byte)32, (byte) (-59), (byte)99, (byte)0, (byte)72, (byte)12, (byte)90}, byteArray0);
      
      Float float0 = new Float(6671.29089842492);
      assertEquals(6671.291F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) float0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (byte)13;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (byte)85;
      doubleArray0[4] = (double) (byte)12;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte)72;
      int int2 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertEquals(0, int2);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 13.0, (-1.0), 85.0, 12.0, 0.0, 72.0}, doubleArray0, 0.01);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(3961.0);
      assertEquals(3961.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1.0));
      assertEquals((-1.0), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-151.32380896));
      assertEquals((-151.32380896), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      
      doubleArray0[5] = double5;
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0, (-428), (-428));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray0, (Object) doubleArray0[0]);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotNull(booleanArray2);
      assertEquals(4, booleanArray2.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      long[] longArray2 = ArrayUtils.addFirst(longArray0, (long) (-428));
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotNull(longArray2);
      assertEquals(5, longArray2.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-428L), 0L, 0L, 0L, 0L}, longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      
      int int0 = ArrayUtils.indexOf(longArray1, (long) (-428), (-428));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertEquals((-1), int0);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray2));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-428);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-428);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-428);
      intArray0[6] = (-428);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = '<';
      charArray0[2] = '#';
      charArray0[3] = 'b';
      charArray0[4] = 'w';
      charArray0[5] = 'n';
      charArray0[6] = ' ';
      charArray0[7] = '8';
      charArray0[8] = 'w';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      assertArrayEquals(new char[] {'O', '<', '#', 'b', 'w', 'n', ' ', '8', 'w'}, charArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'b';
      objectArray0[1] = (Object) '#';
      objectArray0[2] = (Object) 'w';
      Byte byte0 = new Byte((byte) (-47));
      assertEquals((byte) (-47), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 4443, (Object) byte0);
      assertEquals((byte) (-47), object0);
      assertNotNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[3] = object0;
      ArrayUtils.shift(objectArray0, 10);
      assertEquals(4, objectArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '8';
      floatArray0[1] = (float) '#';
      floatArray0[2] = (float) 10;
      floatArray0[3] = (float) 'w';
      floatArray0[4] = (float) 'w';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 4443, 4443);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {56.0F, 35.0F, 10.0F, 119.0F, 119.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '8';
      intArray0[1] = (int) '8';
      intArray0[2] = (int) '<';
      intArray0[3] = (int) '8';
      intArray0[4] = (int) '8';
      intArray0[5] = (int) 'b';
      intArray0[6] = (int) 'w';
      intArray0[7] = (int) ' ';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 119, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)32}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.shift((double[]) null, 0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) (byte)32;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) (byte)32;
      Long long0 = new Long((-986L));
      assertEquals((-986L), (long)long0);
      assertNotNull(long0);
      
      ArrayUtils.shift(booleanArray0, 0, 1150, (int) (byte)32);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)2;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (byte)7;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (-3258.0);
      doubleArray0[5] = (double) (byte)0;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 7.0;
      objectArray0[1] = (Object) 0.0;
      ArrayUtils.shift(objectArray0, (int) (byte)0);
      assertEquals(2, objectArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)7;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (-1L);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)2, 605, (-897));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false}, booleanArray0));
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.shift(longArray0, (int) (byte)7);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 7L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '+';
      charArray0[2] = 'I';
      Long long0 = new Long(390L);
      assertEquals(390L, (long)long0);
      assertNotNull(long0);
      
      int int1 = ArrayUtils.indexOf((Object[]) null, (Object) long0, 13);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      ArrayUtils.shift((char[]) null, 0, 9, 0);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 40);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'L');
      assertNull(charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 9;
      int int1 = ArrayUtils.indexOf(floatArray0, 2.14722176E9F, 40);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {9.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 'L';
      int int2 = ArrayUtils.indexOf((double[]) null, (double) 0L, (double) 2.14722176E9F);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      ArrayUtils.shift(floatArray0, (int) 'L', 0, 180);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {9.0F}, floatArray0, 0.01F);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 180);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {180L, 0L, 76L}, longArray1);
      assertArrayEquals(new long[] {0L, 76L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) characterArray0);
      assertTrue(boolean1);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-2145159530), 15);
      assertNull(longArray0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, objectArray0.length);
      
      MutableInt mutableInt0 = new MutableInt(34);
      assertEquals((short)34, mutableInt0.shortValue());
      assertEquals(34.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)34, mutableInt0.byteValue());
      assertEquals(34, (int)mutableInt0.toInteger());
      assertEquals(34, (int)mutableInt0.getValue());
      assertEquals(34L, mutableInt0.longValue());
      assertEquals("34", mutableInt0.toString());
      assertEquals(34, mutableInt0.intValue());
      assertEquals(34.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)37, 15);
      assertEquals((-1), int0);
      
      int int1 = mutableInt0.addAndGet((Number) (-1));
      assertEquals(33.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(33, (int)mutableInt0.getValue());
      assertEquals((byte)33, mutableInt0.byteValue());
      assertEquals(33L, mutableInt0.longValue());
      assertEquals(33, (int)mutableInt0.toInteger());
      assertEquals("33", mutableInt0.toString());
      assertEquals(33.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(33, mutableInt0.intValue());
      assertEquals((short)33, mutableInt0.shortValue());
      assertEquals(33, int1);
      assertFalse(int1 == int0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[9];
      mutableIntArray0[0] = mutableInt0;
      mutableIntArray0[1] = mutableInt0;
      mutableIntArray0[2] = mutableInt0;
      mutableIntArray0[3] = mutableInt0;
      mutableIntArray0[4] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(28);
      assertEquals(28.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(28L, mutableInt1.longValue());
      assertEquals((short)28, mutableInt1.shortValue());
      assertEquals("28", mutableInt1.toString());
      assertEquals(28.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(28, mutableInt1.intValue());
      assertEquals(28, (int)mutableInt1.toInteger());
      assertEquals((byte)28, mutableInt1.byteValue());
      assertEquals(28, (int)mutableInt1.getValue());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[5] = mutableInt1;
      mutableIntArray0[6] = mutableInt0;
      mutableIntArray0[7] = mutableInt0;
      mutableIntArray0[8] = mutableInt0;
      MutableInt mutableInt2 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals(33, (int)mutableInt2.getValue());
      assertEquals((byte)33, mutableInt2.byteValue());
      assertEquals(33, (int)mutableInt2.toInteger());
      assertEquals((short)33, mutableInt2.shortValue());
      assertEquals(33.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(33L, mutableInt2.longValue());
      assertEquals("33", mutableInt2.toString());
      assertEquals(33, mutableInt2.intValue());
      assertEquals(33.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(33.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(33, (int)mutableInt0.getValue());
      assertEquals((byte)33, mutableInt0.byteValue());
      assertEquals(33L, mutableInt0.longValue());
      assertEquals(33, (int)mutableInt0.toInteger());
      assertEquals("33", mutableInt0.toString());
      assertEquals(33.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(33, mutableInt0.intValue());
      assertEquals((short)33, mutableInt0.shortValue());
      assertNotSame(mutableInt2, mutableInt1);
      assertSame(mutableInt2, mutableInt0);
      assertSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3160.0F);
      floatArray0[1] = (float) 15;
      floatArray0[2] = (float) 33;
      floatArray0[3] = (float) (byte)37;
      ArrayUtils.shift(floatArray0, 69);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {37.0F, (-3160.0F), 15.0F, 33.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (int) (short) (-192));
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)28;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte) (-22);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-84), (int) (byte) (-22));
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-86), (byte)28, (byte)0, (byte)28, (byte) (-22), (byte) (-22)}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = '6';
      charArray0[2] = '^';
      charArray0[3] = 'B';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'+', '6', '^', 'B'}, charArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)28;
      objectArray0[1] = (Object) (byte)28;
      objectArray0[2] = (Object) (byte)28;
      objectArray0[3] = (Object) '^';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) '6';
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1852;
      BitSet bitSet0 = new BitSet();
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = ';';
      charArray0[2] = 'Y';
      charArray0[3] = 'M';
      charArray0[4] = 'Y';
      charArray0[5] = 'Y';
      MockRandom mockRandom0 = new MockRandom((short)18658);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {';', 'Y', 'M', 'Y', 'Y', '\''}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = 108L;
      longArray0[2] = (-1920L);
      longArray0[3] = 124L;
      longArray0[4] = (-313L);
      longArray0[5] = 73L;
      longArray0[6] = (-1642L);
      longArray0[7] = (-2002L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-1L), 108L, (-1920L), 124L, (-313L), 73L, (-1642L), (-2002L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 46;
      intArray0[1] = 214;
      intArray0[2] = (-1342);
      intArray0[3] = 1945;
      intArray0[4] = 2666;
      intArray0[5] = (-2078209980);
      intArray0[6] = 3114;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {46, 214, (-1342), 1945, 2666, (-2078209980), 3114}, intArray1);
      assertArrayEquals(new int[] {46, 214, (-1342), 1945, 2666, (-2078209980), 3114}, intArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)45;
      shortArray0[1] = (short)2088;
      shortArray0[2] = (short) (-1384);
      shortArray0[3] = (short) (-29394);
      shortArray0[4] = (short) (-224);
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)2116;
      shortArray0[7] = (short) (-2790);
      ArrayUtils.shift(shortArray0, (-1206), 5, 1);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-224), (short)45, (short)2088, (short) (-1384), (short) (-29394), (short)2, (short)2116, (short) (-2790)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 463.33727000000005;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 463.33727000000005);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {463.33727000000005}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {463.33727000000005, 463.33727000000005}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (-21), (-21), (-21));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3080;
      shortArray0[1] = (short)3080;
      shortArray0[2] = (short) (-1737);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)8192;
      shortArray0[5] = (short) (-653);
      short[] shortArray1 = ArrayUtils.remove(shortArray0, 1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)3080, (short)3080, (short) (-1737), (short) (-1), (short)8192, (short) (-653)}, shortArray0);
      assertArrayEquals(new short[] {(short)3080, (short) (-1737), (short) (-1), (short)8192, (short) (-653)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 463.33727000000005;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 463.33727000000005);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {463.33727000000005}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {463.33727000000005, 463.33727000000005}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (-21), (-21), (-21));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3080;
      shortArray0[1] = (short) (-1583);
      shortArray0[2] = (short) (-1737);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)8192;
      shortArray0[5] = (short) (-651);
      short[] shortArray1 = ArrayUtils.remove(shortArray0, 1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)3080, (short) (-1583), (short) (-1737), (short) (-1), (short)8192, (short) (-651)}, shortArray0);
      assertArrayEquals(new short[] {(short)3080, (short) (-1737), (short) (-1), (short)8192, (short) (-651)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short) (-2773);
      shortArray0[1] = (short)20696;
      MutableInt[] mutableIntArray0 = new MutableInt[3];
      MutableInt mutableInt0 = new MutableInt((int) (short) (-2773));
      assertEquals((byte)43, mutableInt0.byteValue());
      assertEquals((-2773L), mutableInt0.longValue());
      assertEquals((-2773.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-2773), mutableInt0.shortValue());
      assertEquals((-2773), mutableInt0.intValue());
      assertEquals((-2773.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2773), (int)mutableInt0.toInteger());
      assertEquals("-2773", mutableInt0.toString());
      assertEquals((-2773), (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((int) (short)20696);
      assertEquals(20696, mutableInt1.intValue());
      assertEquals(20696, (int)mutableInt1.toInteger());
      assertEquals(20696, (int)mutableInt1.getValue());
      assertEquals((byte) (-40), mutableInt1.byteValue());
      assertEquals(20696L, mutableInt1.longValue());
      assertEquals(20696.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)20696, mutableInt1.shortValue());
      assertEquals(20696.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("20696", mutableInt1.toString());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(83);
      assertEquals((short)83, mutableInt2.shortValue());
      assertEquals(83.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((byte)83, mutableInt2.byteValue());
      assertEquals(83.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(83, (int)mutableInt2.toInteger());
      assertEquals(83, (int)mutableInt2.getValue());
      assertEquals("83", mutableInt2.toString());
      assertEquals(83, mutableInt2.intValue());
      assertEquals(83L, mutableInt2.longValue());
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, (MutableInt[]) null);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertEquals(3, mutableIntArray0.length);
      assertEquals(3, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      Byte byte0 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte0);
      assertNotNull(byte0);
      
      Short[] shortArray1 = new Short[6];
      shortArray1[0] = (Short) (short) (-2773);
      shortArray1[1] = (Short) (short) (-2773);
      shortArray1[2] = (Short) (short)20696;
      shortArray1[3] = (Short) (short)20696;
      shortArray1[4] = (Short) (short)20696;
      shortArray1[5] = (Short) (short) (-2773);
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (-1128));
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertEquals(6, shortArray2.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2773), (short) (-2773), (short)20696, (short)20696, (short)20696, (short) (-2773)}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-1128);
      doubleArray0[1] = (double) (short)20696;
      doubleArray0[2] = (double) (short) (-2773);
      doubleArray0[3] = (double) (byte)8;
      doubleArray0[4] = (double) (short)shortArray1[5];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 84);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1128.0), 20696.0, (-2773.0), 8.0, (-2773.0)}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-2773.0), 8.0, (-2773.0), 20696.0, (-1128.0)}, doubleArray0, 0.01);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)97;
      shortArray0[1] = (short)2;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)2;
      longArray0[1] = (long) (short)97;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (short)97;
      longArray0[4] = (long) (short)97;
      longArray0[5] = (-461L);
      longArray0[6] = (long) (short)97;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-461L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {2L, 97L, 0L, 97L, 97L, (-461L), 97L}, longArray0);
      assertArrayEquals(new long[] {(-461L), 2L, 97L, 0L, 97L, 97L, (-461L), 97L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Character character0 = Character.valueOf('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('Q');
      assertEquals('Q', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = Character.valueOf('=');
      assertEquals('=', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      Character character3 = new Character('G');
      assertEquals('G', (char)character3);
      assertNotNull(character3);
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      
      Character character4 = new Character('G');
      assertEquals('G', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      
      Character character5 = Character.valueOf('G');
      assertEquals('G', (char)character5);
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character4));
      
      Character character6 = new Character('D');
      assertEquals('D', (char)character6);
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      char[] charArray1 = ArrayUtils.subarray((char[]) null, (int) (short)2, (int) (short)2);
      assertNull(charArray1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "wb{;Qj";
      stringArray0[2] = "java.lang.Object";
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "java.lang.Object";
      String[] stringArray2 = ArrayUtils.removeElements(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertEquals(3, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Character character0 = new Character('b');
      assertEquals('b', (char)character0);
      assertNotNull(character0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ", Length: ";
      objectArray0[1] = (Object) ", Length: ";
      objectArray0[2] = (Object) 3296.8079808;
      objectArray0[3] = (Object) 3296.8079808;
      Short short0 = new Short((short)2154);
      assertEquals((short)2154, (short)short0);
      assertNotNull(short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short)2154, object0);
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) ", Length: ", 0);
      assertEquals(0, int1);
      assertEquals(5, objectArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)2570);
      assertEquals((short)2570, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)2570}, shortArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) short0;
      objectArray0[2] = (Object) short0;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      
      Double double0 = new Double(1326.8712272264638);
      assertEquals(1326.8712272264638, (double)double0, 0.01);
      assertNotNull(double0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (int) (short)2570, 1);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray1, (short) shortArray0[0]);
      assertEquals(1, bitSet1.length());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)2570}, shortArray1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      int int0 = bitSet1.previousClearBit(2545);
      assertEquals(1, bitSet1.length());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertEquals(2545, int0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)2570}, shortArray1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[1], bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.length());
      assertEquals(3, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      boolean[] booleanArray0 = new boolean[18];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-22);
      ArrayUtils.swap(byteArray0, (int) (byte) (-75), 2, (int) (byte) (-94));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)1, (byte) (-75), (byte) (-94), (byte) (-22)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '+';
      charArray0[2] = 'I';
      charArray0[3] = '3';
      charArray0[4] = '3';
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0, (int) (byte)0, (int) (byte) (-32));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-32), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      ArrayUtils.shift((char[]) null, 0, 9, 0);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 40);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'L');
      assertNull(charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 9;
      int int1 = ArrayUtils.indexOf(floatArray0, 2.14722176E9F, 40);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {9.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 'L';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, true, 40);
      assertEquals(0, int2);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2031.8444, 66, (-4577.60805));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 66;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      int int1 = ArrayUtils.indexOf(floatArray0, Float.NaN, 0);
      assertEquals((-1), int1);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {66.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2031;
      shortArray0[1] = (short) (-192);
      shortArray0[2] = (short) (-192);
      shortArray0[4] = (short) (-192);
      shortArray0[5] = (short) (-1);
      ArrayUtils.swap(shortArray0, 2763, (-1051), (-1));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)2031, (short) (-192), (short) (-192), (short)0, (short) (-192), (short) (-1)}, shortArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '*';
      charArray0[2] = 'J';
      charArray0[3] = '3';
      charArray0[4] = ' ';
      charArray0[5] = 'G';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '*';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray2);
      assertEquals(1, charArray1.length);
      assertEquals(5, charArray2.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'*'}, charArray1);
      assertArrayEquals(new char[] {'=', 'J', '3', ' ', 'G'}, charArray2);
      assertArrayEquals(new char[] {'=', '*', 'J', '3', ' ', 'G'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 797;
      floatArray0[1] = (float) 3168;
      floatArray0[2] = (float) 797;
      floatArray0[3] = (float) 797;
      floatArray0[4] = (float) 3168;
      ArrayUtils.reverse(floatArray0, (-1206), 797);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {3168.0F, 797.0F, 797.0F, 3168.0F, 797.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)72;
      ArrayUtils.shift(byteArray0, 2, (int) (byte)29, 2147);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-51), (byte)29, (byte) (-1), (byte)72, (byte) (-4)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, 0, 1.5);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)97;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)97;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)2, 84);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)97, (short)2, (short)2, (short)97}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)97}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)96;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (int) (short)2);
      assertEquals((-1), int1);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)96}, byteArray0);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)2;
      intArray0[1] = 84;
      intArray0[2] = (int) (short)2;
      intArray0[3] = (int) (short)2;
      intArray0[4] = (-1);
      intArray0[5] = 0;
      intArray0[6] = (int) (short)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)96, 84);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {2, 84, 2, 2, (-1), 0, 2}, intArray0);
      
      Double[] doubleArray1 = ArrayUtils.clone((Double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)434;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)434);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)434}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, (int) (short)434, (int) (short)434, (int) (short)434);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      
      ArrayUtils.swap(booleanArray0, (int) (short)434, 2, (int) (short)434);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 3249);
      assertEquals(4, int0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)122;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 1173);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {122.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {122.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = '0';
      charArray0[2] = 'q';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'B', 69);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'@', '0', 'q'}, charArray0);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertArrayEquals(new float[] {122.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {122.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0, 1173);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)122;
      shortArray0[1] = (short) (byte)122;
      shortArray0[2] = (short) (byte)122;
      shortArray0[3] = (short) (byte)122;
      shortArray0[4] = (short) (byte)122;
      shortArray0[5] = (short) (byte)122;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 774);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 774, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[9];
      int int0 = ArrayUtils.indexOf(charArray0, 'Z', (-583));
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'X';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-583);
      longArray0[4] = (long) 'Z';
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 7;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 90L, (-1));
      assertEquals((-1), int1);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {88L, (-1L), (-1L), (-583L), 90L, (-1L), 7L}, longArray0);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'X';
      intArray0[1] = (-583);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {88, (-583)}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'Z';
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 90.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {90.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.swap(longArray0, (-1699), (-1));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {88L, (-1L), (-1L), (-583L), 90L, (-1L), 7L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 2, 2604);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1945;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short)0, 85, (-2108438489));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1945, (short)0, (short)0}, shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = 'S';
      charArray0[2] = 'A';
      charArray0[3] = 'q';
      charArray0[4] = ':';
      charArray0[5] = 'K';
      charArray0[6] = 'e';
      charArray0[7] = 'p';
      charArray0[8] = 'p';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'`', 'S', 'A', 'q', ':', 'K', 'e', 'p', 'p'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      
      Boolean boolean4 = Boolean.valueOf(false);
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      
      Boolean boolean5 = new Boolean("_@>qH8<LWgPJ7Y2d");
      assertFalse(boolean5);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      
      Boolean boolean6 = Boolean.TRUE;
      assertTrue(boolean6);
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean3));
      
      Boolean boolean7 = Boolean.FALSE;
      assertFalse(boolean7);
      assertNotNull(boolean7);
      assertTrue(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean3));
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean8 = new Boolean(false);
      assertFalse(boolean8);
      assertNotNull(boolean8);
      assertFalse(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean3));
      assertTrue(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean1));
      
      booleanArray0[0] = boolean8;
      Boolean boolean9 = Boolean.FALSE;
      assertFalse(boolean9);
      assertNotNull(boolean9);
      assertFalse(boolean9.equals((Object)boolean6));
      assertTrue(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean3));
      assertFalse(boolean9.equals((Object)boolean1));
      assertTrue(boolean9.equals((Object)boolean5));
      
      booleanArray0[1] = boolean9;
      booleanArray0[2] = boolean6;
      Boolean boolean10 = ArrayUtils.get(booleanArray0, 1461);
      assertNull(boolean10);
      assertEquals(3, booleanArray0.length);
      
      Boolean boolean11 = ArrayUtils.get(booleanArray0, 2146466190);
      assertNull(boolean11);
      assertEquals(3, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) null, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true, false, false}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Character character0 = new Character('g');
      assertEquals('g', (char)character0);
      assertNotNull(character0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray2, (Object) ", Length: ", 3340);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)7;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      long[] longArray0 = new long[3];
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = (-1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (-47.72075258414);
      doubleArray0[2] = (double) (-233L);
      doubleArray0[3] = 385.1192363;
      doubleArray0[4] = 385.1192363;
      ArrayUtils.shift(doubleArray0, (-1), (-1), (-1));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-47.72075258414), (-233.0), 385.1192363, 385.1192363}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(2, longArray2.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[3] = 's';
      charArray0[4] = '!';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'C', 'C', '\u0000', 's', '!'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)38;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)38}, shortArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'C';
      longArray0[1] = (long) 'C';
      longArray0[2] = (long) 'C';
      longArray0[3] = (long) '!';
      longArray0[4] = (long) 'C';
      longArray0[5] = (long) 's';
      ArrayUtils.reverse(longArray0, (int) (short)38, 2);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {67L, 67L, 67L, 33L, 67L, 115L}, longArray0);
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 's';
      longArray1[1] = (long) 2;
      long[] longArray2 = ArrayUtils.insert(2, longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray2);
      assertEquals(2, longArray1.length);
      assertEquals(8, longArray2.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {115L, 2L}, longArray1);
      assertArrayEquals(new long[] {67L, 67L, 115L, 2L, 67L, 33L, 67L, 115L}, longArray2);
      assertArrayEquals(new long[] {67L, 67L, 67L, 33L, 67L, 115L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 10;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 10, 10);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {10}, intArray0);
      
      ArrayUtils.shift((char[]) null, 0, 0, 10);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 40);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {10}, intArray0);
      assertArrayEquals(new int[] {10}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'L');
      assertNull(charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 10;
      int int1 = ArrayUtils.indexOf(floatArray0, 2.14722176E9F, 40);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {10.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 'L';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {0L, 76L}, longArray0);
      assertArrayEquals(new long[] {0L, 76L, 0L, 76L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int2 = ArrayUtils.indexOf((double[]) null, (double) 0L, 0.5);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray1);
      
      long[] longArray2 = ArrayUtils.insert(2, longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray2);
      assertEquals(6, longArray2.length);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {0L, 76L, 0L, 76L, 0L, 76L}, longArray2);
      assertArrayEquals(new long[] {0L, 76L}, longArray0);
      assertArrayEquals(new long[] {0L, 76L, 0L, 76L}, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {10}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)101;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)76, (byte) (-41), (byte)5, (byte)32, (byte)81, (byte) (-10), (byte)88, (byte)101}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-24), 2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2421;
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-820L));
      assertEquals((-820L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1L));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-820L)}, longArray1);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 0.0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-19);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)84, 1);
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)84, (byte) (-19)}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray2, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2031.8444, 66, (-4577.60805));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 66;
      floatArray0[0] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[4] = (float) 66;
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1191);
      ArrayUtils.shift(longArray0, 812, (-1), 2);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1191L)}, longArray0);
      
      Double double0 = new Double(2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[2] = 861;
      ArrayUtils.swap(intArray0, 0, 5, 0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 861, 0, 0, 0, 0}, intArray0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(2243.525909394315);
      assertEquals(2243.525909394315, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) doubleArray0[0];
      doubleArray2[1] = (-5304.607027);
      doubleArray2[2] = (double) 5;
      doubleArray2[3] = (double) 861;
      doubleArray2[4] = (double) 5;
      doubleArray2[5] = (double) 5;
      doubleArray2[6] = (-94.142265154);
      double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray2);
      assertSame(doubleArray2, doubleArray3);
      assertSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertArrayEquals(new double[] {2243.525909394315, (-5304.607027), 5.0, 861.0, 5.0, 5.0, (-94.142265154)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2243.525909394315, (-5304.607027), 5.0, 861.0, 5.0, 5.0, (-94.142265154)}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'X');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Boolean boolean0 = new Boolean("java.lang.Short");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isEquals((Object) null, boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)27;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)52;
      boolean boolean2 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean2);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)27, (byte)0, (byte)0, (byte)52}, byteArray0);
      assertTrue(boolean2 == boolean1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 83;
      intArray0[1] = (int) (byte)27;
      intArray0[2] = (int) 'Q';
      intArray0[3] = (int) 'H';
      intArray0[4] = (int) (byte)52;
      int[] intArray1 = ArrayUtils.add(intArray0, 1197);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {83, 27, 81, 72, 52, 1197}, intArray1);
      assertArrayEquals(new int[] {83, 27, 81, 72, 52}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (int) 'X';
      intArray2[1] = (int) (byte)27;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(953, intArray1, intArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 953, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Character character0 = Character.valueOf('>');
      assertEquals('>', (char)character0);
      assertNotNull(character0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) character0, 90);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, 2, 76);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 3496.04758348);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) doubleArray0[0];
      objectArray1[1] = (Object) doubleArray0[0];
      objectArray1[2] = (Object) double0;
      objectArray1[3] = (Object) doubleArray0[0];
      int int1 = ArrayUtils.lastIndexOf(objectArray1, (Object) character0, (-3040));
      assertNotSame(objectArray1, objectArray0);
      assertEquals((-1), int1);
      assertEquals(4, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '>', '>'}, charArray1);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '>', '>'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-128);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-1), (byte)50, (byte)28, (byte)73, (byte) (-34), (byte)17, (byte)1, (byte) (-128)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-1), (byte)50, (byte)28, (byte)73, (byte) (-34), (byte)17, (byte)1, (byte) (-128), (byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = ArrayUtils.removeAllOccurences((String[]) null, "{}");
      assertNull(stringArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-1), (byte)50, (byte)28, (byte)73, (byte) (-34), (byte)17, (byte)1, (byte) (-128)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-1), (byte)50, (byte)28, (byte)73, (byte) (-34), (byte)17, (byte)1, (byte) (-128), (byte)1}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)1311);
      assertEquals((short)1311, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      shortArray0[2] = short2;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-225L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1828L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {(-225L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1828L), (-225L), 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Character character0 = Character.valueOf('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('G');
      assertEquals('G', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = Character.valueOf('5');
      assertEquals('5', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      Character character3 = new Character('*');
      assertEquals('*', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      
      Character character4 = new Character('i');
      assertEquals('i', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      
      Character character5 = Character.valueOf('\"');
      assertEquals('\"', (char)character5);
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      
      Character character6 = new Character('i');
      assertEquals('i', (char)character6);
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character3));
      assertTrue(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character1));
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 84, (-2145878719));
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      char[] charArray2 = new char[4];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = '+';
      charArray2[1] = 'G';
      charArray2[2] = 'e';
      charArray2[3] = '5';
      char[] charArray3 = ArrayUtils.removeAllOccurences(charArray2, '\"');
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray3);
      assertEquals(4, charArray3.length);
      assertEquals(4, charArray2.length);
      assertArrayEquals(new char[] {'+', 'G', 'e', '5'}, charArray3);
      assertArrayEquals(new char[] {'+', 'G', 'e', '5'}, charArray2);
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '\"';
      intArray0[1] = (int) '\"';
      intArray0[2] = (int) 'G';
      intArray0[3] = (int) '5';
      intArray0[4] = (int) '*';
      intArray0[5] = 2;
      intArray0[6] = (int) '*';
      intArray0[7] = (int) '\"';
      intArray0[8] = (int) '5';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 1430);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1430, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.1);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, 1477.036F, (-973));
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-940.1);
      ArrayUtils.shift(doubleArray0, (-973));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-940.1)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "java.lang.String";
      stringArray0[1] = ", Length: ";
      stringArray0[2] = "Dcyf @!L[BUCEf,M";
      stringArray0[3] = "|:k:;!q+";
      stringArray0[4] = "The Array must not be null";
      stringArray0[5] = "java.lang.Integer";
      stringArray0[6] = "@xghJgM[\"#b{";
      stringArray0[7] = "java.lang.Short";
      stringArray0[8] = "Comparator should not be null.";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(272L);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[2];
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      floatArray0[0] = (float) 1987L;
      floatArray0[1] = (float) 272L;
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1987.0F, 272.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1378);
      shortArray0[1] = (short) (-1378);
      shortArray0[2] = (short) (-1378);
      shortArray0[3] = (short)1363;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1363);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1378), (short) (-1378), (short) (-1378), (short)1363, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1363, (short) (-1378), (short) (-1378), (short) (-1378), (short)1363, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.lang.OHje1ct";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)111;
      shortArray0[1] = (short) (byte)122;
      shortArray0[2] = (short) (byte)111;
      shortArray0[3] = (short) (byte)111;
      shortArray0[4] = (short) (byte)111;
      shortArray0[5] = (short) (byte) (-89);
      shortArray0[6] = (short) (byte) (-45);
      shortArray0[7] = (short) (byte) (-89);
      shortArray0[8] = (short) (byte)122;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)111, (short)122, (short)111, (short)111, (short)111, (short) (-89), (short) (-45), (short) (-89), (short)122}, shortArray0);
      
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte)111;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray2);
      assertEquals(8, shortArray2.length);
      assertEquals(9, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)122, (short)111, (short)111, (short)111, (short) (-89), (short) (-45), (short) (-89), (short)122}, shortArray2);
      assertArrayEquals(new short[] {(short)111, (short)122, (short)111, (short)111, (short)111, (short) (-89), (short) (-45), (short) (-89), (short)122}, shortArray0);
      assertArrayEquals(new short[] {(short)111}, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '!';
      charArray0[2] = 'V';
      charArray0[3] = 'w';
      charArray0[4] = '3';
      charArray0[5] = 's';
      charArray0[6] = ';';
      charArray0[7] = 'x';
      boolean boolean2 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean2);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'0', '!', 'V', 'w', '3', 's', ';', 'x'}, charArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-2145159530), 15);
      assertNull(longArray0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, objectArray0.length);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(5, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals(5, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(15);
      assertEquals(15.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-2145159530));
      assertEquals((-2.14515953E9), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1121.15127386);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 15.0, (-2.14515953E9)}, doubleArray1, 0.01);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 15);
      assertNull(intArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = 'm';
      charArray0[2] = ' ';
      charArray0[3] = 'L';
      charArray0[4] = 'T';
      charArray0[5] = 'W';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'i', 'm', ' ', 'L', 'T', 'W'}, charArray0);
      assertArrayEquals(new char[] {'i', 'm', ' ', 'L', 'T', 'W'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      float[] floatArray0 = new float[18];
      floatArray0[0] = (-923.0F);
      floatArray0[1] = (-923.0F);
      floatArray0[2] = (-923.0F);
      floatArray0[3] = (-923.0F);
      floatArray0[4] = (-923.0F);
      floatArray0[5] = (-923.0F);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-95);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-103));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-103), (byte) (-103), (byte) (-95)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95), (byte) (-95), (byte) (-103), (byte) (-103), (byte) (-95), (byte) (-103)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-95), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -95, Length: 18
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'Y';
      charArray0[2] = 'X';
      charArray0[3] = '8';
      charArray0[4] = 'L';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'1', 'Y', 'X', '8', 'L'}, charArray0);
      assertArrayEquals(new char[] {'1', 'Y', 'X', '8', 'L'}, charArray1);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-3829));
      assertEquals((short) (-3829), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(stringArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, stringArray0.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt[] mutableIntArray1 = ArrayUtils.subarray(mutableIntArray0, (-20), 1055);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertEquals(2, mutableIntArray0.length);
      assertEquals(2, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      Short short1 = new Short((short)8);
      assertEquals((short)8, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-694));
      assertEquals((short) (-694), (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '8';
      floatArray0[1] = 0.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1055, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1055, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      String[] stringArray1 = ArrayUtils.add(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-120), (-407), (-2147127569));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 0.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[0] = (byte)4;
      int[] intArray0 = new int[10];
      intArray0[0] = (int) (byte)4;
      intArray0[1] = (int) (byte)68;
      Double double0 = new Double(2467.6819138);
      assertEquals(2467.6819138, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 2467.6819138);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.swap(doubleArray1, 4, 68);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-2146283099));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(10, intArray0.length);
      assertEquals(10, intArray1.length);
      assertArrayEquals(new int[] {4, 68, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {4, 68, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (byte)0;
      longArray2[1] = (long) (-2146283099);
      ArrayUtils.shift(byteArray0, 13, 1, 68);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 808.48645F;
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'q');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2547.7595578473);
      doubleArray0[1] = (-969.55682);
      doubleArray0[2] = (-1352.3247153);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 100.0, (-4577.60805));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2547.7595578473), (-969.55682), (-1352.3247153)}, doubleArray0, 0.01);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('!');
      assertEquals('!', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('D');
      assertEquals('D', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character1);
      assertEquals('D', (char)character2);
      assertNotNull(character2);
      assertFalse(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'f');
      assertNotNull(charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'!', 'D', 'D'}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom(8L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-969.55682), (-1352.3247153), (-2547.7595578473)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 8L;
      longArray0[1] = (long) 'f';
      longArray0[2] = (-927L);
      longArray0[3] = 8L;
      longArray0[4] = 8L;
      longArray0[5] = (long) (char)character2;
      longArray0[6] = (long) (char)character1;
      int int0 = ArrayUtils.indexOf(longArray0, (-927L));
      assertEquals(2, int0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {8L, 102L, (-927L), 8L, 8L, 68L, 68L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.reverse(longArray0, 3496, 3496);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 76, 120);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 120, (double) 1L);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(1L);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(120);
      assertEquals(120.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1L);
      assertEquals(1.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-717.973017603));
      assertEquals((-717.973017603), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(anyDouble() , anyDouble());
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'a';
      charArray0[3] = 'q';
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 8, 8);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {';', '(', 'a', 'q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {';', '(', 'a', 'q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3319);
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short) (-3319)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3319)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2462L);
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) (-2462L);
      doubleArray0[3] = (double) '(';
      doubleArray0[4] = (-463.13727);
      doubleArray0[5] = (double) 4879;
      doubleArray0[6] = (-2403.6430477);
      doubleArray0[7] = (double) (-1L);
      doubleArray0[8] = (double) 4879;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {8.0, (-2462.0), 40.0, (-463.13727), 4879.0, (-2403.6430477), (-1.0), 4879.0, (-2462.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 65);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-941L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 699L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-941L)}, longArray1);
      assertArrayEquals(new long[] {(-941L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 441L);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(longArray0, longArray1);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-941L)}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      
      int int0 = ArrayUtils.indexOf(longArray1, (long) 65, 4475);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals((-1), int0);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-941L)}, longArray1);
      assertArrayEquals(new long[] {(-941L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1215);
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      float[] floatArray0 = new float[18];
      floatArray0[0] = (-923.0F);
      floatArray0[1] = (-923.0F);
      floatArray0[2] = (-923.0F);
      floatArray0[3] = (-923.0F);
      floatArray0[4] = (-923.0F);
      floatArray0[5] = (-923.0F);
      floatArray0[6] = (-923.0F);
      floatArray0[7] = (-923.0F);
      floatArray0[8] = (-923.0F);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-923.0F);
      objectArray0[1] = (Object) (-923.0F);
      objectArray0[2] = (Object) (-923.0F);
      objectArray0[3] = (Object) (-923.0F);
      objectArray0[4] = (Object) (-923.0F);
      objectArray0[5] = (Object) (-923.0F);
      objectArray0[6] = (Object) (-923.0F);
      objectArray0[7] = (Object) (-923.0F);
      ArrayUtils.shift(objectArray0, 893);
      assertEquals(8, objectArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2043L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 2043L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {2043L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertNotSame(longArray0, longArray1);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2043L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 374);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 374, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      ArrayUtils.swap(longArray0, (-1), 2);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      ArrayUtils.shift((double[]) null, (-1), 126, 127);
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(longArray1, 48);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Long long0 = new Long(797L);
      assertEquals(797L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      Character character0 = Character.valueOf('N');
      assertEquals('N', (char)character0);
      assertNotNull(character0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) character0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(5, byteArray0.length);
      
      ArrayUtils.swap((float[]) null, 127, (-2350));
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'N', 'N', 'N'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = 1L;
      longArray0[0] = 1L;
      ArrayUtils.reverse(longArray0, 3496, 3496);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = 120;
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 76, 120);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 2447, 1L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2447, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) mockRandom0;
      objectArray0[3] = (Object) mockRandom0;
      objectArray0[4] = (Object) mockRandom0;
      objectArray0[5] = (Object) mockRandom0;
      objectArray0[6] = (Object) mockRandom0;
      objectArray0[8] = (Object) mockRandom0;
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte) (-67);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 803, (int) (byte) (-40));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40), (byte) (-38), (byte) (-11), (byte) (-40), (byte) (-38), (byte) (-40), (byte) (-67)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-544);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-544)}, shortArray0);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short) (-544);
      floatArray0[1] = (float) (short) (-544);
      floatArray0[2] = (-1861.706F);
      floatArray0[3] = (float) (short) (-544);
      floatArray0[4] = (float) (short) (-544);
      floatArray0[5] = (float) (short) (-544);
      floatArray0[6] = (float) (short) (-544);
      floatArray0[7] = (float) 'i';
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-544.0F), (-544.0F), (-1861.706F), (-544.0F), (-544.0F), (-544.0F), (-544.0F), 105.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.reverse((int[]) null, (int) (short) (-544), (int) (short) (-544));
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short1;
      shortArray0[1] = short2;
      shortArray0[2] = short2;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-773.5F);
      floatArray0[1] = (float) short0;
      floatArray0[2] = (float) 53;
      floatArray0[3] = (float) short0;
      floatArray0[4] = (float) 53;
      floatArray0[5] = (float) short0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 53.0F, 4414);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-773.5F), 0.0F, 53.0F, 0.0F, 53.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 4414;
      intArray0[1] = (int) short0;
      intArray0[2] = (int) short0;
      intArray0[3] = (int) (short)0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, (-561));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {4414, 0, 0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-773.5F), 0.0F, 53.0F, 0.0F, 53.0F, 0.0F}, floatArray0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-773.5F), 0.0F, 53.0F, 0.0F, 53.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-773.5F);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 53.0F;
      doubleArray0[5] = (double) 53.0F;
      doubleArray0[6] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 100.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, 0.0, (-773.5), 2.0, 0.0, 53.0, 53.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-773.5), 2.0, 0.0, 53.0, 53.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = 40L;
      longArray0[2] = (-782L);
      longArray0[3] = (-3580L);
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, 3168, 48, 48);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 40L;
      doubleArray0[1] = (double) (-3580L);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = 1.0;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3580.0), 1.0, 0.0, 1.0, 40.0}, doubleArray0, 0.01);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '|');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {'|'}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 3168);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {3168}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-90), (-2146283098));
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2146466190;
      int int0 = ArrayUtils.indexOf(intArray0, 2146466190);
      assertEquals(1, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 2146466190}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom(1339L);
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = ArrayUtils.removeElement((Object[]) arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, (Object) mockRandom0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[2] = (-1);
      intArray1[3] = 2146466190;
      intArray1[4] = 1;
      int[] intArray2 = ArrayUtils.addFirst(intArray1, 745);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertEquals(5, intArray1.length);
      assertEquals(6, intArray2.length);
      assertArrayEquals(new int[] {(-1), 0, (-1), 2146466190, 1}, intArray1);
      assertArrayEquals(new int[] {745, (-1), 0, (-1), 2146466190, 1}, intArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      boolean boolean1 = ArrayUtils.contains(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int1 = ArrayUtils.indexOf(arrayUtils0.EMPTY_DOUBLE_ARRAY, (-2646.54120562224), (-224.0));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      long[] longArray0 = new long[3];
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-233L);
      doubleArray0[2] = (double) (-233L);
      doubleArray0[3] = 385.1192363;
      doubleArray0[4] = 385.1192363;
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(2, longArray2.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2091.492), (-828.0));
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-233.0), (-233.0), 385.1192363, 385.1192363}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.removeElements((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, ")_9i");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'a';
      charArray0[3] = 'q';
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {';', '(', 'a', 'q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray1 = ArrayUtils.add(intArray0, (-2145028933));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-2145028933)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) 'a';
      Character character0 = new Character('4');
      assertEquals('4', (char)character0);
      assertNotNull(character0);
      
      ArrayUtils.shift(doubleArray0, 2142212593);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) characterArray0);
      assertSame(characterArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, objectArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-15419);
      shortArray0[1] = (short) (-15419);
      shortArray0[2] = (short) (-15419);
      shortArray0[3] = (short) (-15419);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-15419), (short) (-15419), (short) (-15419), (short) (-15419)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-15419), (short) (-15419), (short) (-15419), (short) (-15419)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, (String) null);
      assertSame(characterArray0, objectArray0);
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, characterArray0.length);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2031.8444, 66, (-4577.60805));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 66;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[4] = (float) 0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 66.0F, (double) (-1));
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, 5810.0F);
      assertNull(floatArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)78;
      ArrayUtils.swap(byteArray0, 2049870754, 2146573311, (-1));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)125, (byte) (-12), (byte)78}, byteArray0);
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[2] = (-1680L);
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-736.1512);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-9);
      ArrayUtils.shift(byteArray0, (int) (byte) (-9), 18688, 1431);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-1), (byte) (-9), (byte)76}, byteArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (byte)89);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift(charArray0, (int) (byte) (-9));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'G', 'G', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3326.664574302574;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2031.8444, 66, (-4577.60805));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 66;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[4] = (float) 0;
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0, 0, (-1404));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-940.1);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-60.276137606);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, 0);
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray1, (Random) mockRandom0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = ')';
      ArrayUtils.swap(charArray0, 0, (-234), 8);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'y', ')'}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-264.60266092584), (-264.60266092584));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 5);
      assertEquals(1, int0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse((int[]) null, 0, 0);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'q');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1163.15598168);
      doubleArray0[1] = (-1163.15598168);
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      ArrayUtils.reverse(intArray0, (-1115), (-1));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[2] = 3559.3732;
      doubleArray0[3] = 3127.7542953;
      doubleArray0[4] = Double.NaN;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-11);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1416), 128);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-11)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-11)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 2357);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-11);
      shortArray0[1] = (short) (-634);
      shortArray0[2] = (short) (byte) (-11);
      shortArray0[3] = (short) (byte) (-11);
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short) (-1860), (int) (short) (-634));
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-11), (short) (-634), (short) (-11), (short) (-11)}, shortArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)434;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)434;
      Object object0 = ArrayUtils.toPrimitive((Object) (short)434);
      assertEquals((short)434, object0);
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (short)434;
      objectArray0[3] = (Object) (short)434;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertEquals(4, objectArray0.length);
      assertEquals(4, objectArray1.length);
      
      Double double0 = new Double((short)434);
      assertEquals(434.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((short)434);
      assertEquals(434.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(2357.8594189654464);
      assertEquals(2357.8594189654464, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(1);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      Double double4 = new Double((short)434);
      assertEquals(434.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short)434);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)434;
      floatArray0[1] = (float) (short)434;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) (short)434;
      floatArray0[4] = (float) (short)434;
      floatArray0[5] = (float) (short)434;
      floatArray0[6] = (float) (short)434;
      floatArray0[7] = (float) 1;
      floatArray0[8] = (float) 1;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      assertArrayEquals(new float[] {434.0F, 434.0F, 1.0F, 434.0F, 434.0F, 434.0F, 434.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (-672.6430477), (-416));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-846));
      assertEquals((byte) (-78), mutableInt0.byteValue());
      assertEquals((-846), (int)mutableInt0.getValue());
      assertEquals((-846), (int)mutableInt0.toInteger());
      assertEquals((-846.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-846", mutableInt0.toString());
      assertEquals((-846), mutableInt0.intValue());
      assertEquals((short) (-846), mutableInt0.shortValue());
      assertEquals((-846L), mutableInt0.longValue());
      assertEquals((-846.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(138);
      assertEquals(138, mutableInt1.intValue());
      assertEquals("138", mutableInt1.toString());
      assertEquals(138, (int)mutableInt1.toInteger());
      assertEquals(138.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(138, (int)mutableInt1.getValue());
      assertEquals((byte) (-118), mutableInt1.byteValue());
      assertEquals((short)138, mutableInt1.shortValue());
      assertEquals(138L, mutableInt1.longValue());
      assertEquals(138.0, mutableInt1.doubleValue(), 0.01);
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt((-501));
      assertEquals((-501), mutableInt2.intValue());
      assertEquals("-501", mutableInt2.toString());
      assertEquals((-501.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-501), (int)mutableInt2.toInteger());
      assertEquals((-501), (int)mutableInt2.getValue());
      assertEquals((-501L), mutableInt2.longValue());
      assertEquals((byte)11, mutableInt2.byteValue());
      assertEquals((-501.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((short) (-501), mutableInt2.shortValue());
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      
      MutableInt mutableInt3 = new MutableInt(mutableInt0);
      assertEquals((byte) (-78), mutableInt0.byteValue());
      assertEquals((-846), (int)mutableInt0.getValue());
      assertEquals((-846), (int)mutableInt0.toInteger());
      assertEquals((-846.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-846", mutableInt0.toString());
      assertEquals((-846), mutableInt0.intValue());
      assertEquals((short) (-846), mutableInt0.shortValue());
      assertEquals((-846L), mutableInt0.longValue());
      assertEquals((-846.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-846", mutableInt3.toString());
      assertEquals((-846L), mutableInt3.longValue());
      assertEquals((short) (-846), mutableInt3.shortValue());
      assertEquals((-846), mutableInt3.intValue());
      assertEquals((-846.0F), mutableInt3.floatValue(), 0.01F);
      assertEquals((-846), (int)mutableInt3.getValue());
      assertEquals((-846), (int)mutableInt3.toInteger());
      assertEquals((byte) (-78), mutableInt3.byteValue());
      assertEquals((-846.0), mutableInt3.doubleValue(), 0.01);
      assertNotNull(mutableInt3);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      
      MutableInt mutableInt4 = new MutableInt((Number) 0);
      assertEquals(0, (int)mutableInt4.getValue());
      assertEquals((short)0, mutableInt4.shortValue());
      assertEquals(0.0, mutableInt4.doubleValue(), 0.01);
      assertEquals(0L, mutableInt4.longValue());
      assertEquals(0, mutableInt4.intValue());
      assertEquals("0", mutableInt4.toString());
      assertEquals(0, (int)mutableInt4.toInteger());
      assertEquals(0.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt4.byteValue());
      assertNotNull(mutableInt4);
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      
      int int0 = mutableInt0.addAndGet(383);
      assertEquals((byte)49, mutableInt0.byteValue());
      assertEquals((-463L), mutableInt0.longValue());
      assertEquals((-463.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-463), mutableInt0.shortValue());
      assertEquals((-463.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-463), mutableInt0.intValue());
      assertEquals((-463), (int)mutableInt0.getValue());
      assertEquals((-463), (int)mutableInt0.toInteger());
      assertEquals("-463", mutableInt0.toString());
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt0, mutableInt4);
      assertNotSame(mutableInt0, mutableInt3);
      assertEquals((-463), int0);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt0.equals((Object)mutableInt4));
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      
      MutableInt mutableInt5 = new MutableInt(mutableInt1);
      assertEquals(138, mutableInt1.intValue());
      assertEquals("138", mutableInt1.toString());
      assertEquals(138, (int)mutableInt1.toInteger());
      assertEquals(138.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(138, (int)mutableInt1.getValue());
      assertEquals((byte) (-118), mutableInt1.byteValue());
      assertEquals((short)138, mutableInt1.shortValue());
      assertEquals(138L, mutableInt1.longValue());
      assertEquals(138.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((byte) (-118), mutableInt5.byteValue());
      assertEquals(138, mutableInt5.intValue());
      assertEquals((short)138, mutableInt5.shortValue());
      assertEquals(138.0, mutableInt5.doubleValue(), 0.01);
      assertEquals(138L, mutableInt5.longValue());
      assertEquals("138", mutableInt5.toString());
      assertEquals(138, (int)mutableInt5.toInteger());
      assertEquals(138, (int)mutableInt5.getValue());
      assertEquals(138.0F, mutableInt5.floatValue(), 0.01F);
      assertNotNull(mutableInt5);
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertFalse(mutableInt1.equals((Object)mutableInt4));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      
      MutableInt mutableInt6 = new MutableInt((-1213));
      assertEquals((short) (-1213), mutableInt6.shortValue());
      assertEquals("-1213", mutableInt6.toString());
      assertEquals((-1213.0), mutableInt6.doubleValue(), 0.01);
      assertEquals((-1213.0F), mutableInt6.floatValue(), 0.01F);
      assertEquals((-1213), mutableInt6.intValue());
      assertEquals((byte)67, mutableInt6.byteValue());
      assertEquals((-1213), (int)mutableInt6.getValue());
      assertEquals((-1213), (int)mutableInt6.toInteger());
      assertEquals((-1213L), mutableInt6.longValue());
      assertNotNull(mutableInt6);
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      
      MutableInt[] mutableIntArray0 = new MutableInt[7];
      mutableIntArray0[0] = mutableInt2;
      mutableIntArray0[1] = mutableInt5;
      mutableIntArray0[3] = mutableInt3;
      mutableIntArray0[4] = mutableInt6;
      mutableIntArray0[5] = mutableInt4;
      int int1 = mutableInt5.addAndGet((Number) mutableInt1);
      assertEquals(138, mutableInt1.intValue());
      assertEquals("138", mutableInt1.toString());
      assertEquals(138, (int)mutableInt1.toInteger());
      assertEquals(138.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(138, (int)mutableInt1.getValue());
      assertEquals((byte) (-118), mutableInt1.byteValue());
      assertEquals((short)138, mutableInt1.shortValue());
      assertEquals(138L, mutableInt1.longValue());
      assertEquals(138.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(276L, mutableInt5.longValue());
      assertEquals(276.0, mutableInt5.doubleValue(), 0.01);
      assertEquals(276, (int)mutableInt5.toInteger());
      assertEquals(276, (int)mutableInt5.getValue());
      assertEquals((byte)20, mutableInt5.byteValue());
      assertEquals("276", mutableInt5.toString());
      assertEquals(276, mutableInt5.intValue());
      assertEquals(276.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals((short)276, mutableInt5.shortValue());
      assertNotSame(mutableInt1, mutableInt2);
      assertNotSame(mutableInt1, mutableInt3);
      assertNotSame(mutableInt1, mutableInt5);
      assertNotSame(mutableInt1, mutableInt4);
      assertNotSame(mutableInt1, mutableInt6);
      assertNotSame(mutableInt1, mutableInt0);
      assertNotSame(mutableInt5, mutableInt4);
      assertNotSame(mutableInt5, mutableInt3);
      assertNotSame(mutableInt5, mutableInt0);
      assertNotSame(mutableInt5, mutableInt6);
      assertNotSame(mutableInt5, mutableInt1);
      assertNotSame(mutableInt5, mutableInt2);
      assertEquals(276, int1);
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertFalse(mutableInt1.equals((Object)mutableInt5));
      assertFalse(mutableInt1.equals((Object)mutableInt4));
      assertFalse(mutableInt1.equals((Object)mutableInt6));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt6));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(int1 == int0);
      
      mutableIntArray0[6] = mutableInt6;
      MutableInt[] mutableIntArray1 = ArrayUtils.subarray(mutableIntArray0, (-1213), (-1));
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotNull(mutableIntArray1);
      assertEquals(0, mutableIntArray1.length);
      assertEquals(7, mutableIntArray0.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      MutableInt mutableInt7 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt6);
      assertEquals((-1213.0), mutableInt7.doubleValue(), 0.01);
      assertEquals((-1213), (int)mutableInt7.getValue());
      assertEquals((byte)67, mutableInt7.byteValue());
      assertEquals((-1213), (int)mutableInt7.toInteger());
      assertEquals((-1213.0F), mutableInt7.floatValue(), 0.01F);
      assertEquals("-1213", mutableInt7.toString());
      assertEquals((-1213), mutableInt7.intValue());
      assertEquals((-1213L), mutableInt7.longValue());
      assertEquals((short) (-1213), mutableInt7.shortValue());
      assertEquals((short) (-1213), mutableInt6.shortValue());
      assertEquals("-1213", mutableInt6.toString());
      assertEquals((-1213.0), mutableInt6.doubleValue(), 0.01);
      assertEquals((-1213.0F), mutableInt6.floatValue(), 0.01F);
      assertEquals((-1213), mutableInt6.intValue());
      assertEquals((byte)67, mutableInt6.byteValue());
      assertEquals((-1213), (int)mutableInt6.getValue());
      assertEquals((-1213), (int)mutableInt6.toInteger());
      assertEquals((-1213L), mutableInt6.longValue());
      assertNotSame(mutableInt7, mutableInt1);
      assertSame(mutableInt7, mutableInt6);
      assertNotSame(mutableInt7, mutableInt0);
      assertNotSame(mutableInt7, mutableInt5);
      assertNotSame(mutableInt7, mutableInt3);
      assertNotSame(mutableInt7, mutableInt2);
      assertNotSame(mutableInt7, mutableInt4);
      assertNotSame(mutableInt6, mutableInt2);
      assertNotSame(mutableInt6, mutableInt3);
      assertNotSame(mutableInt6, mutableInt5);
      assertNotSame(mutableInt6, mutableInt0);
      assertNotSame(mutableInt6, mutableInt1);
      assertSame(mutableInt6, mutableInt7);
      assertNotSame(mutableInt6, mutableInt4);
      assertNotNull(mutableInt7);
      assertFalse(mutableInt7.equals((Object)mutableInt1));
      assertFalse(mutableInt7.equals((Object)mutableInt0));
      assertFalse(mutableInt7.equals((Object)mutableInt5));
      assertFalse(mutableInt7.equals((Object)mutableInt3));
      assertFalse(mutableInt7.equals((Object)mutableInt2));
      assertFalse(mutableInt7.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 138;
      floatArray0[3] = (float) 0;
      ArrayUtils.shift(floatArray0, 383);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 138.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      Double double0 = new Double(0.163947228096601);
      assertEquals(0.163947228096601, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[3] = double0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)11, 0);
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)11}, byteArray0);
      
      Byte[] byteArray1 = new Byte[6];
      byteArray1[0] = (Byte) (byte)11;
      byteArray1[1] = (Byte) (byte)11;
      byteArray1[2] = (Byte) (byte)11;
      byteArray1[3] = (Byte) (byte)11;
      byteArray1[4] = (Byte) (byte)11;
      byteArray1[5] = (Byte) (byte)11;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray1, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray2.length);
      assertEquals(6, byteArray1.length);
      
      Long[] longArray0 = new Long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      int[] intArray0 = new int[7];
      intArray0[0] = 2102;
      intArray0[1] = 1978;
      intArray0[2] = 45;
      intArray0[3] = 1072;
      intArray0[4] = 76;
      intArray0[5] = (-1073741824);
      intArray0[6] = (-8);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2102, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      int[] intArray0 = null;
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = 40L;
      longArray0[2] = (-782L);
      longArray0[3] = (-3580L);
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, 3168, 48, 48);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 40L;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1335;
      floatArray0[1] = (float) (-782L);
      ArrayUtils.shift(floatArray0, (int) (byte)0, (int) (byte)0, 180);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1335.0F, (-782.0F)}, floatArray0, 0.01F);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 48);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {48L, 0L, 40L, (-782L), (-3580L), 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 40L, (-782L), (-3580L), 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray1 = new int[4];
      intArray1[0] = 3168;
      intArray1[1] = 48;
      intArray1[2] = 1335;
      intArray1[3] = 683;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(characterArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3168, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-56);
      shortArray0[1] = (short)453;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-56), (short)453}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)453;
      doubleArray0[1] = (double) (short)453;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {453.0, 453.0}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte) (-128);
      Byte byte1 = new Byte((byte) (-128));
      assertEquals((byte) (-128), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-128), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte) (-128), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      Byte byte4 = Byte.valueOf((byte) (-1));
      assertEquals((byte) (-1), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-45));
      assertEquals((byte) (-45), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      
      byteArray0[6] = byte7;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-128), (byte) (-128), (byte) (-1), (byte) (-45), (byte)31, (byte)100}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2146466190;
      intArray0[1] = (-861);
      int int0 = ArrayUtils.indexOf(intArray0, (-284), (-861));
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-861)}, intArray0);
      
      ArrayUtils.shift(intArray0, (-1), 2, (-1));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-861), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) short1;
      ArrayUtils.shift(objectArray0, (int) (short)0);
      assertEquals(1, objectArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1164L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1164L;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (-428.0F);
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) 1164L;
      floatArray0[6] = (float) 1164L;
      floatArray0[7] = (-1.0F);
      floatArray0[8] = (float) 1164L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1164.0F, (-904));
      assertEquals((-1), int0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1164.0F, 0.0F, 0.0F, (-428.0F), 0.0F, 1164.0F, 1164.0F, (-1.0F), 1164.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-904);
      intArray0[1] = (-1);
      intArray0[2] = (int) (short)0;
      intArray0[3] = (-1);
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short)0;
      ArrayUtils.shift(intArray0, (-2272), 1, 0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-904), (-1), 0, (-1), 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-264.60266092584), (-264.60266092584));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      charArray0[1] = '|';
      charArray0[2] = 'L';
      charArray0[3] = '3';
      charArray0[4] = ';';
      charArray0[5] = 'U';
      charArray0[6] = 'f';
      charArray0[7] = 'j';
      charArray0[8] = 'A';
      ArrayUtils.swap(charArray0, 1, 2075, 1);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'i', '|', 'L', '3', ';', 'U', 'f', 'j', 'A'}, charArray0);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.swap(intArray0, (-1487), 1, 1);
      assertNotSame(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = ';';
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)168;
      shortArray0[1] = (short)168;
      shortArray0[2] = (short)168;
      shortArray0[3] = (short)168;
      shortArray0[4] = (short)168;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Character character0 = new Character(';');
      assertEquals(';', (char)character0);
      assertNotNull(character0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) character0, (int) ';');
      assertEquals((-1), int1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[6];
      intArray0[1] = (int) ';';
      intArray0[2] = 1;
      intArray0[3] = (int) ';';
      intArray0[4] = (-995);
      intArray0[5] = (int) ';';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short)168);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 59, 1, 59, (-995), 59}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)168;
      longArray0[1] = (-2147483648L);
      longArray0[2] = (long) (short)168;
      longArray0[4] = 16L;
      longArray0[5] = (long) (-995);
      longArray0[6] = (long) 1;
      long[] longArray1 = ArrayUtils.add(longArray0, 1L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {168L, (-2147483648L), 168L, 0L, 16L, (-995L), 1L}, longArray0);
      assertArrayEquals(new long[] {168L, (-2147483648L), 168L, 0L, 16L, (-995L), 1L, 1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)99;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)99, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = (-1L);
      longArray0[4] = (long) '(';
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 7);
      assertEquals(2, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-1L), 0L, 40L, 0L}, longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1699);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1699)}, intArray0);
      
      double[] doubleArray0 = new double[2];
      longArray0[4] = (long) '(';
      doubleArray0[1] = (double) 40L;
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = '(';
      charArray0[2] = '_';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = 'F';
      charArray0[6] = 'F';
      charArray0[7] = 'F';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '(', (-712));
      assertEquals((-1), int1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'p', '(', '_', '(', '(', 'F', 'F', 'F'}, charArray0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = 'I';
      charArray0[3] = '3';
      doubleArray0[0] = (double) 'c';
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, 0, 1.5);
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {99.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      int int2 = ArrayUtils.indexOf((int[]) null, 0, 102);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '+';
      charArray0[2] = 'I';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '&';
      doubleArray0[0] = (double) 'c';
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, 0, 1.5);
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {99.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)1);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1147.877);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {99.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {99.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = '@';
      charArray0[4] = '^';
      charArray0[5] = 'w';
      ArrayUtils.reverse(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'w', '^', '@', 'B', 'B', 'l'}, charArray0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Float float0 = new Float((-46.8F));
      assertEquals((-46.8F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertEquals((-46.8F), object0);
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, object0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1370.1369049327332);
      doubleArray0[1] = (double) 'l';
      doubleArray0[2] = (double) 'B';
      doubleArray0[3] = (double) '@';
      doubleArray0[4] = (double) '@';
      doubleArray0[5] = 1.5;
      doubleArray0[6] = (double) 'B';
      int int0 = ArrayUtils.indexOf(doubleArray0, 66.0, 1926);
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1370.1369049327332), 108.0, 66.0, 64.0, 64.0, 1.5, 66.0}, doubleArray0, 0.01);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'S');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'w', '^', '@', 'B', 'B', 'l'}, charArray0);
      assertArrayEquals(new char[] {'S', 'w', '^', '@', 'B', 'B', 'l'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = 40L;
      longArray0[2] = (-782L);
      longArray0[3] = (-3580L);
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, 3168, 48, 48);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 40L;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1335;
      floatArray0[1] = (float) (-782L);
      ArrayUtils.shift(floatArray0, (int) (byte)0, (int) (byte)0, 180);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1335.0F, (-782.0F)}, floatArray0, 0.01F);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 48);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {48L, 0L, 40L, (-782L), (-3580L), 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 40L, (-782L), (-3580L), 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 40.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2084);
      shortArray0[1] = (short) (-1);
      ArrayUtils.swap(shortArray0, (int) (short) (-1), 0, (-305));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2084), (short) (-1)}, shortArray0);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte) (-1), (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte) (-1), (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      
      byteArray0[4] = byte5;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      byte[] byteArray0 = new byte[5];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)0, 48, (int) (byte)121);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-37);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-117));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)82, (byte)59, (byte) (-115), (byte) (-107), (byte) (-37), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-117), (byte)82, (byte)59, (byte) (-115), (byte) (-107), (byte) (-37), (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)82;
      ArrayUtils.swap(objectArray0, (int) (byte) (-37), 2, (int) (byte) (-37));
      assertEquals(1, objectArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)59;
      floatArray0[1] = (float) (-1322);
      floatArray0[2] = (float) (byte) (-37);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {59.0F, (-1322.0F), (-37.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {59.0F, (-1322.0F), (-37.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-117);
      doubleArray0[1] = (double) (-3047);
      doubleArray0[2] = (double) (-37.0F);
      doubleArray0[3] = (-1.5);
      doubleArray0[4] = (double) (-3047);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-107), 1375, 1952.61570063526);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-117.0), (-3047.0), (-37.0), (-1.5), (-3047.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-147.3135039356);
      doubleArray0[2] = (-1703.5);
      doubleArray0[3] = (-940.1);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      Float float0 = new Float(99.0F);
      assertEquals(99.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-940.1));
      assertEquals((-940.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 2652, (-2934));
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      ArrayUtils.shift(doubleArray0, (-2934));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-147.3135039356), (-1703.5), (-940.1), 1.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean boolean0 = new Boolean("E)P2RM>");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray1 = new Boolean[9];
      booleanArray1[0] = boolean0;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = boolean0;
      booleanArray1[3] = boolean0;
      booleanArray1[4] = boolean0;
      booleanArray1[5] = (Boolean) false;
      booleanArray1[4] = (Boolean) false;
      booleanArray1[7] = boolean0;
      booleanArray1[8] = boolean0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte) (-18));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-18), (byte)0, (byte)0, (byte)0, (byte) (-18), (byte)0}, byteArray0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      Boolean boolean0 = new Boolean("k}p&Fi5{G");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray2 = new Boolean[8];
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray2[1] = boolean1;
      booleanArray2[2] = (Boolean) false;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray2[3] = boolean2;
      booleanArray2[4] = (Boolean) false;
      Boolean boolean3 = Boolean.valueOf("(");
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      
      booleanArray2[5] = boolean3;
      booleanArray2[6] = boolean0;
      booleanArray2[7] = boolean0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Double double0 = new Double((-357.0));
      assertEquals((-357.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertEquals((-357.0), object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) short0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) short0;
      ArrayUtils.reverse(objectArray0, (int) (short)0, 1979);
      assertEquals(3, objectArray0.length);
      
      Double double1 = new Double((-357.0));
      assertEquals((-357.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((double)double1, (double)object0, 0.01);
      
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      doubleArray0[5] = double1;
      Double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, doubleArray0[2]);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 8;
      longArray0[1] = (long) 8;
      longArray0[2] = (long) 8;
      longArray0[3] = (long) 1979;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = 1979;
      intArray0[4] = (-1);
      intArray0[5] = 8;
      intArray0[6] = 134;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1979, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) 0L;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Float[] floatArray2 = new Float[0];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray3 = ArrayUtils.add(floatArray2, float0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray2, floatArray3);
      assertNotNull(floatArray3);
      assertEquals(1, floatArray3.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 2652);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(bitSet0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (-1916.40497169);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (byte) (-5);
      ArrayUtils.shift(doubleArray0, (int) (byte) (-5));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1916.40497169), 0.0, 0.0, (-5.0)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) floatArray2);
      assertNotSame(floatArray2, floatArray3);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray3));
      
      long[] longArray2 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-5);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)3774);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-5)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-5)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[4] = 0;
      intArray0[5] = 662;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 662;
      objectArray0[5] = (Object) 662;
      objectArray0[6] = (Object) 0;
      objectArray0[7] = (Object) 0;
      ArrayUtils.reverse(objectArray0, 0, 0);
      assertEquals(8, objectArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2074), 1240);
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 662}, intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 0, 0, 27);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '+';
      charArray0[2] = 'I';
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'I';
      floatArray0[1] = (float) '+';
      floatArray0[2] = (float) '+';
      floatArray0[3] = (float) '+';
      floatArray0[4] = (float) '+';
      floatArray0[5] = (float) 0;
      int[] intArray0 = ArrayUtils.add((int[]) null, 0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, (-10L), 2);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2142199624), 0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {73.0F, 43.0F, 43.0F, 43.0F, 43.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int2 = ArrayUtils.lastIndexOf(charArray0, '|', 0);
      assertEquals(0, int2);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'|', '+', 'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray1, 43.0F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {73.0F, 43.0F, 43.0F, 43.0F, 43.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[2] = (-1680L);
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'G';
      intArray0[1] = 2146466190;
      intArray0[2] = (int) 'G';
      intArray0[3] = (int) 'G';
      intArray0[4] = (int) 'G';
      intArray0[5] = (int) 'G';
      int[] intArray1 = ArrayUtils.add(intArray0, 913);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {71, 2146466190, 71, 71, 71, 71, 913}, intArray1);
      assertArrayEquals(new int[] {71, 2146466190, 71, 71, 71, 71}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-10L), 49);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-1680L)}, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-10L);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 71;
      floatArray0[3] = (float) 49;
      floatArray0[4] = (float) 49;
      floatArray0[5] = (float) 71;
      floatArray0[6] = (float) 'G';
      floatArray0[7] = (float) 71;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-4144), 50);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {(-10.0F), (-1.0F), 71.0F, 49.0F, 49.0F, 71.0F, 71.0F, 71.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-10.0F), (-1.0F), 71.0F, 49.0F, 49.0F, 71.0F, 71.0F, 71.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, 71.0F);
      assertEquals("{2, 5, 6, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(bitSet0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {(-10.0F), (-1.0F), 71.0F, 49.0F, 49.0F, 71.0F, 71.0F, 71.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-10.0F), (-1.0F), 71.0F, 49.0F, 49.0F, 71.0F, 71.0F, 71.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {(-10.0F), (-1.0F), 71.0F, 49.0F, 49.0F, 71.0F, 71.0F, 71.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-10.0F), (-1.0F), 71.0F, 49.0F, 49.0F, 71.0F, 71.0F, 71.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-1379));
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)98, (short)98}, shortArray0);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)98, (short)98}, shortArray0);
      
      ArrayUtils.shift((char[]) null, (int) (short)98, (int) (short) (-1379), 0);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-54);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)27);
      assertEquals(3, int0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-120), (byte) (-39), (byte)27, (byte) (-66), (byte)2, (byte)2, (byte) (-54)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-225L);
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(385.1192363);
      assertEquals(385.1192363, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short)18658;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short)47;
      shortArray0[5] = (short)18658;
      shortArray0[6] = (short)18658;
      shortArray0[7] = (short) (byte) (-1);
      shortArray0[8] = (short)57;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)18658);
      assertEquals("{2, 5, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)18658, (short) (-1), (short)47, (short)18658, (short)18658, (short) (-1), (short)57}, shortArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-225L);
      floatArray0[1] = (float) (short) (-1);
      ArrayUtils.swap(floatArray0, (int) (short) (-1), (int) (byte) (-1));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-225.0F), (-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap(longArray0, (-4781), (int) (short)18658, (int) (short) (-1));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-225L), 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)97;
      ArrayUtils.swap((float[]) null, 1006, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      byte byte0 = (byte)49;
      byte byte1 = (byte)0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)32}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray1));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)18658;
      shortArray0[1] = (short)18658;
      shortArray0[2] = (short)18658;
      shortArray0[3] = (short) (-809);
      shortArray0[4] = (short)18658;
      shortArray0[5] = (short)18658;
      shortArray0[6] = (short)18658;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2039);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)18658, (short)18658, (short)18658, (short) (-809), (short)18658, (short)18658, (short)18658}, shortArray0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      Integer integer0 = Integer.getInteger("java.lang.Double");
      assertNull(integer0);
      
      integerArray0[3] = null;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertNotNull(integerArray1);
      assertEquals(7, integerArray1.length);
      assertEquals(7, integerArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 704L;
      doubleArray0[1] = (double) (long)longArray0[0];
      doubleArray0[2] = (double) (long)longArray0[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {704.0, 704.0, 704.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 704L;
      floatArray0[1] = (float) (long)longArray0[0];
      floatArray0[2] = (float) 704L;
      floatArray0[3] = (float) (long)longArray0[0];
      floatArray0[4] = (float) (long)longArray0[0];
      floatArray0[5] = (float) (long)longArray0[0];
      floatArray0[6] = (float) 704L;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {704.0F, 704.0F, 704.0F, 704.0F, 704.0F, 704.0F, 704.0F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, 1.0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {704.0, 704.0, 704.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {704.0, 704.0, 704.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 1077.355514);
      assertEquals(3, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {704.0, 704.0, 704.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      Boolean[] booleanArray1 = new Boolean[0];
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      Character[] characterArray0 = new Character[4];
      char char0 = '#';
      Character character0 = Character.valueOf('#');
      assertEquals('#', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertEquals('#', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('8');
      assertEquals('8', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = new Character('~');
      assertEquals('~', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.removeAllOccurrences(characterArray0, character3);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(4, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertFalse(characterArray1.equals((Object)characterArray0));
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.0F), 0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Character character0 = new Character('C');
      assertEquals('C', (char)character0);
      assertNotNull(character0);
      
      char char0 = 'F';
      Character character1 = new Character('C');
      assertEquals('C', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      
      Character character2 = Character.valueOf('F');
      assertEquals('F', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = character2;
      characterArray0[1] = character2;
      characterArray0[2] = character1;
      characterArray0[3] = character2;
      characterArray0[4] = character2;
      characterArray0[5] = character2;
      characterArray0[6] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '>');
      assertNotNull(charArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'F', 'F', 'C', 'F', 'F', 'F', 'C'}, charArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) char0;
      longArray0[2] = 2454L;
      longArray0[3] = (long) (char)character1;
      longArray0[4] = (long) '>';
      longArray0[5] = (long) '>';
      longArray0[6] = (long) 0;
      longArray0[7] = (long) '>';
      longArray0[8] = (long) 'C';
      ArrayUtils.swap(longArray0, (-2115903005), 2);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {2454L, 70L, 0L, 67L, 62L, 62L, 0L, 62L, 67L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 0, 0, 0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) 0;
      ArrayUtils.reverse(longArray0, 0, 0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Array element ";
      stringArray0[1] = "}";
      String string0 = ArrayUtils.get(stringArray0, 0);
      assertEquals("Array element ", string0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      
      Long[] longArray1 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 101, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 101;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (-923.0F);
      floatArray0[5] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0L, 0);
      assertEquals(0, int0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 101.0F, Float.NaN, (-923.0F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      MutableInt mutableInt0 = new MutableInt(2);
      assertEquals("2", mutableInt0.toString());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Double double0 = new Double(2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      MutableInt mutableInt1 = new MutableInt(double0);
      assertEquals(2.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals("2", mutableInt1.toString());
      assertEquals(2.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt1.shortValue());
      assertEquals(2L, mutableInt1.longValue());
      assertEquals(2, mutableInt1.intValue());
      assertEquals(2, (int)mutableInt1.getValue());
      assertEquals((byte)2, mutableInt1.byteValue());
      assertEquals(2, (int)mutableInt1.toInteger());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt((Number) 2);
      assertEquals(2.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt2.shortValue());
      assertEquals("2", mutableInt2.toString());
      assertEquals((byte)2, mutableInt2.byteValue());
      assertEquals(2, mutableInt2.intValue());
      assertEquals(2, (int)mutableInt2.getValue());
      assertEquals(2, (int)mutableInt2.toInteger());
      assertEquals(2L, mutableInt2.longValue());
      assertEquals(2.0F, mutableInt2.floatValue(), 0.01F);
      assertNotNull(mutableInt2);
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'X', 2);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'c', 'c'}, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)8;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-56));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-1), (byte) (-104), (byte)20, (byte)8}, byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-1), (byte) (-104), (byte)20, (byte)8}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte) (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {2, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {2, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-56);
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)20;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte)20;
      shortArray0[5] = (short) (byte)8;
      shortArray0[6] = (short) (byte) (-1);
      shortArray0[7] = (short) (byte)20;
      shortArray0[8] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertEquals(9, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new int[] {2, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {2, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new short[] {(short) (-56), (short)1, (short)20, (short) (-1), (short)20, (short)8, (short) (-1), (short)20, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-1), (short)20, (short)8, (short) (-1), (short)20, (short) (-1)}, shortArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = 404.17734F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 0, (-2683));
      assertEquals(1, int0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {404.17734F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-3879);
      ArrayUtils.swap(shortArray0, (int) (short) (-1), (-1301), (-1301));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-3879)}, shortArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2683);
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = 2247;
      intArray0[3] = (int) (short) (-3879);
      intArray0[4] = (int) (short) (-3879);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-2683), (-1), 2247, (-3879), (-3879)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)80}, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)80;
      doubleArray0[1] = (double) (byte)80;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (byte)112;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 1.0);
      assertEquals(2, int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {80.0, 80.0, 1.0, 112.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.contains((int[]) null, (-617));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 3296.8079808;
      objectArray0[1] = (Object) 3296.8079808;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(2, objectArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2607);
      shortArray0[1] = (short)97;
      shortArray0[2] = (short) (-2607);
      shortArray0[3] = (short)464;
      shortArray0[4] = (short) (-2607);
      shortArray0[5] = (short) (-2607);
      shortArray0[6] = (short) (-2607);
      shortArray0[7] = (short) (-2607);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2145874937), (int) (short) (-2607));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2607), (short)97, (short) (-2607), (short)464, (short) (-2607), (short) (-2607), (short) (-2607), (short) (-2607)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 3296.8079808;
      doubleArray1[1] = (Double) 3296.8079808;
      doubleArray1[2] = (Double) 3296.8079808;
      doubleArray1[3] = (Double) 3296.8079808;
      doubleArray1[4] = (Double) 3296.8079808;
      doubleArray1[5] = (Double) 3296.8079808;
      doubleArray1[6] = (Double) 3296.8079808;
      doubleArray1[7] = (Double) 3296.8079808;
      Double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, (Double[]) null);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '9', 9);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'9'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2146466190;
      intArray0[1] = (-861);
      int int0 = ArrayUtils.indexOf(intArray0, (-284), (-861));
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-861)}, intArray0);
      
      Short short0 = new Short((short) (-68));
      assertEquals((short) (-68), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)229);
      assertEquals((short)229, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-357));
      assertEquals((short) (-357), (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      Short short3 = new Short((short)0);
      assertEquals((short)0, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      
      Short short4 = new Short((byte)36);
      assertEquals((short)36, (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      short[] shortArray2 = new short[3];
      shortArray2[0] = (short)229;
      shortArray2[1] = (short) (-68);
      shortArray2[2] = (short) (-2607);
      short[] shortArray3 = ArrayUtils.subarray(shortArray2, 56, (-590));
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray2, shortArray3);
      assertNotNull(shortArray3);
      assertEquals(0, shortArray3.length);
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray3);
      assertArrayEquals(new short[] {(short)229, (short) (-68), (short) (-2607)}, shortArray2);
      assertFalse(shortArray3.equals((Object)shortArray2));
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      Double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Long long0 = new Long((-1));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) doubleArray0, (Object) long0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(bitSet0);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.insert(751, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 751;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 751;
      doubleArray0[3] = (double) 751;
      doubleArray0[4] = (double) 751;
      int[] intArray0 = new int[5];
      intArray0[0] = 751;
      intArray0[1] = 751;
      intArray0[2] = 751;
      intArray0[3] = 751;
      intArray0[4] = 751;
      int int0 = new Integer(751);
      assertEquals(751, int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, true);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom((-1333L));
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-1546L));
      ArrayUtils.shuffle(arrayUtils0.EMPTY_FLOAT_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray1 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1378));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1378)}, shortArray1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "j FU.02B";
      stringArray0[1] = "F";
      stringArray0[2] = "java.lang.Integer";
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      Double[] doubleArray0 = new Double[14];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(14, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = 't';
      charArray0[2] = 'N';
      charArray0[3] = ' ';
      charArray0[4] = '&';
      ArrayUtils.swap(charArray0, 0, (-99), (-1));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {':', 't', 'N', ' ', '&'}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0, 1278, (-1476.1482786));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)55;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)55}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)55}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '&';
      longArray0[1] = (long) ':';
      longArray0[2] = 409L;
      longArray0[3] = (-2000L);
      longArray0[4] = (long) 't';
      long[] longArray1 = ArrayUtils.add(longArray0, (-1432L));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {38L, 58L, 409L, (-2000L), 116L, (-1432L)}, longArray1);
      assertArrayEquals(new long[] {38L, 58L, 409L, (-2000L), 116L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Float[] floatArray0 = ArrayUtils.toArray((Float[]) null);
      assertNull(floatArray0);
      
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) 'N';
      longArray2[1] = (-2000L);
      longArray2[2] = (long) 'N';
      longArray2[3] = (long) '&';
      longArray2[4] = (long) '&';
      longArray2[5] = (long) 't';
      longArray2[6] = 409L;
      longArray2[7] = (long) 't';
      longArray2[8] = (long) ' ';
      long[] longArray3 = ArrayUtils.addAll(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotNull(longArray3);
      assertEquals(9, longArray2.length);
      assertEquals(5, longArray0.length);
      assertEquals(14, longArray3.length);
      assertArrayEquals(new long[] {78L, (-2000L), 78L, 38L, 38L, 116L, 409L, 116L, 32L}, longArray2);
      assertArrayEquals(new long[] {38L, 58L, 409L, (-2000L), 116L}, longArray0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2146466190;
      intArray0[1] = (-861);
      int int0 = ArrayUtils.indexOf(intArray0, (-284), (-861));
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-861)}, intArray0);
      
      Short short0 = new Short((short) (-68));
      assertEquals((short) (-68), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)229);
      assertEquals((short)229, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-357));
      assertEquals((short) (-357), (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      Short short3 = new Short((short)0);
      assertEquals((short)0, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      
      Short short4 = new Short((byte)36);
      assertEquals((short)36, (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      short[] shortArray2 = new short[3];
      shortArray2[0] = (short)229;
      shortArray2[1] = (short) (-68);
      shortArray2[2] = (short) (-2607);
      short[] shortArray3 = ArrayUtils.subarray(shortArray2, 56, (-590));
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray2, shortArray3);
      assertNotNull(shortArray3);
      assertEquals(0, shortArray3.length);
      assertEquals(3, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray3);
      assertArrayEquals(new short[] {(short)229, (short) (-68), (short) (-2607)}, shortArray2);
      assertFalse(shortArray3.equals((Object)shortArray2));
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      Double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-861);
      longArray0[1] = (long) (short)229;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-627L), (-3059));
      assertEquals((-1), int1);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-861L), 229L}, longArray0);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-357);
      intArray0[0] = 2;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {2, (-357), 0}, intArray0);
      assertArrayEquals(new int[] {2, (-357), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Arguments cannot bot be null";
      stringArray0[1] = "Arguments cannot bot be null";
      String[] stringArray1 = ArrayUtils.add(stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2;
      intArray2[1] = (-357);
      intArray2[2] = 2;
      ArrayUtils.shift(intArray2, 0, 97, 1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(5, intArray2.length);
      assertArrayEquals(new int[] {0, 2, (-357), 2, 0}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2;
      floatArray0[1] = 4.1453133F;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) (-357);
      floatArray0[5] = (float) (-357);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1332.9109F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {2.0F, 4.1453133F, 2.0F, (-357.0F), 0.0F, (-357.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, 4.1453133F, 2.0F, (-357.0F), 0.0F, (-357.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-357);
      intArray0[0] = 2;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {2, (-357), 0}, intArray0);
      assertArrayEquals(new int[] {2, (-357), 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Arguments cannot both be null";
      stringArray0[1] = "Arguments cannot both be null";
      String[] stringArray1 = ArrayUtils.add(stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2;
      intArray2[1] = (-357);
      intArray2[2] = 2;
      ArrayUtils.shift(intArray2, 0, 97, 1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(5, intArray2.length);
      assertArrayEquals(new int[] {0, 2, (-357), 2, 0}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2;
      floatArray0[1] = 4.1453133F;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) (-357);
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) (-357);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1332.9109F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {2.0F, 4.1453133F, 2.0F, (-357.0F), 1.0F, (-357.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, 4.1453133F, 2.0F, (-357.0F), 1.0F, (-357.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[0] = (byte)4;
      int[] intArray0 = new int[10];
      intArray0[0] = (int) (byte)4;
      intArray0[1] = (int) (byte)101;
      Double double0 = new Double(2467.6819138);
      assertEquals(2467.6819138, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 2467.6819138);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.swap(doubleArray1, 4, 101);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-2146283099));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(10, intArray0.length);
      assertEquals(10, intArray1.length);
      assertArrayEquals(new int[] {4, 101, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {4, 101, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (byte)0;
      longArray2[1] = (long) (-2146283099);
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, (-814), 2144276739);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '+';
      charArray0[2] = 'I';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '&';
      doubleArray0[0] = (double) '^';
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3840), 11);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {94.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {94.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '+';
      floatArray0[1] = 1576.3206F;
      ArrayUtils.swap(floatArray0, 48, (-2146283098), 11);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {43.0F, 1576.3206F}, floatArray0, 0.01F);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)65);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (int) '|';
      intArray0[4] = 0;
      intArray0[5] = (int) '3';
      intArray0[6] = (int) (short)65;
      intArray0[7] = (int) 'I';
      intArray0[8] = (int) '3';
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 1240, 674);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1240, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      char[] charArray0 = new char[9];
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean(", '");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ArrayUtils.shift((Object[]) booleanArray0, 937);
      assertEquals(1, booleanArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-5956);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)678;
      shortArray0[3] = (short)3437;
      shortArray0[4] = (short)99;
      shortArray0[5] = (short)32539;
      shortArray0[6] = (short)115;
      ArrayUtils.shift(shortArray0, (-2615), (int) (short)32539, 937);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)678, (short)3437, (short)99, (short)32539, (short)115, (short) (-5956)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[5] = 0;
      intArray0[1] = (-888);
      intArray0[2] = 76;
      Character character0 = Character.valueOf('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('G');
      assertEquals('G', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = Character.valueOf('G');
      assertEquals('G', (char)character2);
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character1));
      
      Character character3 = new Character('G');
      assertEquals('G', (char)character3);
      assertNotNull(character3);
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      
      Character character4 = new Character('\"');
      assertEquals('\"', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      
      Character character5 = Character.valueOf('1');
      assertEquals('1', (char)character5);
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      
      Character character6 = new Character('L');
      assertEquals('L', (char)character6);
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character1));
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character1;
      characterArray0[1] = character1;
      characterArray0[3] = character4;
      characterArray0[3] = character6;
      characterArray0[4] = character4;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      Character character0 = new Character('l');
      assertEquals('l', (char)character0);
      assertNotNull(character0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) character0, 2142225500);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      char[] charArray0 = new char[27];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      charArray0[4] = '!';
      charArray0[5] = 'S';
      charArray0[6] = '#';
      charArray0[7] = 'G';
      charArray0[8] = ')';
      Character character0 = new Character('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'u';
      ArrayUtils.shift(doubleArray0, 0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {117.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'S';
      objectArray0[1] = (Object) 'S';
      objectArray0[2] = (Object) 117.0;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      assertEquals(3, objectArray1.length);
      assertEquals(3, objectArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3594;
      shortArray0[1] = (short) (-1062);
      shortArray0[2] = (short) (-15419);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)3594, (short) (-1062), (short) (-15419)}, shortArray0);
      assertArrayEquals(new short[] {(short)3594, (short) (-1062), (short) (-15419)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 14;
      intArray0[1] = (-1218);
      intArray0[2] = (-2147483645);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertArrayEquals(new int[] {14, (-1218), (-2147483645)}, intArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-857.83585491);
      doubleArray0[1] = (double) 14;
      doubleArray0[2] = (double) (-2147483645);
      doubleArray0[3] = (double) (-1218);
      doubleArray0[4] = (double) (-1218);
      doubleArray0[5] = (double) 14;
      doubleArray0[6] = (double) (-1218);
      doubleArray0[7] = (double) (-2147483645);
      ArrayUtils.reverse(doubleArray0, 91, (-1833));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-857.83585491), 14.0, (-2.147483645E9), (-1218.0), (-1218.0), 14.0, (-1218.0), (-2.147483645E9)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)106;
      ArrayUtils.reverse(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)106, (byte)101}, byteArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)101;
      doubleArray0[1] = (double) (byte)106;
      doubleArray0[2] = (double) (byte)106;
      doubleArray0[3] = (double) (byte)106;
      doubleArray0[4] = (double) (byte)101;
      doubleArray0[5] = (double) (byte)106;
      doubleArray0[6] = (double) (byte)106;
      doubleArray0[7] = (double) (byte)106;
      doubleArray0[8] = (double) (byte)106;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {101.0, 106.0, 106.0, 106.0, 101.0, 106.0, 106.0, 106.0, 106.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)106, (byte)101}, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)106;
      intArray0[1] = (int) (byte)101;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {106, 101}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 3559.3732;
      doubleArray0[3] = 3127.7542953;
      doubleArray0[4] = Double.NaN;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-11);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1416), 128);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-11)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-11)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1872, 120);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-11), (int) (byte) (-11));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-11);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), 128);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-1), (byte)19, (byte) (-38), (byte) (-40), (byte) (-11)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-1), (byte)19, (byte) (-38), (byte) (-40), (byte) (-11)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)4;
      Double double0 = new Double((-357.0));
      assertEquals((-357.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertEquals((-357.0), object0);
      assertNotNull(object0);
      
      ArrayUtils.reverse((Object[]) longArray0, 8, 386);
      assertEquals(0, longArray0.length);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double1 = new Double(10.696325067494456);
      assertEquals(10.696325067494456, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)object0, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, double1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotEquals((double)double1, (double)object0, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (byte)4, 2146466190, 2966.1010813);
      assertEquals((-1), int0);
      
      long[] longArray2 = ArrayUtils.clone(longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, 3168, 48, 48);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 30L;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = 1.0;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 30.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(doubleArray0, (int) (byte)0, (-3182), 91);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 30.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 30.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 30.0, 0.0, 1.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '#');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 3168);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 872.387;
      doubleArray0[1] = (-1932.408537376156);
      doubleArray0[2] = (-5040.373397597805);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1918.0);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {872.387, (-1932.408537376156), (-5040.373397597805), 0.0, (-1918.0)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-5040.373397597805);
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (-1918.0);
      objectArray1[1] = (Object) (-1918.0);
      objectArray1[2] = (Object) 872.387;
      objectArray1[3] = (Object) (-1918.0);
      Object object0 = ArrayUtils.get(objectArray1, (-1909));
      assertNotSame(objectArray1, objectArray0);
      assertNull(object0);
      assertEquals(4, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) 872.387;
      objectArray0[3] = (Object) (-1932.408537376156);
      objectArray0[4] = (Object) (-5040.373397597805);
      objectArray0[5] = (Object) (-1932.408537376156);
      objectArray0[6] = (Object) 872.387;
      Object[] objectArray2 = new Object[1];
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertFalse(objectArray2.equals((Object)objectArray1));
      
      objectArray2[0] = (Object) (-1918.0);
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object1 = ArrayUtils.get(objectArray2, (-1909), (Object) double0);
      assertNotSame(objectArray2, objectArray0);
      assertNotSame(objectArray2, objectArray1);
      assertEquals(0.0, object1);
      assertNotNull(object1);
      assertEquals(1, objectArray2.length);
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertFalse(objectArray2.equals((Object)objectArray1));
      
      objectArray0[7] = object1;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertNotSame(objectArray0, objectArray2);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray1, objectArray2);
      assertFalse(boolean1);
      assertEquals(8, objectArray0.length);
      assertEquals(4, objectArray1.length);
      assertFalse(objectArray0.equals((Object)objectArray2));
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray1.equals((Object)objectArray2));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1615;
      intArray0[1] = (-3495);
      intArray0[2] = (-2878);
      intArray0[3] = (-692);
      int int0 = ArrayUtils.indexOf(intArray0, 1, 2146860466);
      assertEquals((-1), int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1615, (-3495), (-2878), (-692)}, intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)36;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)54, (byte)36}, byteArray0);
      
      Integer integer0 = Integer.getInteger("1Ag+\"%S", (Integer) 1615);
      assertEquals(1615, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) integer0, (-1));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertFalse(integer0.equals((Object)int0));
      
      Character[] characterArray0 = new Character[8];
      char char0 = 'V';
      Character character0 = Character.valueOf('V');
      assertEquals('V', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertEquals('V', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('H');
      assertEquals('H', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      
      characterArray0[2] = character2;
      Character character3 = new Character('g');
      assertEquals('g', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      
      characterArray0[3] = character3;
      Character character4 = new Character('c');
      assertEquals('c', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      
      characterArray0[4] = character4;
      Character character5 = new Character('g');
      assertEquals('g', (char)character5);
      assertNotNull(character5);
      assertTrue(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character0));
      
      characterArray0[5] = character5;
      Character character6 = new Character((char) character1);
      assertEquals('V', (char)character6);
      assertNotNull(character6);
      assertFalse(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character4));
      assertTrue(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character5));
      assertFalse(character1.equals((Object)character3));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)char0));
      assertTrue(character6.equals((Object)character0));
      
      characterArray0[6] = character6;
      Character character7 = new Character((char) character3);
      assertEquals('g', (char)character7);
      assertNotNull(character7);
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character1));
      assertTrue(character7.equals((Object)character3));
      assertTrue(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character6));
      assertTrue(character3.equals((Object)character5));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character4));
      assertFalse(character3.equals((Object)character0));
      
      characterArray0[7] = character7;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(8, characterArray0.length);
      assertEquals(8, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-548);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 1278);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-548), (-1), 0}, intArray0);
      assertArrayEquals(new int[] {(-548), (-1), 0, 1278}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = 't';
      charArray0[2] = 'N';
      charArray0[3] = ' ';
      charArray0[4] = '&';
      ArrayUtils.swap(charArray0, 0, (-99), (-1));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {':', 't', 'N', ' ', '&'}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0, 1278, (-1476.1482786));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, (-1));
      assertNotSame(intArray0, intArray1);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-548), (-1), 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)55;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)55}, shortArray0);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)116);
      assertEquals((-1), int1);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)55}, shortArray0);
      assertTrue(int1 == int0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-2179L));
      assertNull(longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (-1), (long) (short)55);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      Double double0 = new Double(405.4106639);
      assertEquals(405.4106639, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-4726.31489);
      doubleArray0[2] = 1.5;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 1.5;
      doubleArray0[5] = (-747.5569);
      doubleArray0[6] = 385.1192363;
      doubleArray0[7] = 405.4106639;
      doubleArray0[8] = 385.1192363;
      ArrayUtils.shift(doubleArray0, (-1), (-1), 10);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.5, (-4726.31489), 1.5, (-1.0), 1.5, (-747.5569), 385.1192363, 405.4106639, 385.1192363}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 10;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 10;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {10L, (-1L), 10L, (-1L), (-1L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) (-1.0);
      doubleArray1[1] = (Double) (-747.5569);
      doubleArray1[2] = (Double) 385.1192363;
      Double double1 = new Double(475.785098);
      assertEquals(475.785098, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[3] = double1;
      doubleArray1[4] = double0;
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray1[5] = double2;
      doubleArray1[6] = (Double) 385.1192363;
      doubleArray1[7] = (Double) (-1.0);
      doubleArray1[8] = (Double) (-747.5569);
      Double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, (Object) doubleArray1[6]);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(2, int0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false, true}, booleanArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 2);
      assertEquals(0, int1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      assertFalse(int1 == int0);
      
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false, true}, booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 2.0, 2.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = ']';
      charArray0[2] = '9';
      charArray0[3] = 'r';
      charArray0[4] = ']';
      charArray0[5] = '`';
      charArray0[6] = '#';
      charArray0[7] = 's';
      charArray0[8] = 'z';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'J', ']', '9', 'r', ']', '`', '#', 's', 'z'}, charArray1);
      assertArrayEquals(new char[] {'J', ']', '9', 'r', ']', '`', '#', 's', 'z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2462L));
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-3126L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-3126L)}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (-3126L), 13, 121.069989777908);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-544);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-544)}, shortArray0);
      
      Character[] characterArray0 = new Character[7];
      char char0 = 'i';
      Character character0 = Character.valueOf('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char char1 = 'M';
      Character character1 = Character.valueOf('M');
      assertEquals('M', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertEquals('i', (char)character2);
      assertNotNull(character2);
      assertFalse(char0 == char1);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char1));
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('i');
      assertEquals('i', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)char1));
      assertFalse(character3.equals((Object)character1));
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf(char1);
      assertEquals('M', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char0));
      assertFalse(char1 == char0);
      
      characterArray0[4] = character4;
      ArrayUtils.shift(shortArray0, (int) (short) (-544));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-544)}, shortArray0);
      
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted(longArray1, comparator0);
      assertTrue(boolean1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-3126L)}, longArray0);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, char1);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'i'}, charArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertFalse(char1 == char0);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '+';
      charArray0[2] = 'I';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '&';
      doubleArray0[0] = (double) '^';
      charArray0[7] = 'Y';
      charArray0[8] = 'G';
      ArrayUtils.swap(charArray0, 0, 0, (-739));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'|', '+', 'I', '3', '3', '&', '\u0000', 'Y', 'G'}, charArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '\u0000';
      floatArray0[1] = 1380.2548F;
      floatArray0[2] = (float) 'Y';
      ArrayUtils.swap(floatArray0, (-617), 1, 0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1380.2548F, 89.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-548);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 1278);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-548), (-1), 0}, intArray0);
      assertArrayEquals(new int[] {(-548), (-1), 0, 1278}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0, 1278, (-1476.1482786));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, (-1));
      assertNotSame(intArray0, intArray1);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-548), (-1), 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)55;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)55}, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = ':';
      charArray0[2] = 'X';
      charArray0[3] = ':';
      charArray0[4] = 'N';
      int int1 = ArrayUtils.indexOf(charArray0, 'N');
      assertEquals(4, int1);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'t', ':', 'X', ':', 'N'}, charArray0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, 3168, 48, 48);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 30L;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = 1.0;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 30.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(doubleArray0, (int) (byte)0, (-3182), 91);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 30.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 30.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 30.0, 0.0, 1.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-3182);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) 48;
      floatArray0[3] = (-199.504F);
      floatArray0[4] = (float) 48;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-3182.0F), 0.0F, 48.0F, (-199.504F), 48.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)57;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)6, (int) (byte)121);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-86), (byte)121, (byte)59, (byte)57}, byteArray0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) longArray0, (Object) null);
      assertEquals((-1), int1);
      assertEquals(1, longArray0.length);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 55, 0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-1115), (-327), (-2237));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      ArrayUtils.swap(booleanArray0, (int) (byte)59, 3249, (-1115));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1115));
      assertEquals((-1), int2);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)57;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)3, (int) (byte)121);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-86), (byte)121, (byte)74, (byte)57}, byteArray0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) longArray0, (Object) null);
      assertEquals((-1), int1);
      assertEquals(1, longArray0.length);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.shift(booleanArray0, (-1115), (-327), (-2219));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      ArrayUtils.swap(booleanArray0, (int) (byte)74, 3249, (-1115));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1115));
      assertEquals((-1), int2);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)168;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)168;
      shortArray0[3] = (short)168;
      shortArray0[4] = (short)2;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) character0, (int) '(');
      assertEquals((-1), int1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '(';
      intArray0[1] = (int) '(';
      intArray0[2] = 1;
      intArray0[3] = (int) ';';
      intArray0[4] = (-995);
      intArray0[5] = (int) ';';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short)168);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {40, 40, 1, 59, (-995), 59}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)2;
      longArray0[1] = (-2147483648L);
      longArray0[2] = (long) (short)2;
      longArray0[3] = (long) 40;
      longArray0[4] = (-1L);
      longArray0[5] = (long) (-995);
      longArray0[6] = (long) 1;
      long[] longArray1 = ArrayUtils.add(longArray0, 1L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {2L, (-2147483648L), 2L, 40L, (-1L), (-995L), 1L, 1L}, longArray1);
      assertArrayEquals(new long[] {2L, (-2147483648L), 2L, 40L, (-1L), (-995L), 1L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) mockRandom0;
      objectArray0[3] = (Object) mockRandom0;
      objectArray0[4] = (Object) mockRandom0;
      objectArray0[5] = (Object) mockRandom0;
      objectArray0[6] = (Object) mockRandom0;
      objectArray0[7] = (Object) mockRandom0;
      objectArray0[8] = (Object) mockRandom0;
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("yj;mk@'/=vI");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf(false);
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean("java.lang.Short");
      assertFalse(boolean5);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertTrue(boolean6);
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.FALSE;
      assertFalse(boolean7);
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean3));
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = ArrayUtils.get(booleanArray0, (-1));
      assertNull(boolean8);
      assertEquals(8, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-2122));
      assertEquals((-1), int0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) mockRandom0;
      objectArray0[3] = (Object) mockRandom0;
      objectArray0[4] = (Object) mockRandom0;
      objectArray0[5] = (Object) mockRandom0;
      objectArray0[6] = (Object) mockRandom0;
      objectArray0[7] = (Object) mockRandom0;
      objectArray0[8] = (Object) mockRandom0;
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("yj;mk@'/=vI");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean0);
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf(false);
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean("java.lang.Short");
      assertFalse(boolean5);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean4));
      
      booleanArray0[5] = boolean4;
      Boolean boolean6 = Boolean.TRUE;
      assertTrue(boolean6);
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean5));
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.FALSE;
      assertFalse(boolean7);
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean5));
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = ArrayUtils.get(booleanArray0, (-1));
      assertNull(boolean8);
      assertEquals(8, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-2122));
      assertEquals((-1), int0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2146466190;
      int int0 = ArrayUtils.indexOf(intArray0, 2146466190);
      assertEquals(1, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 2146466190}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom(1339L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), (-1));
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean1 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_DOUBLE_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int1 = ArrayUtils.indexOf((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, (Object) null, (-1));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'J';
      charArray0[2] = '<';
      charArray0[3] = 'Q';
      charArray0[4] = 'X';
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'Q';
      longArray0[1] = (long) 'J';
      longArray0[2] = (long) 'H';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 1433);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {81L, 74L, 72L}, longArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'H';
      intArray0[1] = 2;
      intArray0[2] = 7;
      intArray0[3] = (int) 'J';
      intArray0[4] = 1;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {72, 2, 7, 74, 1}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (double) 72);
      assertNull(doubleArray0);
      
      ArrayUtils.swap(longArray0, 7, 117);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {81L, 74L, 72L}, longArray0);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 7, '<');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(10, charArray1.length);
      assertArrayEquals(new char[] {'H', 'J', '<', 'Q', 'X', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'H', 'J', '<', 'Q', 'X', '\u0000', '\u0000', '<', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Byte byte0 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) null, (Object) byte0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)7, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Double double0 = new Double(2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)40);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.swap((Object[]) null, 2, 8, (-3047));
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2;
      floatArray0[1] = 723.26056F;
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte) (-1);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 723.26056F, (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F, 723.26056F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'l';
      int int0 = ArrayUtils.indexOf(charArray0, 'l', (int) (byte) (-1));
      assertEquals(1, int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\\', 'l'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 6;
      intArray0[5] = 662;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) (-1284);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-561.41), (-1436));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 6.0, (-1284.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1936;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short) (-861), 115);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)1936}, shortArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      bitSet0.clear(2146198499);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(bitSet0, bitSet1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 6.0, (-1284.0)}, doubleArray0, 0.01);
      assertTrue(bitSet0.equals((Object)bitSet1));
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 6.0, (-1284.0)}, doubleArray0, 0.01);
      
      ArrayUtils.reverse((char[]) null);
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[7] = (short) (-1);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short) (-1);
      shortArray0[8] = (short) (-1);
      ArrayUtils.swap(shortArray0, Integer.MAX_VALUE, 10, Integer.MAX_VALUE);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short)0, (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (short) (-1);
      doubleArray1[1] = (double) 10;
      doubleArray1[2] = (double) 10;
      doubleArray1[3] = (double) (short) (-1);
      int int0 = ArrayUtils.indexOf(doubleArray1, (-2773.0), (-919));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 10.0, 10.0, (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-119);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)3, (byte) (-119)}, byteArray0);
      
      Short short0 = new Short((byte)3);
      assertEquals((short)3, (short)short0);
      assertNotNull(short0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) short0, 82);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2146466190;
      intArray0[1] = (-861);
      int int0 = ArrayUtils.indexOf(intArray0, (-284), (-861));
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-861)}, intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)2;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)36, (byte)54, (byte)2}, byteArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)36;
      objectArray0[1] = (Object) (-861);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], 2146466190);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 3296.8079808;
      objectArray0[1] = (Object) 3296.8079808;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(2, objectArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1332.9109F);
      floatArray0[1] = (-1332.9109F);
      floatArray0[2] = (float) 84;
      floatArray0[3] = (float) 84;
      floatArray0[4] = (float) 84;
      floatArray0[5] = (float) 84;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 84, 6363);
      assertEquals(5, int0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1332.9109F), (-1332.9109F), 84.0F, 84.0F, 84.0F, 84.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 5;
      ArrayUtils.shift(intArray0, (-561), 84, 930);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, 5}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2539);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, 5}, intArray1);
      assertArrayEquals(new int[] {1, 5}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 930);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1332.9109F), 84.0F, 84.0F, 84.0F, 84.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1332.9109F), (-1332.9109F), 84.0F, 84.0F, 84.0F, 84.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) (-710);
      floatArray0[1] = (float) (-31);
      floatArray0[2] = (float) (-31);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (-710);
      floatArray0[5] = (float) 10;
      floatArray0[6] = 1254.7933F;
      floatArray0[7] = (float) (short)79;
      floatArray0[8] = (float) (-710);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, 1902, (int) (short)79);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      long[] longArray0 = new long[3];
      int[] intArray0 = ArrayUtils.add((int[]) null, 0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-10L), 0);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'I';
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) '+';
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 'I';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2142199624), (-1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {73.0F, (-1.0F), 43.0F, (-1.0F), 73.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = 'I';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'I', 11);
      assertEquals(1, int1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'+', 'I'}, charArray0);
      assertFalse(int1 == int0);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray1, (float) 11);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {73.0F, (-1.0F), 43.0F, (-1.0F), 73.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-1332.9109F);
      floatArray0[2] = (-1332.9109F);
      floatArray0[3] = (float) 0;
      floatArray0[4] = 1477.036F;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = '&';
      ArrayUtils.swap(charArray0, 53, 53, 1107);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'&', '&'}, charArray0);
      
      ArrayUtils.swap(floatArray0, 2717, 1, (-1610));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1332.9109F), (-1332.9109F), 0.0F, 1477.036F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-3887);
      shortArray0[3] = (short) (-1107);
      shortArray0[4] = (short) (-2545);
      ArrayUtils.reverse(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2545), (short) (-1107), (short) (-3887), (short) (-1), (short)5}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)2570);
      assertEquals((short)2570, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)2570}, shortArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) short0;
      objectArray0[2] = (Object) short0;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      
      Double double0 = new Double(1328.6);
      assertEquals(1328.6, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1339.2860954));
      assertEquals((-1339.2860954), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((double) shortArray0[0]);
      assertEquals(2570.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals(1, shortArray0.length);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double((-1));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      Double double4 = new Double((-2162.677795049));
      assertEquals((-2162.677795049), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      Double[] doubleArray1 = new Double[4];
      Double double5 = new Double((-274.35842));
      assertEquals((-274.35842), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      
      doubleArray1[0] = double5;
      doubleArray1[1] = double2;
      doubleArray1[2] = (Double) 3296.8079808;
      doubleArray1[3] = double0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 457.50586);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {(-274.35842), 2570.0, 3296.8079808, 1328.6}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      int[] intArray0 = new int[5];
      intArray0[0] = (-1458);
      intArray0[1] = (-284);
      intArray0[2] = 0;
      intArray0[3] = (int) 'u';
      intArray0[4] = (int) 'u';
      int int0 = ArrayUtils.indexOf(intArray0, 0, (-3428));
      assertEquals(2, int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1458), (-284), 0, 117, 117}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = (-1L);
      longArray0[4] = (long) '(';
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 7);
      assertEquals(2, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-1L), 0L, 40L, 0L}, longArray0);
      
      int[] intArray0 = new int[13];
      intArray0[0] = (-1699);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(13, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = (double) 40L;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-442.508145334));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {40.0, 40.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {40.0, 40.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.swap(longArray0, 965, 117);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-1L), 0L, 40L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1699);
      intArray0[1] = (-1699);
      intArray0[2] = (-1699);
      intArray0[3] = (-1699);
      intArray0[4] = (-1699);
      intArray0[5] = (-1699);
      intArray0[6] = (-1699);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1699), (-1699), (-1699), (-1699), (-1699), (-1699), (-1699)}, intArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1699);
      doubleArray0[1] = (double) (-1699);
      doubleArray0[2] = (double) (-1699);
      doubleArray0[3] = (double) (-1699);
      doubleArray0[4] = (-442.508145334);
      doubleArray0[5] = (double) (-1699);
      doubleArray0[6] = (double) (-1699);
      doubleArray0[7] = (double) (-1699);
      doubleArray0[8] = (double) 704L;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1854.3029417));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1699.0), (-1699.0), (-1699.0), (-1699.0), (-442.508145334), (-1699.0), (-1699.0), (-1699.0), 704.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1699.0), (-1699.0), (-1699.0), (-1699.0), (-442.508145334), (-1699.0), (-1699.0), (-1699.0), 704.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray2 = new long[4];
      longArray2[0] = 1642L;
      longArray2[1] = (-1965L);
      longArray2[2] = (long) (-1699);
      longArray2[3] = (long) 117;
      ArrayUtils.swap(longArray2, (-1699), 965);
      assertEquals(4, longArray2.length);
      assertArrayEquals(new long[] {1642L, (-1965L), (-1699L), 117L}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      MutableInt mutableInt0 = new MutableInt(2);
      assertEquals("2", mutableInt0.toString());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Double double0 = new Double(2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      MutableInt mutableInt1 = new MutableInt(double0);
      assertEquals(2L, mutableInt1.longValue());
      assertEquals("2", mutableInt1.toString());
      assertEquals(2, mutableInt1.intValue());
      assertEquals((byte)2, mutableInt1.byteValue());
      assertEquals(2.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt1.toInteger());
      assertEquals(2.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt1.shortValue());
      assertEquals(2, (int)mutableInt1.getValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'G';
      charArray0[2] = 's';
      charArray0[3] = 'Y';
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = 'G';
      charArray0[7] = '>';
      ArrayUtils.swap(charArray0, 2146829572, 2, 1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'G', 's', 'Y', 'G', 'G', 'G', '>'}, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '>';
      floatArray0[1] = (float) 1;
      ArrayUtils.swap(floatArray0, (-1573), 2721, 1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {62.0F, 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean(", '");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      ArrayUtils.shift((byte[]) null, 0, 0, 53);
      ArrayUtils.reverse((Object[]) null);
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte) (-58));
      assertNull(byteArray0);
      
      ArrayUtils.shift(booleanArray1, 2, 1067, 1979);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      byte[] byteArray1 = ArrayUtils.add((byte[]) null, (byte)97);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)97}, byteArray1);
      
      ArrayUtils.reverse((byte[]) null, 328, (-1953));
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 3559.3732;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1297.0), 2570, 478.4);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, 3559.3732, 0.0, 0.0}, doubleArray0, 0.01);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      Boolean boolean0 = new Boolean("NU)4XDdQ&<G^M=K'");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      charArray0[1] = 'Z';
      charArray0[2] = 'M';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'B', 'Z', 'M'}, charArray0);
      
      ArrayUtils.shift((Object[]) null, (-343));
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)83;
      ArrayUtils.reverse(byteArray0, (-1333), 3);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-96), (byte)121, (byte)91, (byte) (-115), (byte)25, (byte)0, (byte)49, (byte)83}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)2;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2.683147F;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = 2.683147F;
      floatArray0[3] = (float) (byte)7;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 51);
      assertEquals((-1), int0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {2.683147F, (-1.0F), 2.683147F, 7.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1037L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 1037L);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1037L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-357);
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-357), 2}, intArray0);
      assertArrayEquals(new int[] {(-357), 2}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Arguments cannot both be null";
      stringArray0[0] = "Arguments cannot both be null";
      String[] stringArray1 = ArrayUtils.add(stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2;
      intArray2[1] = (-357);
      intArray2[2] = 2;
      ArrayUtils.shift(intArray2, 2, 97, 1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(3, intArray2.length);
      assertArrayEquals(new int[] {2, (-357), 2}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      float[] floatArray0 = new float[6];
      intArray0[0] = 2;
      floatArray0[1] = 32.0F;
      floatArray0[2] = (float) (-357);
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 2;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1332.9109F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 32.0F, (-357.0F), 2.0F, 1.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 32.0F, (-357.0F), 2.0F, 1.0F, 2.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = 0.1;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.1, 2.0, 2.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2272);
      intArray0[4] = (-2272);
      Double[] doubleArray0 = new Double[6];
      Double double0 = Double.valueOf(0.7);
      assertEquals(0.7, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-256.9614));
      assertEquals((-256.9614), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-521.361438659383));
      assertEquals((-521.361438659383), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-542.93163918));
      assertEquals((-542.93163918), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1034.4657));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.7, (-256.9614), (-521.361438659383), (-1.0), Double.NaN, (-542.93163918)}, doubleArray1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-542.93163918), (double) doubleArray0[5]);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.7, (-256.9614), (-521.361438659383), (-1.0), Double.NaN, (-542.93163918)}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertFalse(boolean0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.7, (-256.9614), (-521.361438659383), (-1.0), Double.NaN, (-542.93163918)}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2, (-2272));
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2272), 0, 0, 0, (-2272), 0}, intArray0);
      
      Float float0 = new Float((-521.361438659383));
      assertEquals((-521.36145F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertEquals((-521.36145F), object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-147.3135039356);
      doubleArray0[2] = (-1703.5);
      doubleArray0[3] = (-940.1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2615.189456467, (-3160), 472.72757197659);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-147.3135039356), (-1703.5), (-940.1), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-3160);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-3160);
      floatArray0[3] = (float) (-1);
      int int1 = ArrayUtils.indexOf(floatArray0, (float) (-3160), (-3160));
      assertEquals(0, int1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-3160.0F), (-1.0F), (-3160.0F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3840);
      shortArray0[1] = (short) (-376);
      shortArray0[2] = (short) (-846);
      ArrayUtils.swap(shortArray0, 0, 537, 3168);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3840), (short) (-376), (short) (-846)}, shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-376);
      intArray0[1] = (-1);
      intArray0[2] = (-3160);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-376), (-1), (-3160)}, intArray0);
      assertArrayEquals(new int[] {(-376), (-1), (-3160)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short1;
      shortArray0[1] = short2;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      short[] shortArray1 = new short[8];
      shortArray1[0] = (short) (-192);
      shortArray1[1] = (short) (-192);
      shortArray1[3] = (short) (-1087);
      shortArray1[4] = (short)2031;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-5030.72220587);
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '\u0089');
      assertNull(charArray0);
      
      short[] shortArray2 = new short[2];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = short0;
      shortArray2[1] = short0;
      short[] shortArray3 = ArrayUtils.removeAllOccurences(shortArray2, (short)0);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray3);
      assertEquals(0, shortArray3.length);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray3);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray2);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-147.3135039356);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 6363;
      floatArray0[1] = 186.0F;
      floatArray0[2] = 6363.0F;
      floatArray0[3] = (float) 6363;
      floatArray0[4] = (-1022.6F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 6363.0F, 65);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {6363.0F, 186.0F, 6363.0F, 6363.0F, (-1022.6F)}, floatArray0, 0.01F);
      
      Character character0 = new Character('C');
      assertEquals('C', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('F');
      assertEquals('F', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = Character.valueOf('J');
      assertEquals('J', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'C');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-1332.9109F);
      floatArray0[2] = (-1332.9109F);
      floatArray0[3] = (float) 0;
      floatArray0[4] = 1477.036F;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (-1332.9109F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 808.48645F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-1332.9109F), (-1332.9109F), 0.0F, 1477.036F, 0.0F, 0.0F, (-1332.9109F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1332.9109F), (-1332.9109F), 0.0F, 1477.036F, 0.0F, 0.0F, (-1332.9109F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)100;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)9, (byte)100}, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)9, (byte)100}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1332.9109F);
      doubleArray0[1] = (double) (byte)100;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-1642), 1509.0579808000002);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1642, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-213.131F), 2);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, 2, (double) 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = ArrayUtils.get(objectArray0, (-1333));
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[0] = null;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1333);
      intArray0[2] = (-1333);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.reverse(longArray0, 3496, 3496);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = 1.0;
      ArrayUtils.shuffle(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-463.13727), 3496);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 441L, 3496);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength("java.lang.Object");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.shuffle(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      Object[] objectArray0 = ArrayUtils.removeAllOccurrences((Object[]) null, (Object) "");
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)4;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray1, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(7, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean[] booleanArray3 = ArrayUtils.subarray(booleanArray0, (int) (byte)101, 2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotNull(booleanArray3);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray2, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertFalse(boolean0);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray3));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (byte)4;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-2146374983));
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 4.0, 2.0, 2.0}, doubleArray0, 0.01);
      
      int int1 = new Byte((byte)101);
      assertEquals((byte)101, int1);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-1276));
      assertNull(shortArray0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-1351.2));
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 4.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-357);
      long[] longArray0 = new long[9];
      longArray0[0] = (-384L);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (short) (-1087);
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) (short) (-1087);
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1852;
      longArray0[8] = (long) (short) (-1087);
      ArrayUtils.swap(longArray0, (-3468), (-3840), 1);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-384L), 1L, (-1087L), 2L, 1L, (-1087L), 1L, 1852L, (-1087L)}, longArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1087);
      shortArray0[1] = (short) (-1087);
      shortArray0[2] = (short) (-1087);
      shortArray0[3] = (short) (-1087);
      shortArray0[4] = (short) (-1087);
      shortArray0[5] = (short) (-1087);
      shortArray0[6] = (short) (-1087);
      shortArray0[7] = (short) (-1087);
      short[] shortArray1 = ArrayUtils.insert(943, shortArray0, (short[]) null);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1087), (short) (-1087), (short) (-1087), (short) (-1087), (short) (-1087), (short) (-1087), (short) (-1087), (short) (-1087)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1087), (short) (-1087), (short) (-1087), (short) (-1087), (short) (-1087), (short) (-1087), (short) (-1087), (short) (-1087)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short0;
      shortArray0[1] = short1;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      short[] shortArray1 = new short[8];
      shortArray1[0] = (short) (-192);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-192);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (short) (-192));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0, (-192)}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, 2061);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)1);
      assertEquals((-1), int1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)36, (byte)36}, byteArray0);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = 1.0;
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-669.6430477), (-669.6430477));
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 216.72528F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = 'b';
      charArray0[2] = '[';
      charArray0[3] = ':';
      charArray0[4] = '>';
      charArray0[5] = '\\';
      charArray0[6] = 'P';
      charArray0[7] = '[';
      charArray0[8] = 'b';
      ArrayUtils.shift(charArray0, (-167));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\\', 'P', '[', 'b', '[', 'b', '[', ':', '>'}, charArray0);
      
      int int0 = ArrayUtils.indexOf(floatArray1, 216.72528F, (-167));
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Byte[] byteArray1 = new Byte[3];
      Byte byte0 = Byte.valueOf((byte) (-53));
      assertEquals((byte) (-53), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray1[0] = byte0;
      byte byte1 = (byte) (-100);
      Byte byte2 = new Byte((byte) (-100));
      assertEquals((byte) (-100), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray1[1] = byte2;
      try { 
        Byte.valueOf("RH,zy6Ps&EakogVS", (int) byte1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -100 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 1.0;
      ArrayUtils.shift((char[]) null, (-379));
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-2142));
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = 'R';
      charArray0[2] = 'f';
      charArray0[3] = 'G';
      charArray0[4] = 'K';
      charArray0[5] = 'G';
      charArray0[6] = 'X';
      charArray0[7] = '%';
      ArrayUtils.shift(charArray0, (-1994));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'f', 'G', 'K', 'G', 'X', '%', '7', 'R'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-70);
      ArrayUtils.shift(byteArray0, 2430, (int) (byte) (-89), (-1));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)111, (byte) (-44), (byte)122, (byte)84, (byte) (-45), (byte) (-70)}, byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-89);
      intArray0[1] = (int) (byte)122;
      intArray0[2] = 2076;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-89), 122, 2076}, intArray0);
      
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = ArrayUtils.toString((Object) float0, "vn\"MUO{4x");
      assertEquals("1.0", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = 'O';
      charArray0[2] = 'h';
      charArray0[3] = '>';
      charArray0[4] = 'X';
      charArray0[5] = '>';
      ArrayUtils.shift(charArray0, (-31));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'O', 'h', '>', 'X', '>', 'h'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)4;
      int[] intArray0 = new int[10];
      intArray0[1] = (int) (byte)101;
      Double double0 = new Double(2467.6819138);
      assertEquals(2467.6819138, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 2467.6819138);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.swap(doubleArray1, 0, 101);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-2146283099));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(10, intArray0.length);
      assertEquals(10, intArray1.length);
      assertArrayEquals(new int[] {0, 101, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 101, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (byte)4;
      longArray2[1] = (long) (-2146283099);
      longArray2[2] = (long) (-2146283099);
      longArray2[4] = (long) 0;
      longArray2[5] = (long) (byte)4;
      longArray2[6] = (long) (byte)4;
      long[] longArray3 = ArrayUtils.removeAllOccurrences(longArray2, (-340L));
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotNull(longArray3);
      assertEquals(7, longArray3.length);
      assertEquals(7, longArray2.length);
      assertArrayEquals(new long[] {4L, (-2146283099L), (-2146283099L), 0L, 0L, 4L, 4L}, longArray3);
      assertArrayEquals(new long[] {4L, (-2146283099L), (-2146283099L), 0L, 0L, 4L, 4L}, longArray2);
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)29);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {(byte)29, (byte)101, (byte)4}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 3559.3732;
      doubleArray0[3] = 3127.7542953;
      doubleArray0[4] = Double.NaN;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3127.7542953, 43, (-5030.72220587));
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0, 3559.3732, 3127.7542953, Double.NaN}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertEquals(4, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(43);
      assertEquals(43, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(23351);
      assertEquals(23351, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      integerArray0[3] = integer3;
      boolean boolean0 = ArrayUtils.isNotEmpty(integerArray0);
      assertTrue(boolean0);
      assertEquals(4, integerArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-779);
      ArrayUtils.reverse(shortArray0, (int) integerArray0[1], 11);
      assertEquals(1, shortArray0.length);
      assertEquals(4, integerArray0.length);
      assertArrayEquals(new short[] {(short) (-779)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Character character0 = new Character('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-1L));
      assertEquals((-1L), (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      boolean boolean1 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '+';
      charArray0[2] = 'I';
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'I';
      floatArray0[1] = (float) '+';
      floatArray0[2] = (float) '+';
      floatArray0[3] = (float) '+';
      floatArray0[4] = (float) '+';
      floatArray0[5] = (float) 0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 43.0F, 0);
      assertEquals((-1), int1);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {73.0F, 43.0F, 43.0F, 43.0F, 43.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '+';
      intArray0[1] = 0;
      intArray0[2] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 2);
      assertFalse(boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {43, 0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)110;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)56);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)110}, byteArray0);
      assertArrayEquals(new byte[] {(byte)56, (byte)110}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[2] = (-1680L);
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-736.1512);
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((short) (-679));
      assertEquals((short) (-679), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short short1 = (short)5;
      Short short2 = new Short((short)5);
      assertEquals((short)5, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      shortArray0[1] = short2;
      Short short3 = new Short((short) shortArray0[0]);
      assertEquals((short) (-679), (short)short3);
      assertNotNull(short3);
      assertEquals(8, shortArray0.length);
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      
      shortArray0[2] = short3;
      Short short4 = new Short((short) (-357));
      assertEquals((short) (-357), (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      
      shortArray0[3] = short4;
      Short short5 = new Short((short) shortArray0[3]);
      assertEquals((short) (-357), (short)short5);
      assertNotNull(short5);
      assertEquals(8, shortArray0.length);
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short4));
      
      shortArray0[4] = short5;
      Short short6 = new Short((short) shortArray0[0]);
      assertEquals((short) (-679), (short)short6);
      assertNotNull(short6);
      assertEquals(8, shortArray0.length);
      assertFalse(short6.equals((Object)short1));
      assertTrue(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short5));
      assertTrue(short6.equals((Object)short3));
      
      shortArray0[5] = short6;
      short short7 = (short)6;
      Short short8 = new Short((short)6);
      assertEquals((short)6, (short)short8);
      assertNotNull(short8);
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short6));
      assertFalse(short8.equals((Object)short0));
      assertTrue(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short4));
      assertFalse(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short5));
      assertFalse(short8.equals((Object)short2));
      
      shortArray0[6] = short8;
      Short short9 = new Short(short1);
      assertEquals((short)5, (short)short9);
      assertNotNull(short9);
      assertFalse(short9.equals((Object)short6));
      assertFalse(short9.equals((Object)short8));
      assertFalse(short9.equals((Object)short0));
      assertTrue(short9.equals((Object)short2));
      assertFalse(short9.equals((Object)short7));
      assertFalse(short9.equals((Object)short5));
      assertTrue(short9.equals((Object)short1));
      assertFalse(short9.equals((Object)short3));
      assertFalse(short9.equals((Object)short4));
      assertFalse(short1 == short7);
      
      shortArray0[7] = short9;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      short[] shortArray2 = new short[5];
      shortArray2[0] = (short) shortArray0[0];
      shortArray2[1] = (short) shortArray0[3];
      shortArray2[2] = (short) shortArray0[3];
      shortArray2[3] = (short) shortArray0[0];
      shortArray2[4] = short7;
      short[] shortArray3 = ArrayUtils.subarray(shortArray2, (-2146544478), (int) short1);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray2, shortArray3);
      assertNotNull(shortArray3);
      assertEquals(5, shortArray3.length);
      assertEquals(5, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-679), (short) (-357), (short) (-357), (short) (-679), (short)6}, shortArray3);
      assertArrayEquals(new short[] {(short) (-679), (short) (-357), (short) (-357), (short) (-679), (short)6}, shortArray2);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(short1 == short7);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[5] = 0;
      intArray0[1] = (-888);
      intArray0[2] = 76;
      intArray0[3] = (-874);
      Integer integer0 = new Integer(76);
      assertEquals(76, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 76, 2147221806);
      assertEquals(2, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-888), 76, (-874), 0, 0}, intArray0);
      
      MockRandom mockRandom0 = new MockRandom((-874));
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-874);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, (-874));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(", Length: ");
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = new Boolean(true);
      assertTrue(boolean5);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertTrue(boolean6);
      assertNotNull(boolean6);
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean3));
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = new Boolean(true);
      assertTrue(boolean7);
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean3));
      
      booleanArray0[7] = boolean7;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1139.8167F;
      ArrayUtils.shift(floatArray0, 49);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1139.8167F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = 'A';
      charArray0[2] = '9';
      charArray0[3] = ')';
      charArray0[4] = ')';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'S', 'A', '9', ')', ')'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short)36;
      shortArray0[2] = (short)1686;
      shortArray0[3] = (short) (-800);
      shortArray0[4] = (short) (-1039);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-800);
      shortArray0[7] = (short)38;
      shortArray0[8] = (short)32449;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)7, (short)36, (short)1686, (short) (-800), (short) (-1039), (short) (-1), (short) (-800), (short)38, (short)32449}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2031.8444, 66, (-4577.60805));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 66;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[4] = (float) 0;
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) (-1));
      assertFalse(boolean1);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {66.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1139.8167F;
      ArrayUtils.shift(floatArray0, 49);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1139.8167F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      charArray0[1] = 'A';
      charArray0[2] = '9';
      charArray0[3] = ')';
      charArray0[4] = '7';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'S', 'A', '9', ')', '7'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short)36;
      shortArray0[2] = (short)1686;
      shortArray0[3] = (short) (-800);
      shortArray0[4] = (short) (-1039);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)643;
      shortArray0[7] = (short)38;
      shortArray0[8] = (short)32449;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)7, (short)36, (short)1686, (short) (-800), (short) (-1039), (short) (-1), (short)643, (short)38, (short)32449}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-544);
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-544)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2146466190;
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = 'Q';
      int int0 = ArrayUtils.indexOf(charArray0, 'g', 2146466190);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'v', 'Q'}, charArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1379);
      shortArray0[1] = (short) (-874);
      shortArray0[2] = (short)367;
      shortArray0[3] = (short) (-329);
      shortArray0[4] = (short)1823;
      shortArray0[5] = (short)1549;
      shortArray0[6] = (short)2652;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) (short)1823);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1823, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-70);
      ArrayUtils.shift(byteArray0, 2430, (int) (byte) (-89), (-1));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)111, (byte) (-44), (byte)122, (byte)84, (byte) (-45), (byte) (-70)}, byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-89);
      intArray0[1] = (int) (byte)122;
      intArray0[2] = 2076;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-89), 122, 2076}, intArray0);
      
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = ArrayUtils.toString((Object) float0, "vn\"MUO{4x");
      assertEquals("1.0", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = 'Z';
      charArray0[2] = 'M';
      charArray0[3] = '>';
      charArray0[4] = 'O';
      charArray0[5] = ':';
      ArrayUtils.shuffle(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'M', '>', 'O', ':', 'h'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[9];
      int int0 = ArrayUtils.indexOf(charArray0, 'Z', (-583));
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'Z';
      longArray0[1] = 2147483647L;
      longArray0[2] = (-2114L);
      longArray0[3] = (long) 'X';
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (-583));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {90L, 2147483647L, (-2114L), 88L}, longArray0);
      assertArrayEquals(new long[] {(-583L), 90L, 2147483647L, (-2114L), 88L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Character[] characterArray0 = new Character[7];
      char char0 = 'G';
      Character character0 = Character.valueOf('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertEquals('G', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('X');
      assertEquals('X', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      characterArray0[2] = character2;
      Character character3 = new Character('Z');
      assertEquals('Z', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      
      characterArray0[3] = character3;
      Character character4 = new Character('\"');
      assertEquals('\"', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('X');
      assertEquals('X', (char)character5);
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      
      characterArray0[5] = character5;
      Character character6 = new Character((char) character4);
      assertEquals('\"', (char)character6);
      assertNotNull(character6);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character5));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)character4));
      
      characterArray0[6] = character6;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(7, characterArray0.length);
      assertArrayEquals(new char[] {'G', 'G', 'X', 'Z', '\"', 'X', '\"'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.subarray(charArray0, (-1), (int) char0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray2.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2272);
      intArray0[4] = (-2272);
      Character character0 = Character.valueOf('3');
      assertEquals('3', (char)character0);
      assertNotNull(character0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)1;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-121), (byte)1}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)107);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-121), (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-121), (byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Character character1 = new Character('3');
      assertEquals('3', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) character1);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertTrue(character1.equals((Object)character0));
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {(-2272), 0, 0, 0, (-2272), 0}, intArray0);
      assertArrayEquals(new int[] {(-2272), 0, 0, 0, (-2272), 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short1;
      shortArray0[1] = short2;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      short[] shortArray1 = new short[8];
      shortArray1[0] = (short) (-192);
      shortArray1[1] = (short) (-192);
      shortArray1[3] = (short) (-1087);
      shortArray1[4] = (short)2031;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-5030.72220587);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), (int) (short) (-192), 1979.4);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-5030.72220587)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)2031;
      floatArray0[1] = (float) short0;
      floatArray0[2] = (float) (short)2031;
      floatArray0[3] = (float) (short) (-192);
      floatArray0[4] = (float) (short) (-1087);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) short0;
      floatArray0[7] = (float) (short) (-192);
      int int1 = ArrayUtils.indexOf(floatArray0, (float) (short) (-192), (int) (short)0);
      assertEquals(3, int1);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2031.0F, 0.0F, 2031.0F, (-192.0F), (-1087.0F), (-1.0F), 0.0F, (-192.0F)}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      
      ArrayUtils.swap(shortArray1, (int) (short) (-192), (-1051), (-2506));
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-192), (short) (-192), (short)0, (short) (-1087), (short)2031, (short)0, (short)0, (short)0}, shortArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)2031;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short) (-1087);
      intArray0[3] = (-1051);
      intArray0[4] = (-1);
      intArray0[5] = 45;
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (short) (-192);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2031, 0, (-1087), (-1051), (-1), 45, 0, (-192)}, intArray1);
      assertArrayEquals(new int[] {2031, 0, (-1087), (-1051), (-1), 45, 0, (-192)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short)52;
      shortArray0[2] = (short)1325;
      shortArray0[3] = (short)65;
      shortArray0[4] = (short)1643;
      shortArray0[5] = (short) (-329);
      shortArray0[6] = (short) (-24392);
      shortArray0[7] = (short)4;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1), (int) (short) (-329));
      assertEquals((-1), int0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)9, (short)52, (short)1325, (short)65, (short)1643, (short) (-329), (short) (-24392), (short)4}, shortArray0);
      
      Float float0 = new Float((double) (short)1643);
      assertEquals(1643.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'w';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 90, 916);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'|', 'w'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int0 = 2;
      MutableInt mutableInt0 = new MutableInt(2);
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((-617));
      assertEquals((-617.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-617), mutableInt1.intValue());
      assertEquals((short) (-617), mutableInt1.shortValue());
      assertEquals((-617.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-617L), mutableInt1.longValue());
      assertEquals("-617", mutableInt1.toString());
      assertEquals((byte) (-105), mutableInt1.byteValue());
      assertEquals((-617), (int)mutableInt1.getValue());
      assertEquals((-617), (int)mutableInt1.toInteger());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = (int) ')';
      intArray0[2] = (int) ')';
      intArray0[3] = (int) ')';
      intArray0[4] = (int) ')';
      intArray0[5] = (int) ')';
      intArray0[6] = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 41, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-147.3135039356);
      doubleArray0[2] = (-1703.5);
      doubleArray0[3] = (-940.1);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      Float float0 = new Float(99.0F);
      assertEquals(99.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-940.1));
      assertEquals((-940.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {99.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      ArrayUtils.shift((boolean[]) null, 1, 6335, 48);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)81);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shift((boolean[]) null, 436, 2, 2016);
      byte[] byteArray2 = ArrayUtils.add(byteArray0, (byte)2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      ArrayUtils.reverse(byteArray0, 0, (int) (byte)81);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = Float.valueOf((-841.8F));
      assertEquals((-841.8F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-521.18F));
      assertEquals((-521.18F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      charArray0[1] = '(';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '}';
      longArray0[1] = (long) '(';
      int int0 = ArrayUtils.indexOf(longArray0, 0L, 48);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {125L, 40L, 0L}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '}';
      intArray0[1] = (int) '(';
      intArray0[2] = (int) '(';
      ArrayUtils.reverse(intArray0, 125, (-828));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {125, 40, 40}, intArray0);
      
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(125L);
      assertEquals(125.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[3] = double2;
      char[] charArray2 = ArrayUtils.clone(charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray1, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0, (double) 0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (-1));
      assertEquals((-1), int1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1945;
      shortArray0[1] = (short)1945;
      shortArray0[2] = (short)1945;
      shortArray0[3] = (short)1945;
      ArrayUtils.shift(shortArray0, (int) (short)1945, (-1048), 504);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1945, (short)1945, (short)1945, (short)1945}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = (double) ';';
      doubleArray0[1] = (double) '(';
      doubleArray0[2] = 2008.0;
      doubleArray0[4] = 5084.5579808;
      doubleArray0[11] = 5084.5579808;
      doubleArray0[4] = 51.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 66);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(15, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-264.60266092584), (-264.60266092584));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      ArrayUtils.swap(intArray0, 1, 2075);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'v';
      charArray0[4] = 'v';
      charArray0[5] = 'v';
      charArray0[6] = 'v';
      charArray0[7] = 'v';
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      assertArrayEquals(new int[] {1, 1, 1}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (byte) (-1));
      assertFalse(boolean1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertTrue(boolean1 == boolean0);
      
      Short[] shortArray1 = new Short[3];
      Short short0 = new Short((byte) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      shortArray1[0] = short0;
      Short short1 = new Short((short) shortArray1[0]);
      assertEquals((short) (-1), (short)short1);
      assertNotNull(short1);
      assertEquals(3, shortArray1.length);
      assertTrue(short1.equals((Object)short0));
      
      shortArray1[1] = short1;
      Short short2 = new Short((short) shortArray1[0]);
      assertEquals((short) (-1), (short)short2);
      assertNotNull(short2);
      assertEquals(3, shortArray1.length);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      shortArray1[2] = short2;
      Short[] shortArray2 = ArrayUtils.addAll(shortArray1, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(3, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-357);
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-357), 2}, intArray0);
      assertArrayEquals(new int[] {(-357), 2}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 1);
      assertEquals((-1), int0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)36;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)76);
      assertEquals((-1), int1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-7), (byte)36}, byteArray0);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Character character0 = new Character('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(914L);
      assertEquals(914L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      boolean boolean1 = ArrayUtils.isSameLength(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 463.33727000000005;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 463.33727000000005);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {463.33727000000005}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {463.33727000000005, 463.33727000000005}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (-21), (-21), (-21));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3080;
      Byte byte0 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte0);
      assertNotNull(byte0);
      
      Long long0 = new Long(4852L);
      assertEquals(4852L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertFalse(boolean0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)3080, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Character character0 = Character.valueOf('C');
      assertEquals('C', (char)character0);
      assertNotNull(character0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) long0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) character0;
      objectArray0[6] = (Object) long0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1]);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(7, objectArray0.length);
      
      ArrayUtils.swap((float[]) null, 42, 42);
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 42;
      intArray0[1] = (-21);
      intArray0[2] = (int) (byte)100;
      intArray0[3] = (int) (short)3080;
      boolean boolean1 = ArrayUtils.contains(intArray0, Integer.MAX_VALUE);
      assertFalse(boolean1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {42, (-21), 100, 3080}, intArray0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[3] = (-268L);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(14, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-268L), 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "a/";
      stringArray0[1] = "Arguments cannot both be null";
      String[] stringArray1 = Locale.getISOCountries();
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(250, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1159);
      shortArray0[1] = (short) (-2049);
      shortArray0[2] = (short)8192;
      shortArray0[3] = (short) (-4143);
      shortArray0[4] = (short)65;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)6212;
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-4143);
      shortArray1[1] = (short) (-4143);
      shortArray1[2] = (short)8192;
      shortArray1[3] = (short)65;
      shortArray1[4] = (short)85;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(boolean0);
      assertEquals(5, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4143), (short) (-4143), (short)8192, (short)65, (short)85}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1159), (short) (-2049), (short)8192, (short) (-4143), (short)65, (short)1, (short)6212}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (-2607.7388F), (-3299));
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)578;
      shortArray0[1] = (short)59;
      shortArray0[2] = (short)551;
      ArrayUtils.swap(shortArray0, (-1073741824), 2029, (int) (short)578);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)578, (short)59, (short)551}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 7;
      longArray0[1] = (long) 7;
      longArray0[2] = (long) 7;
      longArray0[3] = (long) 7;
      longArray0[4] = (long) 7;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-384L), 7);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {7L, 7L, 7L, 7L, 7L}, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1699);
      intArray0[3] = (-1);
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1699), (-1)}, intArray0);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, (double) 7L);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      ArrayUtils.swap(longArray0, (-1), (-1));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {7L, 7L, 7L, 7L, 7L}, longArray0);
      
      ArrayUtils.reverse(longArray0, (-1699), (-1));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {7L, 7L, 7L, 7L, 7L}, longArray0);
      
      Double[] doubleArray3 = ArrayUtils.toObject(doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-2145159530), 15);
      assertNull(longArray0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, objectArray0.length);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(196.0);
      assertEquals(196.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (-2145159530);
      doubleArray1[2] = (double) doubleArray0[0];
      doubleArray1[3] = 51.0;
      doubleArray1[4] = (double) 1921;
      doubleArray1[5] = 51.0;
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 2672, 6);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, (-2.14515953E9), (-1.0), 51.0, 1921.0, 51.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      char char0 = ';';
      char char1 = 'q';
      int int0 = (-1284);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) ';';
      doubleArray0[2] = (double) (short)1936;
      doubleArray0[3] = (double) ';';
      doubleArray0[4] = (double) 'q';
      doubleArray0[5] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 0);
      assertEquals("{0, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 59.0, 1936.0, 59.0, 113.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)905, 49);
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      // Undeclared exception!
      try { 
        bitSet1.clear((-1284));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1284
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[20];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      assertEquals(1, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      
      objectArray1[0] = object0;
      objectArray1[1] = (Object) Double.NaN;
      objectArray1[2] = (Object) Double.NaN;
      objectArray1[3] = (Object) 0.0;
      objectArray1[4] = (Object) 0.0;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(boolean1);
      assertEquals(1, objectArray0.length);
      assertEquals(5, objectArray1.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 1.0;
      byte[] byteArray0 = new byte[3];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-669.6430477), (-669.6430477));
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 216.72528F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-167));
      assertEquals((-167), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      String string0 = "";
      try { 
        Integer.valueOf("", (-167));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -167 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-4195L);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-4195L);
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (-4195L);
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(6, objectArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte) (-87));
      assertNull(byteArray0);
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Long long0 = new Long(2043L);
      assertEquals(2043L, (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) long0);
      assertEquals((-1), int0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Float float0 = new Float((-2042.9F));
      assertEquals((-2042.9F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertEquals((-2042.9F), object0);
      assertNotNull(object0);
      
      MutableInt mutableInt0 = new MutableInt((Number) 2);
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) mutableInt0);
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2, mutableInt0.intValue());
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '^';
      doubleArray0[1] = (double) 2;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-2042.9F), 1);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {94.0, 2.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-1332.9109F);
      floatArray0[2] = (-1332.9109F);
      floatArray0[3] = (float) 0;
      floatArray0[4] = 1477.036F;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      ArrayUtils.shift(byteArray0, (-1), (-2114), 365);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-58)}, byteArray0);
      
      ArrayUtils.reverse((Object[]) null);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-58));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-58)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Double double0 = new Double(365);
      assertEquals(365.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) double0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 0;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 406.4106639);
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      long[] longArray2 = ArrayUtils.insert(0, longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray2);
      assertEquals(11, longArray2.length);
      assertEquals(3, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      doubleArray0[1] = (double) 0;
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(boolean1 == boolean0);
      
      Short short0 = new Short((short)12);
      assertEquals((short)12, (short)short0);
      assertNotNull(short0);
      
      Double double0 = new Double((-1407.33804));
      assertEquals((-1407.33804), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean2 = ArrayUtils.isSameType(short0, double0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = ArrayUtils.isSameLength(longArray2, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertFalse(boolean3);
      assertEquals(11, longArray2.length);
      assertEquals(3, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean4);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 2, 2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(boolean0);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false, false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2);
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-670.6430477), (int) (byte)28, (double) 2);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte)28);
      assertNull(shortArray0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1147.877);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-38);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-1), (-5), (double) (byte)32);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = Float.valueOf(1.0F);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)9;
      short short0 = (short)52;
      shortArray0[1] = (short)52;
      shortArray0[2] = (short)1325;
      shortArray0[3] = (short)65;
      shortArray0[4] = (short)1643;
      shortArray0[5] = (short) (-329);
      shortArray0[6] = (short) (-24392);
      shortArray0[7] = (short)4;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1), (int) (short) (-329));
      assertEquals((-1), int0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)9, (short)52, (short)1325, (short)65, (short)1643, (short) (-329), (short) (-24392), (short)4}, shortArray0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) (short)1643);
      assertEquals(1643.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      int[] intArray0 = new int[4];
      ArrayUtils.shift(intArray0, (-209), (-602), (-602));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Double double0 = new Double(0.0F);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[1];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Character character0 = Character.valueOf('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      ArrayUtils.swap((double[]) null, 1203, 1203, (-711));
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-1332.9109F);
      floatArray0[2] = (-1332.9109F);
      floatArray0[3] = (float) 0;
      floatArray0[4] = 1477.036F;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      ArrayUtils.shift(byteArray0, (-1), (-2114), 365);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-58)}, byteArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-58);
      shortArray0[1] = (short) (byte) (-58);
      shortArray0[2] = (short)8;
      shortArray0[3] = (short) (byte) (-58);
      shortArray0[4] = (short) (byte) (-58);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)2969);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-58), (short) (-58), (short)8, (short) (-58), (short) (-58)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-58), (short) (-58), (short)8, (short) (-58), (short) (-58)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2084);
      shortArray0[1] = (short) (-2084);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2084), (short) (-2084)}, shortArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = '{';
      charArray0[2] = 't';
      charArray0[3] = '1';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'T');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'T', '{', 't', '1'}, charArray0);
      assertArrayEquals(new char[] {'{', 't', '1'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-758));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-2084), (short) (-2084)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2084), (short) (-2084)}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      short[] shortArray0 = new short[21];
      shortArray0[0] = (short)98;
      shortArray0[4] = (short)98;
      float[] floatArray0 = new float[1];
      shortArray0[13] = (short)0;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (short)98);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '1';
      MutableInt mutableInt0 = new MutableInt(10);
      assertEquals(10, (int)mutableInt0.getValue());
      assertEquals(10, (int)mutableInt0.toInteger());
      assertEquals((byte)10, mutableInt0.byteValue());
      assertEquals("10", mutableInt0.toString());
      assertEquals(10, mutableInt0.intValue());
      assertEquals(10.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)10, mutableInt0.shortValue());
      assertEquals(10L, mutableInt0.longValue());
      assertEquals(10.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(10);
      assertEquals((short)10, mutableInt1.shortValue());
      assertEquals(10, (int)mutableInt1.getValue());
      assertEquals(10, (int)mutableInt1.toInteger());
      assertEquals(10.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((byte)10, mutableInt1.byteValue());
      assertEquals("10", mutableInt1.toString());
      assertEquals(10.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(10, mutableInt1.intValue());
      assertEquals(10L, mutableInt1.longValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      mutableIntArray0[0] = mutableInt1;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertEquals(2, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {';', '1', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = mutableInt1.compareTo(mutableInt0);
      assertEquals(10, (int)mutableInt0.getValue());
      assertEquals(10, (int)mutableInt0.toInteger());
      assertEquals((byte)10, mutableInt0.byteValue());
      assertEquals("10", mutableInt0.toString());
      assertEquals(10, mutableInt0.intValue());
      assertEquals(10.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)10, mutableInt0.shortValue());
      assertEquals(10L, mutableInt0.longValue());
      assertEquals(10.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)10, mutableInt1.shortValue());
      assertEquals(10, (int)mutableInt1.getValue());
      assertEquals(10, (int)mutableInt1.toInteger());
      assertEquals(10.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((byte)10, mutableInt1.byteValue());
      assertEquals("10", mutableInt1.toString());
      assertEquals(10.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(10, mutableInt1.intValue());
      assertEquals(10L, mutableInt1.longValue());
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      assertEquals(0, int0);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'u';
      floatArray0[1] = (float) 10;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {117.0F, 10.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.swap((Object[]) mutableIntArray1, 1537, 3347, 3347);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertEquals(2, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray0.equals((Object)mutableIntArray1));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 1537);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {117.0F, 10.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {117.0F, 10.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (-1333);
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 405.4106639, (-1284));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      shortArray0[1] = (short)1936;
      short short0 = (short)18;
      shortArray0[2] = (short)1936;
      shortArray0[3] = (short)1936;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short) (-1), (int) (short)1936);
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)1936, (short)1936, (short)1936}, shortArray0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        bitSet1.clear((int) (short) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)127;
      shortArray0[2] = (short)20902;
      shortArray0[3] = (short) (-12550);
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)20902;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 2041);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = '~';
      charArray0[2] = 'w';
      charArray0[3] = '7';
      charArray0[4] = 'U';
      charArray0[5] = 'd';
      char[] charArray1 = ArrayUtils.add(charArray0, '}');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'t', '~', 'w', '7', 'U', 'd', '}'}, charArray1);
      assertArrayEquals(new char[] {'t', '~', 'w', '7', 'U', 'd'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-233L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, 101, 952, (-2726));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-233L);
      floatArray0[1] = (float) 952;
      floatArray0[2] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-233.0F), 952.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-233.0F), 952.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-357);
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-357), 2}, intArray0);
      assertArrayEquals(new int[] {(-357), 2}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Arguments cannot both be null";
      stringArray0[1] = "Arguments cannot both be null";
      String[] stringArray1 = ArrayUtils.add(stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2;
      intArray2[1] = (-357);
      intArray2[2] = 2;
      ArrayUtils.shift(intArray2, 2, 97, 1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(3, intArray2.length);
      assertArrayEquals(new int[] {2, (-357), 2}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2;
      floatArray0[1] = 32.0F;
      floatArray0[2] = (float) (-357);
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 2;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1332.9109F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {2.0F, 32.0F, (-357.0F), 2.0F, 1.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.0F, 32.0F, (-357.0F), 2.0F, 1.0F, 2.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 0;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 406.4106639);
      assertEquals(5, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte) (-26);
      ArrayUtils.reverse(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-26), (byte)127, (byte)0, (byte)37, (byte)2, (byte)0, (byte)110}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean2);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-26), (byte)127, (byte)0, (byte)37, (byte)2, (byte)0, (byte)110}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ArrayUtils.reverse(longArray0, (int) (byte)0, (-888));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)106;
      long[] longArray0 = ArrayUtils.insert((int) (byte)101, (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 40.0;
      doubleArray0[1] = (double) (byte)101;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {40.0, 101.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = '1';
      charArray0[2] = 'H';
      charArray0[3] = ';';
      charArray0[4] = 'L';
      charArray0[5] = 'L';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'m', '1', 'H', ';', 'L', 'L'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-357);
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-357), 2}, intArray0);
      assertArrayEquals(new int[] {(-357), 2}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-2147483648L));
      assertEquals((-2147483648L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1L);
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long(12L);
      assertEquals(12L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      longArray0[2] = long2;
      Long long3 = new Long(52L);
      assertEquals(52L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      
      longArray0[3] = long3;
      Long long4 = new Long((long) longArray0[0]);
      assertEquals((-2147483648L), (long)long4);
      assertNotNull(long4);
      assertEquals(5, longArray0.length);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      
      longArray0[4] = long4;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte)121;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)121, (-2493));
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-121), (byte) (-121), (byte) (-86), (byte)59, (byte)36, (byte) (-30), (byte)121}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (int) (byte)59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 5084.5579808);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {5084.5579808}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) doubleArray2, (Object) null, Integer.MAX_VALUE);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int1 == int0);
      
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      double[] doubleArray3 = ArrayUtils.addFirst((double[]) null, (double) 1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertEquals(1, doubleArray3.length);
      assertArrayEquals(new double[] {1.0}, doubleArray3, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-1);
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte)26);
      assertEquals((-1), int2);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)10, (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = 'Y';
      charArray0[2] = 'X';
      Double double0 = new Double((-3258.0));
      assertEquals((-3258.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(673.3592787011607);
      assertEquals(673.3592787011607, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-3258.0), 673.3592787011607}, doubleArray1, 0.01);
      
      ArrayUtils.shift(doubleArray1, (-2911), 13, 1279);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {673.3592787011607, (-3258.0)}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'X';
      longArray0[1] = (long) 'Y';
      longArray0[2] = (long) 'Y';
      longArray0[3] = (long) 'X';
      longArray0[4] = (long) (-2911);
      longArray0[5] = (long) 'Y';
      longArray0[6] = (long) '1';
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-2911L);
      doubleArray2[1] = 673.3592787011607;
      doubleArray2[2] = 673.3592787011607;
      double[] doubleArray3 = ArrayUtils.removeAllOccurrences(doubleArray2, 40.0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertArrayEquals(new double[] {(-2911.0), 673.3592787011607, 673.3592787011607}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2911.0), 673.3592787011607, 673.3592787011607}, doubleArray3, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-2), (byte) (-117), (byte) (-120), (byte)67, (byte)55, (byte)67, (byte) (-58), (byte)1}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 808.48645F;
      floatArray0[1] = (-1332.9109F);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[2] = (byte) (-60);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)94, (byte)0, (byte) (-60)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)94, (byte)0, (byte) (-60)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)94;
      doubleArray0[1] = (double) (-1332.9109F);
      doubleArray0[2] = (double) (byte)94;
      doubleArray0[3] = 2589.502771667157;
      doubleArray0[4] = (double) (byte) (-60);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1857.8966496, (int) (byte) (-1));
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {94.0, (-1332.910888671875), 94.0, 2589.502771667157, (-60.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[0];
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1577.06);
      doubleArray1[1] = (-3841.02707555);
      doubleArray1[2] = (-2668.4279708596705);
      doubleArray1[3] = (-4726.31489);
      doubleArray1[4] = (-558.79);
      doubleArray1[5] = (-2917.31109);
      doubleArray1[6] = (-2510.118558679);
      doubleArray1[7] = 1.0;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray1, doubleArray1);
      assertTrue(boolean1);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-1577.06), (-3841.02707555), (-2668.4279708596705), (-4726.31489), (-558.79), (-2917.31109), (-2510.118558679), 1.0}, doubleArray1, 0.01);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)3103);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)3103}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3103, (int) (short) (-2510));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(bitSet0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (-558.79));
      assertEquals(4, int0);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-1577.06), (-3841.02707555), (-2668.4279708596705), (-4726.31489), (-558.79), (-2917.31109), (-2510.118558679), 1.0}, doubleArray1, 0.01);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = '6';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertArrayEquals(new char[] {'K', '6'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = 'Y';
      charArray0[2] = 'X';
      Double double0 = new Double((-3258.0));
      assertEquals((-3258.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(673.3592787011607);
      assertEquals(673.3592787011607, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-3258.0), 673.3592787011607}, doubleArray1, 0.01);
      
      ArrayUtils.shift(doubleArray1, (-2911), 13, 1279);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {673.3592787011607, (-3258.0)}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'X';
      longArray0[1] = (long) 'Y';
      longArray0[2] = (long) 'Y';
      longArray0[3] = (long) 'X';
      longArray0[4] = (long) (-2911);
      longArray0[5] = (long) 'Y';
      longArray0[6] = (long) '1';
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-2911L);
      doubleArray2[1] = 673.3592787011607;
      doubleArray2[2] = 673.3592787011607;
      double[] doubleArray3 = ArrayUtils.removeAllOccurrences(doubleArray2, 40.0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertArrayEquals(new double[] {(-2911.0), 673.3592787011607, 673.3592787011607}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2911.0), 673.3592787011607, 673.3592787011607}, doubleArray3, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-2), (byte) (-117), (byte) (-120), (byte)67, (byte)55, (byte) (-22), (byte) (-58), (byte)1}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[0] = (byte)4;
      int[] intArray0 = new int[10];
      intArray0[0] = (int) (byte)4;
      intArray0[1] = (int) (byte)68;
      Double double0 = new Double(2467.6819138);
      assertEquals(2467.6819138, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 2467.6819138);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-2146283099));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(10, intArray0.length);
      assertEquals(10, intArray1.length);
      assertArrayEquals(new int[] {4, 68, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {4, 68, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray2);
      assertNotSame(longArray2, longArray1);
      assertFalse(boolean0);
      assertEquals(7, longArray2.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-3081));
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3081)}, shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[0] = (byte)4;
      int[] intArray0 = new int[10];
      intArray0[0] = (int) (byte)4;
      intArray0[1] = (int) (byte)68;
      Double double0 = new Double(2467.6819138);
      assertEquals(2467.6819138, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 2467.6819138);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.swap(doubleArray1, 4, 68);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-2146283099));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(10, intArray0.length);
      assertEquals(10, intArray1.length);
      assertArrayEquals(new int[] {4, 68, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {4, 68, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (byte)0;
      longArray2[1] = (long) (-2146283099);
      ArrayUtils.shift((int[]) null, 1171, 13, (-2258));
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)4;
      int[] intArray0 = new int[10];
      intArray0[0] = (int) (byte)4;
      intArray0[1] = (int) (byte)101;
      Double double0 = new Double(2467.6819138);
      assertEquals(2467.6819138, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 2467.6819138);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.swap(doubleArray1, 4, 101);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-2146283099));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(10, intArray0.length);
      assertEquals(10, intArray1.length);
      assertArrayEquals(new int[] {4, 101, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {4, 101, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (byte)4;
      longArray2[1] = (long) (-2146283099);
      longArray2[2] = (long) (-2146283099);
      longArray2[3] = (long) (byte)101;
      longArray2[4] = (long) 4;
      longArray2[5] = (long) (byte)4;
      longArray2[6] = (long) (byte)4;
      long[] longArray3 = ArrayUtils.removeAllOccurrences(longArray2, (-340L));
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotNull(longArray3);
      assertEquals(7, longArray3.length);
      assertEquals(7, longArray2.length);
      assertArrayEquals(new long[] {4L, (-2146283099L), (-2146283099L), 101L, 4L, 4L, 4L}, longArray3);
      assertArrayEquals(new long[] {4L, (-2146283099L), (-2146283099L), 101L, 4L, 4L, 4L}, longArray2);
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = 40L;
      longArray0[2] = (-782L);
      longArray0[3] = (-3580L);
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, 3168, 48, 48);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 40L;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1335;
      floatArray0[1] = (float) (-782L);
      ArrayUtils.shift(floatArray0, (int) (byte)0, (int) (byte)0, 180);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1335.0F, (-782.0F)}, floatArray0, 0.01F);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 48);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {48L, 0L, 40L, (-782L), (-3580L), 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 40L, (-782L), (-3580L), 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)0, 3168);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {40.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = (Double) 40.0;
      doubleArray1[1] = (Double) 40.0;
      doubleArray1[2] = (Double) 40.0;
      doubleArray1[3] = (Double) 40.0;
      doubleArray1[4] = (Double) 40.0;
      doubleArray1[5] = (Double) 40.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {40.0, 40.0, 40.0, 40.0, 40.0, 40.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 180;
      intArray0[1] = 1335;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 180;
      intArray0[4] = 3168;
      intArray0[5] = 48;
      intArray0[6] = 3208;
      intArray0[7] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1335, 0, 180, 3168, 48, 3208, 0}, intArray1);
      assertArrayEquals(new int[] {180, 1335, 0, 180, 3168, 48, 3208, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-9);
      shortArray0[1] = (short) (-79);
      shortArray0[2] = (short)2068;
      shortArray0[3] = (short)18;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-433), (-214));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-9), (short) (-79), (short)2068, (short)18}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '=';
      charArray1[1] = '\\';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'=', '\\'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)18;
      intArray0[1] = (int) (short) (-79);
      intArray0[2] = (int) (short)2068;
      intArray0[3] = (int) (short) (-9);
      intArray0[4] = (int) '=';
      intArray0[5] = (int) '=';
      ArrayUtils.swap(intArray0, (-584), (-9), (int) (short) (-79));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {18, (-79), 2068, (-9), 61, 61}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false, false, true, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-18);
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0, (byte) (-18)}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0, (byte) (-18)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0, (byte) (-18)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Boolean[] booleanArray2 = new Boolean[9];
      booleanArray2[0] = (Boolean) false;
      booleanArray2[1] = (Boolean) false;
      booleanArray2[2] = (Boolean) false;
      booleanArray2[3] = (Boolean) false;
      booleanArray2[4] = (Boolean) true;
      Boolean boolean0 = new Boolean(", Length: 0");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray2[5] = boolean0;
      booleanArray2[6] = (Boolean) false;
      booleanArray2[7] = (Boolean) true;
      booleanArray2[8] = (Boolean) true;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotNull(booleanArray3);
      assertEquals(9, booleanArray3.length);
      assertEquals(9, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, true, true}, booleanArray3));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-18);
      shortArray0[1] = (short) (byte) (-18);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1909), (-3476));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-18), (short) (-18)}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-544);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-544)}, shortArray0);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = Character.valueOf('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('M');
      assertEquals('M', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (int) (short) (-544), (-814));
      assertNull(doubleArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(5278);
      assertEquals(5278, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.removeElements(integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = (double) ';';
      doubleArray0[2] = 2008.0;
      doubleArray0[4] = 5084.5579808;
      doubleArray0[11] = 5084.5579808;
      doubleArray0[4] = 51.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) '(', 66);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(15, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-794.46);
      doubleArray0[1] = 4167.35371973744;
      doubleArray0[2] = (-2073.3);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 2008.0;
      doubleArray0[5] = 5084.5579808;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 3656.24249;
      doubleArray0[8] = 51.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1921, 1374);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-794.46), 4167.35371973744, (-2073.3), (-1.0), 2008.0, 5084.5579808, 0.0, 3656.24249, 51.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short1;
      short[] shortArray1 = new short[7];
      shortArray1[0] = (short)0;
      shortArray1[1] = (short)32449;
      shortArray1[2] = (short)0;
      shortArray1[3] = short0;
      shortArray1[4] = short0;
      shortArray1[5] = short0;
      shortArray1[6] = short0;
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short)434);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short)32449, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)32449, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      short[] shortArray3 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertNotNull(shortArray3);
      assertEquals(0, shortArray3.length);
      assertArrayEquals(new short[] {}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      
      short[] shortArray4 = ArrayUtils.insert((int) (short)0, shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray4);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray4);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray4, shortArray1);
      assertNotSame(shortArray4, shortArray2);
      assertNotSame(shortArray4, shortArray3);
      assertNotNull(shortArray4);
      assertEquals(7, shortArray1.length);
      assertEquals(0, shortArray3.length);
      assertEquals(7, shortArray4.length);
      assertArrayEquals(new short[] {(short)0, (short)32449, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray3);
      assertArrayEquals(new short[] {(short)0, (short)32449, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray4);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray3));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray2));
      assertFalse(shortArray4.equals((Object)shortArray3));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = ']';
      charArray0[2] = '$';
      charArray0[3] = 'Y';
      charArray0[4] = 'a';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'M', ']', '$', 'Y', 'a'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = null;
      long[] longArray1 = ArrayUtils.removeAllOccurences((long[]) null, (-2694L));
      assertNull(longArray1);
      
      short[] shortArray2 = ArrayUtils.insert(1124, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1124;
      doubleArray0[1] = (double) (-2694L);
      doubleArray0[2] = (double) 1124;
      doubleArray0[3] = (-940.1);
      doubleArray0[4] = (double) 1124;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1124.0, 1124);
      assertEquals(4, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1124.0, (-2694.0), 1124.0, (-940.1), 1124.0}, doubleArray0, 0.01);
      
      short[] shortArray3 = new short[1];
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      
      shortArray3[0] = (short) (-1087);
      boolean boolean0 = ArrayUtils.contains(shortArray3, (short) (-1087));
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray3.length);
      assertArrayEquals(new short[] {(short) (-1087)}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      
      Byte[] byteArray0 = new Byte[3];
      try { 
        Byte.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-76);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-100), (-360));
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-15), (byte)54, (byte) (-4), (byte) (-76)}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-15), (byte)54, (byte) (-4), (byte) (-76)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-15), (byte)54, (byte) (-4), (byte) (-76)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-2147483648L));
      assertEquals((-2147483648L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1L);
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long(12L);
      assertEquals(12L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      Long long3 = new Long(52L);
      assertEquals(52L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      
      longArray0[3] = long3;
      Long long4 = new Long((long) longArray0[0]);
      assertEquals((-2147483648L), (long)long4);
      assertNotNull(long4);
      assertEquals(5, longArray0.length);
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      
      longArray0[4] = long4;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte)121;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)121, (-2493));
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)62, (byte) (-86), (byte)59, (byte)57, (byte) (-30), (byte)121}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-1427);
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.insert((-1427), longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(4, longArray2.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1427L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1427L)}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "a/";
      stringArray0[1] = "java.lang.Integer";
      stringArray0[2] = "bI2";
      stringArray0[3] = "HYUq$ra@s+[";
      stringArray0[4] = "nIzy':Ksb,";
      stringArray0[5] = "T34";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "Arguments cannot both be null");
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertEquals(7, stringArray1.length);
      assertEquals(6, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2273;
      intArray0[1] = 1;
      intArray0[2] = (-3813);
      intArray0[3] = (-1655);
      intArray0[4] = 2242;
      ArrayUtils.shift(intArray0, 2242, (-1655), 91);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2273, 1, (-3813), (-1655), 2242}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-1332.9109F);
      floatArray0[2] = (-1332.9109F);
      floatArray0[4] = 1477.036F;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (-1332.9109F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 808.48645F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-1332.9109F), (-1332.9109F), 0.0F, 1477.036F, 0.0F, 0.0F, (-1332.9109F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1332.9109F), (-1332.9109F), 0.0F, 1477.036F, 0.0F, 0.0F, (-1332.9109F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)100;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)9, (byte)100}, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)9, (byte)100}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'w', (int) (byte)9);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      float[] floatArray0 = new float[2];
      int[] intArray0 = ArrayUtils.add((int[]) null, (-1));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (-10L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), (-426));
      assertEquals((-1), int0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-10L)}, longArray0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1190, 80);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int1 = ArrayUtils.lastIndexOf((char[]) null, 'Z', (-2695));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray0, (float) (-2695));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1031.4963317481047;
      doubleArray0[1] = 883.4724747;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-3860.6802288);
      doubleArray0[4] = (-1703.5);
      doubleArray0[5] = 84.0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {1031.4963317481047, 883.4724747, (-1.0), (-3860.6802288), (-1703.5), 84.0}, doubleArray0, 0.01);
      
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 'u';
      doubleArray2[1] = (double) 'q';
      doubleArray2[2] = 0.0;
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray2, 0.0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(3, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      assertArrayEquals(new double[] {117.0, 113.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 117.0, 113.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      long[] longArray0 = new long[2];
      longArray0[0] = 83L;
      longArray0[1] = (long) 'u';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 117L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {83L, 117L}, longArray0);
      assertArrayEquals(new long[] {83L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      ArrayUtils.swap((Object[]) null, 523, 523);
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 523;
      intArray0[1] = 0;
      intArray0[2] = 523;
      intArray0[3] = (-2484);
      intArray0[4] = (-2484);
      intArray0[5] = 0;
      intArray0[6] = 0;
      ArrayUtils.shift(intArray0, 0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {523, 0, 523, (-2484), (-2484), 0, 0}, intArray0);
      
      Integer integer0 = new Integer(523);
      assertEquals(523, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, (Integer) 0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      Character character0 = Character.valueOf('@');
      assertEquals('@', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('@');
      assertEquals('@', (char)character1);
      assertNotNull(character1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      char[] charArray0 = new char[27];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '(';
      intArray0[1] = (int) '(';
      intArray0[2] = (int) '(';
      intArray0[3] = (int) ';';
      intArray0[4] = (int) 'u';
      intArray0[5] = (int) '(';
      int int0 = new Integer('u');
      assertEquals(117, int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Byte byte0 = new Byte((byte) (-39));
      assertEquals((byte) (-39), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-39));
      assertEquals((byte) (-39), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Double double0 = new Double((-31));
      assertEquals((-31.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = ArrayUtils.get(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, 0, double0);
      assertEquals((-31.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'u', (int) ';');
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      ArrayUtils.shift((long[]) null, (-2142614069), 2145882584, (-2142614069));
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(2, classArray0.length);
      assertEquals(2, classArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) (byte) (-11));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((long[]) null, (long) 15);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3963.4429F;
      floatArray0[3] = (float) (-1);
      floatArray0[1] = 0.0F;
      ArrayUtils.shift(floatArray0, 55);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 3963.4429F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-3537), (-1024));
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-4195L);
      longArray0[1] = 0L;
      longArray0[2] = (-1680L);
      ArrayUtils.shift(longArray0, (-1), (-1191), 53);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-4195L), 0L, (-1680L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert((-1), doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = ArrayUtils.indexOf(longArray0, (long) 53);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-4195L), 0L, (-1680L)}, longArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1191);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (-1680L);
      floatArray0[3] = (float) (-1191);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-4195L);
      ArrayUtils.shift(floatArray0, 0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1191.0F), 0.0F, (-1680.0F), (-1191.0F), 0.0F, (-1.0F), (-4195.0F)}, floatArray0, 0.01F);
      
      Class<Character>[] classArray0 = (Class<Character>[]) Array.newInstance(Class.class, 3);
      Class<Character> class0 = Character.class;
      classArray0[0] = class0;
      Class<Character> class1 = Character.class;
      classArray0[1] = class1;
      Class<Character> class2 = Character.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 1, (-1));
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2146466190;
      intArray0[1] = (-861);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 2146466190;
      objectArray0[1] = (Object) (-861);
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean1);
      assertEquals(2, objectArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shift(floatArray1, 1615);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1615;
      doubleArray0[1] = (double) 1615;
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1615.0, 1615.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 1615.0;
      objectArray0[1] = (Object) 1615.0;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      boolean boolean2 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean2);
      assertEquals(5, objectArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short1;
      shortArray0[1] = short2;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      short[] shortArray1 = new short[8];
      shortArray1[0] = (short) (-192);
      shortArray1[1] = (short) (-192);
      Double double0 = new Double((short) (-192));
      assertEquals((-192.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1364.27479375931));
      assertEquals((-1364.27479375931), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-233L);
      doubleArray0[1] = (double) (-233L);
      doubleArray0[2] = (-1364.27479375931);
      doubleArray0[3] = (double) (-233L);
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (-440.28701);
      ArrayUtils.shift(doubleArray0, (int) short0, (-2146842320), (-1));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-233.0), (-233.0), (-1364.27479375931), (-233.0), 0.0, (-440.28701)}, doubleArray0, 0.01);
      
      boolean[] booleanArray1 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray2 = ArrayUtils.insert((-939), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2146466190;
      intArray0[1] = (-861);
      int int0 = ArrayUtils.indexOf(intArray0, (-284), (-861));
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2146466190, (-861)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (-977.535F);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 5;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = 2443.442F;
      floatArray0[8] = (-5053.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-5053.0F), 5);
      assertEquals((-1), int0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-977.535F), 0.0F, 5.0F, 0.0F, 0.0F, 0.0F, 2443.442F, (-5053.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.reverse(longArray0, 3496, 3496);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = 'p';
      charArray0[2] = '_';
      charArray0[3] = '_';
      charArray0[4] = '*';
      charArray0[5] = 'p';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '_', 3496);
      assertEquals(3, int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'_', 'p', '_', '_', '*', 'p'}, charArray0);
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 704L;
      doubleArray0[1] = (double) (long)longArray0[0];
      doubleArray0[2] = (double) (long)longArray0[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {704.0, 704.0, 704.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 704L;
      floatArray0[1] = (float) (long)longArray0[0];
      floatArray0[2] = (float) 704L;
      floatArray0[3] = (float) (long)longArray0[0];
      floatArray0[4] = (float) (long)longArray0[0];
      floatArray0[5] = (float) (long)longArray0[0];
      floatArray0[6] = (float) 704L;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {704.0F, 704.0F, 704.0F, 704.0F, 704.0F, 704.0F, 704.0F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, 1.0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {704.0, 704.0, 704.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {704.0, 704.0, 704.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 1077.355514);
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {704.0, 704.0, 704.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      Boolean[] booleanArray1 = new Boolean[0];
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'E', 114);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'E'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Long[] longArray0 = new Long[0];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1708.8930101);
      assertEquals(1708.8930101, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-3173.0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1708.8930101}, doubleArray1, 0.01);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(longArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-940.1);
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null, 1.0);
      assertNull(doubleArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-940.1);
      objectArray0[1] = (Object) (-940.1);
      objectArray0[2] = (Object) (-940.1);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-940.1', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray2 = new long[8];
      long[] longArray3 = ArrayUtils.removeElements(longArray2, longArray2);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotNull(longArray3);
      assertEquals(8, longArray2.length);
      assertEquals(0, longArray3.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertFalse(longArray3.equals((Object)longArray2));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(60);
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(booleanArray1, (Random) mockRandom0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) longArray0[0];
      Float float0 = new Float((float) 704L);
      assertEquals(704.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) float0);
      assertEquals((-1), int1);
      assertEquals(1, objectArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)2;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (byte)7;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)2;
      objectArray0[1] = (Object) 7.0;
      objectArray0[2] = (Object) (byte)2;
      Short short0 = new Short((byte)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) short0, (int) (byte)7);
      assertEquals((-1), int0);
      assertEquals(3, objectArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)4;
      int[] intArray0 = new int[10];
      intArray0[0] = (int) (byte)4;
      intArray0[1] = (int) (byte)101;
      Double double0 = new Double(2467.6819138);
      assertEquals(2467.6819138, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 2467.6819138);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.swap(doubleArray1, 4, 101);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-2146283099));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(10, intArray0.length);
      assertEquals(10, intArray1.length);
      assertArrayEquals(new int[] {4, 101, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {4, 101, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (byte)4;
      longArray2[1] = (long) (-2146283099);
      longArray2[2] = (long) (-2146283099);
      longArray2[3] = (long) (byte)101;
      longArray2[4] = (long) 4;
      longArray2[6] = (long) (byte)4;
      long[] longArray3 = ArrayUtils.removeAllOccurrences(longArray2, (-340L));
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray3);
      assertEquals(7, longArray3.length);
      assertEquals(7, longArray2.length);
      assertArrayEquals(new long[] {4L, (-2146283099L), (-2146283099L), 101L, 4L, 0L, 4L}, longArray3);
      assertArrayEquals(new long[] {4L, (-2146283099L), (-2146283099L), 101L, 4L, 0L, 4L}, longArray2);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 101;
      integerArray0[1] = (Integer) 4;
      integerArray0[2] = (Integer) 101;
      integerArray0[3] = (Integer) 4;
      integerArray0[4] = (Integer) 101;
      integerArray0[5] = (Integer) 101;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(6, integerArray0.length);
      assertEquals(6, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Double double0 = new Double(3326.664574302574);
      assertEquals(3326.664574302574, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(3326.664574302574);
      assertEquals(3326.664574302574, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1509.0579808000002);
      assertEquals(1509.0579808000002, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(1509.0579808000002);
      assertEquals(1509.0579808000002, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double3;
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1509.0579808000002);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1509.0579808000002, 3326.664574302574}, doubleArray1, 0.01);
      
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray0, '#');
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray2.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'J';
      charArray0[2] = '<';
      charArray0[3] = 'Q';
      charArray0[4] = 'X';
      charArray0[5] = '(';
      charArray0[6] = 'R';
      charArray0[7] = 'p';
      charArray0[8] = '@';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'N');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'H', 'J', '<', 'Q', 'X', '(', 'R', 'p', '@'}, charArray0);
      assertArrayEquals(new char[] {'H', 'J', '<', 'Q', 'X', '(', 'R', 'p', '@'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Boolean boolean0 = new Boolean("java.lang.Short");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isEquals(boolean0, boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)52;
      boolean boolean2 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean2);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)0, (byte)27, (byte)52}, byteArray0);
      assertFalse(boolean2 == boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '<';
      intArray0[1] = (int) (byte)27;
      intArray0[2] = (int) 'J';
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte)0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {60, 27, 74}, intArray0);
      assertArrayEquals(new int[] {60, 27, 74, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = (-3126L);
      longArray0[0] = (-3126L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-3126L)}, longArray0);
      
      int int0 = 1243;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1243, longArray1, longArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1243, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[9];
      IntStream intStream0 = mockRandom0.ints((long) (short)1851);
      assertNotNull(intStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      floatArray0[0] = (float) (short)1851;
      floatArray0[1] = (float) (short)1851;
      floatArray0[2] = (float) (short)1851;
      floatArray0[3] = (float) (short)1851;
      floatArray0[4] = (float) (short)1851;
      floatArray0[5] = (float) (short)1851;
      floatArray0[6] = (float) (short)1851;
      floatArray0[7] = (float) (short)1851;
      floatArray0[8] = (-1.0F);
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1851.0F, 1851.0F, 1851.0F, 1851.0F, 1851.0F, 1851.0F, 1851.0F, (-1.0F), 1851.0F}, floatArray0, 0.01F);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-2145159530), 15);
      assertNull(longArray0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, objectArray0.length);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(196.0);
      assertEquals(196.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals(5, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(15);
      assertEquals(15.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-2145159530));
      assertEquals((-2.14515953E9), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1121.15127386);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 196.0, (-1.0), 15.0, (-2.14515953E9)}, doubleArray1, 0.01);
      
      Long[] longArray1 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, "{Y1+:D,(F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte) (-69);
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)114, (byte)49, (byte)102, (byte)77, (byte)98, (byte)125, (byte)57, (byte) (-69)}, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)102);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)114, (byte)49, (byte)102, (byte)77, (byte)98, (byte)125, (byte)57, (byte) (-69)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)114, (byte)49, (byte)102, (byte)77, (byte)98, (byte)125, (byte)57, (byte) (-69), (byte)102}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, (int) (byte)102);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 102, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1052;
      shortArray0[1] = (short) (-82);
      shortArray0[2] = (short)939;
      shortArray0[3] = (short) (-70);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-44);
      shortArray0[6] = (short) (-1311);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-82), (short)939, (short) (-70), (short)0, (short) (-44), (short) (-1311), (short)1052}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = (-1L);
      longArray0[4] = (long) '(';
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 7);
      assertEquals(2, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-1L), 0L, 40L, 0L}, longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1699);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1699)}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = (double) 40L;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-442.508145334));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {40.0, 40.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {40.0, 40.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.swap(longArray0, 965, 117);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-1L), 0L, 40L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 74;
      intArray0[1] = 2035;
      intArray0[2] = (-1);
      intArray0[3] = (-1007);
      intArray0[4] = (-4740);
      intArray0[5] = 1;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {74, 2035, (-1), (-1007), (-4740), 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      charArray0[4] = '!';
      charArray0[5] = 'S';
      charArray0[6] = '#';
      charArray0[7] = 'G';
      charArray0[8] = ')';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {';', '(', 'u', 'q', '!', 'S', '#', 'G', ')'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '(';
      longArray0[1] = (long) ';';
      longArray0[2] = (-1L);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) '(';
      longArray0[5] = (long) ')';
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 7);
      assertEquals(2, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {40L, 59L, (-1L), 0L, 40L, 41L}, longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1699);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1699)}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = (double) 40L;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-442.508145334));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {40.0, 40.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {40.0, 40.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.indexOf(intArray0, (-2145028933));
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom(1339L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BYTE_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Byte byte0 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      double[] doubleArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      ArrayUtils.swap(byteArray0, 1, (int) (byte) (-1), (int) (byte) (-1));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (-209);
      intArray0[2] = (-209);
      intArray0[3] = (int) (byte) (-1);
      ArrayUtils.shift(intArray0, (-209), 1956, (int) (byte) (-1));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-209), (-209), (-1), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2272);
      intArray0[4] = (-2272);
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      ArrayUtils.shift(intArray0, 1, 1, (-209));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2272), 0, 1, 1, 1, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-233L);
      int[] intArray0 = new int[7];
      intArray0[0] = (-405);
      intArray0[1] = (-3427);
      intArray0[2] = (-2608);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert((-1575), charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1680L), 77);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-233L), 0L, 0L}, longArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)45);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)65, (byte)11, (byte) (-82), (byte) (-1)}, byteArray0);
      
      ArrayUtils.shift(intArray0, 1, (int) (byte)4, 77);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-405), (-2608), 0, (-3427), 0, 0, 0}, intArray0);
      
      char[] charArray2 = ArrayUtils.removeElement(charArray0, '6');
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray2);
      assertEquals(0, charArray2.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = 'Y';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '/');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {'/', 'Y'}, charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90}, byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)90;
      shortArray0[1] = (short) (byte)90;
      shortArray0[2] = (short) (byte)90;
      shortArray0[3] = (short) (byte)90;
      shortArray0[4] = (short) (-66);
      shortArray0[5] = (short) (byte)90;
      shortArray0[6] = (short) (byte)90;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)90, 127);
      assertEquals((-1), int0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)90, (short)90, (short)90, (short)90, (short) (-66), (short)90, (short)90}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short) (-66), (short)90);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -66, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      float[] floatArray0 = new float[12];
      floatArray0[0] = (float) (-710);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (-710);
      floatArray0[5] = (float) 10;
      floatArray0[6] = 1254.7933F;
      floatArray0[7] = (float) (short)79;
      floatArray0[8] = (float) (-710);
      ArrayUtils.shift(floatArray0, (-97));
      assertEquals(12, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(12, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 65;
      doubleArray0[1] = 1838.9;
      doubleArray0[2] = (double) (short)79;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 1254.7933F;
      doubleArray0[6] = (double) 1254.7933F;
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 1838.9, 79.0, 10.0, 0.0, 1254.7933349609375, 1254.7933349609375}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = ',';
      charArray0[2] = 'M';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '|');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'T', ',', 'M'}, charArray0);
      assertArrayEquals(new char[] {'T', ',', 'M'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-110);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)116, (byte) (-1), (byte)0, (byte) (-110)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte) (-1), (byte)0, (byte) (-110)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 797, (int) (byte) (-1), (-2586));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 2L;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (-2586);
      longArray0[5] = (long) (byte) (-110);
      longArray0[6] = (long) 797;
      longArray0[7] = (long) (byte) (-110);
      longArray0[8] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (byte)116);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {2L, 0L, 0L, 0L, (-2586L), (-110L), 797L, (-110L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {2L, 0L, 0L, 0L, (-2586L), (-110L), 797L, (-110L), (-1L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-357);
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-357), 2}, intArray0);
      assertArrayEquals(new int[] {(-357), 2}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'3'}, charArray0);
      
      Byte byte0 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte4;
      byteArray0[1] = byte0;
      Byte byte5 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte2));
      
      byteArray0[2] = byte5;
      byteArray0[3] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)77, (byte)12, (byte)1, (byte) (-42)}, byteArray1);
      
      ArrayUtils.swap(byteArray1, 2098, (-1351), (-951));
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)77, (byte)12, (byte)1, (byte) (-42)}, byteArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) (-357);
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 2098;
      longArray0[4] = (long) (byte)12;
      longArray0[5] = (long) (byte) (-42);
      longArray0[6] = (long) 2;
      longArray0[7] = (long) (byte)12;
      longArray0[8] = (long) 2098;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 52L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {2L, (-357L), 1L, 2098L, 12L, (-42L), 2L, 12L, 2098L}, longArray1);
      assertArrayEquals(new long[] {2L, (-357L), 1L, 2098L, 12L, (-42L), 2L, 12L, 2098L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 1.0;
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-669.6430477), (-669.6430477));
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = new Float[10];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 216.72528F);
      assertNotNull(floatArray1);
      assertEquals(10, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertArrayEquals(new float[] {216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F}, floatArray1, 0.01F);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean2);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ArrayUtils.swap(floatArray1, (-167), (-167), (-167));
      assertEquals(10, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertArrayEquals(new float[] {216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F}, floatArray1, 0.01F);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray0, "%");
      assertNotNull(stringArray0);
      assertEquals(10, floatArray0.length);
      assertEquals(10, stringArray0.length);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[1] = double0;
      Double double1 = new Double(1.0);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[2] = double1;
      Double double2 = new Double((short)98);
      assertEquals(98.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[3] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 98.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 98.0}, doubleArray1, 0.01);
      
      short[] shortArray1 = new short[8];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)98;
      shortArray1[1] = (short)98;
      shortArray1[2] = (short)98;
      shortArray1[3] = (short)98;
      shortArray1[4] = (short)98;
      shortArray1[5] = (short)98;
      shortArray1[6] = (short)98;
      shortArray1[7] = (short)98;
      ArrayUtils.shift(shortArray1, 10);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)98, (short)98, (short)98, (short)98, (short)98, (short)98, (short)98, (short)98}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(7, shortArray2.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)98, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)98, (short)98, (short)98, (short)98, (short)98, (short)98, (short)98}, shortArray2);
      assertArrayEquals(new short[] {(short)98, (short)98, (short)98, (short)98, (short)98, (short)98, (short)98, (short)98}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-42);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)40, (byte) (-106), (byte) (-30), (byte) (-11), (byte)58, (byte)0, (byte) (-42)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)40, (byte) (-106), (byte) (-30), (byte) (-11), (byte)58, (byte)0, (byte) (-42)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-147.3135039356);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) integer0, (-1));
      assertEquals((-1), int0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1.2742429F));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1.2742429F);
      doubleArray0[1] = (double) (-1.2742429F);
      doubleArray0[2] = (double) (-1.2742429F);
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-1.274242877960205));
      assertEquals(3, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.274242877960205), (-1.274242877960205), (-1.274242877960205)}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      ArrayUtils.reverse(floatArray0, 3168, 797);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      floatArray0[0] = (float) '2';
      charArray0[1] = '2';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      doubleArray0[0] = (double) (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.shift(byteArray0, (-25), (int) '2', 611);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short) (-3924));
      assertEquals((short) (-3924), (short)short0);
      assertNotNull(short0);
      
      shortArray0[1] = short0;
      Short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 611;
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(3, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      ArrayUtils.reverse(floatArray0, 3168, 797);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = '2';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.shift(byteArray0, (-25), 2788, 611);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)785);
      assertEquals((short)785, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-3924));
      assertEquals((short) (-3924), (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)shortArray0[1];
      longArray0[1] = (long) 3168;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) 3168;
      longArray0[5] = (long) 797;
      longArray0[6] = (long) (byte)0;
      int[] intArray0 = new int[1];
      intArray0[0] = 611;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 611, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short1;
      ArrayUtils.shift((double[]) null, 114);
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray0);
      assertSame(shortArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, objectArray0.length);
      
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short)0;
      shortArray1[1] = (short) (-15419);
      shortArray1[2] = (short) (-15419);
      shortArray1[3] = (short) (-4497);
      shortArray1[4] = (short)0;
      shortArray1[5] = short0;
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertArrayEquals(new short[] {(short)0, (short) (-15419), (short) (-15419), (short) (-4497), (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-15419), (short) (-15419), (short) (-4497), (short)0, (short)0}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-15419);
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short) (-15419);
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (short)0;
      intArray0[8] = 114;
      int int0 = ArrayUtils.indexOf(intArray0, 114, 2146466190);
      assertEquals((-1), int0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, (-15419), 0, (-15419), 0, 0, 0, 0, 114}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      charArray0[4] = '!';
      charArray0[5] = 'S';
      charArray0[6] = '#';
      charArray0[7] = 'G';
      charArray0[8] = ')';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {';', '(', 'u', 'q', '!', 'S', '#', 'G', ')'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '(';
      longArray0[1] = (long) ';';
      longArray0[2] = (-1L);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) '(';
      longArray0[5] = (long) ')';
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 7);
      assertEquals(2, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {40L, 59L, (-1L), 0L, 40L, 41L}, longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'q';
      doubleArray0[1] = 1430.0762;
      doubleArray0[2] = (double) 41L;
      doubleArray0[3] = (double) 59L;
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) 0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-895.2055074198629), 0);
      assertEquals((-1), int1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {113.0, 1430.0762, 41.0, 59.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-147.3135039356);
      doubleArray0[2] = (-1703.5);
      doubleArray0[3] = (-940.1);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1644.0;
      doubleArray0[7] = (-1611.261053914);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1703.5));
      assertEquals(2, int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-147.3135039356), (-1703.5), (-940.1), 1.0, 1.0, 1644.0, (-1611.261053914), 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)45, (-1));
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)45, (byte)45}, byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 128;
      floatArray0[1] = (-923.0F);
      floatArray0[2] = (float) 2;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)45, 128);
      assertEquals((-1), int1);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {128.0F, (-923.0F), 2.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = '>';
      charArray0[2] = '~';
      charArray0[3] = 'I';
      charArray0[4] = '2';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'C', '>', '~', 'I', '2'}, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'I';
      boolean boolean1 = ArrayUtils.contains(intArray0, 73);
      assertTrue(boolean1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {73}, intArray0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-233L);
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(385.1192363);
      assertEquals(385.1192363, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {1.5, 1.5, 385.1192363, 385.1192363, 1.5}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-233L);
      doubleArray2[1] = (-47.72075258414);
      doubleArray2[2] = (double) (-233L);
      doubleArray2[3] = 385.1192363;
      doubleArray2[4] = 385.1192363;
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1);
      longArray1[1] = (long) (-1);
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(3, longArray2.length);
      assertArrayEquals(new long[] {(-233L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {(-233L), 0L, 0L}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1553);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = 2483;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1));
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1553), (-1), (-1), (-1), 2483}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Character character0 = new Character('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_BYTE_ARRAY, (byte)0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(914L);
      assertEquals(914L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long((-1L));
      assertEquals((-1L), (long)long2);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (long) (-2145028933));
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 837.9169, 0.0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)32;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)32, (short) (-1)}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)32;
      doubleArray0[1] = (double) (short) (-1);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short)32;
      floatArray0[2] = (float) (short)32;
      floatArray0[3] = (float) (short)32;
      floatArray0[4] = (float) (short) (-1);
      floatArray0[5] = (float) (short) (-1);
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 32.0F, 32.0F, 32.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap(shortArray0, 84, (int) (short)32, (-1));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)32, (short) (-1)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, false, (-2415));
      assertEquals(1, int1);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, true}, booleanArray0));
      assertFalse(int1 == int0);
      
      int int2 = ArrayUtils.indexOf(floatArray0, (-1.0F));
      assertEquals(0, int2);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 32.0F, 32.0F, 32.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      ArrayUtils.swap(doubleArray0, Integer.MAX_VALUE, 1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {32.0, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2031.8444, 66, (-4577.60805));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 66;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (short) (-1087);
      floatArray0[4] = (float) 0;
      int int1 = ArrayUtils.indexOf(floatArray0, Float.NaN, 0);
      assertEquals((-1), int1);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {66.0F, 0.0F, 0.0F, (-1087.0F), 0.0F}, floatArray0, 0.01F);
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2031;
      shortArray0[1] = (short) (-192);
      shortArray0[2] = (short) (-192);
      shortArray0[3] = (short) (-192);
      shortArray0[4] = (short) (-192);
      shortArray0[5] = (short) (-1);
      ArrayUtils.swap(shortArray0, 2763, (-1051), (-1));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)2031, (short) (-192), (short) (-192), (short) (-192), (short) (-192), (short) (-1)}, shortArray0);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-225L);
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(385.1192363);
      assertEquals(385.1192363, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      int[] intArray0 = new int[6];
      intArray0[0] = (-209);
      intArray0[1] = (-209);
      intArray0[2] = (-209);
      intArray0[3] = (-209);
      intArray0[4] = 1;
      intArray0[5] = (int) (byte) (-1);
      ArrayUtils.shift(intArray0, (-209), (-1), (-1935));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-209), (-209), (-209), (-209), 1, (-1)}, intArray0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-225L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-225L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-923.0F);
      floatArray0[1] = (-923.0F);
      floatArray0[2] = (-923.0F);
      floatArray0[3] = (-923.0F);
      floatArray0[4] = (-923.0F);
      floatArray0[5] = (-923.0F);
      floatArray0[6] = (-923.0F);
      floatArray0[7] = (-923.0F);
      floatArray0[8] = (-923.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, (-1));
      assertEquals((-1), int0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-923.0F), (-923.0F), (-923.0F), (-923.0F), (-923.0F), (-923.0F), (-923.0F), (-923.0F), (-923.0F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1037L;
      longArray0[1] = (long) (-1);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-2932L));
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1037L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)39;
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (int) (byte)2, (int) (byte)39, (int) (byte)7);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(shortArray1, (short) (-1379));
      assertNotSame(shortArray1, shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (short) (-1379));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)16;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)91);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)91, (byte)6, (byte)77, (byte)6, (byte)6, (byte)16}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)77, (byte)6, (byte)6, (byte)16}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 337, (int) (short)98, (int) (byte)91);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)6;
      objectArray0[1] = (Object) (byte)6;
      objectArray0[2] = (Object) (byte)6;
      objectArray0[3] = (Object) (byte)6;
      objectArray0[4] = (Object) (byte)91;
      objectArray0[5] = (Object) (short)98;
      objectArray0[6] = (Object) (byte)16;
      objectArray0[7] = (Object) (byte)16;
      objectArray0[8] = (Object) (short)98;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertEquals(9, objectArray0.length);
      assertEquals(9, objectArray1.length);
      
      boolean boolean1 = ArrayUtils.isEquals(objectArray0[2], objectArray0[5]);
      assertSame(objectArray0, objectArray1);
      assertFalse(boolean1);
      assertEquals(9, objectArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'X');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Boolean boolean0 = new Boolean("java.lang.Short");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isEquals((Object) null, boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)27;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)52;
      boolean boolean2 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean2);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)27, (byte)0, (byte)0, (byte)52}, byteArray0);
      assertTrue(boolean2 == boolean1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 83;
      intArray0[1] = (int) (byte)27;
      intArray0[2] = (int) 'Q';
      intArray0[3] = (int) 'H';
      intArray0[4] = (int) (byte)52;
      int[] intArray1 = ArrayUtils.add(intArray0, 1197);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {83, 27, 81, 72, 52, 1197}, intArray1);
      assertArrayEquals(new int[] {83, 27, 81, 72, 52}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1262), (-1262));
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)55;
      shortArray0[1] = (short)55;
      shortArray0[2] = (short)55;
      shortArray0[3] = (short)55;
      shortArray0[4] = (short)55;
      shortArray0[5] = (short)55;
      shortArray0[6] = (short)55;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)55, (short)55, (short)55, (short)55, (short)55, (short)55, (short)55}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)55, (short)55, (short)55, (short)55, (short)55, (short)55, (short)55}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-432.504029));
      assertEquals((-432.504029), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1.0);
      assertEquals(1.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((short)98);
      assertEquals(98.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-432.504029), Double.NaN, 1.0, 98.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-432.504029), Double.NaN, 1.0, 98.0}, doubleArray1, 0.01);
      
      short[] shortArray1 = new short[8];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)98;
      shortArray1[1] = (short)98;
      shortArray1[2] = (short)98;
      shortArray1[3] = (short)98;
      shortArray1[4] = (short)98;
      shortArray1[5] = (short)98;
      shortArray1[6] = (short)98;
      shortArray1[7] = (short)98;
      ArrayUtils.shift(shortArray1, 10);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)98, (short)98, (short)98, (short)98, (short)98, (short)98, (short)98, (short)98}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(7, shortArray2.length);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)98, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)98, (short)98, (short)98, (short)98, (short)98, (short)98, (short)98}, shortArray2);
      assertArrayEquals(new short[] {(short)98, (short)98, (short)98, (short)98, (short)98, (short)98, (short)98, (short)98}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-42);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)40, (byte) (-106), (byte) (-30), (byte) (-11), (byte)58, (byte)0, (byte) (-42)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte)40, (byte) (-106), (byte) (-30), (byte) (-11), (byte)58, (byte)0, (byte) (-42)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = new Boolean[3];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)82;
      ArrayUtils.swap(byteArray0, (int) (byte) (-30), 53, (int) (byte) (-30));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte) (-1), (byte) (-30), (byte)82}, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'L';
      charArray0[1] = '<';
      charArray0[2] = 'l';
      charArray0[3] = 'T';
      charArray0[4] = 'x';
      charArray0[5] = '<';
      charArray0[6] = '-';
      charArray0[7] = 'H';
      ArrayUtils.shift(charArray0, 1036, 2312, (int) (byte)82);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'L', '<', 'l', 'T', 'x', '<', '-', 'H'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-29);
      intArray0[6] = 2447;
      intArray0[2] = 68;
      intArray0[6] = (-2620);
      intArray0[5] = 1211;
      intArray0[6] = 1073741824;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-29), 0, 68, 0, 0, 1211, 1073741824}, intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean1 = ArrayUtils.contains(booleanArray1, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertFalse(boolean1);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      
      ArrayUtils.swap(booleanArray0, 15, 68, (-1773));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 70, (-1405));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 70;
      doubleArray0[2] = (double) (-1405);
      doubleArray0[3] = (double) 70;
      doubleArray0[4] = 2.5;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 70.0, (-1405.0), 70.0, 2.5}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-58));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.contains(byteArray1, (byte) (-1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertTrue(boolean0);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (byte) (-1), 70);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 3158L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, true, true, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-18);
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0, (byte) (-18)}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-49));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0, (byte) (-18)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0, (byte) (-18)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-18));
      assertNotSame(byteArray0, byteArray1);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0, (byte) (-18)}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1L), 1068);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (byte)0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(byteArray1, (byte)35);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, int1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0, (byte) (-18)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0, (byte) (-18)}, byteArray1);
      assertFalse(int1 == int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-332L));
      assertEquals((-332L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = Long.valueOf((long) (-1));
      assertEquals((-1L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 53);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 53;
      intArray0[1] = 53;
      floatArray0[3] = (float) 53;
      intArray0[3] = 53;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 53, 53);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {53, 53, 0, 53}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 53.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 53;
      objectArray0[1] = (Object) (-1.0F);
      objectArray0[2] = (Object) 53.0F;
      objectArray0[4] = (Object) 53;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) 53;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(53);
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(7, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean1);
      assertEquals(7, objectArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (int) (short) (-192));
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)28;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte) (-22);
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (byte)28;
      doubleArray1[1] = 4677.60805;
      doubleArray1[2] = (double) (byte) (-22);
      doubleArray1[3] = (double) (byte)28;
      doubleArray1[4] = (double) (byte)28;
      doubleArray1[5] = (double) (byte)28;
      doubleArray1[6] = (double) (short) (-192);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-810), doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -810, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 2146466190, 2);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      short[] shortArray0 = new short[7];
      floatArray0[0] = (float) (short)1945;
      shortArray0[1] = (short)1945;
      shortArray0[2] = (short)1945;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (short)1945;
      doubleArray0[2] = (double) 1945.0F;
      doubleArray0[3] = (double) (short)1945;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (short)1945;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) (short)1945;
      doubleArray0[8] = 0.0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)1945, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1945, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(3, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(3, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      ArrayUtils.reverse(floatArray0, 3168, 797);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-5);
      Byte byte2 = new Byte((byte) (-5));
      assertEquals((byte) (-5), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)55;
      Byte byte4 = new Byte((byte)55);
      assertEquals((byte)55, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte) (-36));
      assertEquals((byte) (-36), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte) (-5));
      assertEquals((byte) (-5), (byte)byte6);
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      
      byteArray0[4] = byte6;
      byte byte7 = (byte) (-77);
      Byte byte8 = new Byte((byte) (-77));
      assertEquals((byte) (-77), (byte)byte8);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte2));
      
      byteArray0[5] = byte8;
      Byte byte9 = new Byte((byte) (-119));
      assertEquals((byte) (-119), (byte)byte9);
      assertNotNull(byte9);
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte6));
      
      Byte byte10 = new Byte(byte1);
      assertEquals((byte) (-5), (byte)byte10);
      assertNotNull(byte10);
      assertTrue(byte10.equals((Object)byte6));
      assertFalse(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte0));
      assertTrue(byte10.equals((Object)byte2));
      assertFalse(byte10.equals((Object)byte5));
      assertFalse(byte10.equals((Object)byte4));
      assertFalse(byte10.equals((Object)byte3));
      assertFalse(byte10.equals((Object)byte9));
      assertTrue(byte10.equals((Object)byte1));
      assertFalse(byte10.equals((Object)byte7));
      assertFalse(byte1 == byte3);
      assertFalse(byte1 == byte7);
      
      byteArray0[7] = byte10;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) byte7;
      doubleArray1[1] = (double) (byte) (-36);
      doubleArray1[2] = (double) byte3;
      doubleArray1[3] = (double) '2';
      doubleArray1[4] = (double) '2';
      doubleArray1[5] = (double) '2';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3324, doubleArray0, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3324, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-147.3135039356);
      ArrayUtils.swap(doubleArray0, 260, 260, 260);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-147.3135039356), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)64;
      shortArray0[1] = (short) (-3317);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)64, (short) (-3317)}, shortArray0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 2085.3489F);
      assertNull(floatArray0);
      
      ArrayUtils.swap(shortArray0, 260, (-1288490189), 260);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)64, (short) (-3317)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-233L);
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(387.4123507930779);
      assertEquals(387.4123507930779, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.swap((Object[]) doubleArray0, (-1), (-3047), (-1322));
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1322);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1322.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1322.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = '5';
      charArray0[4] = '`';
      charArray0[5] = 'R';
      charArray0[6] = 'B';
      charArray0[7] = 'p';
      charArray0[8] = 'g';
      int int0 = ArrayUtils.indexOf(charArray0, '-');
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'A', 'Q', 'Q', '5', '`', 'R', 'B', 'p', 'g'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[5] = 0;
      intArray0[1] = (-888);
      intArray0[2] = 76;
      intArray0[3] = (-874);
      Integer integer0 = new Integer(76);
      assertEquals(76, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 76;
      objectArray0[1] = (Object) (-888);
      objectArray0[2] = (Object) (-874);
      objectArray0[3] = (Object) (-888);
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(4, objectArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      Long[] longArray1 = new Long[3];
      longArray1[0] = (Long) 0L;
      longArray1[1] = (Long) 0L;
      longArray1[2] = (Long) 0L;
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2113), 76).when(comparator0).compare(anyLong() , anyLong());
      boolean boolean0 = ArrayUtils.isSorted(longArray1, comparator0);
      assertFalse(boolean0);
      assertEquals(3, longArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'E';
      charArray0[2] = 'B';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'T');
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'E', 'B'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'B';
      doubleArray0[1] = (double) 'T';
      doubleArray0[2] = (double) (-874);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-874);
      doubleArray0[5] = (double) (-888);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1953.14366669), (-1), (-1057.938159270137));
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {66.0, 84.0, (-874.0), 0.0, (-874.0), (-888.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      float[] floatArray0 = new float[8];
      floatArray0[1] = (-1332.9109F);
      floatArray0[2] = (-1332.9109F);
      floatArray0[4] = 1477.036F;
      floatArray0[7] = (-1332.9109F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 808.48645F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-1332.9109F), (-1332.9109F), 0.0F, 1477.036F, 0.0F, 0.0F, (-1332.9109F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1332.9109F), (-1332.9109F), 0.0F, 1477.036F, 0.0F, 0.0F, (-1332.9109F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)100;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)9, (byte)100}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)9, (byte)100}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)100;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short)1401;
      shortArray0[3] = (short) (byte)9;
      shortArray0[4] = (short) (byte)100;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)100;
      shortArray0[7] = (short) (byte)9;
      shortArray0[8] = (short) (byte)9;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1401);
      assertEquals(2, int0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)100, (short)2, (short)1401, (short)9, (short)100, (short)2, (short)100, (short)9, (short)9}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) doubleArray2, (Object) null, Integer.MAX_VALUE);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int1 == int0);
      
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      ArrayUtils.swap(byteArray0, 1, (-1), (int) (byte) (-1));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-192);
      longArray0[1] = (long) (short) (-192);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-192L), (-192L)}, longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-192);
      intArray0[1] = 1496;
      intArray0[2] = (int) (short) (-192);
      intArray0[3] = (int) (short) (-192);
      intArray0[4] = (int) (short) (-192);
      intArray0[5] = (int) (short) (-192);
      intArray0[6] = (int) (short) (-192);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 7);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-192), 1496, (-192), (-192), (-192), (-192), (-192)}, intArray1);
      assertArrayEquals(new int[] {(-192), 1496, (-192), (-192), (-192), (-192), (-192)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-86), (int) (short) (-192));
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)28, (byte) (-22), (byte)8, (byte) (-106), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[1]);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '1.5', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      Character character0 = new Character('7');
      assertEquals('7', (char)character0);
      assertNotNull(character0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)32;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)32, (short) (-1)}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)32;
      doubleArray0[1] = (double) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-1), (int) (short) (-1));
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {32.0, (-1.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) (short) (-1);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (short)32;
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1.0F));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), 0.0F, 32.0F, (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), 0.0F, 32.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (-1.0F), (-1073));
      assertEquals("{0, 1, 2, 3, 6, 7, 8}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.cardinality());
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(bitSet0);
      assertEquals(9, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), 0.0F, 32.0F, (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), 0.0F, 32.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)112;
      try { 
        Byte.decode(";");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)32;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)32, (short) (-1)}, shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)32;
      doubleArray0[1] = (double) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-1), (int) (short) (-1));
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {32.0, (-1.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) (short) (-1);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (short)32;
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1.0F));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), 0.0F, 32.0F, (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), 0.0F, 32.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (-1.0F), (-1073));
      assertEquals("{0, 1, 2, 3, 6, 7, 8}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.cardinality());
      assertEquals(9, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(bitSet0);
      assertEquals(9, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), 0.0F, 32.0F, (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), 0.0F, 32.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-3);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)127, (byte)112, (byte)80, (byte) (-3)}, byteArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (double) 0.0F);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {32.0, (-1.0)}, doubleArray0, 0.01);
      assertTrue(int1 == int0);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, 726);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2146466190;
      int int0 = ArrayUtils.indexOf(intArray0, 2146466190);
      assertEquals(1, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 2146466190}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_FLOAT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom(1339L);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences(arrayUtils0.EMPTY_FLOAT_ARRAY, 1000.08F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BYTE_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_CHAR_ARRAY, (-1), (-1));
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean1 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_CHAR_ARRAY);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      LongStream longStream0 = mockRandom1.longs();
      assertNotSame(mockRandom1, mockRandom0);
      assertNotNull(longStream0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_DOUBLE_ARRAY, (Random) mockRandom0);
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-760.81F);
      floatArray0[1] = (-964.9F);
      floatArray0[2] = (-7.0F);
      floatArray0[3] = 762.1156F;
      floatArray0[4] = 148.54288F;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-964.9F), (-7.0F), 762.1156F, 148.54288F, (-760.81F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 354L;
      longArray0[1] = 2295L;
      longArray0[2] = 1L;
      longArray0[3] = 1L;
      longArray0[4] = 3552L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 354L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {354L, 2295L, 1L, 1L, 3552L}, longArray0);
      assertArrayEquals(new long[] {354L, 354L, 2295L, 1L, 1L, 3552L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 1872, 594);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1872, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      char char0 = '&';
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-3840), (-3840));
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '&';
      ArrayUtils.swap(floatArray0, 9, 48, 9);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {38.0F}, floatArray0, 0.01F);
      
      short short0 = (short)683;
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)683);
      assertNull(shortArray0);
      
      int int0 = (-2024);
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, 32, (-2024));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      int int0 = 68;
      byte byte0 = (byte)50;
      Byte byte1 = new Byte((byte)50);
      assertEquals((byte)50, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      MutableInt mutableInt0 = new MutableInt((Number) byte1);
      assertEquals(50, (int)mutableInt0.getValue());
      assertEquals("50", mutableInt0.toString());
      assertEquals(50, (int)mutableInt0.toInteger());
      assertEquals((byte)50, mutableInt0.byteValue());
      assertEquals((short)50, mutableInt0.shortValue());
      assertEquals(50.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(50L, mutableInt0.longValue());
      assertEquals(50.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(50, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      assertTrue(byte1.equals((Object)byte0));
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.get(objectArray0, 68, (Object) mutableInt0);
      assertEquals(50, (int)mutableInt0.getValue());
      assertEquals("50", mutableInt0.toString());
      assertEquals(50, (int)mutableInt0.toInteger());
      assertEquals((byte)50, mutableInt0.byteValue());
      assertEquals((short)50, mutableInt0.shortValue());
      assertEquals(50.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(50L, mutableInt0.longValue());
      assertEquals(50.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(50, mutableInt0.intValue());
      assertEquals(50L, mutableInt1.longValue());
      assertEquals(50, mutableInt1.intValue());
      assertEquals("50", mutableInt1.toString());
      assertEquals(50.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)50, mutableInt1.shortValue());
      assertEquals(50, (int)mutableInt1.toInteger());
      assertEquals((byte)50, mutableInt1.byteValue());
      assertEquals(50.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(50, (int)mutableInt1.getValue());
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      assertNotNull(mutableInt1);
      assertEquals(6, objectArray0.length);
      assertTrue(byte1.equals((Object)byte0));
      
      objectArray0[0] = (Object) mutableInt1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[2] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[3] = object2;
      MutableInt mutableInt2 = (MutableInt)ArrayUtils.get(objectArray0, (int) 50, (Object) mutableInt1);
      assertEquals(50, (int)mutableInt0.getValue());
      assertEquals("50", mutableInt0.toString());
      assertEquals(50, (int)mutableInt0.toInteger());
      assertEquals((byte)50, mutableInt0.byteValue());
      assertEquals((short)50, mutableInt0.shortValue());
      assertEquals(50.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(50L, mutableInt0.longValue());
      assertEquals(50.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(50, mutableInt0.intValue());
      assertEquals(50L, mutableInt1.longValue());
      assertEquals(50, mutableInt1.intValue());
      assertEquals("50", mutableInt1.toString());
      assertEquals(50.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)50, mutableInt1.shortValue());
      assertEquals(50, (int)mutableInt1.toInteger());
      assertEquals((byte)50, mutableInt1.byteValue());
      assertEquals(50.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(50, (int)mutableInt1.getValue());
      assertEquals(50, (int)mutableInt2.getValue());
      assertEquals((byte)50, mutableInt2.byteValue());
      assertEquals("50", mutableInt2.toString());
      assertEquals(50, (int)mutableInt2.toInteger());
      assertEquals(50, mutableInt2.intValue());
      assertEquals(50.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((short)50, mutableInt2.shortValue());
      assertEquals(50.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(50L, mutableInt2.longValue());
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt0, mutableInt2);
      assertSame(mutableInt1, mutableInt0);
      assertSame(mutableInt1, mutableInt2);
      assertSame(mutableInt2, mutableInt0);
      assertSame(mutableInt2, mutableInt1);
      assertNotNull(mutableInt2);
      assertEquals(6, objectArray0.length);
      assertTrue(byte1.equals((Object)byte0));
      
      objectArray0[4] = (Object) mutableInt2;
      byte byte2 = (byte) (-29);
      Byte byte3 = new Byte((byte) (-29));
      assertEquals((byte) (-29), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '&', (int) (byte) (-29));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte3, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      ArrayUtils.swap((Object[]) null, 523, 523);
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1398, 0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)3258;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2031.0F;
      floatArray0[1] = (float) (short)3258;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 3258;
      floatArray0[6] = (float) (byte) (-1);
      floatArray0[8] = (float) 523;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-1), (-2734));
      assertEquals("{2, 6}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {2031.0F, 3258.0F, (-1.0F), 0.0F, 0.0F, 3258.0F, (-1.0F), 0.0F, 523.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '+';
      charArray0[2] = 'I';
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'I';
      floatArray0[1] = (float) '+';
      floatArray0[2] = (float) '+';
      floatArray0[3] = (float) '+';
      floatArray0[4] = (float) '+';
      floatArray0[5] = (float) 0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 43.0F, 0);
      assertEquals((-1), int1);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {73.0F, 43.0F, 43.0F, 43.0F, 43.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '+';
      intArray0[1] = 0;
      intArray0[2] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 2);
      assertFalse(boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {43, 0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)56);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)101}, byteArray0);
      assertArrayEquals(new byte[] {(byte)56, (byte)101}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      ArrayUtils.swap(longArray0, (int) (short)0, (int) (short)0, 61);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      short[] shortArray0 = ArrayUtils.insert(61, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0L;
      floatArray0[2] = (-823.841F);
      floatArray0[2] = (float) 61;
      floatArray0[3] = (float) 61;
      floatArray0[4] = (float) (short)0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-923.0F));
      assertEquals((-1), int0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 61.0F, 61.0F, 0.0F}, floatArray0, 0.01F);
      
      MutableInt mutableInt0 = new MutableInt((-1));
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(0);
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals("0", mutableInt1.toString());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt((-857));
      assertEquals((short) (-857), mutableInt2.shortValue());
      assertEquals((-857L), mutableInt2.longValue());
      assertEquals((-857), mutableInt2.intValue());
      assertEquals((-857.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-857.0), mutableInt2.doubleValue(), 0.01);
      assertEquals("-857", mutableInt2.toString());
      assertEquals((-857), (int)mutableInt2.getValue());
      assertEquals((-857), (int)mutableInt2.toInteger());
      assertEquals((byte) (-89), mutableInt2.byteValue());
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      
      MutableInt mutableInt3 = new MutableInt(0L);
      assertEquals(0, mutableInt3.intValue());
      assertEquals((short)0, mutableInt3.shortValue());
      assertEquals(0, (int)mutableInt3.getValue());
      assertEquals((byte)0, mutableInt3.byteValue());
      assertEquals(0, (int)mutableInt3.toInteger());
      assertEquals(0.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt3.doubleValue(), 0.01);
      assertEquals("0", mutableInt3.toString());
      assertEquals(0L, mutableInt3.longValue());
      assertNotNull(mutableInt3);
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      
      MutableInt mutableInt4 = new MutableInt(mutableInt1);
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt4.getValue());
      assertEquals((short)0, mutableInt4.shortValue());
      assertEquals(0, (int)mutableInt4.toInteger());
      assertEquals((byte)0, mutableInt4.byteValue());
      assertEquals(0, mutableInt4.intValue());
      assertEquals("0", mutableInt4.toString());
      assertEquals(0.0, mutableInt4.doubleValue(), 0.01);
      assertEquals(0L, mutableInt4.longValue());
      assertNotNull(mutableInt4);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertTrue(mutableInt1.equals((Object)mutableInt3));
      assertTrue(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      
      MutableInt mutableInt5 = new MutableInt((-2263));
      assertEquals((-2263), (int)mutableInt5.toInteger());
      assertEquals((-2263), (int)mutableInt5.getValue());
      assertEquals((byte)41, mutableInt5.byteValue());
      assertEquals((-2263.0), mutableInt5.doubleValue(), 0.01);
      assertEquals((short) (-2263), mutableInt5.shortValue());
      assertEquals((-2263), mutableInt5.intValue());
      assertEquals((-2263.0F), mutableInt5.floatValue(), 0.01F);
      assertEquals((-2263L), mutableInt5.longValue());
      assertEquals("-2263", mutableInt5.toString());
      assertNotNull(mutableInt5);
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      
      int int1 = mutableInt5.addAndGet((int) (short)0);
      assertEquals((-2263), (int)mutableInt5.toInteger());
      assertEquals((-2263), (int)mutableInt5.getValue());
      assertEquals((byte)41, mutableInt5.byteValue());
      assertEquals((-2263.0), mutableInt5.doubleValue(), 0.01);
      assertEquals((short) (-2263), mutableInt5.shortValue());
      assertEquals((-2263), mutableInt5.intValue());
      assertEquals((-2263.0F), mutableInt5.floatValue(), 0.01F);
      assertEquals((-2263L), mutableInt5.longValue());
      assertEquals("-2263", mutableInt5.toString());
      assertNotSame(mutableInt5, mutableInt4);
      assertNotSame(mutableInt5, mutableInt3);
      assertNotSame(mutableInt5, mutableInt0);
      assertNotSame(mutableInt5, mutableInt2);
      assertNotSame(mutableInt5, mutableInt1);
      assertEquals((-2263), int1);
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(int1 == int0);
      
      MutableInt mutableInt6 = new MutableInt(0.0F);
      assertEquals(0, mutableInt6.intValue());
      assertEquals(0, (int)mutableInt6.toInteger());
      assertEquals(0, (int)mutableInt6.getValue());
      assertEquals("0", mutableInt6.toString());
      assertEquals(0L, mutableInt6.longValue());
      assertEquals(0.0F, mutableInt6.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt6.shortValue());
      assertEquals(0.0, mutableInt6.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt6.byteValue());
      assertNotNull(mutableInt6);
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertTrue(mutableInt6.equals((Object)mutableInt1));
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      assertTrue(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertTrue(mutableInt6.equals((Object)mutableInt3));
      
      MutableInt mutableInt7 = new MutableInt((-1));
      assertEquals((-1.0), mutableInt7.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt7.longValue());
      assertEquals((byte) (-1), mutableInt7.byteValue());
      assertEquals((-1.0F), mutableInt7.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt7.getValue());
      assertEquals((-1), (int)mutableInt7.toInteger());
      assertEquals("-1", mutableInt7.toString());
      assertEquals((-1), mutableInt7.intValue());
      assertEquals((short) (-1), mutableInt7.shortValue());
      assertNotNull(mutableInt7);
      assertFalse(mutableInt7.equals((Object)mutableInt4));
      assertFalse(mutableInt7.equals((Object)mutableInt6));
      assertTrue(mutableInt7.equals((Object)mutableInt0));
      assertFalse(mutableInt7.equals((Object)mutableInt5));
      assertFalse(mutableInt7.equals((Object)mutableInt2));
      assertFalse(mutableInt7.equals((Object)mutableInt3));
      assertFalse(mutableInt7.equals((Object)mutableInt1));
      
      MutableInt[] mutableIntArray0 = ArrayUtils.subarray((MutableInt[]) null, 1235, (-1));
      assertNull(mutableIntArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)7;
      int int2 = ArrayUtils.indexOf(byteArray0, (byte)15);
      assertEquals((-1), int2);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-99), (byte)7}, byteArray0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-794.46);
      doubleArray0[1] = 4167.35371973744;
      boolean[] booleanArray0 = null;
      ArrayUtils.reverse((boolean[]) null);
      Object[] objectArray0 = new Object[3];
      int int0 = 2993;
      Object object0 = ArrayUtils.get(objectArray0, 2993);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) (-794.46);
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(objectArray0, (Comparator<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, (double) 0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      ArrayUtils.reverse(booleanArray0, 0, 357);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = (-225L);
      longArray0[0] = (-225L);
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted((Float[]) null, (Comparator<Float>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = ';';
      charArray0[0] = ';';
      char char1 = '(';
      charArray0[1] = '(';
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true}, booleanArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) true;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(objectArray0, (Comparator<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2421;
      ArrayUtils.shift(shortArray0, 10);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2421}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)296, 0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2421}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-264.60266092584), (-264.60266092584));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      ArrayUtils.swap(intArray0, 1, 2075);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      
      char[] charArray0 = new char[8];
      ArrayUtils.swap(charArray0, (-4851), 2147056288);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-101));
      assertNotSame(byteArray0, byteArray1);
      assertFalse(boolean1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (byte)14, 1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (byte)14);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)98;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)98, (double) (short)98);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {98.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)98;
      objectArray0[1] = (Object) 98.0;
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)98;
      longArray0[1] = (long) (short)98;
      longArray0[2] = (long) (short)98;
      longArray0[3] = (long) 0;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      assertEquals(135, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(192, bitSet0.size());
      assertEquals(9, bitSet0.cardinality());
      assertEquals("{1, 5, 6, 65, 69, 70, 129, 133, 134}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {98L, 98L, 98L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 1.0;
      doubleArray0[2] = 1.0;
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-273), 8192);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (-1));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.indexOf(intArray0, (-2145028933));
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom(1339L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BYTE_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Byte byte0 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      double[] doubleArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) (-1));
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte) (-58));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-58)}, shortArray1);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (short)1);
      assertFalse(boolean0);
      
      ArrayUtils.reverse((double[]) null);
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift((Object[]) null, 1, 1, (-1029));
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1163.15598168);
      doubleArray0[1] = 3559.3732;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1163.15598168), 3559.3732}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-2147483648L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (-3507L);
      longArray0[4] = (-2147483648L);
      longArray0[5] = (-17L);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      assertArrayEquals(new long[] {(-2147483648L), 0L, 0L, (-3507L), (-2147483648L), (-17L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Byte byte0 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-28);
      int int0 = ArrayUtils.indexOf((int[]) null, (-28));
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength((long[]) null, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(boolean1);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-2147483648L), 0L, 0L, (-3507L), (-2147483648L), (-17L)}, longArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (byte) (-28));
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-28)}, shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Byte byte0 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte) (-47);
      Byte byte2 = new Byte((byte) (-47));
      assertEquals((byte) (-47), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte) (-99));
      assertEquals((byte) (-99), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte0;
      byteArray0[1] = byte3;
      byteArray0[2] = byte2;
      byteArray0[3] = byte3;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byteArray0[6] = byte3;
      byteArray0[7] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte1);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-99), (byte) (-47), (byte) (-99), (byte)75, (byte)75, (byte) (-99), (byte) (-99)}, byteArray1);
      
      ArrayUtils.swap(byteArray1, (-1), 9, (-951));
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-99), (byte) (-47), (byte) (-99), (byte)75, (byte)75, (byte) (-99), (byte) (-99)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[4] = (float) (-710);
      floatArray0[5] = (float) 10;
      floatArray0[6] = 1254.7933F;
      floatArray0[7] = (float) (short)79;
      floatArray0[8] = (float) (-710);
      ArrayUtils.shift(floatArray0, (-97));
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {79.0F, (-710.0F), 0.0F, 0.0F, 0.0F, 0.0F, (-710.0F), 10.0F, 1254.7933F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {79.0F, (-710.0F), 0.0F, 0.0F, 0.0F, 0.0F, (-710.0F), 10.0F, 1254.7933F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 65;
      doubleArray0[1] = 1838.9;
      doubleArray0[2] = (double) (short)79;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 1254.7933F;
      doubleArray0[6] = (double) 0.0F;
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 1838.9, 79.0, 10.0, 0.0, 1254.7933349609375, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-61);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)23, (byte) (-47), (byte) (-90), (byte) (-20), (byte)45, (byte)45, (byte) (-61)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)23, (byte) (-47), (byte) (-90), (byte) (-20), (byte)45, (byte)45, (byte) (-61)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 111L;
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-89);
      shortArray0[1] = (short) (byte) (-89);
      shortArray0[2] = (short) (byte) (-89);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-89), (short) (-89), (short) (-89)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      int int0 = ArrayUtils.indexOf((int[]) null, (int) (short) (-89), 85);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 6;
      intArray0[5] = 662;
      int int0 = ArrayUtils.indexOf(intArray0, (-2185));
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 6, 662}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift((short[]) null, 6);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 0;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 406.4106639);
      assertEquals(5, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      long[] longArray2 = ArrayUtils.insert(0, longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotNull(longArray2);
      assertEquals(11, longArray2.length);
      assertEquals(3, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean1);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      charArray0[4] = '!';
      charArray0[5] = '!';
      charArray0[6] = '#';
      charArray0[7] = 'G';
      charArray0[8] = ')';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {';', '(', 'u', 'q', '!', '!', '#', 'G', ')'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '(';
      longArray0[1] = (long) ';';
      longArray0[2] = (-1L);
      longArray0[3] = (long) 0;
      longArray0[4] = (long) '(';
      longArray0[5] = (long) ')';
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 7);
      assertEquals(2, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {40L, 59L, (-1L), 0L, 40L, 41L}, longArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 41L;
      floatArray0[1] = (float) '#';
      floatArray0[2] = (float) '(';
      floatArray0[3] = (float) ')';
      floatArray0[4] = (float) '!';
      floatArray0[5] = (float) '(';
      floatArray0[6] = (float) '#';
      int int1 = ArrayUtils.indexOf(floatArray0, (float) 2);
      assertEquals((-1), int1);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {41.0F, 35.0F, 40.0F, 41.0F, 33.0F, 40.0F, 35.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-2145159530), 15);
      assertNull(longArray0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, objectArray0.length);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(5, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals(5, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      long[] longArray1 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray1);
      
      Byte byte0 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 3296.8079808;
      objectArray0[1] = (Object) 3296.8079808;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(2, objectArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1332.9109F);
      floatArray0[1] = (-1332.9109F);
      floatArray0[2] = (float) 84;
      floatArray0[3] = (float) 84;
      floatArray0[4] = (float) 84;
      floatArray0[5] = (float) 84;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 186.0F, 6363);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1332.9109F), (-1332.9109F), 84.0F, 84.0F, 84.0F, 84.0F}, floatArray0, 0.01F);
      
      Character character0 = new Character('C');
      assertEquals('C', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('F');
      assertEquals('F', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      Character character2 = Character.valueOf('C');
      assertEquals('C', (char)character2);
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1332.9109F), (-1332.9109F), 84.0F, 84.0F, 84.0F, 84.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.swap(longArray0, (-1), 2);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (-940.1);
      doubleArray0[6] = (double) 2;
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.swap(doubleArray0, 1136, 1804);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), 0.0, 2.0, (-940.1), 2.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (-1494.478F);
      floatArray0[3] = (float) 1136;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) 0L;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2.0F, (-1494.478F), 1136.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = 'X';
      charArray0[2] = '4';
      charArray0[3] = '8';
      charArray0[4] = 'X';
      charArray0[5] = '/';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'o', 'X', '4', '8', 'X', '/'}, charArray0);
      assertArrayEquals(new char[] {'o', 'X', '4', '8', 'X', '/'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)434;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)434);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)434}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (int) (short)434;
      intArray0[2] = (int) (short)434;
      intArray0[3] = (int) (short)434;
      intArray0[4] = (int) (short)434;
      intArray0[5] = (int) (short)434;
      intArray0[6] = (int) (short)434;
      intArray0[7] = (int) (short)434;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {1, 434, 434, 434, 434, 434, 434, 434}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)4;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-78), 434);
      assertEquals(0, int0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-78), (byte)4}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)2;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (byte)7;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (-3258.0);
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, Integer.MAX_VALUE, 710);
      assertNull(shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)82, 43);
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, 0, 1.5);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)97;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)97;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)2, 84);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)97, (short)2, (short)2, (short)97}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)97}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)96;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (int) (short)2);
      assertEquals((-1), int1);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)18, (byte) (-127), (byte)96}, byteArray0);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-264.60266092584), (-264.60266092584));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 1);
      assertEquals((-1), int0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)12145;
      shortArray0[2] = (short) (-241);
      shortArray0[3] = (short) (-167);
      ArrayUtils.shift(shortArray0, 1, (int) (short) (-241), (int) (short) (-241));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)12145, (short) (-241), (short) (-167)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)127;
      shortArray0[2] = (short)20902;
      shortArray0[3] = (short) (-12550);
      ArrayUtils.shift(shortArray0, (int) (short) (-12550), (-4143), (-357));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)127, (short)20902, (short) (-12550)}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertEquals(0, int0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true}, booleanArray0));
      
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(boolean1);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)16;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)16);
      assertEquals(3, int1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-7), (byte)36, (byte)76, (byte)16}, byteArray0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-52L));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[4] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      BitSet bitSet1 = new BitSet(2);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-264.60266092584), (-264.60266092584));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      ArrayUtils.swap(intArray0, 1, 1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      
      char[] charArray0 = new char[8];
      ArrayUtils.swap(charArray0, (-4851), 2147056288);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-101));
      assertNotSame(byteArray0, byteArray1);
      assertFalse(boolean1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean1 == boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (byte)14, 1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (byte)14);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      Double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-47);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-115));
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)2, (byte) (-91), (byte)14, (byte) (-47)}, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (byte) (-115), (-2125));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[2] = ';';
      charArray0[1] = '6';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      int[] intArray0 = new int[0];
      int int0 = new Character('u');
      assertEquals('u', int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)14, (byte)2, (byte) (-109), (byte) (-109), (byte)14}, byteArray1);
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)14, (byte)2, (byte) (-109), (byte) (-109), (byte)14}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Long long0 = new Long((byte)14);
      assertEquals(14L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long((byte)14);
      assertEquals(14L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      
      long[] longArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_LONG_OBJECT_ARRAY, (long) (-1));
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (byte)14, (double) (byte)2);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-264.60266092584), (-264.60266092584));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      ArrayUtils.swap(intArray0, 1, 2075);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'v';
      charArray0[4] = 'v';
      charArray0[5] = 'v';
      charArray0[6] = 'v';
      charArray0[7] = 'v';
      ArrayUtils.swap(charArray0, (-4851), 2147056288);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'v', 'v', 'v', 'v', 'v', 'v', 'v', 'v'}, charArray0);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      assertArrayEquals(new int[] {1, 1, 1}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-147.3135039356);
      doubleArray0[2] = (-1703.5);
      doubleArray0[3] = (-940.1);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1644.0;
      doubleArray0[7] = (-1611.261053914);
      doubleArray0[8] = (-368.46);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 3370.5704);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-147.3135039356), (-1703.5), (-940.1), 1.0, 1.0, 1644.0, (-1611.261053914), (-368.46)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3370.5704, 0.0, (-147.3135039356), (-1703.5), (-940.1), 1.0, 1.0, 1644.0, (-1611.261053914), (-368.46)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '1');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertArrayEquals(new char[] {'1', '1'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals("{1, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.length());
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(3, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      ArrayUtils.reverse(floatArray0, 3168, 797);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '^';
      charArray1[1] = 'S';
      charArray1[2] = 'Y';
      charArray1[3] = 'Y';
      charArray1[4] = 'Y';
      ArrayUtils.swap(charArray1, (-739), (-2166), 3168);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'^', 'S', 'Y', 'Y', 'Y'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.swap(floatArray0, (-739), 784, 1);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '+';
      charArray0[2] = 'I';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '&';
      charArray0[6] = '^';
      charArray0[7] = 'Y';
      charArray0[8] = 'G';
      ArrayUtils.swap(charArray0, 0, 0, (-739));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'|', '+', 'I', '3', '3', '&', '^', 'Y', 'G'}, charArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '^';
      floatArray0[1] = 1380.2548F;
      floatArray0[2] = (float) 'Y';
      ArrayUtils.swap(floatArray0, (-617), (int) 'G', 0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {94.0F, 1380.2548F, 89.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 2);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Byte byte0 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)68);
      assertEquals((byte)68, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = byte0;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) arrayUtils0.EMPTY_TYPE_ARRAY, (Object) short1, (int) (byte)68);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertTrue(short1.equals((Object)short0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short)2993;
      shortArray0[0] = (short)2993;
      short short1 = (short)1852;
      shortArray0[1] = (short)1852;
      short short2 = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)2312;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = ';';
      charArray0[0] = ';';
      char char1 = '(';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      int[] intArray0 = new int[0];
      int int0 = (-2145028933);
      Object object0 = null;
      int int1 = (-1090);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-77));
      assertEquals((byte) (-77), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      MutableInt mutableInt0 = new MutableInt((-2219));
      assertEquals((-2219), (int)mutableInt0.getValue());
      assertEquals((-2219L), mutableInt0.longValue());
      assertEquals((byte)85, mutableInt0.byteValue());
      assertEquals((-2219), (int)mutableInt0.toInteger());
      assertEquals((-2219.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-2219", mutableInt0.toString());
      assertEquals((-2219.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2219), mutableInt0.intValue());
      assertEquals((short) (-2219), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((-667));
      assertEquals((short) (-667), mutableInt1.shortValue());
      assertEquals((byte)101, mutableInt1.byteValue());
      assertEquals((-667), (int)mutableInt1.getValue());
      assertEquals((-667.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-667.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-667), mutableInt1.intValue());
      assertEquals((-667L), mutableInt1.longValue());
      assertEquals((-667), (int)mutableInt1.toInteger());
      assertEquals("-667", mutableInt1.toString());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      ArrayUtils.swap((short[]) null, 1828, (-181));
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1828;
      intArray0[1] = 1828;
      intArray0[2] = (-531);
      intArray0[3] = 1828;
      intArray0[4] = (int) (byte) (-77);
      intArray0[5] = (-2219);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1828, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1574);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-1574));
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1574)}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      charArray0[1] = '$';
      charArray0[2] = 'l';
      charArray0[3] = 'w';
      charArray0[4] = 'Q';
      charArray0[5] = 'A';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertArrayEquals(new char[] {'v', '$', 'l', 'w', 'Q', 'A'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3311.5363;
      doubleArray0[1] = (-339.0374622019306);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 5024.0;
      doubleArray0[4] = (-2917.31109);
      doubleArray0[5] = 0.7;
      doubleArray0[6] = 835.0;
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, doubleArray0);
      assertNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {3311.5363, (-339.0374622019306), 1.0, 5024.0, (-2917.31109), 0.7, 835.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null, 0.0);
      assertNull(doubleArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3311.5363, 3311.5363);
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2, 3, 5, 6}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {3311.5363, (-339.0374622019306), 1.0, 5024.0, (-2917.31109), 0.7, 835.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3103;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)3103;
      shortArray0[3] = (short)3103;
      shortArray0[4] = (short)3103;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)31341);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)3103, (short) (-1), (short)3103, (short)3103, (short)3103}, shortArray0);
      assertArrayEquals(new short[] {(short)3103, (short) (-1), (short)3103, (short)3103, (short)3103, (short)31341}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = new short[8];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short) (-1);
      shortArray2[1] = (short)31341;
      shortArray2[2] = (short) (-2510);
      shortArray2[3] = (short) (-1);
      shortArray2[4] = (short)31341;
      shortArray2[5] = (short) (-1);
      shortArray2[6] = (short)3103;
      shortArray2[7] = (short)31341;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray2, (short)578, (int) (short)31341);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(8, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-1), (short)31341, (short) (-2510), (short) (-1), (short)31341, (short) (-1), (short)3103, (short)31341}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2527);
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-2527), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2527)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)126;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-48));
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-48), (byte)53, (byte)126}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, true, true, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-18);
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0, (byte) (-18)}, byteArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'f';
      charArray0[3] = '*';
      charArray0[4] = '}';
      charArray0[5] = 't';
      charArray0[6] = 'N';
      charArray0[7] = '3';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'f', '\u0000', '*', '}', 't', 'N', '3'}, charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-18);
      shortArray0[2] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-18), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-18)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-672.6430477), 1032, 1731.0);
      assertEquals(8, int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MutableInt mutableInt0 = new MutableInt(0.0);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("0", mutableInt1.toString());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt1.byteValue());
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      assertNotNull(mutableInt1);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2031.8444, 66, (-4577.60805));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 66;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      int int1 = ArrayUtils.indexOf(floatArray0, Float.NaN, 0);
      assertEquals((-1), int1);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {66.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-192);
      shortArray0[2] = (short) (-192);
      shortArray0[4] = (short) (-192);
      shortArray0[5] = (short) (-1);
      ArrayUtils.swap(shortArray0, 2763, (-1051), (-1));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-192), (short)0, (short) (-192), (short)0, (short) (-192), (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[20];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(20, booleanArray0.length);
      assertEquals(40, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      MutableInt mutableInt0 = new MutableInt(983);
      assertEquals(983.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(983, mutableInt0.intValue());
      assertEquals((short)983, mutableInt0.shortValue());
      assertEquals("983", mutableInt0.toString());
      assertEquals(983.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(983, (int)mutableInt0.getValue());
      assertEquals((byte) (-41), mutableInt0.byteValue());
      assertEquals(983, (int)mutableInt0.toInteger());
      assertEquals(983L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertEquals(983.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(983, mutableInt0.intValue());
      assertEquals((short)983, mutableInt0.shortValue());
      assertEquals("983", mutableInt0.toString());
      assertEquals(983.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(983, (int)mutableInt0.getValue());
      assertEquals((byte) (-41), mutableInt0.byteValue());
      assertEquals(983, (int)mutableInt0.toInteger());
      assertEquals(983L, mutableInt0.longValue());
      assertEquals(983.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte) (-41), mutableInt1.byteValue());
      assertEquals("983", mutableInt1.toString());
      assertEquals(983, (int)mutableInt1.getValue());
      assertEquals(983, (int)mutableInt1.toInteger());
      assertEquals(983L, mutableInt1.longValue());
      assertEquals(983.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(983, mutableInt1.intValue());
      assertEquals((short)983, mutableInt1.shortValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt(1318);
      assertEquals(1318, (int)mutableInt2.getValue());
      assertEquals(1318.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((short)1318, mutableInt2.shortValue());
      assertEquals(1318.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(1318, (int)mutableInt2.toInteger());
      assertEquals((byte)38, mutableInt2.byteValue());
      assertEquals(1318L, mutableInt2.longValue());
      assertEquals(1318, mutableInt2.intValue());
      assertEquals("1318", mutableInt2.toString());
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      
      MutableInt mutableInt3 = new MutableInt(0);
      assertEquals("0", mutableInt3.toString());
      assertEquals(0.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(0L, mutableInt3.longValue());
      assertEquals(0.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt3.getValue());
      assertEquals(0, (int)mutableInt3.toInteger());
      assertEquals((byte)0, mutableInt3.byteValue());
      assertEquals(0, mutableInt3.intValue());
      assertEquals((short)0, mutableInt3.shortValue());
      assertNotNull(mutableInt3);
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      
      MutableInt mutableInt4 = new MutableInt(mutableInt1);
      assertEquals(983.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(983, mutableInt0.intValue());
      assertEquals((short)983, mutableInt0.shortValue());
      assertEquals("983", mutableInt0.toString());
      assertEquals(983.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(983, (int)mutableInt0.getValue());
      assertEquals((byte) (-41), mutableInt0.byteValue());
      assertEquals(983, (int)mutableInt0.toInteger());
      assertEquals(983L, mutableInt0.longValue());
      assertEquals(983.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte) (-41), mutableInt1.byteValue());
      assertEquals("983", mutableInt1.toString());
      assertEquals(983, (int)mutableInt1.getValue());
      assertEquals(983, (int)mutableInt1.toInteger());
      assertEquals(983L, mutableInt1.longValue());
      assertEquals(983.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(983, mutableInt1.intValue());
      assertEquals((short)983, mutableInt1.shortValue());
      assertEquals(983.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(983, mutableInt4.intValue());
      assertEquals(983, (int)mutableInt4.getValue());
      assertEquals(983, (int)mutableInt4.toInteger());
      assertEquals((byte) (-41), mutableInt4.byteValue());
      assertEquals("983", mutableInt4.toString());
      assertEquals((short)983, mutableInt4.shortValue());
      assertEquals(983L, mutableInt4.longValue());
      assertEquals(983.0, mutableInt4.doubleValue(), 0.01);
      assertNotNull(mutableInt4);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      assertTrue(mutableInt4.equals((Object)mutableInt0));
      
      int int0 = mutableInt4.incrementAndGet();
      assertEquals(983.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(983, mutableInt0.intValue());
      assertEquals((short)983, mutableInt0.shortValue());
      assertEquals("983", mutableInt0.toString());
      assertEquals(983.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(983, (int)mutableInt0.getValue());
      assertEquals((byte) (-41), mutableInt0.byteValue());
      assertEquals(983, (int)mutableInt0.toInteger());
      assertEquals(983L, mutableInt0.longValue());
      assertEquals(983.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte) (-41), mutableInt1.byteValue());
      assertEquals("983", mutableInt1.toString());
      assertEquals(983, (int)mutableInt1.getValue());
      assertEquals(983, (int)mutableInt1.toInteger());
      assertEquals(983L, mutableInt1.longValue());
      assertEquals(983.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(983, mutableInt1.intValue());
      assertEquals((short)983, mutableInt1.shortValue());
      assertEquals(984, mutableInt4.intValue());
      assertEquals(984, (int)mutableInt4.getValue());
      assertEquals((byte) (-40), mutableInt4.byteValue());
      assertEquals(984, (int)mutableInt4.toInteger());
      assertEquals("984", mutableInt4.toString());
      assertEquals((short)984, mutableInt4.shortValue());
      assertEquals(984.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(984L, mutableInt4.longValue());
      assertEquals(984.0, mutableInt4.doubleValue(), 0.01);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt0, mutableInt3);
      assertNotSame(mutableInt0, mutableInt4);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt4);
      assertNotSame(mutableInt1, mutableInt0);
      assertNotSame(mutableInt1, mutableInt2);
      assertNotSame(mutableInt1, mutableInt3);
      assertNotSame(mutableInt4, mutableInt2);
      assertNotSame(mutableInt4, mutableInt3);
      assertNotSame(mutableInt4, mutableInt1);
      assertNotSame(mutableInt4, mutableInt0);
      assertEquals(984, int0);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertFalse(mutableInt0.equals((Object)mutableInt4));
      assertFalse(mutableInt1.equals((Object)mutableInt4));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      
      MutableInt mutableInt5 = new MutableInt(mutableInt4);
      assertEquals(983.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(983, mutableInt0.intValue());
      assertEquals((short)983, mutableInt0.shortValue());
      assertEquals("983", mutableInt0.toString());
      assertEquals(983.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(983, (int)mutableInt0.getValue());
      assertEquals((byte) (-41), mutableInt0.byteValue());
      assertEquals(983, (int)mutableInt0.toInteger());
      assertEquals(983L, mutableInt0.longValue());
      assertEquals(983.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte) (-41), mutableInt1.byteValue());
      assertEquals("983", mutableInt1.toString());
      assertEquals(983, (int)mutableInt1.getValue());
      assertEquals(983, (int)mutableInt1.toInteger());
      assertEquals(983L, mutableInt1.longValue());
      assertEquals(983.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(983, mutableInt1.intValue());
      assertEquals((short)983, mutableInt1.shortValue());
      assertEquals(984, mutableInt4.intValue());
      assertEquals(984, (int)mutableInt4.getValue());
      assertEquals((byte) (-40), mutableInt4.byteValue());
      assertEquals(984, (int)mutableInt4.toInteger());
      assertEquals("984", mutableInt4.toString());
      assertEquals((short)984, mutableInt4.shortValue());
      assertEquals(984.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(984L, mutableInt4.longValue());
      assertEquals(984.0, mutableInt4.doubleValue(), 0.01);
      assertEquals(984, mutableInt5.intValue());
      assertEquals(984L, mutableInt5.longValue());
      assertEquals(984.0, mutableInt5.doubleValue(), 0.01);
      assertEquals(984.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals((short)984, mutableInt5.shortValue());
      assertEquals(984, (int)mutableInt5.getValue());
      assertEquals((byte) (-40), mutableInt5.byteValue());
      assertEquals("984", mutableInt5.toString());
      assertEquals(984, (int)mutableInt5.toInteger());
      assertNotNull(mutableInt5);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertFalse(mutableInt0.equals((Object)mutableInt4));
      assertFalse(mutableInt1.equals((Object)mutableInt4));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertTrue(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      
      MutableInt mutableInt6 = new MutableInt((-1));
      assertEquals((-1), mutableInt6.intValue());
      assertEquals((-1.0), mutableInt6.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt6.longValue());
      assertEquals((short) (-1), mutableInt6.shortValue());
      assertEquals((-1.0F), mutableInt6.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt6.getValue());
      assertEquals((-1), (int)mutableInt6.toInteger());
      assertEquals((byte) (-1), mutableInt6.byteValue());
      assertEquals("-1", mutableInt6.toString());
      assertNotNull(mutableInt6);
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      
      Short short0 = new Short((short) (-4554));
      assertEquals((short) (-4554), (short)short0);
      assertNotNull(short0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '^');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1163.15598168);
      doubleArray0[1] = (-1163.15598168);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1163.15598168), (-1163.15598168)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-2147483648L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (-3507L);
      longArray0[4] = (-2147483648L);
      Double double0 = new Double((-458.948837484862));
      assertEquals((-458.948837484862), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(2008.645183378);
      assertEquals(2008.645183378, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '2';
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {50.0}, doubleArray0, 0.01);
      
      Double double0 = new Double(3.0);
      assertEquals(3.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0L);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (-1703.5);
      doubleArray0[3] = (-940.1);
      doubleArray0[4] = 1.0;
      doubleArray0[3] = 1.0;
      int[] intArray0 = new int[6];
      intArray0[1] = 2335;
      intArray0[2] = 2335;
      intArray0[3] = 2335;
      intArray0[4] = (-2564);
      intArray0[5] = (-2564);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2564), 83);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 2335, 2335, 2335, (-2564), (-2564)}, intArray0);
      
      int int0 = bitSet0.previousClearBit(2420);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(2420, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 2335, 2335, 2335, (-2564), (-2564)}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      int int0 = 1028;
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, 1028, (Object) null);
      assertNull(object0);
      assertEquals(6, objectArray0.length);
      
      objectArray0[0] = null;
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray1[1] = object1;
      int int1 = ArrayUtils.indexOf(objectArray1, object1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(1, int1);
      assertEquals(2, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(int1 == int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) 1);
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1028;
      intArray0[2] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Byte byte0 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte0);
      assertNotNull(byte0);
      
      Long long0 = new Long(541L);
      assertEquals(541L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      Character character0 = Character.valueOf('K');
      assertEquals('K', (char)character0);
      assertNotNull(character0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) character0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      ArrayUtils.swap((float[]) null, Integer.MAX_VALUE, 4281);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = (-787L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1326, 90);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-787L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-77));
      assertEquals((byte) (-77), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      byte byte4 = (byte) (-42);
      Byte byte5 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte4);
      assertEquals((byte) (-42), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte4 == byte0);
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      
      byteArray0[4] = byte6;
      byte byte7 = (byte) (-1);
      Byte byte8 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte8);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte5));
      
      byteArray0[5] = byte8;
      Byte byte9 = new Byte((byte) (-24));
      assertEquals((byte) (-24), (byte)byte9);
      assertNotNull(byte9);
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte8));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-77);
      doubleArray0[1] = (double) (byte) (-24);
      doubleArray0[2] = (double) (byte) (-1);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 777.67469;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {(-77.0), (-24.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {777.67469}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-77.0), (-24.0), (-1.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = ArrayUtils.toPrimitive((Double[]) null, (-643.9878713));
      assertNull(doubleArray3);
      
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) (byte) (-24);
      doubleArray4[1] = (double) byte7;
      doubleArray4[2] = (double) byte4;
      doubleArray4[3] = (double) byte0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray4, (-1.0), 311.8);
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray4.length);
      assertArrayEquals(new double[] {(-24.0), (-1.0), (-42.0), 1.0}, doubleArray4, 0.01);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray2 = new long[8];
      long[] longArray3 = ArrayUtils.removeElements(longArray2, longArray2);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotNull(longArray3);
      assertEquals(8, longArray2.length);
      assertEquals(0, longArray3.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertFalse(longArray3.equals((Object)longArray2));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(60);
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(booleanArray1, (Random) mockRandom0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray2.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) longArray0[0];
      Float float0 = new Float((float) 704L);
      assertEquals(704.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) float0);
      assertEquals((-1), int1);
      assertEquals(1, objectArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) doubleArray2, (Object) null, Integer.MAX_VALUE);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1209);
      shortArray0[1] = (short) (-192);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)43;
      doubleArray0[1] = (double) (short) (-2126);
      shortArray0[5] = (short) (-1176);
      shortArray0[6] = (short) (-3015);
      shortArray0[7] = (short) (-917);
      shortArray0[8] = (short) (-648);
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'Y';
      charArray0[2] = 'X';
      charArray0[3] = '8';
      charArray0[4] = 'L';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'1', 'Y', 'X', '8', 'L'}, charArray0);
      assertArrayEquals(new char[] {'1', 'Y', 'X', '8', 'L'}, charArray1);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-3829));
      assertEquals((short) (-3829), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(stringArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, stringArray0.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt[] mutableIntArray1 = ArrayUtils.subarray(mutableIntArray0, 1, 1055);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertEquals(2, mutableIntArray0.length);
      assertEquals(1, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      Short short1 = new Short((short)8);
      assertEquals((short)8, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short) (-694));
      assertEquals((short) (-694), (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = (Character) '8';
      characterArray0[1] = (Character) 'X';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray2.length);
      assertArrayEquals(new char[] {'8', 'X'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2031.8444, 66, (-4577.60805));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 66;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      ArrayUtils.swap(charArray0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'Y', '\u0000'}, charArray0);
      
      ArrayUtils.swap(floatArray0, (-1759), 227, (-1759));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {66.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      Short short0 = new Short((short)34);
      assertEquals((short)34, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[9];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short0;
      shortArray0[8] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertArrayEquals(new short[] {(short)34, (short)34, (short)34, (short)34, (short)34, (short)34, (short)34, (short)34, (short)34}, shortArray1);
      
      String string0 = ArrayUtils.toString((Object) ",", "vay77Z`320sp");
      assertEquals(",", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2084);
      shortArray0[1] = (short) (-1);
      ArrayUtils.swap(shortArray0, (int) (short) (-1), (int) (short) (-1), (-305));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2084), (short) (-1)}, shortArray0);
      
      Double double0 = new Double((short) (-2084));
      assertEquals((-2084.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((short) (-2084));
      assertEquals((-2084.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-305));
      assertEquals((-305.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double((short) (-1));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-2938.279));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-2084.0), (-2084.0), (-2938.279)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-147.3135039356);
      doubleArray0[2] = (-1703.5);
      doubleArray0[3] = (-940.1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2615.189456467, (-3160), 472.728);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-147.3135039356), (-1703.5), (-940.1), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-3160);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-3160);
      floatArray0[3] = (float) (-1);
      int int1 = ArrayUtils.indexOf(floatArray0, (float) (-3160), (-3160));
      assertEquals(0, int1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-3160.0F), (-1.0F), (-3160.0F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      
      int int2 = ArrayUtils.indexOf((byte[]) null, (byte)66, (int) (byte) (-22));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      ArrayUtils.swap((Object[]) null, 523, 523);
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1398, 0);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)3258;
      ArrayUtils.shift(intArray0, (-2484));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {3258}, intArray0);
      
      Integer integer0 = new Integer((short)2788);
      assertEquals(2788, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, (Integer) 3258);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      Character character0 = Character.valueOf('@');
      assertEquals('@', (char)character0);
      assertNotNull(character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[20];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(20, booleanArray0.length);
      assertEquals(40, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      MutableInt mutableInt0 = new MutableInt(983);
      assertEquals((short)983, mutableInt0.shortValue());
      assertEquals(983, (int)mutableInt0.getValue());
      assertEquals((byte) (-41), mutableInt0.byteValue());
      assertEquals("983", mutableInt0.toString());
      assertEquals(983, (int)mutableInt0.toInteger());
      assertEquals(983L, mutableInt0.longValue());
      assertEquals(983.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(983.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(983, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertEquals((short)983, mutableInt0.shortValue());
      assertEquals(983, (int)mutableInt0.getValue());
      assertEquals((byte) (-41), mutableInt0.byteValue());
      assertEquals("983", mutableInt0.toString());
      assertEquals(983, (int)mutableInt0.toInteger());
      assertEquals(983L, mutableInt0.longValue());
      assertEquals(983.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(983.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(983, mutableInt0.intValue());
      assertEquals((byte) (-41), mutableInt1.byteValue());
      assertEquals(983.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)983, mutableInt1.shortValue());
      assertEquals(983.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(983, mutableInt1.intValue());
      assertEquals(983L, mutableInt1.longValue());
      assertEquals("983", mutableInt1.toString());
      assertEquals(983, (int)mutableInt1.toInteger());
      assertEquals(983, (int)mutableInt1.getValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt(1318);
      assertEquals(1318, (int)mutableInt2.getValue());
      assertEquals(1318.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((byte)38, mutableInt2.byteValue());
      assertEquals(1318, (int)mutableInt2.toInteger());
      assertEquals("1318", mutableInt2.toString());
      assertEquals(1318L, mutableInt2.longValue());
      assertEquals(1318, mutableInt2.intValue());
      assertEquals(1318.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)1318, mutableInt2.shortValue());
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      
      MutableInt mutableInt3 = new MutableInt(0);
      assertEquals(0.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt3.shortValue());
      assertEquals(0.0, mutableInt3.doubleValue(), 0.01);
      assertEquals("0", mutableInt3.toString());
      assertEquals(0L, mutableInt3.longValue());
      assertEquals(0, mutableInt3.intValue());
      assertEquals(0, (int)mutableInt3.getValue());
      assertEquals((byte)0, mutableInt3.byteValue());
      assertEquals(0, (int)mutableInt3.toInteger());
      assertNotNull(mutableInt3);
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      
      MutableInt mutableInt4 = new MutableInt(mutableInt1);
      assertEquals((short)983, mutableInt0.shortValue());
      assertEquals(983, (int)mutableInt0.getValue());
      assertEquals((byte) (-41), mutableInt0.byteValue());
      assertEquals("983", mutableInt0.toString());
      assertEquals(983, (int)mutableInt0.toInteger());
      assertEquals(983L, mutableInt0.longValue());
      assertEquals(983.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(983.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(983, mutableInt0.intValue());
      assertEquals((byte) (-41), mutableInt1.byteValue());
      assertEquals(983.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)983, mutableInt1.shortValue());
      assertEquals(983.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(983, mutableInt1.intValue());
      assertEquals(983L, mutableInt1.longValue());
      assertEquals("983", mutableInt1.toString());
      assertEquals(983, (int)mutableInt1.toInteger());
      assertEquals(983, (int)mutableInt1.getValue());
      assertEquals((byte) (-41), mutableInt4.byteValue());
      assertEquals("983", mutableInt4.toString());
      assertEquals(983, (int)mutableInt4.toInteger());
      assertEquals(983, (int)mutableInt4.getValue());
      assertEquals(983, mutableInt4.intValue());
      assertEquals(983L, mutableInt4.longValue());
      assertEquals(983.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(983.0, mutableInt4.doubleValue(), 0.01);
      assertEquals((short)983, mutableInt4.shortValue());
      assertNotNull(mutableInt4);
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      assertTrue(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      
      MutableInt mutableInt5 = new MutableInt(mutableInt4);
      assertEquals((short)983, mutableInt0.shortValue());
      assertEquals(983, (int)mutableInt0.getValue());
      assertEquals((byte) (-41), mutableInt0.byteValue());
      assertEquals("983", mutableInt0.toString());
      assertEquals(983, (int)mutableInt0.toInteger());
      assertEquals(983L, mutableInt0.longValue());
      assertEquals(983.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(983.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(983, mutableInt0.intValue());
      assertEquals((byte) (-41), mutableInt1.byteValue());
      assertEquals(983.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)983, mutableInt1.shortValue());
      assertEquals(983.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(983, mutableInt1.intValue());
      assertEquals(983L, mutableInt1.longValue());
      assertEquals("983", mutableInt1.toString());
      assertEquals(983, (int)mutableInt1.toInteger());
      assertEquals(983, (int)mutableInt1.getValue());
      assertEquals((byte) (-41), mutableInt4.byteValue());
      assertEquals("983", mutableInt4.toString());
      assertEquals(983, (int)mutableInt4.toInteger());
      assertEquals(983, (int)mutableInt4.getValue());
      assertEquals(983, mutableInt4.intValue());
      assertEquals(983L, mutableInt4.longValue());
      assertEquals(983.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(983.0, mutableInt4.doubleValue(), 0.01);
      assertEquals((short)983, mutableInt4.shortValue());
      assertEquals(983.0, mutableInt5.doubleValue(), 0.01);
      assertEquals(983, (int)mutableInt5.getValue());
      assertEquals(983L, mutableInt5.longValue());
      assertEquals(983.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals(983, (int)mutableInt5.toInteger());
      assertEquals((byte) (-41), mutableInt5.byteValue());
      assertEquals("983", mutableInt5.toString());
      assertEquals(983, mutableInt5.intValue());
      assertEquals((short)983, mutableInt5.shortValue());
      assertNotNull(mutableInt5);
      assertTrue(mutableInt0.equals((Object)mutableInt4));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertTrue(mutableInt1.equals((Object)mutableInt4));
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      assertTrue(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertTrue(mutableInt5.equals((Object)mutableInt1));
      assertTrue(mutableInt5.equals((Object)mutableInt0));
      assertTrue(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      
      MutableInt mutableInt6 = new MutableInt((-1));
      assertEquals("-1", mutableInt6.toString());
      assertEquals((-1), mutableInt6.intValue());
      assertEquals((-1L), mutableInt6.longValue());
      assertEquals((-1), (int)mutableInt6.getValue());
      assertEquals((-1), (int)mutableInt6.toInteger());
      assertEquals((byte) (-1), mutableInt6.byteValue());
      assertEquals((-1.0F), mutableInt6.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt6.shortValue());
      assertEquals((-1.0), mutableInt6.doubleValue(), 0.01);
      assertNotNull(mutableInt6);
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      
      Short short0 = new Short((short) (-4554));
      assertEquals((short) (-4554), (short)short0);
      assertNotNull(short0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      mutableIntArray0[0] = mutableInt1;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElement(mutableIntArray0, (Object) mutableInt2);
      assertEquals(1318, (int)mutableInt2.getValue());
      assertEquals(1318.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((byte)38, mutableInt2.byteValue());
      assertEquals(1318, (int)mutableInt2.toInteger());
      assertEquals("1318", mutableInt2.toString());
      assertEquals(1318L, mutableInt2.longValue());
      assertEquals(1318, mutableInt2.intValue());
      assertEquals(1318.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)1318, mutableInt2.shortValue());
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableInt2, mutableInt0);
      assertNotSame(mutableInt2, mutableInt5);
      assertNotSame(mutableInt2, mutableInt4);
      assertNotSame(mutableInt2, mutableInt6);
      assertNotSame(mutableInt2, mutableInt3);
      assertNotSame(mutableInt2, mutableInt1);
      assertNotNull(mutableIntArray1);
      assertEquals(1, mutableIntArray0.length);
      assertEquals(1, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt5));
      assertFalse(mutableInt2.equals((Object)mutableInt4));
      assertFalse(mutableInt2.equals((Object)mutableInt6));
      assertFalse(mutableInt2.equals((Object)mutableInt3));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-147.3135039356);
      doubleArray0[2] = (-1703.5);
      doubleArray0[3] = (-940.1);
      doubleArray0[4] = 1.0;
      doubleArray0[3] = (-940.1);
      doubleArray0[6] = 1644.0;
      doubleArray0[7] = (-1611.26105);
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 6);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-667));
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-667)}, shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 1.0;
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-669.6430477), (-669.6430477));
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = new Float[10];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 216.72528F);
      assertNotNull(floatArray1);
      assertEquals(10, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertArrayEquals(new float[] {216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F}, floatArray1, 0.01F);
      
      ArrayUtils.swap(byteArray0, (-167), (-167), (-167));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean1);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      Float float0 = new Float((-1241.0698F));
      assertEquals((-1241.0698F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1241.0698F));
      assertEquals((-1241.0698F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float0;
      floatArray0[1] = float1;
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {(-1241.0698F), (-1241.0698F), (-1241.0698F), 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)80}, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)80;
      doubleArray0[2] = 1.0;
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short1;
      shortArray0[1] = short2;
      shortArray0[2] = short2;
      shortArray0[3] = short1;
      shortArray0[4] = short1;
      shortArray0[5] = short2;
      shortArray0[6] = short2;
      shortArray0[7] = short1;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(8, shortArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) short0;
      intArray0[1] = (int) short0;
      intArray0[2] = (int) short0;
      intArray0[3] = (int) short0;
      intArray0[4] = (int) short0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1785), (int) short0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'f');
      assertFalse(boolean1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'i'}, charArray0);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)13}, byteArray0);
      
      Short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) short0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals(8, floatArray0.length);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-689.44068));
      assertEquals((-689.4407F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(0.0);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float((float) short0);
      assertEquals(0.0F, (float)float7, 0.01F);
      assertNotNull(float7);
      assertEquals((float)float7, (float)float2, 0.01F);
      assertEquals((float)float7, (float)float1, 0.01F);
      assertEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      
      floatArray0[7] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 74.0F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-689.4407F), 0.0F, (-1.0F), (-1.0F), 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-940.1);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-60.276137606);
      doubleArray0[3] = 704.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 4187.553513360001;
      doubleArray0[6] = (-3258.0);
      doubleArray0[7] = (-4284.093772903);
      doubleArray0[8] = (-2465.51072669);
      int int0 = ArrayUtils.indexOf(doubleArray0, 3.0, (-2465.51072669));
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-940.1), 1.0, (-60.276137606), 704.0, (-1.0), 4187.553513360001, (-3258.0), (-4284.093772903), (-2465.51072669)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 704.0;
      objectArray0[1] = (Object) (-2465.51072669);
      objectArray0[2] = (Object) (-60.276137606);
      ArrayUtils.shift(objectArray0, (-1));
      assertEquals(3, objectArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-100), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -100, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (-544);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(10, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-544), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Character character0 = Character.valueOf('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray0, (long) (short) (-544));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray2.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-544), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -544, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 61;
      longArray0[1] = (long) 61;
      longArray0[2] = (long) (-2272);
      ArrayUtils.swap(longArray0, (-2272), (-2272), (-2272));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {61L, 61L, (-2272L)}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2272);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 61L;
      doubleArray0[4] = 2.14722176E9;
      doubleArray0[4] = (double) 61L;
      doubleArray0[5] = (double) (-2272);
      doubleArray0[6] = 2.14722176E9;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 61L;
      ArrayUtils.shift(doubleArray0, (-2272));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {61.0, (-2272.0), 2.14722176E9, 1.0, 61.0, (-2272.0), 1.0, 61.0, 0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = null;
      Object[] objectArray1 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray1);
      assertEquals(0, objectArray1.length);
      
      Float float0 = new Float((float) 61);
      assertEquals(61.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 6;
      intArray0[5] = 662;
      int int0 = ArrayUtils.indexOf(intArray0, (-2185));
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 6, 662}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom(1987L);
      assertNotNull(mockRandom0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = ArrayUtils.removeAllOccurrences(arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, short0);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift((Object[]) arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY, 691, 0, (-2143372541));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean boolean1 = ArrayUtils.contains(arrayUtils0.EMPTY_DOUBLE_ARRAY, 1037.0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.reverse(arrayUtils0.EMPTY_INT_ARRAY);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Integer integer0 = new Integer(662);
      assertEquals(662, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Double double0 = new Double((-284.0));
      assertEquals((-284.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertEquals((-284.0), object0);
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "java.lang.Short");
      assertEquals("662", string0);
      assertNotNull(string0);
      assertFalse(integer0.equals((Object)int0));
      
      ArrayUtils.shift((long[]) null, (-384));
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.swap(longArray0, (-1), 2);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 2.0;
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      ArrayUtils.shift((double[]) null, (-1), 126, 127);
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(longArray1, 48);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)10;
      Byte byte1 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)37);
      assertEquals((byte)37, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte)10, (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      
      byteArray0[4] = byte5;
      try { 
        Byte.decode("java.lang.Short");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Short\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 1.0;
      doubleArray0[2] = 1.0;
      long[] longArray0 = new long[6];
      longArray0[0] = (-582L);
      longArray0[1] = (long) 64;
      longArray0[2] = (-582L);
      longArray0[3] = (long) 64;
      longArray0[4] = (long) 64;
      longArray0[5] = (long) 64;
      ArrayUtils.shift(longArray0, 59);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {64L, (-582L), 64L, 64L, 64L, (-582L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('o');
      assertEquals('o', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('k');
      assertEquals('k', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('k');
      assertEquals('k', (char)character2);
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'T');
      assertNotNull(charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'o', 'k', 'k'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      char[] charArray0 = new char[27];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      charArray0[5] = 'S';
      charArray0[6] = '#';
      charArray0[7] = 'G';
      charArray0[8] = ')';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(27, charArray0.length);
      assertEquals(54, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '(';
      intArray0[1] = (int) '!';
      intArray0[2] = (int) ')';
      intArray0[3] = (int) '#';
      intArray0[4] = 121;
      intArray0[5] = (int) '(';
      intArray0[6] = (int) 'q';
      intArray0[7] = (int) '!';
      int[] intArray1 = ArrayUtils.add(intArray0, 40);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {40, 33, 41, 35, 121, 40, 113, 33, 40}, intArray1);
      assertArrayEquals(new int[] {40, 33, 41, 35, 121, 40, 113, 33}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'G';
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = (Character) 'S';
      characterArray0[1] = (Character) ')';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0, ';');
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray2.length);
      assertArrayEquals(new char[] {'S', ')'}, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      Character[] characterArray0 = new Character[21];
      Character character0 = new Character('7');
      assertEquals('7', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('\"');
      assertEquals('\"', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = new Character('-');
      assertEquals('-', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      characterArray0[2] = character2;
      Character character3 = new Character('\\');
      assertEquals('\\', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      
      characterArray0[3] = character3;
      Character character4 = new Character('+');
      assertEquals('+', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf((char) character1);
      assertEquals('\"', (char)character5);
      assertNotNull(character5);
      assertFalse(character1.equals((Object)character4));
      assertFalse(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertTrue(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character2));
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('O');
      assertEquals('O', (char)character6);
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character5));
      
      characterArray0[6] = character6;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '7');
      assertNotNull(charArray0);
      assertEquals(21, characterArray0.length);
      assertEquals(21, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '.');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-2145159530), 15);
      assertNull(longArray0);
      
      Short[] shortArray0 = new Short[0];
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, objectArray0.length);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(5, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Long[] longArray1 = new Long[1];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) (-2145159530));
      assertNotNull(longArray2);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      assertArrayEquals(new long[] {(-2145159530L)}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[5] = 0;
      intArray0[1] = (-888);
      intArray0[2] = 76;
      intArray0[3] = (-874);
      int int0 = new Integer(76);
      assertEquals(76, int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 76;
      objectArray0[1] = (Object) (-888);
      objectArray0[2] = (Object) (-874);
      objectArray0[3] = (Object) (-888);
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(4, objectArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      Long[] longArray1 = new Long[3];
      longArray1[0] = (Long) 0L;
      longArray1[1] = (Long) 0L;
      longArray1[2] = (Long) 0L;
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyLong() , anyLong());
      boolean boolean0 = ArrayUtils.isSorted(longArray1, comparator0);
      assertTrue(boolean0);
      assertEquals(3, longArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'E';
      charArray0[2] = 'B';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'T');
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'E', 'B'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 10, 84);
      assertNull(shortArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray1 = new short[5];
      shortArray1[0] = (short)2154;
      shortArray1[1] = (short)97;
      shortArray1[2] = (short)97;
      shortArray1[3] = (short) (byte)84;
      ArrayUtils.shuffle(shortArray1, (Random) mockRandom0);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short)97, (short)97, (short)84, (short)0, (short)2154}, shortArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)84;
      intArray0[1] = (int) (byte)84;
      intArray0[2] = (int) (short)97;
      intArray0[3] = (int) (short)84;
      intArray0[4] = (int) (short)97;
      ArrayUtils.reverse(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {97, 84, 97, 84, 84}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 0.1, 2, (-1.0));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = '=';
      charArray0[2] = 'S';
      charArray0[3] = '#';
      charArray0[4] = '{';
      charArray0[5] = 'f';
      charArray0[6] = '[';
      char[] charArray1 = ArrayUtils.remove(charArray0, 2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'Y', '=', 'S', '#', '{', 'f', '['}, charArray0);
      assertArrayEquals(new char[] {'Y', '=', '#', '{', 'f', '['}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-38), (-38), (-38));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[1] = (long) (-38);
      longArray0[2] = (long) (-38);
      longArray0[3] = (long) (-38);
      longArray0[4] = (long) (-38);
      longArray0[6] = (long) (-38);
      longArray0[7] = (long) (-38);
      longArray0[8] = (long) (-38);
      ArrayUtils.reverse(longArray0, (-38), (-38));
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, (-38L), (-38L), (-38L), (-38L), 0L, (-38L), (-38L), (-38L)}, longArray0);
      
      Double double0 = new Double((-38L));
      assertEquals((-38.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-1.0));
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)6, (-38));
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)91, (byte)91}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = 'Y';
      charArray0[2] = 'X';
      Double double0 = new Double((-3258.0));
      assertEquals((-3258.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(673.3592787011607);
      assertEquals(673.3592787011607, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.shift(doubleArray1, (-2921), 13, 1279);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'X';
      longArray0[1] = (long) 'Y';
      longArray0[2] = (long) 'Y';
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1105L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
      assertArrayEquals(new long[] {88L, 89L, 89L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1105L, 88L, 89L, 89L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)2;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)91, (int) (byte)127);
      assertEquals((-1), int0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-53), (byte)127, (byte)11, (byte) (-54), (byte)98, (byte)2}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      
      booleanArray0[2] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      
      ArrayUtils.swap((Object[]) booleanArray0, (-1017), 1, (-1017));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 91;
      doubleArray0[1] = (double) 91;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 91;
      ArrayUtils.swap(doubleArray0, 0, 91, (-501));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {91.0, 91.0, 0.0, 91.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {91.0, 91.0, 0.0, 91.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {91.0, 91.0, 0.0, 91.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true, (-3307));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(bitSet0);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1164.81115079);
      assertEquals(1164.8112F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-1379.8592960868));
      assertEquals((-1379.8593F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) 91);
      assertEquals(91.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) floatArray0[1]);
      assertEquals(1164.8112F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertEquals(6, floatArray0.length);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-1.0));
      assertEquals((-1.0F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      
      floatArray0[5] = float5;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1164.8112F, (-1379.8593F), 91.0F, 1164.8112F, (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.add(longArray0, 0, (Long) null);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2087;
      intArray0[1] = 0;
      intArray0[2] = (-1979);
      intArray0[3] = 1041;
      intArray0[4] = 1041;
      intArray0[5] = 951;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2087, 0, (-1979), 1041, 1041, 951}, intArray0);
      
      ArrayUtils.swap(booleanArray0, 0, 52);
      assertSame(booleanArray0, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)79;
      shortArray0[1] = (short) (-519);
      shortArray0[2] = (short)3581;
      shortArray0[3] = (short)6;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)79, (short) (-519), (short)3581, (short)6, (short)79, (short) (-519), (short)3581, (short)6}, shortArray1);
      assertArrayEquals(new short[] {(short)79, (short) (-519), (short)3581, (short)6}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 99.0F;
      floatArray0[1] = (float) 223;
      floatArray0[2] = (float) (short) (-519);
      floatArray0[3] = (float) 223;
      ArrayUtils.shift(floatArray0, (-2145372367), (-2145372367), (int) (short)6);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {99.0F, 223.0F, (-519.0F), 223.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 1121.15127386);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-264.60266092584), (-264.60266092584));
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      charArray0[5] = 'i';
      charArray0[6] = '|';
      charArray0[7] = '?';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'B');
      assertFalse(boolean1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'i', 'i', 'i', 'i', 'i', 'i', '|', '?'}, charArray0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1804;
      doubleArray1[1] = (-940.1);
      doubleArray1[2] = (double) 1136;
      ArrayUtils.swap(doubleArray1, 0, 1136);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1804.0, (-940.1), 1136.0}, doubleArray1, 0.01);
      
      ArrayUtils.shift(booleanArray0, (-2146283099), (-2146283099), 2434);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'P';
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 80.0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {80.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 'P';
      doubleArray1[1] = (double) 'P';
      doubleArray1[2] = (double) 'P';
      doubleArray1[3] = (double) 'P';
      doubleArray1[4] = (double) 'P';
      doubleArray1[5] = (double) 'P';
      ArrayUtils.reverse(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {80.0, 80.0, 80.0, 80.0, 80.0, 80.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 2, 2);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(booleanArray1, booleanArray2);
      assertTrue(boolean0);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-670.6430477), (int) (byte)28, (-1.0));
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte)28);
      assertNull(shortArray0);
      
      boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.swap(longArray0, (-1), 2);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 2;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, 2, 2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (double) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (-1.0), 66);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, int0);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1017.1474309641595, 66, (-1.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-1), int1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), 0.0, 2.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte)35);
      assertNull(shortArray0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray1, (-1.0));
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean1);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        Integer.decode("4Mn0Trg%%F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"4Mn0Trg%%F\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-706.4918F);
      floatArray0[1] = (-2946.3F);
      floatArray0[2] = 110.0F;
      ArrayUtils.reverse(floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {110.0F, (-2946.3F), (-706.4918F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, 2788, 595, 1);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {110.0F, (-2946.3F), (-706.4918F)}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 595, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 595, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 85L;
      longArray0[2] = 0L;
      longArray0[3] = (-876L);
      longArray0[4] = 0L;
      longArray0[5] = (-3360L);
      longArray0[6] = (-2061L);
      longArray0[7] = 1L;
      long[] longArray1 = ArrayUtils.add(longArray0, 2, 85L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertArrayEquals(new long[] {85L, 0L, 0L, (-876L), 0L, (-3360L), (-2061L), 1L}, longArray0);
      assertArrayEquals(new long[] {85L, 0L, 85L, 0L, (-876L), 0L, (-3360L), (-2061L), 1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)122;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-44);
      ArrayUtils.shift(byteArray0, (-1427), (-1), (int) (byte)0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)98, (byte) (-45), (byte)122, (byte)0, (byte)111, (byte) (-89), (byte) (-70), (byte) (-44)}, byteArray0);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, 'X', (int) (byte) (-89));
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) (byte) (-89);
      longArray2[1] = (long) (-1);
      longArray2[2] = (long) (-1);
      longArray2[3] = (-876L);
      longArray2[4] = (long) (byte) (-45);
      long[] longArray3 = ArrayUtils.addFirst(longArray2, (-2114L));
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotNull(longArray3);
      assertEquals(5, longArray2.length);
      assertEquals(6, longArray3.length);
      assertArrayEquals(new long[] {(-89L), (-1L), (-1L), (-876L), (-45L)}, longArray2);
      assertArrayEquals(new long[] {(-2114L), (-89L), (-1L), (-1L), (-876L), (-45L)}, longArray3);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      ArrayUtils.swap((byte[]) null, 85, 52);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)168;
      shortArray0[1] = (short)2;
      ArrayUtils.shift(shortArray0, 117);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)168}, shortArray0);
      
      Long[] longArray0 = new Long[0];
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(longArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = 'E';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'B');
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'B', 'E'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Double double0 = new Double((short)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = ArrayUtils.get((Double[]) null, (int)  (-44), double0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'x';
      charArray0[2] = 'Q';
      charArray0[3] = 'x';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Q', (int) (short)0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'x', 'Q', 'x'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2272);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1065;
      shortArray0[1] = (short)691;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)39);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)1065, (short)691}, shortArray0);
      assertArrayEquals(new short[] {(short)1065, (short)691}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-2272), 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (short)1065);
      assertNull(longArray0);
      
      int[] intArray2 = ArrayUtils.removeElement(intArray0, 50);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray2.length);
      assertArrayEquals(new int[] {(-2272), 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-2272), 0, 0, 0, 0, 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 6;
      intArray0[5] = 662;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 0;
      objectArray0[4] = (Object) 662;
      objectArray0[5] = (Object) 662;
      objectArray0[6] = (Object) 6;
      objectArray0[7] = (Object) 6;
      ArrayUtils.reverse(objectArray0, 0, 1448);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 50, 50, 50);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Double double0 = new Double((-357.0));
      assertEquals((-357.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertEquals((-357.0), object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) double0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      Object object1 = ArrayUtils.get(objectArray0, 386, (Object) double0);
      assertEquals((-357.0), object1);
      assertNotNull(object1);
      assertEquals(9, objectArray0.length);
      
      objectArray0[3] = object1;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) double0;
      objectArray0[6] = (Object) double0;
      objectArray0[7] = (Object) double0;
      objectArray0[8] = object0;
      ArrayUtils.reverse(objectArray0, 50, 8);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (short)835;
      floatArray1[1] = (-1301.2194F);
      floatArray1[2] = (float) (-164);
      floatArray1[3] = (float) (short)835;
      floatArray1[4] = (float) (short)98;
      floatArray1[5] = (float) (-164);
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {835.0F, (-1301.2194F), (-164.0F), 835.0F, 98.0F, (-164.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {835.0F, (-1301.2194F), (-164.0F), 835.0F, 98.0F, (-164.0F)}, floatArray2, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (short)835;
      intArray0[2] = (int) (short)98;
      intArray0[3] = (int) (short)98;
      intArray0[4] = (int) (short)835;
      intArray0[5] = (int) (short)98;
      intArray0[6] = (-164);
      ArrayUtils.swap(intArray0, 98, 5);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 835, 98, 98, 835, 98, (-164)}, intArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 835;
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)0, object0);
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 98;
      objectArray0[3] = (Object) 835.0F;
      objectArray0[4] = (Object) 98;
      objectArray0[5] = (Object) 98;
      ArrayUtils.reverse(objectArray0, 386, (-2146283098));
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-77));
      assertEquals((byte) (-77), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      
      Byte byte4 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte byte5 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      
      Byte byte6 = new Byte((byte)41);
      assertEquals((byte)41, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      
      Byte byte7 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte4));
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-24));
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-77), (byte) (-24), (byte) (-24), (byte) (-24), (byte) (-24), (byte) (-24)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-77));
      assertEquals((byte) (-77), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      byte byte4 = (byte) (-42);
      Byte byte5 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte4);
      assertEquals((byte) (-42), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte4 == byte0);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte4));
      
      byteArray0[5] = byte7;
      byte byte8 = (byte) (-24);
      Byte byte9 = new Byte((byte) (-24));
      assertEquals((byte) (-24), (byte)byte9);
      assertNotNull(byte9);
      assertFalse(byte9.equals((Object)byte7));
      assertTrue(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte4));
      
      byteArray0[6] = byte9;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte8);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-77), (byte)1, (byte) (-42), (byte) (-42), (byte) (-1), (byte) (-24)}, byteArray1);
      assertFalse(byte8 == byte4);
      assertFalse(byte8 == byte0);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2434;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2434, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2434, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 85L;
      longArray0[2] = 0L;
      longArray0[3] = (-876L);
      longArray0[2] = 0L;
      longArray0[5] = (-3360L);
      longArray0[6] = (-2061L);
      longArray0[7] = 1L;
      long[] longArray1 = ArrayUtils.add(longArray0, 2, 85L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertArrayEquals(new long[] {85L, 0L, 0L, (-876L), 0L, (-3360L), (-2061L), 1L}, longArray0);
      assertArrayEquals(new long[] {85L, 0L, 85L, 0L, (-876L), 0L, (-3360L), (-2061L), 1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-45);
      Float float0 = new Float((float) 333L);
      assertEquals(333.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-2061L));
      assertEquals((-2061.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float1;
      floatArray0[2] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {333.0F, (-2061.0F), (-2061.0F)}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      ArrayUtils.reverse(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'.'}, charArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) (-876L);
      doubleArray0[2] = (double) (-876L);
      doubleArray0[3] = (double) (byte) (-45);
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 333L;
      doubleArray0[6] = (double) 1L;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, (-876.0), (-876.0), (-45.0), 2.0, 333.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1335;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      ArrayUtils.shift(floatArray0, 0, (-1129), (-1790));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1335.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-1701L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1648L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {(-1701L)}, longArray0);
      assertArrayEquals(new long[] {(-1648L), (-1701L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 223;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 223;
      doubleArray0[3] = (double) 223;
      doubleArray0[4] = (double) 223;
      doubleArray0[5] = (double) 2026;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (double) 2026;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 223.0, 223.0, 223.0, 2026.0, 1.0, 2026.0, 223.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '\\';
      charArray0[4] = '|';
      charArray0[5] = '|';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'u');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'u', '|', '|', '|', '\\', '|', '|'}, charArray1);
      assertArrayEquals(new char[] {'|', '|', '|', '\\', '|', '|'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.swap(doubleArray0, 2026, 59, 1557);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 223.0, 223.0, 223.0, 2026.0, 1.0, 2026.0, 223.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 223.0, 223.0, 223.0, 2026.0, 1.0, 2026.0, 223.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 223.0, 223.0, 223.0, 2026.0, 1.0, 2026.0, 223.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-2471));
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      float[] floatArray0 = new float[23];
      floatArray0[0] = (float) (-7);
      floatArray0[1] = (float) (-7);
      floatArray0[2] = (float) (-7);
      floatArray0[3] = (float) (-7);
      Integer integer0 = new Integer((-7));
      assertEquals((-7), (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-887);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-887), (-1));
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-887)}, shortArray0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = new Boolean("3(e8_;jDP");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("Comparator should not be null.");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[5] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)82;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)83, (byte) (-5), (byte)74, (byte) (-5), (byte)82}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)83, (byte) (-5), (byte)74, (byte) (-5), (byte)82}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.swap((Object[]) booleanArray0, 3123, (int) (byte) (-5), 3123);
      assertEquals(8, booleanArray0.length);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(23, floatArray0.length);
      assertEquals(23, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (-10);
      floatArray0[2] = (float) (-10);
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (float) (-10);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 420.0F, (-10));
      assertEquals((-1), int0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-10.0F), (-10.0F), 1.0F, (-1.0F), (-10.0F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (-10);
      longArray0[3] = (long) (-1);
      longArray0[4] = (-2932L);
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-10));
      assertTrue(boolean0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-10L), (-1L), (-2932L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      float[] floatArray0 = new float[18];
      floatArray0[4] = 0.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2.683147F, (-1));
      assertEquals((-1), int0);
      assertEquals(18, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1037L;
      longArray0[1] = (long) (-1);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-2932L));
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {1037L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      charArray0[4] = '!';
      charArray0[5] = 'S';
      charArray0[6] = '#';
      charArray0[7] = 'G';
      charArray0[8] = ')';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {';', '(', 'u', 'q', '!', 'S', '#', 'G', ')'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, 0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(boolean1);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {';', '(', 'u', 'q', '!', 'S', '#', 'G', ')'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.contains((long[]) null, (long) 0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'u';
      doubleArray0[1] = (double) '(';
      doubleArray0[2] = (double) '#';
      doubleArray0[3] = (double) 'S';
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-2878.0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {117.0, 40.0, 35.0, 83.0, (-2878.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {117.0, 40.0, 35.0, 83.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-233L);
      int[] intArray0 = new int[7];
      intArray0[0] = (-405);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)6;
      shortArray0[2] = (short)6;
      shortArray0[3] = (short)18688;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)18688, (-1));
      assertEquals(3, int0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)6, (short)6, (short)6, (short)18688}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 845;
      longArray0[1] = (long) 845;
      longArray0[2] = (long) 845;
      longArray0[3] = (long) 845;
      longArray0[4] = (long) 845;
      longArray0[5] = (long) 845;
      longArray0[6] = (long) 845;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(845, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 845, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(3961.0);
      assertEquals(3961.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1.0));
      assertEquals((-1.0), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-151.32380896));
      assertEquals((-151.32380896), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      
      doubleArray0[5] = doubleArray0[4];
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[4] = true;
      ArrayUtils.reverse(booleanArray0, (-428), (-428));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray0, (Object) doubleArray0[0]);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotNull(booleanArray2);
      assertEquals(4, booleanArray2.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 460L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {460L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) doubleArray0[4];
      doubleArray1[1] = (double) doubleArray0[2];
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) (-428);
      doubleArray1[4] = (double) doubleArray0[1];
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (double) doubleArray0[3];
      doubleArray1[7] = (double) (-428);
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 3961.0, 0.0, (-428.0), 0.0, (-1.0), (-1.0), (-428.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.0), 3961.0, 0.0, (-428.0), 0.0, (-1.0), (-1.0), (-428.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1615;
      intArray0[1] = (-3495);
      intArray0[2] = (-2878);
      intArray0[3] = (-692);
      ArrayUtils.swap(intArray0, 1, 1517, 1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1615, (-3495), (-2878), (-692)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[6];
      MutableInt mutableInt0 = new MutableInt(4142);
      assertEquals(4142.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(4142, mutableInt0.intValue());
      assertEquals(4142, (int)mutableInt0.getValue());
      assertEquals(4142, (int)mutableInt0.toInteger());
      assertEquals((byte)46, mutableInt0.byteValue());
      assertEquals((short)4142, mutableInt0.shortValue());
      assertEquals(4142.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(4142L, mutableInt0.longValue());
      assertEquals("4142", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(4142);
      assertEquals(4142.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(4142, mutableInt1.intValue());
      assertEquals((byte)46, mutableInt1.byteValue());
      assertEquals(4142, (int)mutableInt1.toInteger());
      assertEquals(4142, (int)mutableInt1.getValue());
      assertEquals(4142.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)4142, mutableInt1.shortValue());
      assertEquals(4142L, mutableInt1.longValue());
      assertEquals("4142", mutableInt1.toString());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(mutableInt0);
      assertEquals(4142.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(4142, mutableInt0.intValue());
      assertEquals(4142, (int)mutableInt0.getValue());
      assertEquals(4142, (int)mutableInt0.toInteger());
      assertEquals((byte)46, mutableInt0.byteValue());
      assertEquals((short)4142, mutableInt0.shortValue());
      assertEquals(4142.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(4142L, mutableInt0.longValue());
      assertEquals("4142", mutableInt0.toString());
      assertEquals(4142.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(4142, mutableInt2.intValue());
      assertEquals("4142", mutableInt2.toString());
      assertEquals(4142L, mutableInt2.longValue());
      assertEquals(4142, (int)mutableInt2.toInteger());
      assertEquals((short)4142, mutableInt2.shortValue());
      assertEquals(4142, (int)mutableInt2.getValue());
      assertEquals(4142.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((byte)46, mutableInt2.byteValue());
      assertNotNull(mutableInt2);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      
      mutableIntArray0[2] = mutableInt2;
      int int0 = mutableInt0.getAndAdd((-2104));
      assertEquals(2038.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)2038, mutableInt0.shortValue());
      assertEquals(2038L, mutableInt0.longValue());
      assertEquals("2038", mutableInt0.toString());
      assertEquals(2038, mutableInt0.intValue());
      assertEquals(2038.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-10), mutableInt0.byteValue());
      assertEquals(2038, (int)mutableInt0.getValue());
      assertEquals(2038, (int)mutableInt0.toInteger());
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt2);
      assertEquals(4142, int0);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      
      MutableInt mutableInt3 = new MutableInt(mutableInt1);
      assertEquals(4142.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(4142, mutableInt1.intValue());
      assertEquals((byte)46, mutableInt1.byteValue());
      assertEquals(4142, (int)mutableInt1.toInteger());
      assertEquals(4142, (int)mutableInt1.getValue());
      assertEquals(4142.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)4142, mutableInt1.shortValue());
      assertEquals(4142L, mutableInt1.longValue());
      assertEquals("4142", mutableInt1.toString());
      assertEquals(4142L, mutableInt3.longValue());
      assertEquals(4142.0, mutableInt3.doubleValue(), 0.01);
      assertEquals((short)4142, mutableInt3.shortValue());
      assertEquals(4142, mutableInt3.intValue());
      assertEquals("4142", mutableInt3.toString());
      assertEquals(4142, (int)mutableInt3.toInteger());
      assertEquals(4142, (int)mutableInt3.getValue());
      assertEquals((byte)46, mutableInt3.byteValue());
      assertEquals(4142.0F, mutableInt3.floatValue(), 0.01F);
      assertNotNull(mutableInt3);
      assertTrue(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt(mutableInt0);
      assertEquals(2038.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)2038, mutableInt0.shortValue());
      assertEquals(2038L, mutableInt0.longValue());
      assertEquals("2038", mutableInt0.toString());
      assertEquals(2038, mutableInt0.intValue());
      assertEquals(2038.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-10), mutableInt0.byteValue());
      assertEquals(2038, (int)mutableInt0.getValue());
      assertEquals(2038, (int)mutableInt0.toInteger());
      assertEquals((byte) (-10), mutableInt4.byteValue());
      assertEquals(2038, (int)mutableInt4.toInteger());
      assertEquals(2038, (int)mutableInt4.getValue());
      assertEquals(2038.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(2038L, mutableInt4.longValue());
      assertEquals("2038", mutableInt4.toString());
      assertEquals((short)2038, mutableInt4.shortValue());
      assertEquals(2038, mutableInt4.intValue());
      assertEquals(2038.0, mutableInt4.doubleValue(), 0.01);
      assertNotNull(mutableInt4);
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertTrue(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt(mutableInt0);
      assertEquals(2038.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)2038, mutableInt0.shortValue());
      assertEquals(2038L, mutableInt0.longValue());
      assertEquals("2038", mutableInt0.toString());
      assertEquals(2038, mutableInt0.intValue());
      assertEquals(2038.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-10), mutableInt0.byteValue());
      assertEquals(2038, (int)mutableInt0.getValue());
      assertEquals(2038, (int)mutableInt0.toInteger());
      assertEquals(2038, mutableInt5.intValue());
      assertEquals("2038", mutableInt5.toString());
      assertEquals(2038.0, mutableInt5.doubleValue(), 0.01);
      assertEquals((byte) (-10), mutableInt5.byteValue());
      assertEquals(2038, (int)mutableInt5.toInteger());
      assertEquals(2038.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals((short)2038, mutableInt5.shortValue());
      assertEquals(2038, (int)mutableInt5.getValue());
      assertEquals(2038L, mutableInt5.longValue());
      assertNotNull(mutableInt5);
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertTrue(mutableInt0.equals((Object)mutableInt4));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertTrue(mutableInt5.equals((Object)mutableInt0));
      assertTrue(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      
      mutableInt2.increment();
      assertEquals(2038.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)2038, mutableInt0.shortValue());
      assertEquals(2038L, mutableInt0.longValue());
      assertEquals("2038", mutableInt0.toString());
      assertEquals(2038, mutableInt0.intValue());
      assertEquals(2038.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-10), mutableInt0.byteValue());
      assertEquals(2038, (int)mutableInt0.getValue());
      assertEquals(2038, (int)mutableInt0.toInteger());
      assertEquals(4143L, mutableInt2.longValue());
      assertEquals(4143.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(4143, mutableInt2.intValue());
      assertEquals("4143", mutableInt2.toString());
      assertEquals(4143, (int)mutableInt2.getValue());
      assertEquals(4143.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(4143, (int)mutableInt2.toInteger());
      assertEquals((short)4143, mutableInt2.shortValue());
      assertEquals((byte)47, mutableInt2.byteValue());
      assertNotSame(mutableInt0, mutableInt4);
      assertNotSame(mutableInt0, mutableInt3);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt5);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt2, mutableInt4);
      assertNotSame(mutableInt2, mutableInt3);
      assertNotSame(mutableInt2, mutableInt5);
      assertNotSame(mutableInt2, mutableInt0);
      assertNotSame(mutableInt2, mutableInt1);
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertTrue(mutableInt0.equals((Object)mutableInt4));
      assertTrue(mutableInt0.equals((Object)mutableInt5));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt2.equals((Object)mutableInt4));
      assertFalse(mutableInt2.equals((Object)mutableInt3));
      assertFalse(mutableInt2.equals((Object)mutableInt5));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      
      mutableInt5.subtract((-254));
      assertEquals(2038.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)2038, mutableInt0.shortValue());
      assertEquals(2038L, mutableInt0.longValue());
      assertEquals("2038", mutableInt0.toString());
      assertEquals(2038, mutableInt0.intValue());
      assertEquals(2038.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-10), mutableInt0.byteValue());
      assertEquals(2038, (int)mutableInt0.getValue());
      assertEquals(2038, (int)mutableInt0.toInteger());
      assertEquals((byte) (-12), mutableInt5.byteValue());
      assertEquals(2292, (int)mutableInt5.toInteger());
      assertEquals(2292.0, mutableInt5.doubleValue(), 0.01);
      assertEquals(2292.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals(2292, mutableInt5.intValue());
      assertEquals((short)2292, mutableInt5.shortValue());
      assertEquals(2292L, mutableInt5.longValue());
      assertEquals(2292, (int)mutableInt5.getValue());
      assertEquals("2292", mutableInt5.toString());
      assertNotSame(mutableInt0, mutableInt4);
      assertNotSame(mutableInt0, mutableInt3);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt5);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt5, mutableInt3);
      assertNotSame(mutableInt5, mutableInt0);
      assertNotSame(mutableInt5, mutableInt2);
      assertNotSame(mutableInt5, mutableInt4);
      assertNotSame(mutableInt5, mutableInt1);
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertTrue(mutableInt0.equals((Object)mutableInt4));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt5));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt[] mutableIntArray1 = ArrayUtils.subarray(mutableIntArray0, Integer.MAX_VALUE, 1055);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotNull(mutableIntArray1);
      assertEquals(0, mutableIntArray1.length);
      assertEquals(6, mutableIntArray0.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 1055;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) 0;
      ArrayUtils.swap(longArray0, 1055, 2, 23);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 1055L, 2147483647L, 0L}, longArray0);
      
      short[] shortArray0 = ArrayUtils.insert((-2104), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      short[] shortArray0 = new short[2];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 9;
      ArrayUtils.swap(longArray0, 9, 9, 9);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {9L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {9.0, 9.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null, (double) 0.0F);
      assertNull(doubleArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0.0F, (-701.8365526315374));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'Y';
      charArray0[2] = 'X';
      charArray0[3] = '8';
      charArray0[4] = 'L';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'1', 'Y', 'X', '8', 'L'}, charArray0);
      assertArrayEquals(new char[] {'1', 'Y', 'X', '8', 'L'}, charArray1);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-3829));
      assertEquals((short) (-3829), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(stringArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, stringArray0.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt mutableInt0 = new MutableInt((Number) shortArray0[0]);
      assertEquals((-3829.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3829), (int)mutableInt0.toInteger());
      assertEquals((-3829), (int)mutableInt0.getValue());
      assertEquals((byte)11, mutableInt0.byteValue());
      assertEquals((-3829.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3829L), mutableInt0.longValue());
      assertEquals("-3829", mutableInt0.toString());
      assertEquals((short) (-3829), mutableInt0.shortValue());
      assertEquals((-3829), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      assertEquals(1, shortArray0.length);
      
      mutableIntArray0[0] = mutableInt0;
      mutableInt0.subtract((int) shortArray0[0]);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertSame(shortArray0, shortArray1);
      assertEquals(1, shortArray0.length);
      
      MutableInt mutableInt1 = new MutableInt((int) shortArray0[0]);
      assertEquals((-3829.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-3829L), mutableInt1.longValue());
      assertEquals((short) (-3829), mutableInt1.shortValue());
      assertEquals((byte)11, mutableInt1.byteValue());
      assertEquals("-3829", mutableInt1.toString());
      assertEquals((-3829.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-3829), (int)mutableInt1.toInteger());
      assertEquals((-3829), mutableInt1.intValue());
      assertEquals((-3829), (int)mutableInt1.getValue());
      assertNotNull(mutableInt1);
      assertEquals(1, shortArray0.length);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertSame(shortArray0, shortArray1);
      assertNotSame(mutableInt0, mutableInt1);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      
      mutableIntArray0[1] = mutableInt1;
      int int1 = mutableInt0.getAndAdd((Number) short0);
      assertEquals((-3828.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3828), (int)mutableInt0.getValue());
      assertEquals((-3828), (int)mutableInt0.toInteger());
      assertEquals((byte)12, mutableInt0.byteValue());
      assertEquals((-3828L), mutableInt0.longValue());
      assertEquals((-3828.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3828), mutableInt0.intValue());
      assertEquals("-3828", mutableInt0.toString());
      assertEquals((short) (-3828), mutableInt0.shortValue());
      assertSame(shortArray0, shortArray1);
      assertNotSame(mutableInt0, mutableInt1);
      assertEquals(1, int1);
      assertEquals(1, shortArray0.length);
      assertFalse(int1 == int0);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      
      MutableInt[] mutableIntArray1 = ArrayUtils.subarray(mutableIntArray0, 1, 1055);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotNull(mutableIntArray1);
      assertEquals(1, mutableIntArray1.length);
      assertEquals(2, mutableIntArray0.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'X';
      longArray0[1] = (long) 'X';
      longArray0[2] = (long) 'L';
      longArray0[3] = (long) (short)shortArray0[0];
      ArrayUtils.swap(longArray0, 0, 0, 1);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {88L, 88L, 76L, (-3829L)}, longArray0);
      
      short[] shortArray2 = ArrayUtils.insert(0, (short[]) null, (short[]) null);
      assertNull(shortArray2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3829L);
      doubleArray0[1] = (double) '8';
      doubleArray0[2] = (double) '1';
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3829.0), 56.0, 49.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      charArray0[4] = '!';
      charArray0[5] = 'S';
      charArray0[6] = '#';
      charArray0[7] = 'G';
      charArray0[8] = ')';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {';', '(', 'u', 'q', '!', 'S', '#', 'G', ')'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '(';
      ArrayUtils.reverse((float[]) null);
      ArrayUtils.shift((float[]) null, 85, 4071, 4071);
      boolean[] booleanArray0 = new boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 48, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (-940.1);
      doubleArray0[6] = (double) 2;
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.swap(doubleArray0, 1136, 1804);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), 0.0, 2.0, (-940.1), 2.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      short short0 = (short)644;
      shortArray0[0] = (short)644;
      short short1 = (short)99;
      shortArray0[1] = (short)99;
      short short2 = (short)1;
      shortArray0[2] = (short)1;
      short short3 = (short)12;
      shortArray0[3] = (short)12;
      shortArray0[4] = (short) (-328);
      shortArray0[5] = (short)32;
      short short4 = (short)18658;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-2475), (short)18658);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2475, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) ';';
      intArray0[1] = (int) ';';
      intArray0[2] = (int) ';';
      intArray0[3] = (-208);
      intArray0[4] = (int) ';';
      intArray0[5] = (-2145028933);
      intArray0[6] = (-836);
      int int0 = ArrayUtils.indexOf(intArray0, (-1505));
      assertEquals((-1), int0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {59, 59, 59, (-208), 59, (-2145028933), (-836)}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false, (-208));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short)0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Object[] objectArray0 = ArrayUtils.removeAllOccurrences((Object[]) arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (Object) arrayUtils0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-529L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)434;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)434);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)434}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (int) (short)434;
      intArray0[2] = (int) (short)434;
      intArray0[3] = (int) (short)434;
      intArray0[4] = (int) (short)434;
      intArray0[5] = (int) (short)434;
      intArray0[6] = (int) (short)434;
      intArray0[7] = (int) (short)434;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {1, 434, 434, 434, 434, 434, 434, 434}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.swap(intArray1, 1171, 434, 11);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {1, 434, 434, 434, 434, 434, 434, 434}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotNull(intArray2);
      assertEquals(0, intArray2.length);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {1, 434, 434, 434, 434, 434, 434, 434}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-42);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)10;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-42), (byte)0, (byte)10, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (byte)0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(7, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-42), (byte)0, (byte)10, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)0, (byte)10, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-116);
      shortArray0[1] = (short) (byte) (-116);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-116), (short) (-116)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-116), (short) (-116)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertTrue(boolean2);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 83;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (short) (-116);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte) (-42);
      intArray0[6] = (int) (byte)0;
      intArray0[7] = 8;
      intArray0[8] = (int) (byte)0;
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((byte)0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(156.4735);
      assertEquals(156.4735, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((byte)0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-2121.2341476));
      assertEquals((-2121.2341476), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((byte)0);
      assertEquals(0.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      
      doubleArray0[5] = double5;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 2, 2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(boolean0);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false, false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-670.6430477), (int) (byte)35, (-1.0));
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte)35);
      assertNull(shortArray0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1147.877);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 52L;
      floatArray0[1] = (float) 730L;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 730L;
      floatArray0[4] = (float) 730L;
      floatArray0[5] = (float) 52L;
      floatArray0[6] = (float) 730L;
      floatArray0[7] = (float) 730L;
      floatArray0[8] = (float) 730L;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 730.0F);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {52.0F, 730.0F, 0.0F, 730.0F, 730.0F, 52.0F, 730.0F, 730.0F, 730.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short) (-2773);
      shortArray0[1] = (short)20696;
      shortArray0[2] = (short) (-2596);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(13, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-2549.326F));
      assertFalse(boolean1);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(3961.0);
      assertEquals(3961.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1.0));
      assertEquals((-1.0), (double)double4, 0.01);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-151.32380896));
      assertEquals((-151.32380896), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      
      doubleArray0[5] = double5;
      long[] longArray0 = new long[4];
      longArray0[0] = 460L;
      longArray0[1] = 460L;
      longArray0[2] = 460L;
      longArray0[3] = 460L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {460L, 460L, 460L, 460L, 460L, 460L, 460L, 460L}, longArray1);
      assertArrayEquals(new long[] {460L, 460L, 460L, 460L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[4] = true;
      ArrayUtils.reverse(booleanArray0, (-428), (-428));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray0, (Object) doubleArray0[0]);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 460L, (-428));
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertNotSame(longArray0, longArray1);
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {460L, 460L, 460L, 460L}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 460L;
      floatArray0[1] = (float) (-428);
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-823.841F));
      assertFalse(boolean1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {460.0F, (-428.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Double double0 = new Double(0.0F);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      ArrayUtils.shift((byte[]) null, (-1), (-192), Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      ArrayUtils.swap((byte[]) null, 85, 52);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.shift((byte[]) null, 2788, 52, 52);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1266;
      shortArray0[1] = (short) (-322);
      shortArray0[2] = (short)20573;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertArrayEquals(new short[] {(short)1266, (short) (-322), (short)20573}, shortArray0);
      assertArrayEquals(new short[] {(short)1266, (short) (-322), (short)20573, (short)1266, (short) (-322), (short)20573}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      ArrayUtils.reverse((long[]) null);
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)35;
      shortArray0[1] = (short)3093;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)35, (short)3093}, shortArray0);
      assertArrayEquals(new short[] {(short)35, (short)3093}, shortArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-5);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)32, (byte)2, (byte) (-1), (byte) (-5)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)32, (byte) (-1), (byte) (-5)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 59;
      floatArray0[1] = (-847.44F);
      int int0 = ArrayUtils.indexOf(floatArray0, 50.0F, 1398);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {59.0F, (-847.44F)}, floatArray0, 0.01F);
      
      long[] longArray2 = new long[9];
      longArray2[0] = 704L;
      longArray2[1] = 2147483647L;
      longArray2[2] = (-249L);
      longArray2[3] = (long) (-1);
      longArray2[4] = (long) 59;
      longArray2[5] = (long) longArray0[0];
      longArray2[6] = (long) 1398;
      longArray2[7] = 704L;
      longArray2[8] = (long) longArray0[0];
      ArrayUtils.reverse(longArray2);
      assertEquals(9, longArray2.length);
      assertArrayEquals(new long[] {704L, 704L, 1398L, 704L, 59L, (-1L), (-249L), 2147483647L, 704L}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-2142));
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'F');
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2142);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-2142L)}, longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-2142L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)12;
      shortArray0[1] = (short)1547;
      shortArray0[2] = (short)91;
      shortArray0[3] = (short)6730;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)941;
      shortArray0[6] = (short)6727;
      shortArray0[7] = (short)81;
      shortArray0[8] = (short)83;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)83, 6);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)12, (short)1547, (short)91, (short)6730, (short)1, (short)941, (short)6727, (short)81, (short)83}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)83);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(10, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)12, (short)1547, (short)91, (short)6730, (short)1, (short)941, (short)6727, (short)81, (short)83, (short)83}, shortArray1);
      assertArrayEquals(new short[] {(short)12, (short)1547, (short)91, (short)6730, (short)1, (short)941, (short)6727, (short)81, (short)83}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) 0L;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Float[] floatArray2 = new Float[0];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray3 = ArrayUtils.add(floatArray2, float0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray2, floatArray3);
      assertNotNull(floatArray3);
      assertEquals(1, floatArray3.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 2652);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(bitSet0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (-1916.40497169);
      doubleArray0[2] = (double) (byte) (-5);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (byte) (-5);
      ArrayUtils.shift(doubleArray0, (int) (byte) (-5));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1916.40497169), (-5.0), 0.0, (-5.0)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) floatArray2);
      assertNotSame(floatArray2, floatArray3);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray3));
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      ArrayUtils.shift((double[]) null, 3);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)32;
      objectArray0[1] = (Object) (byte)32;
      objectArray0[2] = (Object) (byte)32;
      objectArray0[3] = (Object) (byte)32;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertEquals(4, objectArray0.length);
      assertEquals(4, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = 'Y';
      charArray0[2] = 'X';
      Double double0 = new Double((-3258.0));
      assertEquals((-3258.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(673.3592787011607);
      assertEquals(673.3592787011607, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-3258.0), 673.3592787011607}, doubleArray1, 0.01);
      
      ArrayUtils.shift(doubleArray1, (-2911), 13, 1279);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {673.3592787011607, (-3258.0)}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'X';
      longArray0[1] = (long) 'Y';
      longArray0[2] = (long) 'Y';
      longArray0[3] = (long) 'X';
      longArray0[4] = (long) (-2911);
      longArray0[5] = (long) 'Y';
      longArray0[6] = (long) '1';
      longArray0[7] = (long) 13;
      longArray0[8] = (long) 1279;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {88L, 89L, 89L, 88L, (-2911L), 89L, 49L, 13L, 1279L}, longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 89L;
      floatArray0[1] = (float) '1';
      floatArray0[2] = (float) 88L;
      floatArray0[3] = (float) (-2911);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-2911), 13);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {89.0F, 49.0F, 88.0F, (-2911.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift(doubleArray1, 1554);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {673.3592787011607, (-3258.0)}, doubleArray1, 0.01);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) doubleArray0);
      assertSame(doubleArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 808.48645F;
      floatArray0[1] = (-1332.9109F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1332.9109F), (int) (byte) (-1));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {808.48645F, (-1332.9109F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) 0L;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Float[] floatArray2 = new Float[0];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray3 = ArrayUtils.add(floatArray2, float0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray2, floatArray3);
      assertNotNull(floatArray3);
      assertEquals(1, floatArray3.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, (int) (byte) (-5));
      assertEquals(9, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8}", bitSet0.toString());
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(bitSet0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1500.5245097007);
      assertEquals(1500.5245097007, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(5084.5579808);
      assertEquals(5084.5579808, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      Double double4 = new Double(0.0);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      Double double5 = new Double(5084.5579808);
      assertEquals(5084.5579808, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double4;
      doubleArray0[1] = double0;
      Double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      Short short0 = new Short((short)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)76);
      assertEquals((short)76, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short)238);
      assertEquals((short)238, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-114);
      byteArray0[8] = (byte) (-9);
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)6, (byte) (-1), (byte)1, (byte)5, (byte) (-114), (byte) (-9)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)68, (byte)2, (byte)14, (byte)6, (byte) (-1), (byte)1, (byte)5, (byte) (-114), (byte) (-9)}, byteArray0);
      assertArrayEquals(new int[] {2, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = (-548);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 1278);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(10, intArray0.length);
      assertEquals(11, intArray1.length);
      assertArrayEquals(new int[] {(-548), (-1), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 1278, 0);
      assertEquals((-1), int0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1008.0;
      doubleArray0[1] = 1067.1817216;
      doubleArray0[2] = 1786.182345644518;
      doubleArray0[3] = (-521.361438659383);
      doubleArray0[4] = 949.09962;
      doubleArray0[5] = (-426.63907511260004);
      doubleArray0[6] = (-73.86);
      doubleArray0[7] = 2.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 691.4887418, 1008.0);
      assertEquals(5, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertEquals("{0, 1, 4, 6, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1008.0, 1067.1817216, 1786.182345644518, (-521.361438659383), 949.09962, (-426.63907511260004), (-73.86), 2.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(3961.0);
      assertEquals(3961.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1.0));
      assertEquals((-1.0), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-151.32380896));
      assertEquals((-151.32380896), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      
      doubleArray0[5] = double5;
      long[] longArray0 = new long[4];
      longArray0[0] = 460L;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = 40L;
      longArray0[2] = (-782L);
      longArray0[3] = (-3580L);
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, 3168, 48, 48);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 40L;
      doubleArray0[1] = (double) (-3580L);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = 1.0;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3580.0), 1.0, 0.0, 1.0, 40.0}, doubleArray0, 0.01);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '|');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {'|'}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.swap(doubleArray0, (int) (byte)0, (-3182), 91);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3580.0), 1.0, 0.0, 1.0, 40.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3580.0), 1.0, 0.0, 1.0, 40.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3580.0), 1.0, 0.0, 1.0, 40.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-2471));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.cardinality());
      assertEquals(8, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      Short short0 = new Short((short) (-904));
      assertEquals((short) (-904), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-904));
      assertEquals((short) (-904), (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)129);
      assertEquals((short)129, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      Short short3 = new Short((short)6);
      assertEquals((short)6, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      
      Short short4 = new Short((short)6);
      assertEquals((short)6, (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      short[] shortArray1 = new short[3];
      shortArray1[0] = (short)6;
      shortArray1[1] = (short) (-904);
      shortArray1[2] = (short) (-904);
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, 122, (-2590));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(3, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {(short)6, (short) (-904), (short) (-904)}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 0.0F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      longArray0[0] = (Long) 704L;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("K*CIW%sb_WQTTVeBc'+");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      
      Boolean boolean4 = Boolean.valueOf((String) null);
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      
      Boolean[] booleanArray1 = new Boolean[2];
      booleanArray1[0] = boolean4;
      booleanArray1[1] = boolean2;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray2, (-74));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -74, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      Integer integer0 = new Integer((-827));
      assertEquals((-827), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurences((Integer[]) null, integer0);
      assertNull(integerArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1625.3055F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1625.3055F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = null;
      longArray0[1] = null;
      longArray0[2] = null;
      longArray0[3] = null;
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-1315), long0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1315, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1240));
      assertEquals((-1240), (int)mutableInt0.getValue());
      assertEquals((-1240.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-1240", mutableInt0.toString());
      assertEquals((-1240), mutableInt0.intValue());
      assertEquals((short) (-1240), mutableInt0.shortValue());
      assertEquals((-1240L), mutableInt0.longValue());
      assertEquals((-1240.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)40, mutableInt0.byteValue());
      assertEquals((-1240), (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[6];
      mutableIntArray0[0] = mutableInt0;
      mutableIntArray0[1] = mutableInt0;
      mutableIntArray0[2] = mutableInt0;
      mutableIntArray0[3] = mutableInt0;
      mutableIntArray0[4] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((-1240));
      assertEquals((-1240), mutableInt1.intValue());
      assertEquals((-1240), (int)mutableInt1.toInteger());
      assertEquals((-1240L), mutableInt1.longValue());
      assertEquals((-1240.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-1240.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((short) (-1240), mutableInt1.shortValue());
      assertEquals((byte)40, mutableInt1.byteValue());
      assertEquals((-1240), (int)mutableInt1.getValue());
      assertEquals("-1240", mutableInt1.toString());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[5] = mutableInt1;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertEquals(6, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.contains(shortArray1, (short) (-1379));
      assertNotSame(shortArray1, shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2917.31109);
      doubleArray0[1] = (double) (short)835;
      MutableInt mutableInt0 = new MutableInt((-149));
      assertEquals((-149), (int)mutableInt0.toInteger());
      assertEquals((-149), (int)mutableInt0.getValue());
      assertEquals((byte)107, mutableInt0.byteValue());
      assertEquals((-149.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-149.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-149", mutableInt0.toString());
      assertEquals((short) (-149), mutableInt0.shortValue());
      assertEquals((-149), mutableInt0.intValue());
      assertEquals((-149L), mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[3];
      mutableIntArray0[0] = mutableInt0;
      mutableIntArray0[1] = mutableInt0;
      mutableInt0.setValue((int) (short) (-1379));
      assertEquals((-1379), (int)mutableInt0.toInteger());
      assertEquals((-1379), (int)mutableInt0.getValue());
      assertEquals("-1379", mutableInt0.toString());
      assertEquals((-1379L), mutableInt0.longValue());
      assertEquals((-1379), mutableInt0.intValue());
      assertEquals((-1379.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-1379), mutableInt0.shortValue());
      assertEquals((byte) (-99), mutableInt0.byteValue());
      assertEquals((-1379.0F), mutableInt0.floatValue(), 0.01F);
      
      int int0 = mutableInt0.getAndAdd((-3440));
      assertEquals((-4819), (int)mutableInt0.toInteger());
      assertEquals((-4819), (int)mutableInt0.getValue());
      assertEquals((-4819L), mutableInt0.longValue());
      assertEquals((short) (-4819), mutableInt0.shortValue());
      assertEquals((-4819), mutableInt0.intValue());
      assertEquals("-4819", mutableInt0.toString());
      assertEquals((-4819.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)45, mutableInt0.byteValue());
      assertEquals((-4819.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1379), int0);
      
      mutableIntArray0[2] = mutableInt0;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotNull(mutableIntArray1);
      assertEquals(0, mutableIntArray1.length);
      assertEquals(3, mutableIntArray0.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(436.83357394523);
      assertEquals(436.8336F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (-1379));
      assertEquals((-1379.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) (short) (-1379));
      assertEquals((-1379.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(2537.573872);
      assertEquals(2537.574F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) floatArray0[2]);
      assertEquals((-1379.0F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertEquals(6, floatArray0.length);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((double) (short)98);
      assertEquals(98.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      
      floatArray0[5] = float5;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-1379), float2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1379, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-940.1);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-60.276137606);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Integer[]) null, 0);
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray1, (Random) mockRandom0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1615;
      intArray0[1] = (-3495);
      intArray0[2] = (-2878);
      intArray0[3] = (-692);
      ArrayUtils.swap(intArray0, 8, 1517, 8);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1615, (-3495), (-2878), (-692)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)101;
      byteArray0[0] = (byte)101;
      byte byte1 = (byte)4;
      byteArray0[1] = (byte)4;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)4;
      int int0 = 18;
      intArray0[1] = 18;
      intArray0[2] = (int) (byte)101;
      intArray0[3] = (int) (byte)4;
      intArray0[4] = (int) (byte)101;
      intArray0[5] = (int) (byte)4;
      intArray0[6] = (int) (byte)101;
      intArray0[7] = (int) (byte)101;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 101, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-192L));
      assertEquals((-192L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-192L)}, longArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1767;
      Double double0 = new Double((-882.3049));
      assertEquals((-882.3049), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-2416.518606949));
      assertEquals((-2416.518606949), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.insert((-2934), doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)4;
      Double double0 = new Double((-357.0));
      assertEquals((-357.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[18];
      intArray0[1] = 2146466190;
      int int0 = ArrayUtils.indexOf(intArray0, 2146466190);
      assertEquals(1, int0);
      assertEquals(18, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'M';
      charArray0[2] = '-';
      charArray0[3] = '1';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '-');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'J', 'M', '-', '1'}, charArray0);
      assertArrayEquals(new char[] {'-', 'J', 'M', '-', '1'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 2146466190);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(18, intArray0.length);
      assertEquals(17, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-192L));
      assertEquals((-192L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-192L)}, longArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1767;
      intArray0[1] = (-3182);
      intArray0[2] = (-1107);
      intArray0[3] = (-1112);
      intArray0[4] = (-146);
      intArray0[5] = (-712);
      intArray0[6] = 1;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-3182));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {1767, (-3182), (-1107), (-1112), (-146), (-712), 1}, intArray0);
      assertArrayEquals(new int[] {1767, (-1107), (-1112), (-146), (-712), 1}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.swap(longArray1, (-3263), 1, 223);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-192L)}, longArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)126;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)87, 68);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)19, (byte) (-60), (byte) (-102), (byte)4, (byte)126}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Double double0 = new Double(0.163947228096601);
      assertEquals(0.163947228096601, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      Double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray2, (double) doubleArray0[4], (-3660.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[5] = 0;
      intArray0[1] = (-888);
      intArray0[2] = 76;
      intArray0[3] = (-874);
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 0, 4187.553513360001);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 76;
      objectArray0[1] = (Object) (-888);
      objectArray0[2] = (Object) (-874);
      objectArray0[3] = (Object) (-888);
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(4, objectArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 76;
      longArray0[2] = (long) 0;
      longArray0[3] = (-816L);
      longArray0[4] = (long) (-874);
      longArray0[5] = (long) 76;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 2566L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 76L, 0L, (-816L), (-874L), 76L}, longArray1);
      assertArrayEquals(new long[] {0L, 76L, 0L, (-816L), (-874L), 76L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-940.1);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-60.276137606);
      doubleArray0[3] = 704.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 4187.553513360001;
      doubleArray0[6] = (-3258.0);
      doubleArray0[7] = (-4284.093772903);
      doubleArray0[8] = (-2465.51072669);
      int int0 = ArrayUtils.indexOf(doubleArray0, 3.0, (-2465.51072669));
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-940.1), 1.0, (-60.276137606), 704.0, (-1.0), 4187.553513360001, (-3258.0), (-4284.093772903), (-2465.51072669)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 704.0;
      objectArray0[1] = (Object) (-2465.51072669);
      objectArray0[2] = (Object) (-60.276137606);
      ArrayUtils.shift(objectArray0, (-1));
      assertEquals(3, objectArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      int int0 = ArrayUtils.indexOf((short[]) null, (short)18688, (-2146283099));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-1);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((byte) (-1));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1));
      assertEquals((-1L), (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1328L));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1328L), (-1328L), (-1328L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Character character0 = Character.valueOf('P');
      assertEquals('P', (char)character0);
      assertNotNull(character0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-29));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-29);
      longArray0[1] = 0L;
      longArray0[2] = (long) 'P';
      longArray0[3] = 2124L;
      longArray0[4] = (long) 'P';
      longArray0[5] = (long) (byte) (-29);
      longArray0[6] = 461L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte) (-29), (int) (byte) (-29));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-29L), 0L, 80L, 2124L, 80L, (-29L), 461L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2124L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (int) (byte) (-29), 1964.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -29, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.add(longArray0, 0, (Long) null);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)98);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)98, (short)98}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'Y';
      charArray0[2] = 'X';
      charArray0[3] = '8';
      charArray0[4] = 'L';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'1', 'Y', 'X', '8', 'L'}, charArray0);
      assertArrayEquals(new char[] {'1', 'Y', 'X', '8', 'L'}, charArray1);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-3829));
      assertEquals((short) (-3829), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(stringArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, stringArray0.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt mutableInt0 = new MutableInt((Number) shortArray0[0]);
      assertEquals((short) (-3829), mutableInt0.shortValue());
      assertEquals((byte)11, mutableInt0.byteValue());
      assertEquals((-3829.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-3829", mutableInt0.toString());
      assertEquals((-3829.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3829), mutableInt0.intValue());
      assertEquals((-3829), (int)mutableInt0.toInteger());
      assertEquals((-3829), (int)mutableInt0.getValue());
      assertEquals((-3829L), mutableInt0.longValue());
      assertNotNull(mutableInt0);
      assertEquals(1, shortArray0.length);
      
      mutableIntArray0[0] = mutableInt0;
      mutableInt0.subtract((int) shortArray0[0]);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertSame(shortArray0, shortArray1);
      assertEquals(1, shortArray0.length);
      
      MutableInt mutableInt1 = new MutableInt((int) shortArray0[0]);
      assertEquals((-3829.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-3829L), mutableInt1.longValue());
      assertEquals((byte)11, mutableInt1.byteValue());
      assertEquals((short) (-3829), mutableInt1.shortValue());
      assertEquals("-3829", mutableInt1.toString());
      assertEquals((-3829.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-3829), mutableInt1.intValue());
      assertEquals((-3829), (int)mutableInt1.getValue());
      assertEquals((-3829), (int)mutableInt1.toInteger());
      assertNotNull(mutableInt1);
      assertEquals(1, shortArray0.length);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      int int0 = mutableInt0.getAndIncrement();
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertSame(shortArray0, shortArray1);
      assertNotSame(mutableInt0, mutableInt1);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      
      mutableIntArray0[1] = mutableInt1;
      int int1 = mutableInt0.getAndAdd((Number) short0);
      assertEquals((byte)12, mutableInt0.byteValue());
      assertEquals((-3828.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3828L), mutableInt0.longValue());
      assertEquals((short) (-3828), mutableInt0.shortValue());
      assertEquals("-3828", mutableInt0.toString());
      assertEquals((-3828.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3828), mutableInt0.intValue());
      assertEquals((-3828), (int)mutableInt0.getValue());
      assertEquals((-3828), (int)mutableInt0.toInteger());
      assertSame(shortArray0, shortArray1);
      assertNotSame(mutableInt0, mutableInt1);
      assertEquals(1, int1);
      assertEquals(1, shortArray0.length);
      assertFalse(int1 == int0);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      
      MutableInt[] mutableIntArray1 = ArrayUtils.subarray(mutableIntArray0, 1, 1055);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotNull(mutableIntArray1);
      assertEquals(1, mutableIntArray1.length);
      assertEquals(2, mutableIntArray0.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'X';
      short[] shortArray2 = new short[2];
      shortArray2[0] = (short) (-3829);
      shortArray2[1] = (short) (-3829);
      int[] intArray0 = new int[1];
      short[] shortArray3 = ArrayUtils.removeAll(shortArray2, intArray0);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertNotNull(shortArray3);
      assertEquals(2, shortArray2.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, shortArray3.length);
      assertArrayEquals(new short[] {(short) (-3829), (short) (-3829)}, shortArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new short[] {(short) (-3829)}, shortArray3);
      assertFalse(shortArray3.equals((Object)shortArray2));
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray3);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertTrue(boolean0);
      assertEquals(2, shortArray2.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, shortArray3.length);
      assertArrayEquals(new short[] {(short) (-3829), (short) (-3829)}, shortArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new short[] {(short) (-3829)}, shortArray3);
      assertFalse(shortArray2.equals((Object)shortArray3));
      assertFalse(shortArray3.equals((Object)shortArray2));
      
      int int2 = ArrayUtils.indexOf(shortArray3, (short) (-3829));
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertEquals(0, int2);
      assertEquals(2, shortArray2.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, shortArray3.length);
      assertArrayEquals(new short[] {(short) (-3829), (short) (-3829)}, shortArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new short[] {(short) (-3829)}, shortArray3);
      assertFalse(shortArray2.equals((Object)shortArray3));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short1;
      shortArray0[1] = short2;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      short[] shortArray1 = new short[8];
      shortArray1[0] = (short) (-192);
      shortArray1[1] = (short) (-192);
      shortArray1[3] = (short) (-1087);
      shortArray1[4] = (short)2031;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)2031;
      longArray0[1] = (long) (short)2031;
      ArrayUtils.swap(longArray0, (int) short0, (int) (short)2031, 1852);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {2031L, 2031L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(16, shortArray1, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)92, 1064);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)555;
      shortArray0[1] = (short)555;
      shortArray0[2] = (short) (byte)92;
      shortArray0[3] = (short) (byte)92;
      shortArray0[4] = (short)555;
      shortArray0[5] = (short) (byte)92;
      shortArray0[6] = (short) (byte)92;
      shortArray0[7] = (short) (byte)92;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(11, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[5] = 0;
      intArray0[1] = (-888);
      intArray0[2] = 76;
      intArray0[3] = (-874);
      Integer integer0 = new Integer(76);
      assertEquals(76, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 76;
      objectArray0[1] = (Object) (-888);
      objectArray0[3] = (Object) (-888);
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(4, objectArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 76, 2147221806);
      assertEquals(2, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-888), 76, (-874), 0, 0}, intArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      MockRandom mockRandom0 = new MockRandom((-874));
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-874);
      IntStream intStream0 = mockRandom0.ints(2527L);
      assertNotNull(intStream0);
      
      floatArray0[1] = (float) (-874);
      floatArray0[2] = (float) 76;
      floatArray0[3] = (float) 76;
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-874.0F), 76.0F, 76.0F, (-874.0F)}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) mockRandom0);
      assertEquals((-1), int1);
      assertEquals(4, objectArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-548);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 1278);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-548), (-1), 0}, intArray0);
      assertArrayEquals(new int[] {(-548), (-1), 0, 1278}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = 't';
      charArray0[2] = 'N';
      charArray0[3] = ' ';
      charArray0[4] = '&';
      ArrayUtils.swap(charArray0, 0, (-99), (-1));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {':', 't', 'N', ' ', '&'}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0, 1278, (-1476.1482786));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, (-1));
      assertNotSame(intArray0, intArray1);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-548), (-1), 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)55;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)55}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-548);
      MockRandom mockRandom0 = new MockRandom(1220L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-548.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      ArrayUtils.shift((char[]) null, 0, 0, 0);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 40);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'L');
      assertNull(charArray0);
      
      char[] charArray1 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)38;
      shortArray0[1] = (short)38;
      shortArray0[2] = (short)38;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)38, (short)38, (short)38}, shortArray0);
      
      long[] longArray0 = ArrayUtils.insert(40, (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.insert(1085, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1085;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1085;
      doubleArray0[3] = (double) 1085;
      doubleArray0[4] = (double) 1085;
      doubleArray0[5] = (double) 1085;
      doubleArray0[6] = (double) 1085;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {1085.0, 0.0, 1085.0, 1085.0, 1085.0, 1085.0, 1085.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1085.0, 0.0, 1085.0, 1085.0, 1085.0, 1085.0, 1085.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)45;
      Byte byte0 = new Byte((byte)49);
      assertEquals((byte)49, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = byte0;
      byteArray1[1] = byte0;
      byteArray1[2] = (Byte) (byte)49;
      byteArray1[3] = byte0;
      byteArray1[4] = (Byte) (byte)49;
      byteArray1[5] = (Byte) (byte) (-1);
      byteArray1[6] = (Byte) (byte)45;
      Byte[] byteArray2 = ArrayUtils.toArray(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray2.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'M');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf(false);
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = new Boolean("'At2{MM'}^3NQq(");
      assertFalse(boolean5);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = new Boolean("'At2{MM'}^3NQq(");
      assertFalse(boolean6);
      assertNotNull(boolean6);
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean3));
      
      Boolean boolean7 = Boolean.TRUE;
      assertTrue(boolean7);
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean6));
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = Boolean.valueOf("org.apache.commons.lang3.mutable.MutableInt");
      assertFalse(boolean8);
      assertNotNull(boolean8);
      assertFalse(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean6));
      
      booleanArray0[7] = boolean8;
      Boolean boolean9 = new Boolean("org.apache.commons.lang3.mutable.MutableInt");
      assertFalse(boolean9);
      assertNotNull(boolean9);
      assertTrue(boolean9.equals((Object)boolean4));
      assertTrue(boolean9.equals((Object)boolean3));
      assertTrue(boolean9.equals((Object)boolean0));
      assertTrue(boolean9.equals((Object)boolean5));
      assertTrue(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean2));
      assertTrue(boolean9.equals((Object)boolean1));
      assertTrue(boolean9.equals((Object)boolean6));
      assertFalse(boolean9.equals((Object)boolean7));
      
      booleanArray0[8] = boolean9;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true, false, false}, booleanArray1));
      
      ArrayUtils.shift((Object[]) booleanArray0, Integer.MAX_VALUE);
      assertEquals(9, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)82;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-5));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)74, (byte)82}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte)74, (byte)82}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, (int) (byte)82, 1424, (int) (byte)74);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)82;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) (byte)74;
      floatArray0[3] = (float) (byte)82;
      floatArray0[4] = (float) (byte)74;
      floatArray0[5] = (float) (byte)82;
      floatArray0[6] = (float) Integer.MAX_VALUE;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {82.0F, 2.14748365E9F, 74.0F, 82.0F, 74.0F, 82.0F, 2.14748365E9F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {82.0F, 2.14748365E9F, 74.0F, 82.0F, 74.0F, 82.0F, 2.14748365E9F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[16];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(16, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2434;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2434, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2434, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-42);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)10;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-42), (byte)0, (byte)10, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (byte)0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(7, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-42), (byte)0, (byte)10, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)0, (byte)10, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-116);
      shortArray0[1] = (short) (byte) (-116);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-116), (short) (-116)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-116), (short) (-116)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertTrue(boolean2);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 83;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (short) (-116);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte) (-42);
      intArray0[6] = (int) (byte)0;
      intArray0[7] = 8;
      intArray0[8] = (int) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals(8, int0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {83, 0, (-116), 0, 0, (-42), 0, 8, 0}, intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = 'G';
      charArray0[2] = 'j';
      charArray0[3] = 'L';
      charArray0[4] = 'y';
      charArray0[5] = '@';
      charArray0[6] = '8';
      charArray0[7] = 'K';
      ArrayUtils.swap(charArray0, (int) (short) (-116), (int) (byte) (-42), 709);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'G', 'j', 'L', 'y', '@', '8', 'K'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2146466190;
      floatArray0[1] = 227.79F;
      floatArray0[2] = (float) 2146466190;
      floatArray0[3] = (float) 2146466190;
      floatArray0[4] = (float) 2146466190;
      floatArray0[5] = (float) 2146466190;
      floatArray0[6] = (float) 2146466190;
      ArrayUtils.shift(floatArray0, 2146466190);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {2.14646618E9F, 2.14646618E9F, 227.79F, 2.14646618E9F, 2.14646618E9F, 2.14646618E9F, 2.14646618E9F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 704.0F;
      floatArray0[2] = (float) (-2303);
      floatArray0[3] = (float) (-2303);
      floatArray0[4] = 0.0F;
      ArrayUtils.shift(floatArray0, (-2303));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-2303.0F), 0.0F, 0.0F, 704.0F, (-2303.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Long[] longArray0 = new Long[0];
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-710);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (-710);
      floatArray0[5] = (float) 10;
      floatArray0[6] = 1254.7933F;
      floatArray0[7] = (float) (short)79;
      floatArray0[8] = (float) (-710);
      ArrayUtils.shift(floatArray0, (-97));
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {79.0F, (-710.0F), (-710.0F), 0.0F, 0.0F, 0.0F, (-710.0F), 10.0F, 1254.7933F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {79.0F, (-710.0F), (-710.0F), 0.0F, 0.0F, 0.0F, (-710.0F), 10.0F, 1254.7933F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 65;
      doubleArray0[1] = 1838.9;
      doubleArray0[2] = (double) (short)79;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 1254.7933F;
      doubleArray0[6] = (double) 0.0F;
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {65.0, 1838.9, 79.0, 10.0, 0.0, 1254.7933349609375, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      Integer integer0 = new Integer((-31));
      assertEquals((-31), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Byte byte0 = new Byte((byte) (-39));
      assertEquals((byte) (-39), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-39));
      assertEquals((byte) (-39), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Double double0 = new Double(0L);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = ArrayUtils.get(arrayUtils0.EMPTY_DOUBLE_OBJECT_ARRAY, (-31), double0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(arrayUtils0.EMPTY_CHAR_ARRAY, 'Q', (-31));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[8];
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[5];
      shortArray0[1] = (Short) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      int int0 = (-1090);
      intArray0[3] = (-1090);
      intArray0[4] = 1930;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1930, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = 40L;
      longArray0[2] = (-782L);
      longArray0[3] = (-3580L);
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, 3168, 48, 48);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 40L;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1335;
      floatArray0[1] = (float) (-782L);
      ArrayUtils.shift(floatArray0, (int) (byte)0, (int) (byte)0, 180);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1335.0F, (-782.0F)}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 180, (double) 1335);
      assertEquals(4, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {40.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-264.60266092584), (-264.60266092584));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      ArrayUtils.swap(intArray0, 1, 2075);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      
      char[] charArray0 = new char[8];
      ArrayUtils.swap(charArray0, (-4851), 2147056288);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.swap(intArray0, 973, (-641), 1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      
      Double[] doubleArray1 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 531.030691;
      doubleArray0[3] = (-4613.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-167.82877), (-1.0));
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, 1.0, 531.030691, (-4613.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      MutableInt mutableInt0 = new MutableInt(2);
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2, mutableInt0.intValue());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals("2", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      Double double0 = new Double(2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      MutableInt mutableInt1 = new MutableInt(double0);
      assertEquals(2L, mutableInt1.longValue());
      assertEquals(2, mutableInt1.intValue());
      assertEquals(2.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt1.shortValue());
      assertEquals(2.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt1.getValue());
      assertEquals(2, (int)mutableInt1.toInteger());
      assertEquals((byte)2, mutableInt1.byteValue());
      assertEquals("2", mutableInt1.toString());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt((Number) 2);
      assertEquals((byte)2, mutableInt2.byteValue());
      assertEquals(2.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt2.toInteger());
      assertEquals("2", mutableInt2.toString());
      assertEquals(2, (int)mutableInt2.getValue());
      assertEquals(2L, mutableInt2.longValue());
      assertEquals(2.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(2, mutableInt2.intValue());
      assertEquals((short)2, mutableInt2.shortValue());
      assertNotNull(mutableInt2);
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      
      MutableInt mutableInt3 = new MutableInt(mutableInt1);
      assertEquals(2L, mutableInt1.longValue());
      assertEquals(2, mutableInt1.intValue());
      assertEquals(2.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt1.shortValue());
      assertEquals(2.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt1.getValue());
      assertEquals(2, (int)mutableInt1.toInteger());
      assertEquals((byte)2, mutableInt1.byteValue());
      assertEquals("2", mutableInt1.toString());
      assertEquals(2.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals((byte)2, mutableInt3.byteValue());
      assertEquals(2, (int)mutableInt3.toInteger());
      assertEquals(2.0, mutableInt3.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt3.shortValue());
      assertEquals(2, (int)mutableInt3.getValue());
      assertEquals(2L, mutableInt3.longValue());
      assertEquals("2", mutableInt3.toString());
      assertEquals(2, mutableInt3.intValue());
      assertNotNull(mutableInt3);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt1.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      
      MutableInt mutableInt4 = new MutableInt((-617));
      assertEquals((byte) (-105), mutableInt4.byteValue());
      assertEquals("-617", mutableInt4.toString());
      assertEquals((-617.0), mutableInt4.doubleValue(), 0.01);
      assertEquals((short) (-617), mutableInt4.shortValue());
      assertEquals((-617), mutableInt4.intValue());
      assertEquals((-617.0F), mutableInt4.floatValue(), 0.01F);
      assertEquals((-617L), mutableInt4.longValue());
      assertEquals((-617), (int)mutableInt4.toInteger());
      assertEquals((-617), (int)mutableInt4.getValue());
      assertNotNull(mutableInt4);
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)1);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      MutableInt mutableInt0 = new MutableInt(2);
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Double double0 = new Double(2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      MutableInt mutableInt1 = new MutableInt(double0);
      assertEquals("2", mutableInt1.toString());
      assertEquals(2.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt1.shortValue());
      assertEquals((byte)2, mutableInt1.byteValue());
      assertEquals(2, (int)mutableInt1.toInteger());
      assertEquals(2, (int)mutableInt1.getValue());
      assertEquals(2.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(2, mutableInt1.intValue());
      assertEquals(2L, mutableInt1.longValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt((Number) 2);
      assertEquals(2L, mutableInt2.longValue());
      assertEquals("2", mutableInt2.toString());
      assertEquals(2, (int)mutableInt2.toInteger());
      assertEquals(2, (int)mutableInt2.getValue());
      assertEquals((byte)2, mutableInt2.byteValue());
      assertEquals(2.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(2.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt2.shortValue());
      assertEquals(2, mutableInt2.intValue());
      assertNotNull(mutableInt2);
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      
      MutableInt mutableInt3 = new MutableInt(mutableInt1);
      assertEquals("2", mutableInt1.toString());
      assertEquals(2.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt1.shortValue());
      assertEquals((byte)2, mutableInt1.byteValue());
      assertEquals(2, (int)mutableInt1.toInteger());
      assertEquals(2, (int)mutableInt1.getValue());
      assertEquals(2.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(2, mutableInt1.intValue());
      assertEquals(2L, mutableInt1.longValue());
      assertEquals(2, mutableInt3.intValue());
      assertEquals("2", mutableInt3.toString());
      assertEquals(2L, mutableInt3.longValue());
      assertEquals(2.0, mutableInt3.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt3.shortValue());
      assertEquals(2.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(2, (int)mutableInt3.getValue());
      assertEquals(2, (int)mutableInt3.toInteger());
      assertEquals((byte)2, mutableInt3.byteValue());
      assertNotNull(mutableInt3);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt1.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      
      MutableInt mutableInt4 = new MutableInt(1072);
      assertEquals(1072L, mutableInt4.longValue());
      assertEquals("1072", mutableInt4.toString());
      assertEquals(1072, mutableInt4.intValue());
      assertEquals(1072.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals((short)1072, mutableInt4.shortValue());
      assertEquals(1072, (int)mutableInt4.getValue());
      assertEquals(1072, (int)mutableInt4.toInteger());
      assertEquals((byte)48, mutableInt4.byteValue());
      assertEquals(1072.0, mutableInt4.doubleValue(), 0.01);
      assertNotNull(mutableInt4);
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      
      MutableInt mutableInt5 = new MutableInt((-617));
      assertEquals((-617L), mutableInt5.longValue());
      assertEquals((-617.0F), mutableInt5.floatValue(), 0.01F);
      assertEquals((-617.0), mutableInt5.doubleValue(), 0.01);
      assertEquals((-617), (int)mutableInt5.getValue());
      assertEquals("-617", mutableInt5.toString());
      assertEquals((-617), (int)mutableInt5.toInteger());
      assertEquals((byte) (-105), mutableInt5.byteValue());
      assertEquals((-617), mutableInt5.intValue());
      assertEquals((short) (-617), mutableInt5.shortValue());
      assertNotNull(mutableInt5);
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      
      MutableInt mutableInt6 = new MutableInt(2);
      assertEquals("2", mutableInt6.toString());
      assertEquals(2.0, mutableInt6.doubleValue(), 0.01);
      assertEquals(2.0F, mutableInt6.floatValue(), 0.01F);
      assertEquals((short)2, mutableInt6.shortValue());
      assertEquals(2L, mutableInt6.longValue());
      assertEquals(2, mutableInt6.intValue());
      assertEquals(2, (int)mutableInt6.getValue());
      assertEquals(2, (int)mutableInt6.toInteger());
      assertEquals((byte)2, mutableInt6.byteValue());
      assertNotNull(mutableInt6);
      assertTrue(mutableInt6.equals((Object)mutableInt1));
      assertTrue(mutableInt6.equals((Object)mutableInt2));
      assertTrue(mutableInt6.equals((Object)mutableInt0));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      assertTrue(mutableInt6.equals((Object)mutableInt3));
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = 'i';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {')', 'i'}, charArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 6;
      intArray0[5] = 662;
      int int0 = ArrayUtils.indexOf(intArray0, (-2185));
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 6, 662}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BOOLEAN_ARRAY, false);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom(1987L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_FLOAT_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-1378));
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1378)}, shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_STRING_ARRAY);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-264.60266092584), (-264.60266092584));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      ArrayUtils.swap(intArray0, 1, 2075);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2075, 1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      ArrayUtils.swap((Object[]) null, 0, 2145872524);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3258;
      shortArray0[1] = (short)3258;
      shortArray0[2] = (short)3258;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1454), 2);
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)3258, (short)3258, (short)3258}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, 2, 2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 'P';
      doubleArray0[2] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 434);
      assertEquals(2, int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 80.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 3328.658660320513, (-647), (double) 434);
      assertEquals((-1), int1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 80.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-374));
      assertNull(shortArray0);
      
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {80.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'u');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'u'}, charArray0);
      
      ArrayUtils.reverse(doubleArray0, (-1322), 2);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 80.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, true, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 2, 2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertTrue(boolean0);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, true, false, false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)34;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)34, (byte)35}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(shortArray1, (short) (-1379));
      assertNotSame(shortArray1, shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (short) (-1379));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)16;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)91);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)91, (byte)6, (byte)77, (byte) (-22), (byte)6, (byte)16}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)77, (byte) (-22), (byte)6, (byte)16}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 337, (int) (short)98, (int) (byte)91);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte) (-22);
      objectArray0[1] = (Object) (byte)6;
      objectArray0[2] = (Object) (byte)6;
      objectArray0[3] = (Object) (byte)6;
      objectArray0[4] = (Object) (byte)91;
      objectArray0[5] = (Object) (short)98;
      objectArray0[6] = (Object) (byte)16;
      objectArray0[7] = (Object) (byte)16;
      objectArray0[8] = (Object) (short)98;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertEquals(9, objectArray0.length);
      assertEquals(9, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1500.5245097007);
      assertEquals(1500.5245097007, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(5084.5579808);
      assertEquals(5084.5579808, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Double double4 = new Double(0.0);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      Double double5 = new Double(5084.5579808);
      assertEquals(5084.5579808, (double)double5, 0.01);
      assertNotNull(double5);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double4;
      doubleArray0[1] = double0;
      Double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 2;
      intArray0[8] = 2;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2, 2, 2}, intArray1);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2, 2, 2, 2}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)6;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)16);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)48, (byte)59, (byte)91, (byte)77, (byte)6}, byteArray1);
      assertArrayEquals(new byte[] {(byte)48, (byte)59, (byte)91, (byte)77, (byte)16, (byte)6}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = 40L;
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 0.0F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 704L;
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 'N';
      charArray0[4] = 'N';
      charArray0[5] = ' ';
      charArray0[6] = 'N';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'t', 't', 't', 'N', 'N', ' ', 'N'}, charArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)3354;
      shortArray0[1] = (short)3171;
      shortArray0[2] = (short)532;
      shortArray0[3] = (short) (-2185);
      shortArray0[4] = (short)18;
      shortArray0[5] = (short)4214;
      shortArray0[6] = (short)16;
      ArrayUtils.shift(shortArray0, (-4273));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2185), (short)18, (short)4214, (short)16, (short)3354, (short)3171, (short)532}, shortArray0);
      
      Long[] longArray2 = new Long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = long0;
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted(longArray2, comparator0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertTrue(boolean1);
      assertEquals(1, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      Double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray2, doubleArray2);
      assertTrue(boolean0);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-264.60266092584), (-264.60266092584));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      ArrayUtils.swap(intArray0, 1, 2075);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 472.0;
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {472.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)3103;
      shortArray0[1] = (short) (-2005);
      shortArray0[2] = (short)3103;
      shortArray0[3] = (short)3103;
      shortArray0[4] = (short)3103;
      shortArray0[5] = (short)65;
      shortArray0[6] = (short)3103;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-2244));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)3103, (short) (-2005), (short)3103, (short)3103, (short)3103, (short)65, (short)3103, (short) (-2244)}, shortArray1);
      assertArrayEquals(new short[] {(short)3103, (short) (-2005), (short)3103, (short)3103, (short)3103, (short)65, (short)3103}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short)65, (-1));
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{5}", bitSet0.toString());
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(bitSet0);
      assertEquals(8, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)3103, (short) (-2005), (short)3103, (short)3103, (short)3103, (short)65, (short)3103, (short) (-2244)}, shortArray1);
      assertArrayEquals(new short[] {(short)3103, (short) (-2005), (short)3103, (short)3103, (short)3103, (short)65, (short)3103}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) doubleArray2, (Object) null, Integer.MAX_VALUE);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1209);
      shortArray0[1] = (short) (-192);
      shortArray0[2] = (short)0;
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-112), Integer.MAX_VALUE, (-871));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-871), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -871, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = 2.0F;
      floatArray0[2] = 1380.2548F;
      floatArray0[1] = (float) (-548);
      floatArray0[6] = (-1.0F);
      ArrayUtils.swap(floatArray0, (-1262), (-597), 16);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-548.0F), 1380.2548F, 0.0F, 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '+';
      charArray0[2] = 'I';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '&';
      charArray0[6] = '^';
      charArray0[7] = 'Y';
      charArray0[8] = 'G';
      ArrayUtils.swap(charArray0, 0, 0, (-739));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'|', '+', 'I', '3', '3', '&', '^', 'Y', 'G'}, charArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '^';
      floatArray0[1] = 1380.2548F;
      floatArray0[2] = (float) 'Y';
      ArrayUtils.swap(floatArray0, (-617), 1, 0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {94.0F, 1380.2548F, 89.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-1967.9F);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1967.9F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2146466190;
      int int0 = ArrayUtils.indexOf(intArray0, 2146466190);
      assertEquals(1, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 2146466190}, intArray0);
      
      ArrayUtils.shift(intArray0, 2146466190, 2146466190, (-618));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 2146466190}, intArray0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) double0, 2147039610);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 13, (byte)32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-2142));
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'F');
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2142);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-2142L)}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)26;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-29));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0, (byte)0, (byte)26, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0, (byte)0, (byte)26, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)34;
      shortArray0[1] = (short) (byte)26;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte)0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)34, (short)26, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)34, (short)26, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)34, (short)26, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)34, (short)26, (short)0}, shortArray2);
      assertArrayEquals(new short[] {(short)34, (short)26, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-2142), (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2142, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 0.0F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      longArray0[0] = (Long) 704L;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, false, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1943);
      intArray0[1] = (-2242);
      intArray0[2] = (-1469);
      intArray0[3] = 632;
      intArray0[4] = (-1315);
      intArray0[5] = 318;
      intArray0[6] = (-1156);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1943), (-2242), (-1469), 632, (-1315), 318, (-1156)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-548);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-548), (-1), 0}, intArray0);
      assertArrayEquals(new int[] {(-548), (-1), 0, (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[5];
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.1);
      assertEquals(0.1, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-1746.9419165562308));
      assertEquals((-1746.9419165562308), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(704.0);
      assertEquals(704.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      Double double4 = new Double((-548));
      assertEquals((-548.0), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      Double double5 = new Double(70.0);
      assertEquals(70.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 353.5);
      assertNull(doubleArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      ArrayUtils.swap(charArray0, (-374), 3167, (-1110));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Float float0 = new Float((-2042.9F));
      assertEquals((-2042.9F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertEquals((-2042.9F), object0);
      assertNotNull(object0);
      
      MutableInt mutableInt0 = new MutableInt(2);
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) mutableInt0);
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2L, mutableInt0.longValue());
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '^';
      doubleArray0[1] = (double) 2;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 1);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {94.0, 2.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, object0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, 859L);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 0.0F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 704L;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {704.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {704.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, false, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray2 = new long[2];
      longArray2[0] = (long) longArray0[0];
      longArray2[1] = 704L;
      int int0 = ArrayUtils.lastIndexOf(longArray2, 704L);
      assertEquals(1, int0);
      assertEquals(2, longArray2.length);
      assertArrayEquals(new long[] {704L, 704L}, longArray2);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-629));
      assertEquals((short) (-629), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals((short) (-629), (short)short1);
      assertNotNull(short1);
      assertEquals(6, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[1]);
      assertEquals((short) (-629), (short)short2);
      assertNotNull(short2);
      assertEquals(6, shortArray0.length);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)4879);
      assertEquals((short)4879, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-31963));
      assertEquals((short) (-31963), (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) (-629));
      assertEquals((short) (-629), (short)short5);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short0));
      
      shortArray0[5] = short5;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-629), (short) (-629), (short) (-629), (short)4879, (short) (-31963), (short) (-629)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 1.0;
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-669.6430477), (-669.6430477));
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 216.72528F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      ArrayUtils.swap(byteArray0, (-167), (-167), (-167));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean1);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean((String) null);
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf((String) null);
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertTrue(boolean5);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray1 = new boolean[9];
      booleanArray1[0] = (boolean) boolean1;
      booleanArray1[1] = (boolean) boolean4;
      booleanArray1[2] = (boolean) boolean3;
      booleanArray1[3] = (boolean) boolean3;
      booleanArray1[4] = (boolean) boolean3;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      booleanArray1[7] = (boolean) boolean1;
      booleanArray1[8] = (boolean) boolean1;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, (double) 0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[3] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(3, int1);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertFalse(int1 == int0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      int int2 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], Integer.MAX_VALUE);
      assertEquals(0, int2);
      assertEquals(1, objectArray0.length);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = ArrayUtils.indexOf(floatArray0, (-19.774F), 1747);
      assertEquals((-1), int3);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-29);
      intArray0[1] = 2447;
      intArray0[2] = 68;
      intArray0[3] = (-142);
      intArray0[4] = (-2620);
      intArray0[5] = 1211;
      intArray0[6] = 1073741824;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-29), 2447, 68, (-142), (-2620), 1211, 1073741824}, intArray0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Long long0 = new Long((-142));
      assertEquals((-142L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 2447;
      longArray1[1] = (long) 68;
      longArray1[2] = (-233L);
      longArray1[3] = (long) (-142);
      longArray1[4] = (long) 2447;
      longArray1[5] = (long) (-142);
      longArray1[6] = (long) 68;
      longArray1[7] = (long) 1073741824;
      longArray1[8] = (long) 2447;
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(9, longArray1.length);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {2447L, 68L, (-233L), (-142L), 2447L, (-142L), 68L, 1073741824L, 2447L}, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Character character0 = Character.valueOf('&');
      assertEquals('&', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('P');
      assertEquals('P', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)7);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (byte)7;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)94);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)2, (short)7}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)7}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = new short[0];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      short[] shortArray3 = ArrayUtils.nullToEmpty(shortArray2);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotNull(shortArray3);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray3);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      ArrayUtils.shift((char[]) null, 0, 9, 0);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 40);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'L');
      assertNull(charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 9;
      int int1 = ArrayUtils.indexOf(floatArray0, 2.14722176E9F, 40);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {9.0F}, floatArray0, 0.01F);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 'L';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {0L, 76L}, longArray0);
      assertArrayEquals(new long[] {0L, 76L, 0L, 76L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int2 = ArrayUtils.indexOf((double[]) null, (double) 0L, 0.5);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("Ql@PxQ|hk/['gsyE");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      ArrayUtils.swap(intArray0, 0, 1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      ArrayUtils.swap((char[]) null, 1, (-1));
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 121;
      int[] intArray1 = ArrayUtils.add(intArray0, 2868);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {121}, intArray0);
      assertArrayEquals(new int[] {121, 2868}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) 121;
      ArrayUtils.shift(objectArray0, 2868, 1, 121);
      assertEquals(3, objectArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {121}, intArray0);
      assertArrayEquals(new int[] {121, 2868}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      char[] charArray0 = new char[27];
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[4] = '!';
      charArray0[5] = 'S';
      charArray0[6] = '#';
      charArray0[7] = 'G';
      charArray0[8] = ')';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(27, charArray0.length);
      assertEquals(54, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[1];
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      ArrayUtils.swap(doubleArray0, 4, 1928);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 43;
      doubleArray0[1] = (double) 43;
      doubleArray0[2] = Double.NaN;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, 43, 0.0);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {43.0, 43.0, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = 'M';
      charArray0[2] = 'G';
      charArray0[3] = '&';
      charArray0[4] = 'D';
      charArray0[5] = ' ';
      charArray0[6] = 'q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 4879, (-366));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'2', 'M', 'G', '&', 'D', ' ', 'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertTrue(boolean0);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'2', 'M', 'G', '&', 'D', ' ', 'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'D';
      floatArray0[1] = (float) 4879;
      floatArray0[2] = (float) 'q';
      floatArray0[3] = (float) 'M';
      floatArray0[4] = (float) '2';
      floatArray0[5] = (float) '&';
      floatArray0[6] = (float) ' ';
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[0];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-366);
      MockRandom mockRandom0 = new MockRandom((-2462L));
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-366.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short)1252);
      assertEquals((short)1252, (short)short0);
      assertNotNull(short0);
      
      shortArray0[1] = short0;
      Short short1 = new Short((short) shortArray0[1]);
      assertEquals((short)1252, (short)short1);
      assertNotNull(short1);
      assertEquals(7, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[2] = short1;
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = 'v';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'g', 'v'}, charArray0);
      
      short[] shortArray1 = new short[7];
      shortArray1[1] = (short) shortArray0[1];
      shortArray1[2] = (short) (-1568);
      shortArray1[3] = (short) shortArray0[1];
      shortArray1[4] = (short) (-2185);
      shortArray1[5] = (short)3171;
      shortArray1[6] = (short)1252;
      ArrayUtils.shift(shortArray1, (-125));
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)1252, (short)0, (short)1252, (short) (-1568), (short)1252, (short) (-2185), (short)3171}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[4] = (-1L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotSame(longArray0, longArray1);
      assertNotNull(bitSet0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      
      Character character0 = Character.valueOf('<');
      assertEquals('<', (char)character0);
      assertNotNull(character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-357);
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-357), 2}, intArray0);
      assertArrayEquals(new int[] {(-357), 2}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'3'}, charArray0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[9];
      MutableInt mutableInt0 = new MutableInt((-2219));
      assertEquals((-2219.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2219.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2219), mutableInt0.intValue());
      assertEquals("-2219", mutableInt0.toString());
      assertEquals((-2219L), mutableInt0.longValue());
      assertEquals((short) (-2219), mutableInt0.shortValue());
      assertEquals((-2219), (int)mutableInt0.toInteger());
      assertEquals((-2219), (int)mutableInt0.getValue());
      assertEquals((byte)85, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      mutableInt0.subtract((Number) (-357));
      assertEquals((-1862L), mutableInt0.longValue());
      assertEquals((-1862.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1862.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1862), mutableInt0.intValue());
      assertEquals((short) (-1862), mutableInt0.shortValue());
      assertEquals((-1862), (int)mutableInt0.getValue());
      assertEquals((-1862), (int)mutableInt0.toInteger());
      assertEquals((byte) (-70), mutableInt0.byteValue());
      assertEquals("-1862", mutableInt0.toString());
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((-667));
      assertEquals((-667L), mutableInt1.longValue());
      assertEquals((-667), mutableInt1.intValue());
      assertEquals((-667), (int)mutableInt1.toInteger());
      assertEquals("-667", mutableInt1.toString());
      assertEquals((-667), (int)mutableInt1.getValue());
      assertEquals((-667.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-667.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((short) (-667), mutableInt1.shortValue());
      assertEquals((byte)101, mutableInt1.byteValue());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = (Boolean) true;
      boolean boolean3 = ArrayUtils.isSorted(booleanArray1);
      assertTrue(boolean3);
      assertEquals(1, booleanArray1.length);
      assertTrue(boolean3 == boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1341);
      shortArray0[1] = (short) (-1830);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)97;
      shortArray0[4] = (short)7;
      shortArray0[5] = (short)1335;
      shortArray0[6] = (short)6727;
      ArrayUtils.shift(shortArray0, 97);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1830), (short) (-1), (short)97, (short)7, (short)1335, (short)6727, (short) (-1341)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[2] = ';';
      charArray0[1] = '6';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      Character character0 = new Character('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      ArrayUtils.reverse((float[]) null, (-405), (-2145028933));
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2145028933);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2145028933), Integer.MAX_VALUE);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-2145028933L)}, longArray0);
      assertArrayEquals(new long[] {(-2145028933L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'u';
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) '6';
      doubleArray0[3] = (double) 'u';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 54.0);
      assertEquals(2, int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {117.0, 2.147483647E9, 54.0, 117.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)45, (int) (byte)45);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)45}, byteArray0);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (float) 2, 2);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)45;
      shortArray0[1] = (short) (byte)45;
      shortArray0[2] = (short) (byte)45;
      shortArray0[3] = (short)1945;
      shortArray0[4] = (short) (byte)45;
      shortArray0[5] = (short) (byte)45;
      shortArray0[6] = (short) (byte)45;
      ArrayUtils.shift(shortArray0, (-1378), (int) (byte)45, Integer.MAX_VALUE);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)45, (short)45, (short)45, (short)45, (short)1945, (short)45, (short)45}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = (-1L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 7);
      assertEquals(2, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-1L), 0L, 0L, 0L}, longArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-1L);
      objectArray0[1] = (Object) (-1L);
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short)0, object0);
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (-1L);
      objectArray0[4] = (Object) (-1L);
      objectArray0[5] = (Object) (-1L);
      objectArray0[6] = (Object) (-1L);
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertEquals(7, objectArray0.length);
      assertEquals(7, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-548);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 1278);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-548), (-1), 0}, intArray0);
      assertArrayEquals(new int[] {(-548), (-1), 0, 1278}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 1278, 0);
      assertEquals((-1), int0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, 1278);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {1278}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1278;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 1278);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1278L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1278, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = (-548);
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertEquals(3, int0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 3.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, (-600.6218122));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 3.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 3.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.swap(longArray0, (-1), 2);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 3920.65690945;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (-940.1);
      doubleArray0[6] = (double) 2;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, (-1.0), 3920.65690945, 0.0, 2.0, (-940.1), 2.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F, 0.0F, 2.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, 2.0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {1.0, (-1.0), 3920.65690945, 0.0, 2.0, (-940.1), 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-1.0), 3920.65690945, 0.0, (-940.1)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[20];
      booleanArray0[15] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(20, booleanArray0.length);
      assertEquals(40, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      MutableInt mutableInt0 = new MutableInt(983);
      assertEquals((byte) (-41), mutableInt0.byteValue());
      assertEquals("983", mutableInt0.toString());
      assertEquals(983, (int)mutableInt0.toInteger());
      assertEquals(983, (int)mutableInt0.getValue());
      assertEquals(983L, mutableInt0.longValue());
      assertEquals(983.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)983, mutableInt0.shortValue());
      assertEquals(983.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(983, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertEquals((byte) (-41), mutableInt0.byteValue());
      assertEquals("983", mutableInt0.toString());
      assertEquals(983, (int)mutableInt0.toInteger());
      assertEquals(983, (int)mutableInt0.getValue());
      assertEquals(983L, mutableInt0.longValue());
      assertEquals(983.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)983, mutableInt0.shortValue());
      assertEquals(983.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(983, mutableInt0.intValue());
      assertEquals((byte) (-41), mutableInt1.byteValue());
      assertEquals(983.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)983, mutableInt1.shortValue());
      assertEquals(983.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(983, mutableInt1.intValue());
      assertEquals(983L, mutableInt1.longValue());
      assertEquals("983", mutableInt1.toString());
      assertEquals(983, (int)mutableInt1.toInteger());
      assertEquals(983, (int)mutableInt1.getValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      int int0 = mutableInt1.decrementAndGet();
      assertEquals((byte) (-41), mutableInt0.byteValue());
      assertEquals("983", mutableInt0.toString());
      assertEquals(983, (int)mutableInt0.toInteger());
      assertEquals(983, (int)mutableInt0.getValue());
      assertEquals(983L, mutableInt0.longValue());
      assertEquals(983.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)983, mutableInt0.shortValue());
      assertEquals(983.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(983, mutableInt0.intValue());
      assertEquals((short)982, mutableInt1.shortValue());
      assertEquals(982.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(982, mutableInt1.intValue());
      assertEquals(982L, mutableInt1.longValue());
      assertEquals("982", mutableInt1.toString());
      assertEquals(982, (int)mutableInt1.getValue());
      assertEquals((byte) (-42), mutableInt1.byteValue());
      assertEquals(982, (int)mutableInt1.toInteger());
      assertEquals(982.0F, mutableInt1.floatValue(), 0.01F);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      assertEquals(982, int0);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt(0);
      assertEquals("0", mutableInt2.toString());
      assertEquals(0L, mutableInt2.longValue());
      assertEquals(0.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt2.shortValue());
      assertEquals(0, mutableInt2.intValue());
      assertEquals(0, (int)mutableInt2.getValue());
      assertEquals(0, (int)mutableInt2.toInteger());
      assertEquals((byte)0, mutableInt2.byteValue());
      assertEquals(0.0F, mutableInt2.floatValue(), 0.01F);
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      
      MutableInt mutableInt3 = new MutableInt(mutableInt1);
      assertEquals((byte) (-41), mutableInt0.byteValue());
      assertEquals("983", mutableInt0.toString());
      assertEquals(983, (int)mutableInt0.toInteger());
      assertEquals(983, (int)mutableInt0.getValue());
      assertEquals(983L, mutableInt0.longValue());
      assertEquals(983.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)983, mutableInt0.shortValue());
      assertEquals(983.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(983, mutableInt0.intValue());
      assertEquals((short)982, mutableInt1.shortValue());
      assertEquals(982.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(982, mutableInt1.intValue());
      assertEquals(982L, mutableInt1.longValue());
      assertEquals("982", mutableInt1.toString());
      assertEquals(982, (int)mutableInt1.getValue());
      assertEquals((byte) (-42), mutableInt1.byteValue());
      assertEquals(982, (int)mutableInt1.toInteger());
      assertEquals(982.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(982, (int)mutableInt3.toInteger());
      assertEquals((short)982, mutableInt3.shortValue());
      assertEquals(982, (int)mutableInt3.getValue());
      assertEquals(982L, mutableInt3.longValue());
      assertEquals(982.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(982.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(982, mutableInt3.intValue());
      assertEquals("982", mutableInt3.toString());
      assertEquals((byte) (-42), mutableInt3.byteValue());
      assertNotNull(mutableInt3);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      
      MutableInt mutableInt4 = new MutableInt(2239);
      assertEquals("2239", mutableInt4.toString());
      assertEquals((short)2239, mutableInt4.shortValue());
      assertEquals(2239.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals((byte) (-65), mutableInt4.byteValue());
      assertEquals(2239, (int)mutableInt4.toInteger());
      assertEquals(2239, mutableInt4.intValue());
      assertEquals(2239, (int)mutableInt4.getValue());
      assertEquals(2239L, mutableInt4.longValue());
      assertEquals(2239.0, mutableInt4.doubleValue(), 0.01);
      assertNotNull(mutableInt4);
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      
      Short short0 = new Short((short) (-4554));
      assertEquals((short) (-4554), (short)short0);
      assertNotNull(short0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElement(mutableIntArray0, (Object) mutableInt0);
      assertEquals((byte) (-41), mutableInt0.byteValue());
      assertEquals("983", mutableInt0.toString());
      assertEquals(983, (int)mutableInt0.toInteger());
      assertEquals(983, (int)mutableInt0.getValue());
      assertEquals(983L, mutableInt0.longValue());
      assertEquals(983.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)983, mutableInt0.shortValue());
      assertEquals(983.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(983, mutableInt0.intValue());
      assertNotSame(mutableInt0, mutableInt3);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt0, mutableInt4);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertEquals(1, mutableIntArray0.length);
      assertEquals(1, mutableIntArray1.length);
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt0.equals((Object)mutableInt4));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1269.732749641;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1269.732749641, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MutableInt[] mutableIntArray0 = new MutableInt[7];
      MutableInt mutableInt0 = new MutableInt(983);
      assertEquals(983L, mutableInt0.longValue());
      assertEquals(983, mutableInt0.intValue());
      assertEquals(983.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(983.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)983, mutableInt0.shortValue());
      assertEquals(983, (int)mutableInt0.getValue());
      assertEquals(983, (int)mutableInt0.toInteger());
      assertEquals((byte) (-41), mutableInt0.byteValue());
      assertEquals("983", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(0.0);
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(377);
      assertEquals(377, (int)mutableInt2.getValue());
      assertEquals(377, (int)mutableInt2.toInteger());
      assertEquals((byte)121, mutableInt2.byteValue());
      assertEquals(377L, mutableInt2.longValue());
      assertEquals(377, mutableInt2.intValue());
      assertEquals("377", mutableInt2.toString());
      assertEquals(377.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((short)377, mutableInt2.shortValue());
      assertEquals(377.0, mutableInt2.doubleValue(), 0.01);
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(0);
      assertEquals(0.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt3.doubleValue(), 0.01);
      assertEquals("0", mutableInt3.toString());
      assertEquals((short)0, mutableInt3.shortValue());
      assertEquals(0, (int)mutableInt3.getValue());
      assertEquals((byte)0, mutableInt3.byteValue());
      assertEquals(0, (int)mutableInt3.toInteger());
      assertEquals(0, mutableInt3.intValue());
      assertEquals(0L, mutableInt3.longValue());
      assertNotNull(mutableInt3);
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt(0.0);
      assertEquals((short)0, mutableInt4.shortValue());
      assertEquals("0", mutableInt4.toString());
      assertEquals(0, (int)mutableInt4.getValue());
      assertEquals((byte)0, mutableInt4.byteValue());
      assertEquals(0.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt4.toInteger());
      assertEquals(0L, mutableInt4.longValue());
      assertEquals(0, mutableInt4.intValue());
      assertEquals(0.0, mutableInt4.doubleValue(), 0.01);
      assertNotNull(mutableInt4);
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      assertTrue(mutableInt4.equals((Object)mutableInt3));
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt(1269.732749641);
      assertEquals(1269L, mutableInt5.longValue());
      assertEquals(1269, mutableInt5.intValue());
      assertEquals(1269.0, mutableInt5.doubleValue(), 0.01);
      assertEquals(1269, (int)mutableInt5.getValue());
      assertEquals((byte) (-11), mutableInt5.byteValue());
      assertEquals(1269, (int)mutableInt5.toInteger());
      assertEquals(1269.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals((short)1269, mutableInt5.shortValue());
      assertEquals("1269", mutableInt5.toString());
      assertNotNull(mutableInt5);
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt mutableInt6 = new MutableInt(0);
      assertEquals("0", mutableInt6.toString());
      assertEquals(0.0, mutableInt6.doubleValue(), 0.01);
      assertEquals(0L, mutableInt6.longValue());
      assertEquals(0, mutableInt6.intValue());
      assertEquals((short)0, mutableInt6.shortValue());
      assertEquals(0, (int)mutableInt6.toInteger());
      assertEquals((byte)0, mutableInt6.byteValue());
      assertEquals(0.0F, mutableInt6.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt6.getValue());
      assertNotNull(mutableInt6);
      assertTrue(mutableInt6.equals((Object)mutableInt1));
      assertTrue(mutableInt6.equals((Object)mutableInt4));
      assertTrue(mutableInt6.equals((Object)mutableInt3));
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      
      mutableIntArray0[6] = mutableInt6;
      Short short0 = new Short((short) (-4554));
      assertEquals((short) (-4554), (short)short0);
      assertNotNull(short0);
      
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElement(mutableIntArray0, (Object) short0);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotNull(mutableIntArray1);
      assertEquals(7, mutableIntArray1.length);
      assertEquals(7, mutableIntArray0.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 0.0F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      short short0 = (short)0;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2188;
      shortArray0[1] = (short) (-1087);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)2188;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)2188;
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 50, 50, 50);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(540.596284947);
      assertEquals(540.596284947, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 2226.848965411058);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {540.596284947, 540.596284947}, doubleArray1, 0.01);
      
      ArrayUtils.swap(doubleArray1, (-1), 50);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {540.596284947, 540.596284947}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 50;
      intArray0[1] = 50;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-84));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {50, 50}, intArray0);
      assertArrayEquals(new int[] {50, 50}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, true}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.0;
      ArrayUtils.swap(doubleArray0, 317, 1928);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-49.1681010537596), (-49.1681010537596));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = (-617);
      intArray0[3] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 160);
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, (-617), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, (-2145028933));
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'q';
      charArray1[1] = 'u';
      charArray1[2] = 'q';
      ArrayUtils.swap(charArray1, 843, (-2145028933));
      assertNotSame(charArray1, charArray0);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'q', 'u', 'q'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)98, (short)98}, shortArray0);
      assertArrayEquals(new short[] {(short)98, (short)98, (short)98, (short)98}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)98;
      intArray0[1] = (int) (short)98;
      intArray0[2] = 2145881390;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 98);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-2142));
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'F');
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2142);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-2142L)}, longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-2142L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)12;
      shortArray0[1] = (short)1547;
      shortArray0[2] = (short)91;
      shortArray0[3] = (short)6727;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)941;
      shortArray0[6] = (short)6727;
      shortArray0[7] = (short)81;
      shortArray0[8] = (short)83;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)83, 6);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)12, (short)1547, (short)91, (short)6727, (short)1, (short)941, (short)6727, (short)81, (short)83}, shortArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)81;
      intArray0[1] = (int) (short)91;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-502));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -502, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = ArrayUtils.get(objectArray0, (-1333));
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[0] = null;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1333);
      intArray0[1] = (-1333);
      intArray0[2] = (-1333);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1333, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 1.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-669.6430477), (-669.6430477));
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = new Float[10];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 216.72528F);
      assertNotNull(floatArray1);
      assertEquals(10, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertArrayEquals(new float[] {216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F}, floatArray1, 0.01F);
      
      int int0 = (-167);
      int[] intArray0 = new int[1];
      intArray0[0] = (-167);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -167, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-147.3135039356);
      doubleArray0[2] = (-1703.5);
      doubleArray0[3] = (-940.1);
      doubleArray0[4] = 1.0;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, (-147.3135039356), (-1703.5), (-940.1), 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Long long0 = new Long((-1079L));
      assertEquals((-1079L), (long)long0);
      assertNotNull(long0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) long0, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2878);
      intArray0[1] = 1615;
      ArrayUtils.swap(intArray0, 2145251813, 4, (-2617));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-2878), 1615}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf(false);
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = new Boolean("'At2{MM'}^3NQq(");
      assertFalse(boolean5);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean0));
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = new Boolean("'At2{MM'}^3NQq(");
      assertFalse(boolean6);
      assertNotNull(boolean6);
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean5));
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertTrue(boolean7);
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean5));
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = Boolean.valueOf("org.apache.commons.lang3.mutable.MutableInt");
      assertFalse(boolean8);
      assertNotNull(boolean8);
      assertFalse(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean5));
      
      booleanArray0[7] = boolean8;
      Boolean boolean9 = new Boolean("org.apache.commons.lang3.mutable.MutableInt");
      assertFalse(boolean9);
      assertNotNull(boolean9);
      assertTrue(boolean9.equals((Object)boolean1));
      assertFalse(boolean9.equals((Object)boolean7));
      assertTrue(boolean9.equals((Object)boolean3));
      assertTrue(boolean9.equals((Object)boolean6));
      assertTrue(boolean9.equals((Object)boolean0));
      assertTrue(boolean9.equals((Object)boolean4));
      assertTrue(boolean9.equals((Object)boolean5));
      assertTrue(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean2));
      
      booleanArray0[8] = boolean9;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true, false, false}, booleanArray1));
      
      ArrayUtils.shift((Object[]) booleanArray0, Integer.MAX_VALUE);
      assertEquals(9, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)82;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-5));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)74, (byte)82}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte)74, (byte)82}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, (int) (byte)82, 1424, (-1));
      assertEquals(0, objectArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) (byte)74;
      floatArray0[3] = (float) (byte)82;
      floatArray0[4] = (float) (byte)74;
      floatArray0[5] = (float) (byte)82;
      floatArray0[6] = (float) Integer.MAX_VALUE;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 2.14748365E9F, 74.0F, 82.0F, 74.0F, 82.0F, 2.14748365E9F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 2.14748365E9F, 74.0F, 82.0F, 74.0F, 82.0F, 2.14748365E9F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-233L);
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(385.1192363);
      assertEquals(385.1192363, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.swap((Object[]) doubleArray0, (-1), (-3047), (-1322));
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1322);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1322.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1322.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) doubleArray0[0];
      doubleArray1[1] = (double) (-3047);
      boolean boolean0 = ArrayUtils.contains(doubleArray1, (-1.0), 2594.234991);
      assertTrue(boolean0);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1.5, (-3047.0)}, doubleArray1, 0.01);
      
      ArrayUtils.reverse((Object[]) doubleArray0, 1920, (-1));
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = 1.0;
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-669.6430477), (-669.6430477));
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 216.72528F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      ArrayUtils.swap(byteArray0, (-167), (-167), (-167));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)33);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)33, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.swap((Object[]) floatArray0, (int) (byte) (-1), (-1), 2263);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Double double0 = new Double((-2167.314));
      assertEquals((-2167.314), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) double0);
      assertFalse(boolean0);
      assertEquals(0, objectArray0.length);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-815L);
      longArray0[1] = 1L;
      longArray0[2] = 875L;
      longArray0[3] = (-2574L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 423);
      assertEquals(1, int0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-815L), 1L, 875L, (-2574L)}, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2167.314);
      doubleArray0[1] = (double) 875L;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 423;
      doubleArray0[5] = (double) 875L;
      doubleArray0[6] = (double) (-2574L);
      int[] intArray0 = new int[4];
      intArray0[0] = 423;
      intArray0[1] = 1;
      intArray0[2] = 423;
      intArray0[3] = 423;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 423, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)113;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-123));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)38, (byte)85, (byte)0, (byte)0, (byte)113}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)38, (byte)85, (byte)0, (byte)0, (byte)113}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)38;
      floatArray0[1] = (float) (byte)85;
      floatArray0[2] = (-1915.7F);
      floatArray0[3] = (float) (byte) (-1);
      floatArray0[4] = (float) (byte)38;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)0;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (float) (byte)0;
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), (int) (byte)85);
      assertEquals((-1), int0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {38.0F, 85.0F, (-1915.7F), (-1.0F), 38.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, (double) 0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)56;
      shortArray0[1] = (short)56;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)6, 2);
      assertEquals((-1), int1);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)56, (short)56}, shortArray0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = 's';
      charArray0[2] = ' ';
      charArray0[3] = 'q';
      charArray0[4] = '#';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'P', 's', ' ', 'q', '#'}, charArray0);
      assertArrayEquals(new char[] {'P', 's', ' ', 'q', '#'}, charArray1);
      
      Integer integer0 = new Integer((-167));
      assertEquals((-167), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.hashCode((Object) integer0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 's';
      doubleArray0[1] = (double) '#';
      doubleArray0[2] = (double) '#';
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-958.83324998051));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {115.0, 35.0, 35.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-958.83324998051), 115.0, 35.0, 35.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'q';
      intArray0[1] = (int) '#';
      intArray0[2] = (int) '#';
      intArray0[3] = (-253);
      intArray0[4] = (int) ' ';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 113, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 53);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, (-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 53;
      intArray0[1] = 53;
      intArray0[2] = 53;
      intArray0[3] = 53;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 53, 53);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {53, 53, 53, 53}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, (-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 53;
      objectArray0[1] = (Object) (-1.0F);
      objectArray0[2] = (Object) (-1.0F);
      objectArray0[4] = (Object) 53;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) 53;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(7, objectArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(intArray1, intArray0);
      assertNotNull(charArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {53, 53, 53, 53}, intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short0;
      shortArray0[1] = short1;
      shortArray0[2] = short1;
      shortArray0[4] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short1;
      shortArray0[6] = short1;
      shortArray0[7] = short0;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Short", e);
      }
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-38), (-38), (-38));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[1] = (long) (-38);
      longArray0[2] = (long) (-38);
      longArray0[3] = (long) (-38);
      longArray0[4] = (long) (-38);
      longArray0[6] = (long) (-38);
      longArray0[7] = (long) (-38);
      longArray0[8] = (long) (-38);
      ArrayUtils.reverse(longArray0, (-38), (-38));
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, (-38L), (-38L), (-38L), (-38L), 0L, (-38L), (-38L), (-38L)}, longArray0);
      
      Double double0 = new Double((-38L));
      assertEquals((-38.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-1.0));
      assertEquals((-1.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(936.574);
      assertEquals(936.574, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(18, longArray1.length);
      assertArrayEquals(new long[] {0L, (-38L), (-38L), (-38L), (-38L), 0L, (-38L), (-38L), (-38L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.reverse(booleanArray0, 1588, 1588);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-38L);
      objectArray0[1] = (Object) (-38L);
      objectArray0[2] = (Object) double2;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[1]);
      assertTrue(boolean0);
      assertEquals(3, objectArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertTrue(boolean1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(0, objectArray0.length);
      
      short[] shortArray0 = new short[5];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2788, (int) (short)2);
      assertEquals((-1), int0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) boolean0);
      assertFalse(boolean1);
      assertEquals(0, objectArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-5));
      assertEquals((-1), int1);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      int int1 = ArrayUtils.indexOf((double[]) null, 2715.531157077009, (-1427), (-1.0));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = ArrayUtils.lastIndexOf(booleanArray1, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(0, int2);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Character character0 = new Character('t');
      assertEquals('t', (char)character0);
      assertNotNull(character0);
      
      int int3 = ArrayUtils.lastIndexOf((Object[]) booleanArray2, (Object) character0, (-1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals((-1), int3);
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(3961.0);
      assertEquals(3961.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1.0));
      assertEquals((-1.0), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-151.32380896));
      assertEquals((-151.32380896), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      
      doubleArray0[5] = double5;
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray0, (Object) doubleArray0[0]);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotNull(booleanArray2);
      assertEquals(4, booleanArray2.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3296.8079808;
      doubleArray0[1] = 3296.8079808;
      doubleArray0[2] = (-224.06956120811589);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 673.38F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {673.38F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {673.38F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1379.8592960868);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-1379.8592960868), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1379.8592960868), (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.reverse(longArray0, 3496, 3496);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 76, 120);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray1, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)98, (short)98}, shortArray0);
      assertArrayEquals(new short[] {(short)98, (short)98, (short)98, (short)98}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, (int) (short)98);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)100;
      shortArray0[2] = (short) (-2702);
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)100, (short) (-2702)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 2146466190, 2);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      short[] shortArray0 = new short[7];
      floatArray0[0] = (float) (short)1945;
      shortArray0[1] = (short)1945;
      shortArray0[2] = (short)1945;
      shortArray0[3] = (short)1945;
      shortArray0[4] = (short)1945;
      shortArray0[5] = (short)1945;
      shortArray0[6] = (short)0;
      ArrayUtils.shift(shortArray0, (-1), (int) (short)1945, (int) (short)1945);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1945, (short)1945, (short)1945, (short)1945, (short)1945, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short)1252);
      assertEquals((short)1252, (short)short0);
      assertNotNull(short0);
      
      shortArray0[1] = short0;
      Short short1 = new Short((short) shortArray0[1]);
      assertEquals((short)1252, (short)short1);
      assertNotNull(short1);
      assertEquals(7, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[2] = short1;
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'g', 'g'}, charArray0);
      
      short[] shortArray1 = new short[7];
      shortArray1[2] = (short) (-1568);
      shortArray1[3] = (short) shortArray0[1];
      shortArray1[4] = (short) (-2185);
      shortArray1[5] = (short)1252;
      shortArray1[6] = (short)1252;
      ArrayUtils.shift(shortArray1, (-125));
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)1252, (short)0, (short)0, (short) (-1568), (short)1252, (short) (-2185), (short)1252}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      ArrayUtils.swap(longArray0, (int) (short)0, (int) (short)0, 61);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      short[] shortArray0 = ArrayUtils.insert(61, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null, (double) 61);
      assertNull(doubleArray2);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      ArrayUtils.shift((short[]) null, 0);
      short[] shortArray1 = new short[7];
      shortArray1[0] = (short)0;
      shortArray1[1] = (short)0;
      shortArray1[2] = (short)0;
      shortArray1[3] = (short)0;
      shortArray1[4] = (short)0;
      shortArray1[5] = (short)0;
      shortArray1[6] = (short)0;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, (short[]) null);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(7, shortArray2.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)13;
      shortArray0[1] = (short) (byte)13;
      shortArray0[2] = (short)45;
      ArrayUtils.shift(shortArray0, 1, 956, 1);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)13, (short)45, (short)13}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)939;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-44);
      shortArray0[3] = (short) (-44);
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-44), (short) (-44), (short)939}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2421;
      ArrayUtils.shift(shortArray0, 90);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2421}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[5] = 0;
      intArray0[1] = (-888);
      intArray0[2] = 76;
      intArray0[3] = (-874);
      Integer integer0 = new Integer(76);
      assertEquals(76, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 76, 2147221806);
      assertEquals(2, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-888), 76, (-874), 0, 0}, intArray0);
      
      MockRandom mockRandom0 = new MockRandom((-874));
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2147221806;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-874));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {2.14722176E9F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap((boolean[]) null, 2147221806, 2, 2);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 0.0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, 797, 797, 6);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-29);
      intArray0[1] = 2447;
      intArray0[2] = 68;
      intArray0[3] = (-142);
      intArray0[4] = (-2620);
      intArray0[5] = 1211;
      intArray0[6] = 1073741824;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-29), 2447, 68, (-142), (-2620), 1211, 1073741824}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean((String) null);
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean2);
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.valueOf((String) null);
      assertFalse(boolean5);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      
      booleanArray0[4] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.swap((boolean[]) null, 18, (int) (short)98);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-357);
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-357), 2}, intArray0);
      assertArrayEquals(new int[] {(-357), 2}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1;
      intArray2[1] = (-357);
      intArray2[2] = 2;
      intArray2[3] = 1;
      intArray2[4] = (-357);
      intArray2[5] = (-357);
      intArray2[6] = 2;
      intArray2[7] = 2;
      intArray2[8] = 1;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-357);
      intArray3[1] = 1;
      intArray3[2] = 2;
      intArray3[3] = 2076;
      intArray3[4] = 2076;
      boolean boolean0 = ArrayUtils.isSameLength(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertFalse(boolean0);
      assertEquals(9, intArray2.length);
      assertEquals(5, intArray3.length);
      assertArrayEquals(new int[] {1, (-357), 2, 1, (-357), (-357), 2, 2, 1}, intArray2);
      assertArrayEquals(new int[] {(-357), 1, 2, 2076, 2076}, intArray3);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      
      Float float0 = new Float(1511.0F);
      assertEquals(1511.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = ArrayUtils.toString((Object) "vn\"MUO{4x", "kh(vk/YMs} g)C U=s");
      assertEquals("vn\"MUO{4x", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-192L));
      assertEquals((-192L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-192L)}, longArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1767;
      Double double0 = new Double((-882.3049));
      assertEquals((-882.3049), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {1767, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.swap(booleanArray0, 52, 1767);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-225L);
      Double double0 = new Double((-20.466739372837534));
      assertEquals((-20.466739372837534), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(385.1192363);
      assertEquals(385.1192363, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-1));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertFalse(bitSet1.isEmpty());
      assertEquals(3, bitSet1.cardinality());
      assertEquals(3, bitSet1.length());
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      ArrayUtils.reverse(floatArray0, 3168, 797);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      BitSet bitSet2 = ArrayUtils.indexesOf((short[]) null, (short)4382);
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.length());
      assertEquals("{}", bitSet2.toString());
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.cardinality());
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertNotNull(bitSet2);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertFalse(bitSet2.equals((Object)bitSet1));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)4382;
      intArray0[1] = (int) (short)4382;
      intArray0[2] = 951;
      intArray0[3] = (int) (short)4382;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 797;
      intArray1[1] = 951;
      intArray1[2] = (int) (short)4382;
      intArray1[3] = 3168;
      intArray1[4] = 1041;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {4382, 4382, 951, 4382}, intArray0);
      assertArrayEquals(new int[] {797, 951, 4382, 3168, 1041}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, 4382, (-95));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(3961.0);
      assertEquals(3961.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1.0));
      assertEquals((-1.0), (double)double4, 0.01);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-151.32380896));
      assertEquals((-151.32380896), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      
      doubleArray0[5] = double5;
      long[] longArray0 = new long[4];
      longArray0[0] = 460L;
      longArray0[1] = 460L;
      longArray0[2] = 460L;
      longArray0[3] = 460L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {460L, 460L, 460L, 460L, 460L, 460L, 460L, 460L}, longArray1);
      assertArrayEquals(new long[] {460L, 460L, 460L, 460L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1962;
      intArray0[1] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, 1962);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1962, 0}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      char[] charArray0 = ArrayUtils.insert((-1936), arrayUtils0.EMPTY_CHAR_ARRAY, arrayUtils0.EMPTY_CHAR_ARRAY);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-715));
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-715)}, shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      ArrayUtils.swap((byte[]) null, 85, 52);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(322, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) ')';
      longArray0[1] = 1603L;
      longArray0[2] = (long) 52;
      longArray0[4] = (long) ')';
      longArray0[5] = (long) 'S';
      longArray0[7] = (long) 'S';
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 85, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {41L, 1603L, 52L, 0L, 41L, 83L, 0L, 83L}, longArray0);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray2.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short)1252);
      assertEquals((short)1252, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)1252);
      assertEquals((short)1252, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[1]);
      assertEquals((short)1252, (short)short2);
      assertNotNull(short2);
      assertEquals(7, shortArray0.length);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)1674);
      assertEquals((short)1674, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-564));
      assertEquals((short) (-564), (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) shortArray0[2]);
      assertEquals((short)1252, (short)short5);
      assertNotNull(short5);
      assertEquals(7, shortArray0.length);
      assertTrue(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short1));
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)1988);
      assertEquals((short)1988, (short)short6);
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short4));
      
      shortArray0[6] = short6;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(7, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals((-1), int0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Double double0 = new Double(0.163947228096601);
      assertEquals(0.163947228096601, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[4] = double0;
      Double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      int[] intArray0 = null;
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = ')';
      charArray0[3] = 'Y';
      charArray0[4] = '!';
      charArray0[5] = ')';
      charArray0[6] = 'Y';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(405, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 405, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'Y';
      charArray0[2] = 'X';
      Double double0 = new Double((-3258.0));
      assertEquals((-3258.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(704.0);
      assertEquals(704.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-3258.0), 704.0}, doubleArray1, 0.01);
      
      ArrayUtils.shift(doubleArray1, (-2911), 13, 1279);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {704.0, (-3258.0)}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ')';
      charArray1[1] = '1';
      charArray1[2] = 'Y';
      charArray1[3] = '1';
      charArray1[4] = 'Y';
      charArray1[5] = 'X';
      charArray1[6] = '1';
      charArray1[7] = 'Y';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(13, charArray0, charArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'L';
      charArray0[1] = '(';
      charArray0[2] = 'a';
      charArray0[3] = 'q';
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'L', '(', 'a', 'q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3337);
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short) (-3337)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3337)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      long[] longArray0 = new long[4];
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2147483647L, 0);
      assertEquals((-1), int0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 704L;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1239);
      shortArray0[1] = (short) (-192);
      shortArray0[2] = (short)2188;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)2031;
      shortArray0[5] = (short)4124;
      shortArray0[6] = (short) (-2878);
      shortArray0[7] = (short)22245;
      int[] intArray0 = new int[0];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, intArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short) (-1239), (short) (-192), (short)2188, (short)0, (short)2031, (short)4124, (short) (-2878), (short)22245}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1239), (short) (-192), (short)2188, (short)0, (short)2031, (short)4124, (short) (-2878), (short)22245}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1239), (short) (-192), (short)2188, (short)0, (short)2031, (short)4124, (short) (-2878), (short)22245}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      short[] shortArray2 = new short[2];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)4124;
      shortArray2[1] = (short) (-1239);
      int int0 = ArrayUtils.indexOf(shortArray2, (short) (-192));
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertEquals((-1), int0);
      assertEquals(2, shortArray2.length);
      assertArrayEquals(new short[] {(short)4124, (short) (-1239)}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 306, 43);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.swap((char[]) null, (-38), (-530));
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-225L);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(720, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 720, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-233L);
      int[] intArray0 = new int[7];
      intArray0[0] = (-405);
      intArray0[1] = (-3427);
      intArray0[2] = (-2608);
      int int0 = 10;
      intArray0[3] = 10;
      intArray0[4] = (-1);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(99, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int0 = 1615;
      ArrayUtils.shift(floatArray1, 1615);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      long[] longArray0 = new long[7];
      longArray0[0] = 1672L;
      longArray0[1] = (-4195L);
      longArray0[2] = 1865L;
      longArray0[3] = (-1050L);
      longArray0[4] = 2147483647L;
      longArray0[5] = (-3580L);
      longArray0[6] = 1932L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {1672L, (-4195L), 1865L, (-1050L), 2147483647L, (-3580L), 1932L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = false;
      booleanArray1[7] = false;
      boolean[] booleanArray2 = new boolean[7];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = false;
      booleanArray2[4] = false;
      booleanArray2[5] = false;
      booleanArray2[6] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), booleanArray1, booleanArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)59;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-109));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)14, (byte)2, (byte)59}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)14, (byte)2, (byte)59}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Long long1 = new Long((byte)2);
      assertEquals(2L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(704L);
      assertEquals(704L, (long)long2);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      Long long3 = new Long((-1L));
      assertEquals((-1L), (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray0, (long) (byte)2);
      assertSame(longArray0, longArray1);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray2.length);
      assertArrayEquals(new long[] {704L}, longArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 0.0, (double) (byte) (-10));
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short0;
      shortArray0[1] = short1;
      shortArray0[2] = short1;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short1;
      shortArray0[6] = short1;
      shortArray0[7] = short0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(8, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-380L);
      longArray0[1] = (-998L);
      longArray0[2] = (-823L);
      longArray0[3] = (-1482L);
      longArray0[4] = (-1045L);
      longArray0[5] = (-2348L);
      longArray0[6] = 3087L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 2616, (-998L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2616, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 85L;
      longArray0[1] = 333L;
      longArray0[2] = 0L;
      longArray0[3] = (-876L);
      longArray0[4] = 0L;
      longArray0[5] = (-3360L);
      longArray0[6] = (-2061L);
      longArray0[7] = 1L;
      long[] longArray1 = ArrayUtils.add(longArray0, 2, 85L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertArrayEquals(new long[] {85L, 333L, 0L, (-876L), 0L, (-3360L), (-2061L), 1L}, longArray0);
      assertArrayEquals(new long[] {85L, 333L, 85L, 0L, (-876L), 0L, (-3360L), (-2061L), 1L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-44);
      ArrayUtils.shift(byteArray0, (-1427), (-1), (int) (byte) (-118));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)98, (byte) (-45), (byte)122, (byte) (-118), (byte)111, (byte) (-89), (byte) (-70), (byte) (-44)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      BitSet bitSet0 = new BitSet(0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.size());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = ArrayUtils.insert(0, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (-880.1364F);
      floatArray0[2] = 661.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-2139));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2139, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 737;
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = 11;
      intArray0[5] = 1962;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 737;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 737;
      doubleArray0[4] = 1509.0579808000002;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 11;
      doubleArray0[8] = (double) 0;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {737.0, 0.0, 737.0, 1509.0579808000002, 0.0, 0.0, 11.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '|');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertArrayEquals(new char[] {'|'}, charArray0);
      assertArrayEquals(new char[] {'|', '|'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 11;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 2848);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2848, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 463.33727000000005;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-965);
      shortArray0[1] = (short)121;
      shortArray0[2] = (short) (-700);
      shortArray0[3] = (short) (-2122);
      shortArray0[4] = (short)121;
      shortArray0[5] = (short) (-2546);
      shortArray0[6] = (short) (-1322);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-965), (short)121, (short) (-700), (short) (-2122), (short)121, (short) (-2546), (short) (-1322)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 4142;
      intArray0[2] = 0;
      intArray0[3] = 10;
      intArray0[4] = (-2104);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 10, (-5222));
      assertEquals((-1), int0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {2, 4142, 0, 10, (-2104), 0, 0}, intArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-345);
      shortArray0[1] = (short)51;
      shortArray0[2] = (short)110;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)8;
      shortArray0[5] = (short)1643;
      shortArray0[6] = (short)949;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-345), (short)51, (short)110, (short) (-1), (short)8, (short)1643, (short)949}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-1);
      Boolean[] booleanArray2 = new Boolean[0];
      Boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotNull(booleanArray3);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      ArrayUtils.swap(byteArray0, (-3754), (-2717), (-1));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains(booleanArray1, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(boolean0);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Integer integer0 = new Integer((-1434));
      assertEquals((-1434), (int)integer0);
      assertNotNull(integer0);
      
      try { 
        Integer.valueOf("R(v\u0004V>1JV", (-1434));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1434 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      ArrayUtils.swap(byteArray0, (int) (byte)80, (int) (byte)80, (int) (byte)112);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)80}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean1);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean1);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean((String) null);
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf((String) null);
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertTrue(boolean5);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean2));
      
      booleanArray0[4] = boolean5;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-128);
      ArrayUtils.swap(byteArray0, (int) (byte)116, (int) (byte)116, (int) (byte) (-66));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-66), (byte)102, (byte)116, (byte) (-1), (byte) (-128)}, byteArray0);
      
      boolean boolean6 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean6);
      assertFalse(boolean6 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, (-2145028933));
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Byte byte0 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_BYTE_OBJECT_ARRAY);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Double double0 = new Double(3851.01826);
      assertEquals(3851.01826, (double)double0, 0.01);
      assertNotNull(double0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) double0, (-2145028933));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) byte1, 0);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertSame(byteArray0, byteArray1);
      assertNotNull(bitSet0);
      assertEquals(2, byteArray0.length);
      assertTrue(byte1.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2146466190;
      int int0 = ArrayUtils.indexOf(intArray0, 2146466190);
      assertEquals(1, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 2146466190}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) arrayUtils0.EMPTY_SHORT_OBJECT_ARRAY, (Object) arrayUtils0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.swap(arrayUtils0.EMPTY_FLOAT_ARRAY, (-2350), 2146466190);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = ';';
      charArray0[0] = ';';
      char char1 = '(';
      charArray0[1] = '(';
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(objectArray0, (Comparator<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(3961.0);
      assertEquals(3961.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1.0));
      assertEquals((-1.0), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-151.32380896));
      assertEquals((-151.32380896), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      
      doubleArray0[5] = double5;
      long[] longArray0 = new long[4];
      longArray0[0] = 460L;
      longArray0[1] = 460L;
      longArray0[2] = 460L;
      longArray0[3] = 460L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {460L, 460L, 460L, 460L, 460L, 460L, 460L, 460L}, longArray1);
      assertArrayEquals(new long[] {460L, 460L, 460L, 460L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.reverse(booleanArray0, (-428), (-428));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 808.48645F;
      floatArray0[0] = (-1332.9109F);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1332.9109F), 808.48645F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.reverse(booleanArray0, (-1073741824), (-829));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[2] = '\u0000';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '\u0000';
      floatArray0[1] = (float) '\u0000';
      floatArray0[2] = (float) 'u';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 117.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 117.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {117.0F, 0.0F, 0.0F, 117.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray2 = new Float[0];
      Float[] floatArray3 = ArrayUtils.add(floatArray2, float0);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray3, floatArray2);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray2.length);
      assertEquals(1, floatArray3.length);
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (float) 2652, 2652);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(bitSet0);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 117.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {117.0F, 0.0F, 0.0F, 117.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'u';
      doubleArray0[1] = 0.0;
      ArrayUtils.shift(doubleArray0, (int) (byte) (-5));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 117.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) floatArray2);
      assertNotSame(floatArray2, floatArray3);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray3));
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = '(';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '(';
      floatArray0[1] = (float) '(';
      floatArray0[2] = (float) 'u';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 117.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {40.0F, 40.0F, 117.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {117.0F, 40.0F, 40.0F, 117.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray2 = new Float[0];
      Float[] floatArray3 = ArrayUtils.add(floatArray2, float0);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray3, floatArray2);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray2.length);
      assertEquals(1, floatArray3.length);
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (float) 2652, 2652);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(bitSet0);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {40.0F, 40.0F, 117.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {117.0F, 40.0F, 40.0F, 117.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'u';
      doubleArray0[1] = 0.0;
      ArrayUtils.shift(doubleArray0, (int) (byte) (-5));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 117.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) floatArray2);
      assertNotSame(floatArray2, floatArray3);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray3));
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = 'Y';
      charArray0[2] = 'X';
      Double double0 = new Double((-3258.0));
      assertEquals((-3258.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(704.0);
      assertEquals(704.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-3258.0), 704.0}, doubleArray1, 0.01);
      
      ArrayUtils.shift(doubleArray1, (-2911), 13, 1279);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {704.0, (-3258.0)}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'X';
      longArray0[1] = (long) 'Y';
      longArray0[2] = (long) 'Y';
      longArray0[3] = (long) 'X';
      longArray0[4] = (long) (-2911);
      longArray0[5] = (long) 'Y';
      longArray0[6] = (long) '1';
      longArray0[7] = (long) 13;
      longArray0[8] = (long) 1279;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {88L, 89L, 89L, 88L, (-2911L), 89L, 49L, 13L, 1279L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'Y';
      charArray0[2] = 'X';
      Double double0 = new Double((-3258.0));
      assertEquals((-3258.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(704.0);
      assertEquals(704.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-3258.0), 704.0}, doubleArray1, 0.01);
      
      ArrayUtils.shift(doubleArray1, (-2911), 13, 1279);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {704.0, (-3258.0)}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Class<Double[]> class0 = Double[].class;
      Double[] doubleArray2 = new Double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = double1;
      doubleArray2[1] = double1;
      doubleArray2[2] = double1;
      doubleArray2[3] = double0;
      Double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray2, class0);
      assertNotSame(doubleArray2, doubleArray0);
      assertSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Short short0 = new Short((short)56);
      assertEquals((short)56, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0);
      assertNotNull(stringArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, stringArray0.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt mutableInt0 = new MutableInt(227);
      assertEquals(227, mutableInt0.intValue());
      assertEquals(227.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(227, (int)mutableInt0.toInteger());
      assertEquals(227, (int)mutableInt0.getValue());
      assertEquals(227L, mutableInt0.longValue());
      assertEquals("227", mutableInt0.toString());
      assertEquals((short)227, mutableInt0.shortValue());
      assertEquals((byte) (-29), mutableInt0.byteValue());
      assertEquals(227.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      mutableInt0.subtract((Number) short0);
      assertEquals((short)171, mutableInt0.shortValue());
      assertEquals((byte) (-85), mutableInt0.byteValue());
      assertEquals(171.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(171, mutableInt0.intValue());
      assertEquals(171.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("171", mutableInt0.toString());
      assertEquals(171, (int)mutableInt0.toInteger());
      assertEquals(171, (int)mutableInt0.getValue());
      assertEquals(171L, mutableInt0.longValue());
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((Number) short0);
      assertEquals(56.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(56, mutableInt1.intValue());
      assertEquals(56, (int)mutableInt1.toInteger());
      assertEquals((byte)56, mutableInt1.byteValue());
      assertEquals(56.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(56, (int)mutableInt1.getValue());
      assertEquals((short)56, mutableInt1.shortValue());
      assertEquals("56", mutableInt1.toString());
      assertEquals(56L, mutableInt1.longValue());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      mutableInt1.subtract(227);
      assertEquals((-171L), mutableInt1.longValue());
      assertEquals((-171), (int)mutableInt1.toInteger());
      assertEquals((byte)85, mutableInt1.byteValue());
      assertEquals("-171", mutableInt1.toString());
      assertEquals((-171), mutableInt1.intValue());
      assertEquals((short) (-171), mutableInt1.shortValue());
      assertEquals((-171.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-171), (int)mutableInt1.getValue());
      assertEquals((-171.0), mutableInt1.doubleValue(), 0.01);
      assertNotSame(mutableInt1, mutableInt0);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt[] mutableIntArray1 = ArrayUtils.subarray(mutableIntArray0, (int)  (-3829), (int)  (-3829));
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertEquals(2, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      Short short1 = new Short((short)2461);
      assertEquals((short)2461, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short)2507);
      assertEquals((short)2507, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = '@';
      charArray0[4] = '^';
      charArray0[5] = 'w';
      ArrayUtils.reverse(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'w', '^', '@', 'B', 'B', 'l'}, charArray0);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Float float0 = new Float((-46.8F));
      assertEquals((-46.8F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertEquals((-46.8F), object0);
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, object0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '@';
      floatArray0[1] = (float) 'l';
      floatArray0[2] = (float) '^';
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {64.0F, 108.0F, 94.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.reverse((int[]) null, (-1115), (-1115));
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) doubleArray2, (Object) null, Integer.MAX_VALUE);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1209);
      shortArray0[1] = (short) (-192);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)43;
      shortArray0[4] = (short) (-2126);
      shortArray0[5] = (short) (-1176);
      shortArray0[6] = (short) (-3015);
      shortArray0[7] = (short) (-917);
      shortArray0[8] = (short) (-648);
      int int2 = ArrayUtils.indexOf(shortArray0, (short) (-192));
      assertEquals(1, int2);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1209), (short) (-192), (short)0, (short)43, (short) (-2126), (short) (-1176), (short) (-3015), (short) (-917), (short) (-648)}, shortArray0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      Object[] objectArray0 = ArrayUtils.subarray((Object[]) doubleArray2, (int)  (-917), 2141847207);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, objectArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'w';
      charArray0[1] = 'd';
      charArray0[2] = 'i';
      charArray0[3] = '#';
      charArray0[4] = '_';
      charArray0[5] = '[';
      charArray0[6] = ':';
      charArray0[7] = 'U';
      charArray0[8] = 'N';
      ArrayUtils.reverse(charArray0, (int) (short) (-2126), 1511);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'N', 'U', ':', '[', '_', '#', 'i', 'd', 'w'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)800;
      shortArray0[1] = (short)78;
      shortArray0[2] = (short)239;
      shortArray0[3] = (short) (-1849);
      shortArray0[4] = (short) (-1605);
      shortArray0[5] = (short) (-1333);
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short)78, (short) (-298));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 78, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      int int0 = 0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(0, objectArray0.length);
      
      short short0 = (short)3258;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2878);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)3258;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)2788;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)3258, (int) (short)2788);
      assertEquals(2, int1);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2878), (short)2, (short)3258, (short)0, (short)2788}, shortArray0);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1233);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Integer integer0 = new Integer(102);
      assertEquals(102, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, integer0);
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)4;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)4;
      intArray0[1] = (int) (byte)101;
      intArray0[2] = (int) (byte)101;
      intArray0[3] = (int) (byte)4;
      intArray0[4] = (int) (byte)101;
      intArray0[5] = (int) (byte)4;
      intArray0[6] = (int) (byte)101;
      Double double0 = new Double((-357.0));
      assertEquals((-357.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertEquals((-357.0), object0);
      assertNotNull(object0);
      
      ArrayUtils.reverse((Object[]) longArray0, 8, 386);
      assertEquals(0, longArray0.length);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double1 = new Double(0.1);
      assertEquals(0.1, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)object0, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, double1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotEquals((double)double1, (double)object0, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 101, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = 40L;
      longArray0[2] = (-782L);
      longArray0[3] = (-3580L);
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
      assertArrayEquals(new byte[] {(byte)61}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertTrue(boolean1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (byte) (-69));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
      assertArrayEquals(new byte[] {(byte)61}, byteArray1);
      assertArrayEquals(new byte[] {(byte)61}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-69);
      shortArray0[1] = (short) (byte)61;
      shortArray0[2] = (short) (byte)61;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte)61);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-69), (short)61}, shortArray1);
      assertArrayEquals(new short[] {(short) (-69), (short)61, (short)61}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean3 = ArrayUtils.isSameLength(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertTrue(boolean3);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
      assertArrayEquals(new byte[] {(byte)61}, byteArray1);
      assertArrayEquals(new byte[] {(byte)61}, byteArray2);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)61;
      floatArray0[1] = (float) (short) (-69);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {61.0F, (-69.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {61.0F, (-69.0F)}, floatArray1, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (short)61);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 1.0;
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-669.6430477), (-669.6430477));
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = new Float[10];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 216.72528F);
      assertNotNull(floatArray1);
      assertEquals(10, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertArrayEquals(new float[] {216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F, 216.72528F}, floatArray1, 0.01F);
      
      ArrayUtils.swap(byteArray0, (-167), (-167), (-167));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      ArrayUtils.reverse(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean2);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1830.63F), 3);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-2142));
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'F');
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2142);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-2142L)}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)0;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0, (byte)0, (byte)26, (byte) (-116), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)92);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0, (byte)0, (byte)26, (byte) (-116), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0, (byte)0, (byte)26, (byte) (-116), (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean3 = ArrayUtils.isSameLength(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(boolean3);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0, (byte)0, (byte)26, (byte) (-116), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0, (byte)0, (byte)26, (byte) (-116), (byte)0, (byte)0, (byte)0}, byteArray1);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(3961.0);
      assertEquals(3961.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      Double double4 = new Double((-1.0));
      assertEquals((-1.0), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-151.32380896));
      assertEquals((-151.32380896), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-47.72075258414));
      assertEquals((-47.72075258414), (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(385.1192363);
      assertEquals(385.1192363, (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      
      doubleArray0[7] = double7;
      MutableInt mutableInt0 = new MutableInt((-1));
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-876);
      shortArray0[1] = (short) (-1045);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-876), (short) (-1045)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-876), (short) (-1045)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Double double8 = new Double(253.0);
      assertEquals(253.0, (double)double8, 0.01);
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.add(doubleArray0, double8);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-876);
      longArray0[1] = (long) (short) (-876);
      longArray0[2] = (long) (short) (-1045);
      longArray0[3] = (long) (short) (-1045);
      longArray0[4] = (long) (short) (-1045);
      longArray0[5] = (long) (short) (-876);
      longArray0[6] = (long) (short) (-876);
      longArray0[7] = (long) (short) (-876);
      int int0 = ArrayUtils.indexOf(longArray0, 1811L);
      assertEquals((-1), int0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-876L), (-876L), (-1045L), (-1045L), (-1045L), (-876L), (-876L), (-876L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2146466190;
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) doubleArray2, (Object) null, Integer.MAX_VALUE);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 0;
      intArray0[4] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1, 1, Integer.MAX_VALUE, 0, Integer.MAX_VALUE}, intArray1);
      assertArrayEquals(new int[] {1, 1, Integer.MAX_VALUE, 0, Integer.MAX_VALUE}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 1;
      integerArray0[1] = (Integer) 1;
      integerArray0[2] = (Integer) 1;
      integerArray0[3] = (Integer) 1;
      integerArray0[4] = (Integer) 1;
      integerArray0[5] = (Integer) 1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, Integer.MAX_VALUE);
      assertFalse(boolean0);
      assertEquals(6, integerArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-558L));
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(intArray1, (Random) mockRandom0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1, Integer.MAX_VALUE, 0, Integer.MAX_VALUE, 1}, intArray1);
      assertArrayEquals(new int[] {1, 1, Integer.MAX_VALUE, 0, Integer.MAX_VALUE}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-3606.45389221));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-888);
      int int0 = ArrayUtils.indexOf((short[]) null, (short)3961);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[2] = 'a';
      charArray0[3] = 'q';
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertArrayEquals(new char[] {';', '\u0000', 'a', 'q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray1 = ArrayUtils.add(intArray0, (-2145028933));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-2145028933)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray2.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-2145028933)}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      Long long0 = new Long((-17L));
      assertEquals((-17L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong((String) null, (long) (-2145028933));
      assertEquals((-2145028933L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-887);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-887), (-1));
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-887)}, shortArray0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = new Boolean("3(e8_;jDP");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("Comparator should not be null.");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertTrue(boolean4);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertTrue(boolean6);
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean2));
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = new Boolean(true);
      assertTrue(boolean7);
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean6));
      
      boolean boolean8 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean8);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(0, objectArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2878);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)3258;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)2788;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)3258, (int) (short)2788);
      assertEquals(2, int0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2878), (short)2, (short)3258, (short)0, (short)2788}, shortArray0);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(booleanArray0, booleanArray2);
      assertNotNull(booleanArray2);
      assertEquals(5, booleanArray2.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1233);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-739));
      assertFalse(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2878), (short)2, (short)3258, (short)0, (short)2788}, shortArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = 'S';
      charArray0[2] = 'V';
      charArray0[3] = ' ';
      charArray0[4] = 'J';
      charArray0[5] = 'e';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'Z', 'S', 'V', ' ', 'J', 'e'}, charArray0);
      assertArrayEquals(new char[] {'Z', 'S', 'V', ' ', 'J', 'e'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = 'Y';
      char char0 = 'X';
      charArray0[2] = 'X';
      Double double0 = new Double((-3258.0));
      assertEquals((-3258.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(704.0);
      assertEquals(704.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = Float.valueOf((-841.8F));
      assertEquals((-841.8F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-521.18F));
      assertEquals((-521.18F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.subarray(floatArray0, 398, 398);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      charArray0[1] = '(';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'}', '('}, charArray0);
      assertArrayEquals(new char[] {'}', '(', '}', '('}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '}';
      longArray0[1] = (long) '(';
      longArray0[2] = (long) 398;
      int int0 = ArrayUtils.indexOf(longArray0, 398L, 48);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {125L, 40L, 398L}, longArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-648);
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-1));
      assertEquals((-1), int1);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-648)}, shortArray0);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)0;
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) 0L;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Float[] floatArray2 = new Float[0];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray3 = ArrayUtils.add(floatArray2, float0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray2, floatArray3);
      assertNotNull(floatArray3);
      assertEquals(1, floatArray3.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte) (-10);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)14);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)1, (byte) (-12), (byte)65, (byte) (-1), (byte)75, (byte)59, (byte) (-10)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)1, (byte) (-12), (byte)65, (byte) (-1), (byte)75, (byte)59, (byte) (-10)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short0;
      shortArray0[1] = short1;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = 'N';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {' ', ' ', 'N'}, charArray0);
      
      short[] shortArray1 = new short[2];
      shortArray1[0] = (short)16;
      shortArray1[1] = (short)16;
      ArrayUtils.shift(shortArray1, (int) ' ');
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)16, (short)16}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)4703;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)100;
      shortArray0[4] = (short) (-2868);
      shortArray0[5] = (short) (-408);
      int[] intArray0 = new int[9];
      shortArray0[0] = (short)4703;
      intArray0[1] = (int) (short)2;
      intArray0[2] = (int) (short) (-2868);
      intArray0[3] = (int) (short)100;
      intArray0[4] = (int) (short)2;
      intArray0[5] = (int) (short)2;
      intArray0[6] = (int) (short)100;
      intArray0[7] = (int) (short) (-408);
      intArray0[8] = (int) (short)2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-225L);
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(385.1192363);
      assertEquals(385.1192363, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.swap((Object[]) doubleArray0, (-1), (-3047), (-1322));
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1322);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1322.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1322.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-3047);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3047, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte) (-114);
      byteArray0[7] = (byte)5;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = (int) (byte) (-1);
      intArray0[5] = (int) (byte) (-1);
      intArray0[6] = (int) (byte) (-1);
      intArray0[7] = (int) (byte) (-1);
      intArray0[8] = 85;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 85, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1500.5245097007);
      assertEquals(1500.5245097007, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(5084.558);
      assertEquals(5084.558, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      Double double4 = new Double(0.0);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      Double double5 = new Double(5084.558);
      assertEquals(5084.558, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double4;
      doubleArray0[1] = double0;
      Double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1500.5245097007;
      doubleArray2[1] = (double) doubleArray0[0];
      doubleArray2[2] = (double) 2;
      doubleArray2[3] = (double) doubleArray0[0];
      doubleArray2[4] = (double) doubleArray0[0];
      doubleArray2[5] = (double) 2;
      ArrayUtils.shift(doubleArray2, 2684, 2, 2);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {1500.5245097007, 0.0, 2.0, 0.0, 0.0, 2.0}, doubleArray2, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)59);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short0;
      shortArray0[1] = short1;
      shortArray0[2] = short1;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-34);
      ArrayUtils.swap(byteArray0, (-2775), (int) (byte) (-34));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-34)}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (-2717), (-2717), (-130));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      ArrayUtils.swap((byte[]) null, 85, 52);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      ArrayUtils.swap((byte[]) null, 85, 49);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 85;
      longArray0[1] = (long) 49;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 49;
      longArray0[4] = (long) 85;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 49L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {85L, 49L, (-1L), 49L, 85L}, longArray0);
      assertArrayEquals(new long[] {85L, (-1L), 85L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 49L;
      objectArray0[1] = (Object) 85L;
      objectArray0[2] = (Object) 85L;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1L);
      longArray2[1] = (long) 49;
      longArray2[2] = (-1L);
      longArray2[3] = (long) 85;
      longArray2[4] = (-1L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray2, (-787L));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(bitSet0);
      assertEquals(5, longArray2.length);
      assertArrayEquals(new long[] {(-1L), 49L, (-1L), 85L, (-1L)}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNull(object0);
      assertEquals(5, longArray2.length);
      assertArrayEquals(new long[] {(-1L), 49L, (-1L), 85L, (-1L)}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      objectArray0[3] = null;
      objectArray0[4] = (Object) (-1L);
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[5] = object1;
      int int0 = (-3536);
      // Undeclared exception!
      try { 
        bitSet0.flip((-1191));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1191
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)3051;
      shortArray0[2] = (short)14;
      shortArray0[3] = (short)43;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)3051, (short)14, (short)43}, shortArray0);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-48));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-362);
      Long long0 = new Long(1);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1101L);
      assertEquals(1101L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 3175L);
      assertNull(longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0L, 1.0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      charArray0[4] = '!';
      int[] intArray0 = new int[5];
      intArray0[0] = (int) ';';
      intArray0[1] = (int) 'S';
      intArray0[2] = 4;
      intArray0[3] = (-2096353083);
      intArray0[4] = (int) 'S';
      int[] intArray1 = ArrayUtils.add(intArray0, (-545));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {59, 83, 4, (-2096353083), 83}, intArray0);
      assertArrayEquals(new int[] {59, 83, 4, (-2096353083), 83, (-545)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.shift((Object[]) null, (-1), 4, 0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'S';
      doubleArray0[1] = (double) (-545);
      doubleArray0[2] = (double) '!';
      doubleArray0[3] = (double) (-545);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {83.0, (-545.0), 33.0, (-545.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      char[] charArray0 = new char[27];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      charArray0[4] = '!';
      charArray0[5] = 'S';
      charArray0[6] = '#';
      charArray0[7] = 'G';
      charArray0[8] = ')';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(27, charArray0.length);
      assertEquals(54, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '(';
      intArray0[1] = (int) '!';
      intArray0[2] = (int) ')';
      intArray0[3] = (int) '#';
      intArray0[4] = 121;
      intArray0[5] = (int) '(';
      intArray0[6] = (int) 'q';
      intArray0[7] = (int) '!';
      int[] intArray1 = ArrayUtils.add(intArray0, 40);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {40, 33, 41, 35, 121, 40, 113, 33, 40}, intArray1);
      assertArrayEquals(new int[] {40, 33, 41, 35, 121, 40, 113, 33}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'G';
      ArrayUtils.shift(objectArray0, 113, 867, 121);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-233L);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      MutableInt mutableInt0 = new MutableInt(1);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      Double double0 = new Double(1);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      MutableInt mutableInt1 = new MutableInt(double0);
      assertEquals(1.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)1, mutableInt1.shortValue());
      assertEquals(1, (int)mutableInt1.getValue());
      assertEquals(1.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(1, (int)mutableInt1.toInteger());
      assertEquals((byte)1, mutableInt1.byteValue());
      assertEquals(1, mutableInt1.intValue());
      assertEquals("1", mutableInt1.toString());
      assertEquals(1L, mutableInt1.longValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt((-233L));
      assertEquals((byte)23, mutableInt2.byteValue());
      assertEquals((-233.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-233), (int)mutableInt2.toInteger());
      assertEquals((-233), (int)mutableInt2.getValue());
      assertEquals((-233L), mutableInt2.longValue());
      assertEquals("-233", mutableInt2.toString());
      assertEquals((-233.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((short) (-233), mutableInt2.shortValue());
      assertEquals((-233), mutableInt2.intValue());
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      
      MutableInt mutableInt3 = new MutableInt(double0);
      assertEquals(1, (int)mutableInt3.getValue());
      assertEquals((byte)1, mutableInt3.byteValue());
      assertEquals(1, (int)mutableInt3.toInteger());
      assertEquals(1.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(1L, mutableInt3.longValue());
      assertEquals("1", mutableInt3.toString());
      assertEquals(1.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(1, mutableInt3.intValue());
      assertEquals((short)1, mutableInt3.shortValue());
      assertNotNull(mutableInt3);
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt1));
      
      MutableInt mutableInt4 = new MutableInt(65);
      assertEquals("65", mutableInt4.toString());
      assertEquals(65L, mutableInt4.longValue());
      assertEquals((short)65, mutableInt4.shortValue());
      assertEquals(65, mutableInt4.intValue());
      assertEquals(65, (int)mutableInt4.getValue());
      assertEquals((byte)65, mutableInt4.byteValue());
      assertEquals(65, (int)mutableInt4.toInteger());
      assertEquals(65.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(65.0, mutableInt4.doubleValue(), 0.01);
      assertNotNull(mutableInt4);
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      
      MutableInt mutableInt5 = new MutableInt(65);
      assertEquals((short)65, mutableInt5.shortValue());
      assertEquals(65, (int)mutableInt5.getValue());
      assertEquals(65, (int)mutableInt5.toInteger());
      assertEquals((byte)65, mutableInt5.byteValue());
      assertEquals(65.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals(65, mutableInt5.intValue());
      assertEquals(65.0, mutableInt5.doubleValue(), 0.01);
      assertEquals("65", mutableInt5.toString());
      assertEquals(65L, mutableInt5.longValue());
      assertNotNull(mutableInt5);
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertTrue(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      
      MutableInt mutableInt6 = new MutableInt(65);
      assertEquals(65.0, mutableInt6.doubleValue(), 0.01);
      assertEquals(65, mutableInt6.intValue());
      assertEquals(65, (int)mutableInt6.toInteger());
      assertEquals((byte)65, mutableInt6.byteValue());
      assertEquals(65.0F, mutableInt6.floatValue(), 0.01F);
      assertEquals((short)65, mutableInt6.shortValue());
      assertEquals(65, (int)mutableInt6.getValue());
      assertEquals(65L, mutableInt6.longValue());
      assertEquals("65", mutableInt6.toString());
      assertNotNull(mutableInt6);
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertTrue(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertTrue(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = 'J';
      charArray0[2] = 'i';
      charArray0[3] = 'T';
      charArray0[4] = '}';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {')', 'J', 'i', 'T', '}'}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'J';
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {74.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.add(longArray0, 0, (Long) null);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      char[] charArray0 = ArrayUtils.insert(5, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-40);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-48), (byte) (-38), (byte) (-120), (byte)11, (byte) (-40)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-147.3135039356);
      doubleArray0[2] = (-1703.5);
      doubleArray0[3] = (-940.1);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1644.0;
      doubleArray0[7] = (-1611.261053914);
      doubleArray0[8] = (-368.46);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 3370.5704);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NaN, (-147.3135039356), (-1703.5), (-940.1), 1.0, 1.0, 1644.0, (-1611.261053914), (-368.46)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3370.5704, Double.NaN, (-147.3135039356), (-1703.5), (-940.1), 1.0, 1.0, 1644.0, (-1611.261053914), (-368.46)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-4195L);
      longArray0[1] = 0L;
      longArray0[2] = (-1680L);
      ArrayUtils.shift(longArray0, (-1), (-1191), 53);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-4195L), 0L, (-1680L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert((-1), doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = ArrayUtils.indexOf(longArray0, (long) 53);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-4195L), 0L, (-1680L)}, longArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1191);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (-1680L);
      floatArray0[3] = (float) (-1191);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-4195L);
      ArrayUtils.shift(floatArray0, 0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1191.0F), 0.0F, (-1680.0F), (-1191.0F), 0.0F, (-1.0F), (-4195.0F)}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('w');
      assertEquals('w', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertEquals('w', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('D');
      assertEquals('D', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      characterArray0[2] = character2;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      char[] charArray0 = new char[9];
      ArrayUtils.shuffle(charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-2533), (-2533), 0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(3, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      ArrayUtils.reverse(floatArray0, 3168, 797);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = 'v';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.shift(byteArray0, 0, 2788, 611);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)835;
      ArrayUtils.swap(shortArray0, (-164), (int) (short)98);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)98, (short)835}, shortArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)835;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 835, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-4195L);
      longArray0[1] = 0L;
      longArray0[2] = (-1680L);
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'j');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertArrayEquals(new char[] {'j', 'j', 'j', 'j', 'j'}, charArray0);
      assertArrayEquals(new char[] {'j', 'j', 'j', 'j', 'j', 'j'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'j';
      intArray0[1] = (-1267);
      intArray0[2] = 550;
      intArray0[3] = (-1);
      ArrayUtils.shuffle(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1267), 550, (-1), 106}, intArray0);
      
      Byte byte0 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)117);
      assertEquals((byte)117, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short)1;
      shortArray0[0] = (short)1;
      short short1 = (short)51;
      shortArray0[1] = (short)51;
      shortArray0[2] = (short) (-495);
      shortArray0[3] = (short)99;
      shortArray0[4] = (short)28;
      shortArray0[5] = (short) (-777);
      short short2 = (short)2287;
      shortArray0[6] = (short)2287;
      ArrayUtils.reverse(shortArray0, (int) (short)28, (int) (short)99);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)51, (short) (-495), (short)99, (short)28, (short) (-777), (short)2287}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)1, (short)51, (short) (-495), (short)99, (short)28, (short) (-777), (short)2287}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)51, (short) (-495), (short)99, (short)28, (short) (-777), (short)2287}, shortArray1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short) (-495);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (short) (-495);
      objectArray0[3] = (Object) (short)2287;
      objectArray0[4] = (Object) (short)1;
      objectArray0[5] = (Object) (short)1;
      objectArray0[6] = (Object) (short)51;
      objectArray0[7] = (Object) (short)99;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-495', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)97;
      shortArray0[1] = (short)2;
      shortArray0[3] = (short)97;
      shortArray0[4] = (short)97;
      ArrayUtils.reverse(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)97, (short)97, (short)0, (short)2, (short)97}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-548);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 1278);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-548), (-1), 0}, intArray0);
      assertArrayEquals(new int[] {(-548), (-1), 0, 1278}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = 't';
      charArray0[3] = ' ';
      charArray0[4] = '&';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {':', 't', '\u0000', ' ', '&'}, charArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (-804);
      shortArray0[2] = (short) (-659);
      shortArray0[3] = (short)1520;
      ArrayUtils.reverse(shortArray0, 2763, 4370);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)7, (short) (-804), (short) (-659), (short)1520}, shortArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) ' ';
      floatArray0[1] = (float) (short) (-804);
      floatArray0[2] = (float) ':';
      floatArray0[3] = (float) 'N';
      floatArray0[4] = (float) (short)7;
      ArrayUtils.shift(floatArray0, 223, 2026, 72);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {32.0F, (-804.0F), 58.0F, 78.0F, 7.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertEquals(3, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(3, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      ArrayUtils.reverse(floatArray0, 3168, 797);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = 'v';
      charArray0[2] = 'H';
      charArray0[3] = 'q';
      charArray0[4] = '<';
      charArray0[5] = '1';
      charArray0[6] = 'T';
      charArray0[7] = 'c';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'2', 'v', 'H', 'q', '<', '1', 'T', 'c'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-1332.9109F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shift(floatArray1, 797);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '<';
      intArray0[1] = (int) 'T';
      intArray0[2] = (int) 'c';
      intArray0[3] = 797;
      intArray0[4] = (int) 'q';
      intArray0[5] = (int) '2';
      intArray0[6] = (int) 'q';
      ArrayUtils.swap(intArray0, 223, 113, 113);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {60, 84, 99, 797, 113, 50, 113}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 1615, (-1324), (-1592));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-548);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.add(intArray0, 1278);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {(-548), (-1), 0}, intArray0);
      assertArrayEquals(new int[] {(-548), (-1), 0, 1278}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = 't';
      charArray0[2] = 'N';
      charArray0[3] = ' ';
      charArray0[4] = '&';
      ArrayUtils.swap(charArray0, 0, (-99), (-1));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {':', 't', 'N', ' ', '&'}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0, 1278, (-1476.1482786));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) ':';
      floatArray0[1] = (float) (-548);
      floatArray0[2] = (float) 'N';
      floatArray0[3] = (float) (-99);
      floatArray0[4] = (float) (-548);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1329.2F);
      assertEquals((-1), int0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {58.0F, (-548.0F), 78.0F, (-99.0F), (-548.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'H';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 5, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {72.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)59;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)59);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)59, (byte)14, (byte)14, (byte)59}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14, (byte)14}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Long long0 = new Long((byte) (-10));
      assertEquals((-10L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(40L);
      assertEquals(40L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[7];
      longArray0[0] = long0;
      Long long2 = new Long(1L);
      assertEquals(1L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      longArray0[1] = long2;
      longArray0[2] = long1;
      longArray0[3] = long0;
      longArray0[4] = long1;
      longArray0[5] = long0;
      longArray0[6] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[3]);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {(-10L), 1L, 40L, (-10L), 40L, (-10L), 40L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-1332.9109F);
      floatArray0[2] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) byte0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-1332.9109F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1332.9109F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)98;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {98L}, longArray0);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, (int) (short)98);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.contains(shortArray1, (short) (-1379));
      assertNotSame(shortArray1, shortArray0);
      assertFalse(boolean0);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.reverse(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)98, (short)98}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = ArrayUtils.get(objectArray0, (-1333));
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      Boolean boolean0 = new Boolean("3(e8_;jDP");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("off");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      
      Boolean boolean4 = Boolean.TRUE;
      assertTrue(boolean4);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      
      Boolean boolean6 = Boolean.TRUE;
      assertTrue(boolean6);
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean2));
      
      Boolean boolean7 = new Boolean(false);
      assertFalse(boolean7);
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean0));
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean5;
      booleanArray0[1] = boolean4;
      booleanArray0[2] = boolean2;
      boolean boolean8 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean8);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 704L;
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)88);
      assertEquals((short)88, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-38), (-38), (-38));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-38);
      longArray0[1] = (long) (-38);
      longArray0[2] = (long) (-38);
      longArray0[3] = (long) (-38);
      longArray0[4] = (long) (-38);
      longArray0[5] = (long) (-38);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)5;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-357), (int) (short) (-357));
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)5}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Double double0 = new Double(0.0F);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[1];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Character character0 = Character.valueOf('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.cardinality());
      assertEquals(3, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      ArrayUtils.reverse(floatArray0, 3168, 797);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = 'v';
      charArray0[2] = 'H';
      charArray0[3] = 'q';
      charArray0[4] = '<';
      charArray0[5] = '1';
      charArray0[6] = 'T';
      charArray0[7] = 'c';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'2', 'v', 'H', 'q', '<', '1', 'T', 'c'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-1332.9109F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-564);
      shortArray0[1] = (short)2848;
      shortArray0[2] = (short)56;
      shortArray0[3] = (short)941;
      shortArray0[4] = (short)466;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)2724;
      shortArray0[7] = (short) (-880);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2848, (int) (short)2848);
      assertEquals((-1), int0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-564), (short)2848, (short)56, (short)941, (short)466, (short)1, (short)2724, (short) (-880)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-2145159530), 15);
      assertNull(longArray0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray0);
      assertNotNull(objectArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, objectArray0.length);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.1);
      assertEquals(0.1, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(196.0);
      assertEquals(196.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals(0.1, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals(5, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(15);
      assertEquals(15.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray0[3] = double3;
      Float float0 = new Float((double) doubleArray0[3]);
      assertEquals(15.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertEquals(5, doubleArray0.length);
      
      Float float1 = new Float((double) (-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float1;
      Float float2 = new Float((float) floatArray0[0]);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals(4, floatArray0.length);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float0;
      floatArray0[3] = float1;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int int1 = ArrayUtils.indexOf((int[]) null, Integer.MAX_VALUE);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      ArrayUtils.reverse(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)101}, byteArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)101;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)101;
      doubleArray0[5] = (double) (byte)101;
      doubleArray0[6] = (double) (byte)101;
      doubleArray0[8] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {101.0, 0.0, 0.0, 0.0, 101.0, 101.0, 101.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)106;
      ArrayUtils.reverse(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)106, (byte)101}, byteArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)101;
      doubleArray0[1] = (double) (byte)106;
      doubleArray0[2] = (double) (byte)106;
      doubleArray0[3] = (double) (byte)106;
      doubleArray0[4] = (double) (byte)101;
      doubleArray0[5] = (double) (byte)106;
      doubleArray0[6] = (double) (byte)101;
      doubleArray0[7] = (double) (byte)106;
      doubleArray0[8] = (double) (byte)106;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {101.0, 106.0, 106.0, 106.0, 101.0, 106.0, 101.0, 106.0, 106.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-38), (-38), (-38));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-38);
      longArray0[1] = (long) (-38);
      longArray0[2] = (long) (-38);
      longArray0[3] = (long) (-38);
      longArray0[4] = (long) (-38);
      longArray0[5] = (long) (-38);
      longArray0[6] = (long) (-38);
      longArray0[7] = (long) (-38);
      longArray0[8] = (long) (-38);
      ArrayUtils.reverse(longArray0, (-38), (-38));
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-38L), (-38L), (-38L), (-38L), (-38L), (-38L), (-38L), (-38L), (-38L)}, longArray0);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "}";
      String string0 = ArrayUtils.get(stringArray0, (-35));
      assertNull(string0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-38L), (-38L), (-38L), (-38L), (-38L), (-38L), (-38L), (-38L), (-38L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 808.48645F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 808.48645F);
      assertEquals(0, int0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {808.48645F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      short[] shortArray0 = new short[0];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertEquals(3, int0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      ArrayUtils.reverse(charArray0, 0, 0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'@'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      ArrayUtils.swap((double[]) null, 3567, (-1197), 72);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1197);
      intArray0[1] = 72;
      intArray0[2] = 72;
      intArray0[3] = 3567;
      ArrayUtils.shift(intArray0, (-1197), (-1197), (-2146997795));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1197), 72, 72, 3567}, intArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-2146997795);
      floatArray0[1] = (float) 3567;
      floatArray0[2] = (float) (-1197);
      floatArray0[3] = (float) 3567;
      floatArray0[4] = (float) (-1197);
      ArrayUtils.swap(floatArray0, (-1197), 304, 72);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-2.14699776E9F), 3567.0F, (-1197.0F), 3567.0F, (-1197.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.cardinality());
      assertEquals(3, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      ArrayUtils.reverse(floatArray0, 3168, 797);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[1] = '2';
      ArrayUtils.shift((int[]) null, 1233);
      Byte byte0 = new Byte((byte) (-127));
      assertEquals((byte) (-127), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2484);
      intArray0[1] = (-2484);
      intArray0[2] = (-2484);
      intArray0[3] = (-2484);
      intArray0[4] = (-2484);
      intArray0[5] = (-3206);
      ArrayUtils.shift(intArray0, (-1));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2484), (-2484), (-2484), (-2484), (-3206), (-2484)}, intArray0);
      
      Integer integer0 = new Integer((-2484));
      assertEquals((-2484), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = ArrayUtils.addFirst((Integer[]) null, (Integer) (-3206));
      assertNotNull(integerArray0);
      assertEquals(1, integerArray0.length);
      
      Character character0 = Character.valueOf('/');
      assertEquals('/', (char)character0);
      assertNotNull(character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (int) (short) (-1), 38, (-209));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-888);
      intArray0[4] = 56;
      intArray0[3] = (-1928);
      intArray0[4] = 29;
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((-888));
      assertEquals((-888.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-888), (int)mutableInt1.toInteger());
      assertEquals("-888", mutableInt1.toString());
      assertEquals((byte) (-120), mutableInt1.byteValue());
      assertEquals((-888), (int)mutableInt1.getValue());
      assertEquals((short) (-888), mutableInt1.shortValue());
      assertEquals((-888.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-888L), mutableInt1.longValue());
      assertEquals((-888), mutableInt1.intValue());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertEquals(0, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      int int0 = (-29);
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-29));
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.reverse(longArray0, 3496, 3496);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-463.13727));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-463.13727), 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.shuffle(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-463.13727), 3496);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 441L, 3496);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      ArrayUtils.swap(doubleArray1, (-1), (-1), 1203);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-463.13727), 1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.reverse(longArray0, 3496, 3496);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.0;
      ArrayUtils.swap(doubleArray0, (-2217), (-1), 260);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-940.1);
      doubleArray0[1] = (-940.1);
      doubleArray0[2] = (-60.276137606);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      ArrayUtils.swap(doubleArray0, (-623), 1210, 1210);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-940.1), (-60.276137606)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = 40L;
      longArray0[2] = (-782L);
      longArray0[3] = (-3580L);
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
      assertArrayEquals(new byte[] {(byte)61}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      char char0 = '3';
      Character character0 = Character.valueOf('3');
      assertEquals('3', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char char1 = 'I';
      Character character1 = Character.valueOf('I');
      assertEquals('I', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'I';
      doubleArray0[1] = (double) char0;
      doubleArray0[2] = (double) 'I';
      doubleArray0[3] = (double) 'I';
      doubleArray0[4] = (double) char1;
      doubleArray0[5] = (double) 'I';
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {51.0, 73.0, 73.0, 73.0, 73.0, 73.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift((boolean[]) null, (-1875), (int) char1, 1486);
      assertFalse(char1 == char0);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2217);
      doubleArray0[1] = (-2511.81353592);
      ArrayUtils.swap(doubleArray0, 690, 90, 690);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2217.0), (-2511.81353592)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      longArray0[1] = 40L;
      longArray0[2] = (-782L);
      longArray0[3] = (-3580L);
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, 3168, 48, 48);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 40L;
      doubleArray0[1] = (double) (-3580L);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = 1.0;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3580.0), 1.0, 0.0, 1.0, 40.0}, doubleArray0, 0.01);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '|');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {'|'}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false}, booleanArray1));
      
      Character character0 = Character.valueOf('Z');
      assertEquals('Z', (char)character0);
      assertNotNull(character0);
      
      Character character1 = ArrayUtils.get((Character[]) null, 499, character0);
      assertEquals('Z', (char)character1);
      assertNotNull(character1);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-4195L);
      longArray0[1] = 0L;
      longArray0[2] = (-1680L);
      ArrayUtils.shift(longArray0, (-1), (-1191), 53);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-4195L), 0L, (-1680L)}, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert((-1), doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = ArrayUtils.indexOf(longArray0, (long) 53);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-4195L), 0L, (-1680L)}, longArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1191);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (-1680L);
      floatArray0[3] = (float) (-1191);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-4195L);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Array element ";
      stringArray0[1] = "}";
      stringArray0[2] = "Array element ";
      stringArray0[3] = "Array element ";
      stringArray0[4] = "null";
      String string0 = ArrayUtils.get(stringArray0, 2724);
      assertNull(string0);
      assertEquals(5, stringArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-591);
      shortArray0[1] = (short)1852;
      shortArray0[2] = (short)91;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)437);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-591), (short)1852, (short)91}, shortArray1);
      assertArrayEquals(new short[] {(short) (-591), (short)1852, (short)91}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 4142;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = (-2104);
      intArray0[5] = (-710);
      intArray0[6] = 65;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      assertArrayEquals(new int[] {2, 4142, 0, 1, (-2104), (-710), 65}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      MutableInt mutableInt0 = new MutableInt((-116));
      assertEquals((short) (-116), mutableInt0.shortValue());
      assertEquals((byte) (-116), mutableInt0.byteValue());
      assertEquals((-116L), mutableInt0.longValue());
      assertEquals((-116), (int)mutableInt0.toInteger());
      assertEquals((-116.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-116), (int)mutableInt0.getValue());
      assertEquals((-116), mutableInt0.intValue());
      assertEquals((-116.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-116", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(1);
      assertEquals(1L, mutableInt1.longValue());
      assertEquals((short)1, mutableInt1.shortValue());
      assertEquals(1.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(1, mutableInt1.intValue());
      assertEquals(1, (int)mutableInt1.toInteger());
      assertEquals((byte)1, mutableInt1.byteValue());
      assertEquals(1, (int)mutableInt1.getValue());
      assertEquals(1.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals("1", mutableInt1.toString());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      mutableIntArray0[0] = mutableInt1;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertEquals(1, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertEquals(1, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, true, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, 2, 2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertTrue(boolean0);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, true, false, false}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-670.6430477), (int) (byte)35, (-1.0));
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte)35);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-357);
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-357), 2}, intArray0);
      assertArrayEquals(new int[] {(-357), 2}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-357);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1747.9748;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) (-357);
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2356.45565879), (-834));
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-357.0), 1.0, 1747.9748, 2.0, (-357.0), 1.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)434;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)434);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {(short)434}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)104, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Double double0 = new Double(0.0F);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)289;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)289, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)289, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)835;
      MutableInt mutableInt0 = new MutableInt((Number) (short)835);
      assertEquals(835.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(835L, mutableInt0.longValue());
      assertEquals(835.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(835, mutableInt0.intValue());
      assertEquals((short)835, mutableInt0.shortValue());
      assertEquals(835, (int)mutableInt0.toInteger());
      assertEquals("835", mutableInt0.toString());
      assertEquals((byte)67, mutableInt0.byteValue());
      assertEquals(835, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((-2923));
      assertEquals((-2923), mutableInt1.intValue());
      assertEquals((-2923), (int)mutableInt1.toInteger());
      assertEquals((-2923), (int)mutableInt1.getValue());
      assertEquals((byte) (-107), mutableInt1.byteValue());
      assertEquals((-2923L), mutableInt1.longValue());
      assertEquals((-2923.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((short) (-2923), mutableInt1.shortValue());
      assertEquals((-2923.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals("-2923", mutableInt1.toString());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt(mutableInt1);
      assertEquals((-2923), mutableInt1.intValue());
      assertEquals((-2923), (int)mutableInt1.toInteger());
      assertEquals((-2923), (int)mutableInt1.getValue());
      assertEquals((byte) (-107), mutableInt1.byteValue());
      assertEquals((-2923L), mutableInt1.longValue());
      assertEquals((-2923.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((short) (-2923), mutableInt1.shortValue());
      assertEquals((-2923.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals("-2923", mutableInt1.toString());
      assertEquals((-2923.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((short) (-2923), mutableInt2.shortValue());
      assertEquals((byte) (-107), mutableInt2.byteValue());
      assertEquals((-2923), (int)mutableInt2.getValue());
      assertEquals((-2923), (int)mutableInt2.toInteger());
      assertEquals("-2923", mutableInt2.toString());
      assertEquals((-2923L), mutableInt2.longValue());
      assertEquals((-2923), mutableInt2.intValue());
      assertEquals((-2923.0F), mutableInt2.floatValue(), 0.01F);
      assertNotNull(mutableInt2);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      
      MutableInt mutableInt3 = new MutableInt((int) (short)835);
      assertEquals(835.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(835, (int)mutableInt3.getValue());
      assertEquals((byte)67, mutableInt3.byteValue());
      assertEquals(835L, mutableInt3.longValue());
      assertEquals(835, (int)mutableInt3.toInteger());
      assertEquals("835", mutableInt3.toString());
      assertEquals(835, mutableInt3.intValue());
      assertEquals(835.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals((short)835, mutableInt3.shortValue());
      assertNotNull(mutableInt3);
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      
      MutableInt mutableInt4 = new MutableInt(mutableInt2);
      assertEquals((-2923), mutableInt1.intValue());
      assertEquals((-2923), (int)mutableInt1.toInteger());
      assertEquals((-2923), (int)mutableInt1.getValue());
      assertEquals((byte) (-107), mutableInt1.byteValue());
      assertEquals((-2923L), mutableInt1.longValue());
      assertEquals((-2923.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((short) (-2923), mutableInt1.shortValue());
      assertEquals((-2923.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals("-2923", mutableInt1.toString());
      assertEquals((-2923.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((short) (-2923), mutableInt2.shortValue());
      assertEquals((byte) (-107), mutableInt2.byteValue());
      assertEquals((-2923), (int)mutableInt2.getValue());
      assertEquals((-2923), (int)mutableInt2.toInteger());
      assertEquals("-2923", mutableInt2.toString());
      assertEquals((-2923L), mutableInt2.longValue());
      assertEquals((-2923), mutableInt2.intValue());
      assertEquals((-2923.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-2923), (int)mutableInt4.getValue());
      assertEquals((-2923L), mutableInt4.longValue());
      assertEquals((-2923), (int)mutableInt4.toInteger());
      assertEquals((byte) (-107), mutableInt4.byteValue());
      assertEquals((short) (-2923), mutableInt4.shortValue());
      assertEquals((-2923.0), mutableInt4.doubleValue(), 0.01);
      assertEquals((-2923), mutableInt4.intValue());
      assertEquals("-2923", mutableInt4.toString());
      assertEquals((-2923.0F), mutableInt4.floatValue(), 0.01F);
      assertNotNull(mutableInt4);
      assertTrue(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt3));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertTrue(mutableInt4.equals((Object)mutableInt2));
      
      MutableInt mutableInt5 = new MutableInt(mutableInt4);
      assertEquals((-2923), mutableInt1.intValue());
      assertEquals((-2923), (int)mutableInt1.toInteger());
      assertEquals((-2923), (int)mutableInt1.getValue());
      assertEquals((byte) (-107), mutableInt1.byteValue());
      assertEquals((-2923L), mutableInt1.longValue());
      assertEquals((-2923.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((short) (-2923), mutableInt1.shortValue());
      assertEquals((-2923.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals("-2923", mutableInt1.toString());
      assertEquals((-2923.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((short) (-2923), mutableInt2.shortValue());
      assertEquals((byte) (-107), mutableInt2.byteValue());
      assertEquals((-2923), (int)mutableInt2.getValue());
      assertEquals((-2923), (int)mutableInt2.toInteger());
      assertEquals("-2923", mutableInt2.toString());
      assertEquals((-2923L), mutableInt2.longValue());
      assertEquals((-2923), mutableInt2.intValue());
      assertEquals((-2923.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-2923), (int)mutableInt4.getValue());
      assertEquals((-2923L), mutableInt4.longValue());
      assertEquals((-2923), (int)mutableInt4.toInteger());
      assertEquals((byte) (-107), mutableInt4.byteValue());
      assertEquals((short) (-2923), mutableInt4.shortValue());
      assertEquals((-2923.0), mutableInt4.doubleValue(), 0.01);
      assertEquals((-2923), mutableInt4.intValue());
      assertEquals("-2923", mutableInt4.toString());
      assertEquals((-2923.0F), mutableInt4.floatValue(), 0.01F);
      assertEquals((-2923), (int)mutableInt5.toInteger());
      assertEquals("-2923", mutableInt5.toString());
      assertEquals((-2923), (int)mutableInt5.getValue());
      assertEquals((-2923L), mutableInt5.longValue());
      assertEquals((-2923), mutableInt5.intValue());
      assertEquals((-2923.0F), mutableInt5.floatValue(), 0.01F);
      assertEquals((-2923.0), mutableInt5.doubleValue(), 0.01);
      assertEquals((short) (-2923), mutableInt5.shortValue());
      assertEquals((byte) (-107), mutableInt5.byteValue());
      assertNotNull(mutableInt5);
      assertTrue(mutableInt1.equals((Object)mutableInt4));
      assertTrue(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt3));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt4));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertTrue(mutableInt4.equals((Object)mutableInt2));
      assertTrue(mutableInt5.equals((Object)mutableInt4));
      assertTrue(mutableInt5.equals((Object)mutableInt2));
      assertTrue(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      
      Integer integer0 = new Integer((short)98);
      assertEquals(98, (int)integer0);
      assertNotNull(integer0);
      
      MutableInt mutableInt6 = new MutableInt((Number) integer0);
      assertEquals(98, (int)mutableInt6.toInteger());
      assertEquals((byte)98, mutableInt6.byteValue());
      assertEquals(98.0F, mutableInt6.floatValue(), 0.01F);
      assertEquals(98, mutableInt6.intValue());
      assertEquals((short)98, mutableInt6.shortValue());
      assertEquals("98", mutableInt6.toString());
      assertEquals(98L, mutableInt6.longValue());
      assertEquals(98.0, mutableInt6.doubleValue(), 0.01);
      assertEquals(98, (int)mutableInt6.getValue());
      assertNotNull(mutableInt6);
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      
      MutableInt mutableInt7 = new MutableInt((Number) (short)98);
      assertEquals("98", mutableInt7.toString());
      assertEquals(98L, mutableInt7.longValue());
      assertEquals(98, (int)mutableInt7.getValue());
      assertEquals(98.0, mutableInt7.doubleValue(), 0.01);
      assertEquals(98, (int)mutableInt7.toInteger());
      assertEquals((byte)98, mutableInt7.byteValue());
      assertEquals(98.0F, mutableInt7.floatValue(), 0.01F);
      assertEquals(98, mutableInt7.intValue());
      assertEquals((short)98, mutableInt7.shortValue());
      assertNotNull(mutableInt7);
      assertFalse(mutableInt7.equals((Object)mutableInt4));
      assertFalse(mutableInt7.equals((Object)mutableInt1));
      assertTrue(mutableInt7.equals((Object)mutableInt6));
      assertFalse(mutableInt7.equals((Object)mutableInt2));
      assertFalse(mutableInt7.equals((Object)mutableInt5));
      assertFalse(mutableInt7.equals((Object)mutableInt3));
      assertFalse(mutableInt7.equals((Object)mutableInt0));
      
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      mutableIntArray0[0] = mutableInt6;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(mutableIntArray0, (int) 98);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1473.9653940604055), (-1550), (double) (-1550));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNull(object0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.removeAll(object0, bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNull(object1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      objectArray0[1] = null;
      Object object2 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNull(object2);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      objectArray0[2] = null;
      Object object3 = ArrayUtils.get(objectArray0, (-1550), (Object) null);
      assertNull(object3);
      assertEquals(4, objectArray0.length);
      
      objectArray0[3] = null;
      Double double0 = new Double((-1550));
      assertEquals((-1550.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) double0, (-1550));
      assertEquals((-1), int0);
      assertEquals(4, objectArray0.length);
      
      Short[] shortArray0 = ArrayUtils.subarray((Short[]) null, (-1), 2506);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'j';
      charArray0[2] = '\"';
      charArray0[3] = 'R';
      charArray0[4] = '*';
      charArray0[5] = 'y';
      charArray0[6] = 'A';
      charArray0[7] = 'N';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'e');
      assertEquals((-1), int1);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'j', '\"', 'R', '*', 'y', 'A', 'N'}, charArray0);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Object[]) null, (-1147));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1147, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3180);
      intArray0[1] = 737;
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = 11;
      intArray0[5] = 1962;
      int int0 = ArrayUtils.indexOf(intArray0, 0);
      assertEquals(2, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-3180), 737, 0, 2, 11, 1962}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      ArrayUtils.shift(arrayUtils0.EMPTY_BYTE_ARRAY, 48, 0, 0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-233L);
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(385.1192363);
      assertEquals(385.1192363, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {1.5, 1.5, 385.1192363, 385.1192363, 1.5}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-233L);
      doubleArray2[1] = (-47.72075258414);
      doubleArray2[2] = (double) (-233L);
      doubleArray2[3] = 385.1192363;
      doubleArray2[4] = 385.1192363;
      ArrayUtils.shift(doubleArray2, (-1), (-1), (-1));
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {(-233.0), (-47.72075258414), (-233.0), 385.1192363, 385.1192363}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-1);
      longArray1[1] = (long) (-1);
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(3, longArray2.length);
      assertArrayEquals(new long[] {(-233L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {(-233L), 0L, 0L}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(3961.0);
      assertEquals(3961.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1.0));
      assertEquals((-1.0), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-151.32380896));
      assertEquals((-151.32380896), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-47.72075258414));
      assertEquals((-47.72075258414), (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(385.1192363);
      assertEquals(385.1192363, (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      
      doubleArray0[7] = double7;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3961.0, (-1.0), (-1.0), (-151.32380896), (-47.72075258414), 385.1192363}, doubleArray1, 0.01);
      
      ArrayUtils.shift(doubleArray1, (-1), (-1), (-1));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3961.0, (-1.0), (-1.0), (-151.32380896), (-47.72075258414), 385.1192363}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1939L);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (-1939L);
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (-1939L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {(-1939L), 0L, 0L, (-1939L), 0L, 0L, (-1939L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.insert((-100), longArray1, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertArrayEquals(new long[] {(-1939L), 0L, 0L, (-1939L), 0L, 0L, (-1939L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-233L);
      int[] intArray0 = new int[7];
      intArray0[0] = (-405);
      intArray0[1] = (-3427);
      intArray0[2] = (-2608);
      intArray0[3] = 10;
      intArray0[4] = (-1);
      intArray0[5] = 1112;
      intArray0[6] = (-667);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-405), (-3427), (-2608), 10, (-1), 1112, (-667)}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L, (-2272));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-233L), 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.insert(751, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 751;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 751;
      doubleArray0[3] = (double) 751;
      doubleArray0[4] = (double) 751;
      doubleArray0[5] = (double) 751;
      doubleArray0[6] = (double) 751;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {751.0, 0.0, 751.0, 751.0, 751.0, 751.0, 751.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {751.0, 0.0, 751.0, 751.0, 751.0, 751.0, 751.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-117);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (-1332.9109F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-1332.9109F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1332.9109F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.shift((double[]) null, (-879), 10, (-879));
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 10, 59);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(3961.0);
      assertEquals(3961.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1.0));
      assertEquals((-1.0), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-151.32380896));
      assertEquals((-151.32380896), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-47.72075258414));
      assertEquals((-47.72075258414), (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(385.1192363);
      assertEquals(385.1192363, (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      
      doubleArray0[7] = double7;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3961.0, (-1.0), (-1.0), (-151.32380896), (-47.72075258414), 385.1192363}, doubleArray1, 0.01);
      
      ArrayUtils.shift(doubleArray1, 10, 10, 10);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3961.0, (-1.0), (-1.0), (-151.32380896), (-47.72075258414), 385.1192363}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 10;
      int int0 = ArrayUtils.indexOf(floatArray0, (-1332.9109F), 59);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {10.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-37);
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0, (byte) (-37)}, byteArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'f';
      charArray0[2] = '{';
      charArray0[3] = '*';
      charArray0[4] = '}';
      charArray0[5] = 't';
      charArray0[6] = 'N';
      charArray0[7] = '3';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'f', '{', '*', '}', 't', 'N', '3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-357);
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-357), 2}, intArray0);
      assertArrayEquals(new int[] {(-357), 2}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'3'}, charArray0);
      
      Byte byte0 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte0);
      assertNotNull(byte0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) boolean1, (-2843));
      assertEquals((-1), int0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-357);
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-357), 2}, intArray0);
      assertArrayEquals(new int[] {(-357), 2}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'3'}, charArray0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[9];
      MutableInt mutableInt0 = new MutableInt((-2219));
      assertEquals("-2219", mutableInt0.toString());
      assertEquals((-2219.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)85, mutableInt0.byteValue());
      assertEquals((-2219), (int)mutableInt0.toInteger());
      assertEquals((-2219), (int)mutableInt0.getValue());
      assertEquals((-2219L), mutableInt0.longValue());
      assertEquals((short) (-2219), mutableInt0.shortValue());
      assertEquals((-2219.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2219), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((-667));
      assertEquals((-667L), mutableInt1.longValue());
      assertEquals((-667), mutableInt1.intValue());
      assertEquals((short) (-667), mutableInt1.shortValue());
      assertEquals((-667.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-667.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-667), (int)mutableInt1.getValue());
      assertEquals((byte)101, mutableInt1.byteValue());
      assertEquals((-667), (int)mutableInt1.toInteger());
      assertEquals("-667", mutableInt1.toString());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt((Number) (-357));
      assertEquals((short) (-357), mutableInt2.shortValue());
      assertEquals((-357L), mutableInt2.longValue());
      assertEquals((-357), (int)mutableInt2.getValue());
      assertEquals((byte) (-101), mutableInt2.byteValue());
      assertEquals((-357), (int)mutableInt2.toInteger());
      assertEquals((-357), mutableInt2.intValue());
      assertEquals((-357.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals("-357", mutableInt2.toString());
      assertEquals((-357.0), mutableInt2.doubleValue(), 0.01);
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt((-5293));
      assertEquals((-5293), mutableInt3.intValue());
      assertEquals((-5293L), mutableInt3.longValue());
      assertEquals((byte)83, mutableInt3.byteValue());
      assertEquals((short) (-5293), mutableInt3.shortValue());
      assertEquals((-5293), (int)mutableInt3.getValue());
      assertEquals((-5293), (int)mutableInt3.toInteger());
      assertEquals("-5293", mutableInt3.toString());
      assertEquals((-5293.0), mutableInt3.doubleValue(), 0.01);
      assertEquals((-5293.0F), mutableInt3.floatValue(), 0.01F);
      assertNotNull(mutableInt3);
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt(mutableInt1);
      assertEquals((-667.0F), mutableInt4.floatValue(), 0.01F);
      assertEquals((short) (-667), mutableInt4.shortValue());
      assertEquals((-667), mutableInt4.intValue());
      assertEquals((-667.0), mutableInt4.doubleValue(), 0.01);
      assertEquals((byte)101, mutableInt4.byteValue());
      assertEquals((-667), (int)mutableInt4.toInteger());
      assertEquals("-667", mutableInt4.toString());
      assertEquals((-667), (int)mutableInt4.getValue());
      assertEquals((-667L), mutableInt4.longValue());
      assertEquals((-667L), mutableInt1.longValue());
      assertEquals((-667), mutableInt1.intValue());
      assertEquals((short) (-667), mutableInt1.shortValue());
      assertEquals((-667.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-667.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-667), (int)mutableInt1.getValue());
      assertEquals((byte)101, mutableInt1.byteValue());
      assertEquals((-667), (int)mutableInt1.toInteger());
      assertEquals("-667", mutableInt1.toString());
      assertNotNull(mutableInt4);
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt((-2219));
      assertEquals((-2219), (int)mutableInt5.getValue());
      assertEquals((-2219L), mutableInt5.longValue());
      assertEquals((byte)85, mutableInt5.byteValue());
      assertEquals((-2219), (int)mutableInt5.toInteger());
      assertEquals((short) (-2219), mutableInt5.shortValue());
      assertEquals((-2219.0F), mutableInt5.floatValue(), 0.01F);
      assertEquals((-2219.0), mutableInt5.doubleValue(), 0.01);
      assertEquals((-2219), mutableInt5.intValue());
      assertEquals("-2219", mutableInt5.toString());
      assertNotNull(mutableInt5);
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertTrue(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt mutableInt6 = new MutableInt(mutableInt4);
      assertEquals((-667.0F), mutableInt4.floatValue(), 0.01F);
      assertEquals((short) (-667), mutableInt4.shortValue());
      assertEquals((-667), mutableInt4.intValue());
      assertEquals((-667.0), mutableInt4.doubleValue(), 0.01);
      assertEquals((byte)101, mutableInt4.byteValue());
      assertEquals((-667), (int)mutableInt4.toInteger());
      assertEquals("-667", mutableInt4.toString());
      assertEquals((-667), (int)mutableInt4.getValue());
      assertEquals((-667L), mutableInt4.longValue());
      assertEquals((-667.0), mutableInt6.doubleValue(), 0.01);
      assertEquals((byte)101, mutableInt6.byteValue());
      assertEquals((-667), (int)mutableInt6.getValue());
      assertEquals((-667), (int)mutableInt6.toInteger());
      assertEquals("-667", mutableInt6.toString());
      assertEquals((-667L), mutableInt6.longValue());
      assertEquals((-667.0F), mutableInt6.floatValue(), 0.01F);
      assertEquals((-667), mutableInt6.intValue());
      assertEquals((short) (-667), mutableInt6.shortValue());
      assertEquals((-667L), mutableInt1.longValue());
      assertEquals((-667), mutableInt1.intValue());
      assertEquals((short) (-667), mutableInt1.shortValue());
      assertEquals((-667.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-667.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-667), (int)mutableInt1.getValue());
      assertEquals((byte)101, mutableInt1.byteValue());
      assertEquals((-667), (int)mutableInt1.toInteger());
      assertEquals("-667", mutableInt1.toString());
      assertNotNull(mutableInt6);
      assertFalse(mutableInt4.equals((Object)mutableInt5));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertTrue(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertTrue(mutableInt6.equals((Object)mutableInt1));
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertTrue(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertFalse(mutableInt1.equals((Object)mutableInt5));
      assertTrue(mutableInt1.equals((Object)mutableInt4));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[6] = mutableInt6;
      Integer integer0 = new Integer(2089);
      assertEquals(2089, (int)integer0);
      assertNotNull(integer0);
      
      MutableInt mutableInt7 = new MutableInt((Number) integer0);
      assertEquals((byte)41, mutableInt7.byteValue());
      assertEquals(2089, (int)mutableInt7.toInteger());
      assertEquals(2089, (int)mutableInt7.getValue());
      assertEquals("2089", mutableInt7.toString());
      assertEquals(2089L, mutableInt7.longValue());
      assertEquals(2089.0F, mutableInt7.floatValue(), 0.01F);
      assertEquals((short)2089, mutableInt7.shortValue());
      assertEquals(2089, mutableInt7.intValue());
      assertEquals(2089.0, mutableInt7.doubleValue(), 0.01);
      assertNotNull(mutableInt7);
      assertFalse(mutableInt7.equals((Object)mutableInt4));
      assertFalse(mutableInt7.equals((Object)mutableInt3));
      assertFalse(mutableInt7.equals((Object)mutableInt0));
      assertFalse(mutableInt7.equals((Object)mutableInt2));
      assertFalse(mutableInt7.equals((Object)mutableInt5));
      assertFalse(mutableInt7.equals((Object)mutableInt1));
      assertFalse(mutableInt7.equals((Object)mutableInt6));
      
      mutableIntArray0[7] = mutableInt7;
      MutableInt mutableInt8 = new MutableInt(mutableInt5);
      assertEquals((-2219), (int)mutableInt5.getValue());
      assertEquals((-2219L), mutableInt5.longValue());
      assertEquals((byte)85, mutableInt5.byteValue());
      assertEquals((-2219), (int)mutableInt5.toInteger());
      assertEquals((short) (-2219), mutableInt5.shortValue());
      assertEquals((-2219.0F), mutableInt5.floatValue(), 0.01F);
      assertEquals((-2219.0), mutableInt5.doubleValue(), 0.01);
      assertEquals((-2219), mutableInt5.intValue());
      assertEquals("-2219", mutableInt5.toString());
      assertEquals((-2219.0), mutableInt8.doubleValue(), 0.01);
      assertEquals((-2219.0F), mutableInt8.floatValue(), 0.01F);
      assertEquals((-2219), mutableInt8.intValue());
      assertEquals((byte)85, mutableInt8.byteValue());
      assertEquals((-2219), (int)mutableInt8.toInteger());
      assertEquals((-2219L), mutableInt8.longValue());
      assertEquals((short) (-2219), mutableInt8.shortValue());
      assertEquals((-2219), (int)mutableInt8.getValue());
      assertEquals("-2219", mutableInt8.toString());
      assertNotNull(mutableInt8);
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt6));
      assertFalse(mutableInt5.equals((Object)mutableInt7));
      assertTrue(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt8.equals((Object)mutableInt7));
      assertTrue(mutableInt8.equals((Object)mutableInt5));
      assertTrue(mutableInt8.equals((Object)mutableInt0));
      assertFalse(mutableInt8.equals((Object)mutableInt6));
      assertFalse(mutableInt8.equals((Object)mutableInt2));
      assertFalse(mutableInt8.equals((Object)mutableInt3));
      assertFalse(mutableInt8.equals((Object)mutableInt1));
      assertFalse(mutableInt8.equals((Object)mutableInt4));
      
      mutableIntArray0[8] = mutableInt8;
      MutableInt[] mutableIntArray1 = ArrayUtils.remove(mutableIntArray0, 1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotNull(mutableIntArray1);
      assertEquals(8, mutableIntArray1.length);
      assertEquals(9, mutableIntArray0.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      ArrayUtils.swap((short[]) null, (-2577), (-2577));
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = '9';
      charArray0[2] = 'J';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'_', '9', 'J'}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Long long0 = new Long((byte)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-3219));
      assertEquals((-3219L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (-2577));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-1);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((byte) (-1));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1));
      assertEquals((-1L), (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1328L));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) 0L;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Float[] floatArray2 = new Float[0];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray3 = ArrayUtils.add(floatArray2, float0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray2, floatArray3);
      assertNotNull(floatArray3);
      assertEquals(1, floatArray3.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte) (-10);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)14);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)1, (byte) (-12), (byte)65, (byte) (-1), (byte)75, (byte)59, (byte) (-10)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-5), (byte)1, (byte) (-12), (byte)65, (byte) (-1), (byte)75, (byte)59, (byte) (-10)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Long[] longArray2 = new Long[7];
      longArray2[0] = (Long) 0L;
      Long long0 = new Long((byte)59);
      assertEquals(59L, (long)long0);
      assertNotNull(long0);
      
      longArray2[1] = long0;
      longArray2[2] = (Long) 0L;
      longArray2[3] = (Long) 0L;
      longArray2[4] = (Long) 0L;
      longArray2[5] = (Long) 0L;
      Long long1 = new Long((long) longArray2[1]);
      assertEquals(59L, (long)long1);
      assertNotNull(long1);
      assertEquals(7, longArray2.length);
      assertTrue(long1.equals((Object)long0));
      
      longArray2[6] = long1;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2, 1L);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotNull(longArray3);
      assertEquals(7, longArray3.length);
      assertEquals(7, longArray2.length);
      assertArrayEquals(new long[] {0L, 59L, 0L, 0L, 0L, 0L, 59L}, longArray3);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)59;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)59);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)59, (byte)14, (byte)14, (byte)59}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14, (byte)14}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Long long0 = new Long((byte) (-10));
      assertEquals((-10L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(40L);
      assertEquals(40L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[7];
      longArray0[0] = long0;
      Long long2 = new Long(1L);
      assertEquals(1L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      longArray0[1] = long2;
      longArray0[2] = long1;
      longArray0[3] = long0;
      longArray0[4] = long1;
      longArray0[5] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[3]);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {(-10L), 1L, 40L, (-10L), 40L, (-10L), (-10L)}, longArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)14;
      floatArray0[1] = (float) (byte)59;
      floatArray0[2] = (float) (long)longArray0[3];
      floatArray0[3] = (float) (byte)59;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (int) (byte)59, 642.3F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = ArrayUtils.get(objectArray0, (-1333));
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[0] = null;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1333);
      Double double0 = new Double((-1333));
      assertEquals((-1333.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1333));
      assertEquals((-1333.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1333), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1333, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.add(longArray0, 0, (Long) null);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)1852;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)98);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)98, (short)1852}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "org.apache.commons.lang3.ArrayUtils");
      assertEquals("1", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)46, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      Class<Object[]> class0 = Object[].class;
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null, class0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)46);
      assertNull(byteArray0);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(Integer.MAX_VALUE);
      assertEquals(2147483647L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((byte)46);
      assertEquals(46L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long(1765L);
      assertEquals(1765L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[1]);
      assertEquals(46L, (long)long3);
      assertNotNull(long3);
      assertEquals(4, longArray0.length);
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      
      longArray0[3] = long3;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      Double[] doubleArray0 = new Double[14];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(14, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Class<Double[]> class0 = Double[].class;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0, class0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(14, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(3961.0);
      assertEquals(3961.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1.0));
      assertEquals((-1.0), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1.0));
      assertEquals((-1.0), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-151.32380896));
      assertEquals((-151.32380896), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-47.72075258414));
      assertEquals((-47.72075258414), (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(385.1192363);
      assertEquals(385.1192363, (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      
      doubleArray0[7] = double7;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3961.0, (-1.0), (-1.0), (-151.32380896), (-47.72075258414), 385.1192363}, doubleArray1, 0.01);
      
      ArrayUtils.shift(doubleArray1, (-1), (-1), (-1));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3961.0, (-1.0), (-1.0), (-151.32380896), (-47.72075258414), 385.1192363}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Class<Double[]> class0 = Double[].class;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0, class0);
      assertSame(doubleArray0, doubleArray2);
      assertSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = 40L;
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (-2542.0F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 808.48645F;
      floatArray0[1] = (-1332.9109F);
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (long) (-870);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, 371);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-870L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      charArray0[2] = 'u';
      charArray0[3] = 'q';
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'u';
      floatArray0[1] = (float) ';';
      ArrayUtils.shift(floatArray0, 72, 72, 72);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {117.0F, 59.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-357);
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-357), 2}, intArray0);
      assertArrayEquals(new int[] {(-357), 2}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-719), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -719, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-671.58F);
      ArrayUtils.reverse(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-671.58F), 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, 595, 595, 595);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-671.58F), 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-719), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -719, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 808.48645F;
      floatArray0[1] = (-1332.9109F);
      long[] longArray0 = new long[3];
      floatArray0[0] = (float) (-870);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, 371);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-209);
      intArray0[2] = (int) (short)434;
      ArrayUtils.shift(intArray0, 1736, 434, (-1857));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-209), 434}, intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 434;
      longArray0[1] = (long) 434;
      longArray0[2] = (long) (short)434;
      longArray0[3] = (long) (short)434;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 434L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {434L, 434L, 434L, 434L}, longArray0);
      assertArrayEquals(new long[] {434L, 434L, 434L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)13;
      floatArray0[1] = 35.0F;
      floatArray0[3] = (float) (byte)13;
      floatArray0[4] = (float) (byte)13;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1943.6208F), (-1759));
      assertEquals((-1), int0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {13.0F, 35.0F, 0.0F, 13.0F, 13.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L), (-1759));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, 0, 2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 2);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2.0, 2.0, 2.0, 2.0, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1365.3F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 2507.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      int int0 = 0;
      int int1 = 2;
      ArrayUtils.reverse(floatArray0, 0, 2);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1365.3F), 2507.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1365.3F);
      doubleArray0[1] = (double) 0.0F;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1365.300048828125), 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)43;
      byteArray0[0] = (byte)43;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte)43);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-671.58F);
      ArrayUtils.reverse(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-671.58F), 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(floatArray0, 595, 595, 595);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-671.58F), 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 595, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 595, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      ArrayUtils.shift(byteArray0, (-1), (-2114), 365);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-58)}, byteArray0);
      
      ArrayUtils.reverse((Object[]) null);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-58));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-58)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shift((boolean[]) null, (-2114), 1067, (-2114));
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte)97);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-58)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)97}, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      ArrayUtils.reverse(byteArray1, (-2114), 115);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-58)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = '=';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-2729), '=');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2729, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-233L);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '1';
      floatArray0[1] = (float) 'c';
      floatArray0[2] = (float) 'v';
      floatArray0[3] = (float) (-233L);
      floatArray0[4] = (float) '2';
      floatArray0[5] = 2957.17F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-823.841F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {49.0F, 99.0F, 118.0F, (-233.0F), 50.0F, 2957.17F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {49.0F, 99.0F, 118.0F, (-233.0F), 50.0F, 2957.17F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)941;
      shortArray0[1] = (short)2848;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)56, 52);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)941, (short)2848}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      float[] floatArray0 = new float[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(floatArray0, 3168, 797);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((short[]) null, (short)4382);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)4382;
      intArray0[1] = (int) (short)4382;
      BitSet bitSet2 = ArrayUtils.indexesOf((short[]) null, (short)1852);
      assertEquals(0, bitSet2.cardinality());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.length());
      assertEquals("{}", bitSet2.toString());
      assertEquals(64, bitSet2.size());
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertNotNull(bitSet2);
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertFalse(bitSet2.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertEquals(3, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(3, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, (-1090), 797, 2);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'n'}, charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'n';
      floatArray0[1] = (float) 'n';
      floatArray0[2] = (float) 'n';
      floatArray0[3] = (float) 'n';
      floatArray0[4] = (float) 'n';
      floatArray0[2] = (float) 'n';
      floatArray0[6] = (float) 'n';
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {110.0F, 110.0F, 110.0F, 110.0F, 110.0F, 0.0F, 110.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {110.0F, 110.0F, 110.0F, 110.0F, 110.0F, 0.0F, 110.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.add(longArray0, 0, (Long) null);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (-2146813954));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146813954, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      int int0 = (-667);
      boolean boolean0 = ArrayUtils.isArrayIndexValid(stringArray0, (-667));
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)55;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 90);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2146466190;
      intArray0[1] = (-861);
      ArrayUtils.swap(intArray0, (-284), (-2023), 1008);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-861)}, intArray0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-888);
      intArray0[2] = 56;
      intArray0[3] = (-874);
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, (-888), 56, (-874), 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, (-888), 56, (-874), 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-874);
      integerArray0[1] = (Integer) (-888);
      boolean boolean0 = ArrayUtils.isArrayIndexValid(integerArray0, 0);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray1, (Random) mockRandom0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, (-888), 56, (-874), 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-888), 56, (-874), 0, 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 0, 0);
      assertEquals(0, objectArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2878);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)3258;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)2788;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)3258, (int) (short)2788);
      assertEquals(2, int0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2878), (short)2, (short)3258, (short)0, (short)2788}, shortArray0);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(booleanArray0, booleanArray2);
      assertNotNull(booleanArray2);
      assertEquals(5, booleanArray2.length);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1233);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-739));
      assertFalse(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2878), (short)2, (short)3258, (short)0, (short)2788}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-2878);
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) 0, (double) (short)3258);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-2878.0)}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.swap(intArray0, 1233, 2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 808.48645F;
      floatArray0[1] = (-1332.9109F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 808.48645F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {808.48645F, (-1332.9109F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1332.9109F)}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = 'U';
      charArray0[2] = 'J';
      charArray0[3] = 'r';
      charArray0[4] = 'L';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2147483646, 2147483646);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'m', 'U', 'J', 'r', 'L'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-5304.607027);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-5304.607027)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-5304.607027)}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      stringArray0[1] = "k| Slil,<D95]\fT";
      stringArray0[2] = "Array element ";
      stringArray0[3] = "java.lang.Object";
      stringArray0[4] = "IE9|<vM,I";
      String string0 = ArrayUtils.get(stringArray0, 0, "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle");
      assertEquals("org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle", string0);
      assertNotNull(string0);
      assertEquals(5, stringArray0.length);
      
      Long long0 = new Long(699L);
      assertEquals(699L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = ArrayUtils.isSameType("org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle", long0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 2175, 3608.2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2175, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = (-561);
      ArrayUtils.shift(intArray0, 8, 2424, (-561));
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {(-561), 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-739), (-739), (-6));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 49;
      intArray0[1] = 49;
      intArray0[2] = 49;
      ArrayUtils.swap(intArray0, (-451), 655);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {49, 49, 49, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 704L;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {704.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 704L;
      floatArray0[2] = (float) 704L;
      floatArray0[6] = (float) 704L;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {704.0F, 0.0F, 704.0F, 0.0F, 0.0F, 0.0F, 704.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {704.0F, 0.0F, 704.0F, 0.0F, 0.0F, 0.0F, 704.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Byte byte0 = new Byte((byte)28);
      assertEquals((byte)28, (byte)byte0);
      assertNotNull(byte0);
      
      Short short0 = new Short((short)4);
      assertEquals((short)4, (short)short0);
      assertNotNull(short0);
      
      Integer integer0 = new Integer((short)4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(short0, integer0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)4;
      intArray0[1] = (int) (short)4;
      intArray0[2] = 5;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = 5;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = 4;
      intArray0[8] = (int) (byte)28;
      ArrayUtils.swap(intArray0, 4, 4);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {4, 4, 5, 0, 0, 5, 0, 4, 28}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = 'M';
      charArray0[2] = 'G';
      charArray0[3] = '&';
      charArray0[4] = 'D';
      charArray0[5] = ' ';
      charArray0[6] = 'q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 4879, (-366));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'2', 'M', 'G', '&', 'D', ' ', 'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertTrue(boolean0);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'2', 'M', 'G', '&', 'D', ' ', 'q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'D';
      floatArray0[1] = (float) 4879;
      floatArray0[2] = (float) 'q';
      floatArray0[3] = (float) 'M';
      floatArray0[4] = (float) '2';
      floatArray0[5] = (float) '&';
      floatArray0[6] = (float) ' ';
      floatArray0[7] = (float) '2';
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertEquals(16, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {68.0F, 4879.0F, 113.0F, 77.0F, 50.0F, 38.0F, 32.0F, 50.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = ArrayUtils.isSameType(byte0, byte0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '2';
      intArray0[1] = (int) '&';
      ArrayUtils.swap(intArray0, 2564, 49);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {50, 38}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = '|';
      charArray0[2] = '@';
      charArray0[3] = 'H';
      charArray0[4] = 'X';
      charArray0[5] = 'n';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 214, 214);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {'{', '|', '@', 'H', 'X', 'n'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '{';
      doubleArray0[1] = (double) 'n';
      doubleArray0[2] = (double) 'H';
      doubleArray0[3] = (double) 'n';
      doubleArray0[4] = (double) 'n';
      doubleArray0[5] = (double) 'X';
      doubleArray0[6] = (double) 'X';
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 72.0);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {123.0, 110.0, 72.0, 110.0, 110.0, 88.0, 88.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      short[] shortArray0 = new short[8];
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 0, (-2303));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-2303);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-2303);
      floatArray0[4] = (float) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2295, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2295, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-167));
      assertEquals((-167), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.add(integerArray0, integerArray0[0]);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      long[] longArray2 = ArrayUtils.addFirst(longArray1, 460L);
      assertSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(2, longArray2.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertArrayEquals(new long[] {460L, 0L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray2, doubleArray2);
      assertTrue(boolean0);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)3103);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)3103}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2510), (int) (short) (-2510));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(bitSet0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Character character0 = Character.valueOf('&');
      assertEquals('&', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('P');
      assertEquals('P', (char)character1);
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-29));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-29);
      shortArray0[1] = (short) (byte)34;
      shortArray0[2] = (short) (byte) (-29);
      shortArray0[3] = (short) (byte)34;
      shortArray0[4] = (short) (byte)34;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-29), (short)34, (short) (-29), (short)34, (short)34}, shortArray0);
      assertArrayEquals(new short[] {(short) (-29), (short)34, (short) (-29), (short)34, (short)34}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertArrayEquals(new short[] {(short) (-29), (short)34, (short) (-29), (short)34, (short)34}, shortArray0);
      assertArrayEquals(new short[] {(short) (-29), (short)34, (short) (-29), (short)34, (short)34}, shortArray1);
      assertArrayEquals(new short[] {(short) (-29), (short)34, (short) (-29), (short)34, (short)34}, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-15419);
      shortArray0[1] = (short) (-15419);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-15419), (short) (-15419)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-15419), (short) (-15419)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "Cxh-jJ(");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      Character character0 = Character.valueOf(';');
      assertEquals(';', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = (Character) ';';
      characterArray0[3] = (Character) ';';
      characterArray0[4] = character0;
      characterArray0[5] = (Character) ';';
      characterArray0[6] = (Character) ';';
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {';', ';', ';', ';', ';', ';', ';'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-103)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      int int0 = (-827);
      Integer integer0 = new Integer((-827));
      assertEquals((-827), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer[] integerArray0 = ArrayUtils.removeAllOccurences((Integer[]) null, integer0);
      assertNull(integerArray0);
      assertTrue(integer0.equals((Object)int0));
      
      float[] floatArray0 = new float[1];
      float float0 = 1625.3055F;
      floatArray0[0] = 1625.3055F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1625.3055F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, (-1315));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1315, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-2142));
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'F');
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2142);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-2142L)}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)26;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0, (byte)0, (byte)26, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-29));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0, (byte)0, (byte)26, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0, (byte)0, (byte)26, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)34;
      shortArray0[1] = (short) (byte)26;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte)0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)34, (short)26, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)34, (short)26, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)34, (short)26, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)34, (short)26, (short)0}, shortArray2);
      assertArrayEquals(new short[] {(short)34, (short)26, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-2142));
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'F');
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2142);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-2142L)}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)2, (int) (byte)2);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, bitSet1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-2142));
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'F');
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'F'}, charArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2142);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-2142L)}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)0;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0, (byte)0, (byte)26, (byte) (-116), (byte)0, (byte)49, (byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)34);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0, (byte)0, (byte)26, (byte) (-116), (byte)0, (byte)49, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0, (byte)0, (byte)26, (byte) (-116), (byte)0, (byte)49, (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[0];
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertTrue(boolean2);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-112);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)26;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte) (-116));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short) (-112), (short)0, (short)26}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-112), (short)0, (short)26}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[9];
      MutableInt mutableInt0 = new MutableInt((-871));
      assertEquals((short) (-871), mutableInt0.shortValue());
      assertEquals((byte) (-103), mutableInt0.byteValue());
      assertEquals((-871), (int)mutableInt0.getValue());
      assertEquals((-871L), mutableInt0.longValue());
      assertEquals((-871), (int)mutableInt0.toInteger());
      assertEquals("-871", mutableInt0.toString());
      assertEquals((-871.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-871.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-871), mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      ArrayUtils.reverse((char[]) null, (-871), 100);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 4142;
      intArray0[2] = 0;
      intArray0[4] = 2;
      intArray0[5] = (-710);
      intArray0[6] = 65;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      assertArrayEquals(new int[] {2, 4142, 0, 0, 2, (-710), 65}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      MutableInt mutableInt0 = new MutableInt((-116));
      assertEquals((byte) (-116), mutableInt0.byteValue());
      assertEquals((-116), (int)mutableInt0.toInteger());
      assertEquals((short) (-116), mutableInt0.shortValue());
      assertEquals((-116), (int)mutableInt0.getValue());
      assertEquals((-116L), mutableInt0.longValue());
      assertEquals((-116), mutableInt0.intValue());
      assertEquals((-116.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-116.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-116", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(1);
      assertEquals(1, (int)mutableInt1.toInteger());
      assertEquals((byte)1, mutableInt1.byteValue());
      assertEquals(1.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt1.getValue());
      assertEquals("1", mutableInt1.toString());
      assertEquals(1L, mutableInt1.longValue());
      assertEquals(1, mutableInt1.intValue());
      assertEquals(1.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt1.shortValue());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      mutableIntArray0[0] = mutableInt1;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertEquals(1, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 4142;
      intArray0[2] = 0;
      intArray0[3] = 10;
      intArray0[4] = (-2104);
      intArray0[5] = (-710);
      intArray0[6] = 65;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      assertArrayEquals(new int[] {2, 4142, 0, 10, (-2104), (-710), 65}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 0;
      ArrayUtils.shift(floatArray0, 0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0, 4142, 2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2.0F;
      doubleArray0[3] = (double) 4142;
      doubleArray0[4] = (double) 65;
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 0.0, 2.0, 4142.0, 65.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'v');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'v'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) 'v');
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {118}, intArray0);
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 0);
      assertEquals(6, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'v');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'v'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 0);
      assertEquals("{0, 2, 3, 4, 5, 6}", bitSet0.toString());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      char[] charArray0 = new char[27];
      charArray0[0] = ';';
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2375L);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false);
      assertFalse(bitSet1.isEmpty());
      assertEquals(2, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.length());
      assertEquals("{1, 2}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true}, booleanArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-644.9332F);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      ArrayUtils.shift(floatArray0, 0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-644.9332F), 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.swap(booleanArray0, (-21), (-21), (-1));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)8192;
      shortArray0[1] = (short)3080;
      shortArray0[2] = (short) (-1737);
      shortArray0[3] = (short)8192;
      shortArray0[4] = (short) (-1737);
      short[] shortArray1 = ArrayUtils.remove(shortArray0, 1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)8192, (short)3080, (short) (-1737), (short)8192, (short) (-1737)}, shortArray0);
      assertArrayEquals(new short[] {(short)8192, (short) (-1737), (short)8192, (short) (-1737)}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)8192;
      floatArray0[1] = (float) (short) (-1737);
      floatArray0[2] = (-5404.89F);
      floatArray0[3] = (float) 1;
      ArrayUtils.shift(floatArray0, (int) (short) (-1737), (int) (short)3080, (int) (short)8192);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {8192.0F, (-1737.0F), (-5404.89F), 1.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) (short)3080;
      longArray0[2] = (long) (short)3080;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(78, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 78, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)99;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)57, (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte)99, (byte)4}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse(byteArray1, (int) (byte)99, 55);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)57, (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte)99, (byte)4}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shift((float[]) null, (int) (byte)99);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = 1.0;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1191);
      ArrayUtils.shift(longArray0, (-1191), (-1191), 56);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1191L)}, longArray0);
      
      Double double0 = new Double(1617.580628262);
      assertEquals(1617.580628262, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 5609L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {(-1191L)}, longArray0);
      assertArrayEquals(new long[] {(-1191L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (-2663.590773431401);
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 2.0, 2.0, (-2663.590773431401)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 2.0, 2.0, (-2663.590773431401), 2.0, (-2663.590773431401)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      longArray0[1] = 40L;
      longArray0[2] = (-782L);
      longArray0[3] = (-3580L);
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, (-870));
      assertEquals(6, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{4, 5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {1L, 40L, (-782L), (-3580L), 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-249L);
      longArray0[1] = 1439L;
      longArray0[2] = 0L;
      ArrayUtils.shift(longArray0, 1136, 315, 1136);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-249L), 1439L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      int[] intArray0 = new int[1];
      Character character0 = Character.valueOf('*');
      assertEquals('*', (char)character0);
      assertNotNull(character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertEquals('*', object0);
      assertNotNull(object0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '*';
      floatArray0[1] = (float) 0;
      ArrayUtils.shift(floatArray0, 2146466190);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 42.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (short)0);
      assertNull(longArray0);
      
      MutableInt mutableInt0 = new MutableInt((Number) short1);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      assertTrue(short1.equals((Object)short0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2698;
      intArray0[1] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-60.276137606);
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameType(boolean0, boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      byte[] byteArray0 = new byte[5];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)0, 48, (int) (byte)121);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = 463.33727000000005;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 463.33727000000005);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(11, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-2114), (-2114), (-672));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      ArrayUtils.reverse(longArray0, 3496, 3496);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) 3496);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2.0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.reverse((float[]) null, Integer.MAX_VALUE, 797);
      ArrayUtils.shift(byteArray1, 3168, 3168, 611);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertEquals(3, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(3, bitSet1.cardinality());
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      ArrayUtils.reverse(floatArray0, 3168, 797);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = 'v';
      byte[] byteArray0 = new byte[3];
      ArrayUtils.shift(byteArray0, 0, 2788, 611);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertFalse(bitSet1.isEmpty());
      assertEquals(3, bitSet1.length());
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      ArrayUtils.reverse(floatArray0, 3168, 797);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = '2';
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)0;
      doubleArray0[0] = (double) (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.shift(byteArray0, (-25), 2788, 611);
      assertEquals(21, byteArray0.length);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)785);
      assertEquals((short)785, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-3924));
      assertEquals((short) (-3924), (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 611;
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short1;
      shortArray0[1] = short2;
      shortArray0[2] = short2;
      shortArray0[3] = short1;
      shortArray0[4] = short1;
      shortArray0[5] = short2;
      shortArray0[6] = short2;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)15;
      ArrayUtils.shift(byteArray0, (int) (byte)57, 2, (int) (byte) (-1));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte) (-56), (byte) (-1), (byte)15}, byteArray0);
      
      ArrayUtils.reverse((Object[]) shortArray0);
      assertEquals(8, shortArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)81);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte) (-56), (byte) (-1), (byte)15}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte) (-56), (byte) (-1), (byte)15}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shift((boolean[]) null, (int) short0, (int) short0, 17);
      byte[] byteArray2 = ArrayUtils.add(byteArray0, (byte) (-96));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray2.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte) (-56), (byte) (-1), (byte)15, (byte) (-96)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte) (-56), (byte) (-1), (byte)15}, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      ArrayUtils.reverse(byteArray0, 115, (int) short0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte) (-56), (byte) (-1), (byte)15}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short1;
      shortArray0[1] = short2;
      shortArray0[2] = short2;
      shortArray0[3] = short1;
      shortArray0[4] = short1;
      shortArray0[5] = short2;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)15;
      ArrayUtils.shift(byteArray0, (int) (byte)57, 2, (int) (byte) (-1));
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte) (-56), (byte) (-1), (byte)15}, byteArray0);
      
      ArrayUtils.reverse((Object[]) shortArray0);
      assertEquals(8, shortArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)81);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte) (-56), (byte) (-1), (byte)15}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte) (-56), (byte) (-1), (byte)15}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shift((boolean[]) null, (int) short0, (int) short0, 17);
      byte[] byteArray2 = ArrayUtils.add(byteArray0, (byte) (-96));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray2.length);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte) (-56), (byte) (-1), (byte)15, (byte) (-96)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte) (-56), (byte) (-1), (byte)15}, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      ArrayUtils.reverse(byteArray0, 115, (int) short0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte) (-56), (byte) (-1), (byte)15}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      longArray0[0] = (long) '3';
      charArray0[4] = '3';
      charArray0[5] = '3';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'3', '3', '3', '\u0000', '3', '3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'N';
      charArray0[1] = 't';
      charArray0[2] = '}';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'N', 't', '}'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2993;
      shortArray0[1] = (short)1852;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)2312;
      shortArray0[4] = (short)1852;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)2483;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1795);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertArrayEquals(new short[] {(short)2993, (short)1852, (short)1, (short)2312, (short)1852, (short) (-1), (short) (-1), (short)1, (short)2483}, shortArray0);
      assertArrayEquals(new short[] {(short)2993, (short)1852, (short)1, (short)2312, (short)1852, (short) (-1), (short) (-1), (short)1, (short)2483}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray2.length);
      assertArrayEquals(new short[] {}, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)59;
      ArrayUtils.shift(byteArray0, 27);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)59, (byte)59}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'}'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false, false, true, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-1);
      ArrayUtils.shift(booleanArray0, (int) (byte)35, (int) (byte)0, (-970));
      assertNotSame(booleanArray0, booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0, 952, 1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)7, (byte)2, (byte)39}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = (-1L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 7);
      assertEquals(2, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-1L), 0L, 0L, 0L}, longArray0);
      
      int[] intArray0 = new int[13];
      intArray0[0] = (-1699);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(13, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-442.508145334));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {40.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {40.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.swap(longArray0, 965, 117);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, (-1L), 0L, 0L, 0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(7, booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertEquals(16, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = '*';
      charArray0[2] = 't';
      charArray0[3] = '}';
      charArray0[4] = '*';
      charArray0[5] = '3';
      charArray0[6] = 't';
      charArray0[7] = 't';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'N', '*', 't', '}', '*', '3', 't', 't'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true, true, true, true}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-37);
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)35, (byte) (-1), (byte)0, (byte) (-37)}, byteArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'f';
      charArray0[2] = '{';
      charArray0[3] = '*';
      charArray0[4] = '}';
      charArray0[5] = 't';
      charArray0[6] = 'N';
      charArray0[7] = '3';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'f', '{', '*', '}', 't', 'N', '3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)106;
      ArrayUtils.reverse(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)106, (byte)101}, byteArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)101;
      doubleArray0[1] = (double) (byte)106;
      doubleArray0[2] = (double) (byte)106;
      doubleArray0[3] = (double) (byte)106;
      doubleArray0[4] = (double) (byte)101;
      doubleArray0[5] = (double) (byte)106;
      doubleArray0[6] = (double) (byte)106;
      doubleArray0[7] = (double) (byte)106;
      doubleArray0[8] = (double) (byte)106;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {101.0, 106.0, 106.0, 106.0, 101.0, 106.0, 106.0, 106.0, 106.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)106, (byte)101}, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)106;
      intArray0[1] = (int) (byte)101;
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 101.0;
      objectArray0[1] = (Object) 106.0;
      objectArray0[2] = (Object) 101.0;
      objectArray0[3] = (Object) 106.0;
      objectArray0[4] = (Object) (byte)106;
      ArrayUtils.swap(objectArray0, (-305), 1975, (-761));
      assertEquals(5, objectArray0.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)106;
      intArray1[1] = 3774;
      intArray1[2] = (int) (byte)101;
      intArray1[3] = (int) (byte)106;
      intArray1[4] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3774, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, 0, 2);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertSame(booleanArray3, booleanArray0);
      assertNotNull(booleanArray3);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray3.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      
      ArrayUtils.swap((Object[]) null, 51, 2145872524);
      short[] shortArray0 = new short[1];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)49, (int) (short)3258);
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 751;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 751;
      doubleArray0[3] = (double) 751;
      doubleArray0[4] = (double) 751;
      doubleArray0[5] = (double) 751;
      doubleArray0[6] = (double) 751;
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)32;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Character character0 = Character.valueOf('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      Character character1 = ArrayUtils.get((Character[]) null, (-1340), character0);
      assertEquals('u', (char)character1);
      assertNotNull(character1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      charArray0[5] = 'l';
      charArray0[6] = 'u';
      charArray0[7] = 'u';
      charArray0[8] = 'u';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (int) (byte) (-117));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -117, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-887);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-887), (-1));
      assertEquals((-1), int1);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-887)}, shortArray0);
      assertFalse(int1 == int0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = new Boolean("3(e8_;jDP");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("Comparator should not be null.");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertTrue(boolean4);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertTrue(boolean6);
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean5));
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = new Boolean(true);
      assertTrue(boolean7);
      assertNotNull(boolean7);
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean0));
      
      booleanArray0[7] = boolean7;
      boolean boolean8 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean8);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1836;
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) (short)1836;
      objectArray0[1] = (Object) (short)1836;
      objectArray0[2] = (Object) (short)1836;
      objectArray0[3] = (Object) (short)1836;
      ArrayUtils.swap(objectArray0, (int) (short)1836, (int) (short)1836, (int) (short)1836);
      assertEquals(21, objectArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)1836;
      floatArray0[1] = (-294.0F);
      floatArray0[2] = (float) (short)1836;
      floatArray0[3] = (float) (short)1836;
      floatArray0[4] = (float) (short)1836;
      floatArray0[5] = (float) (short)1836;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {1836.0F, (-294.0F), 1836.0F, 1836.0F, 1836.0F, 1836.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1836.0F, (-294.0F), 1836.0F, 1836.0F, 1836.0F, 1836.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, (-5260));
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) true;
      ArrayUtils.swap(objectArray0, 2145872524, (-2682));
      assertEquals(5, objectArray0.length);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)7, (-1458));
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-357);
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-357), 2}, intArray0);
      assertArrayEquals(new int[] {(-357), 2}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.shift((byte[]) null, 1, (-2145874937), (-2145874937));
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)59;
      shortArray0[1] = (short) (byte) (-10);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (byte)14;
      shortArray0[4] = (short) (byte)59;
      shortArray0[5] = (short) (byte) (-10);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-10));
      assertEquals(5, int0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)59, (short) (-10), (short) (-1), (short)14, (short)59, (short) (-10)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-357);
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {1, (-357), 2}, intArray0);
      assertArrayEquals(new int[] {(-357), 2}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray1));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) (-357);
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      objectArray0[7] = (Object) (-357);
      objectArray0[8] = (Object) true;
      ArrayUtils.swap(objectArray0, 51, 2);
      assertEquals(9, objectArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-4315);
      shortArray0[1] = (short) (-377);
      shortArray0[2] = (short) (-1993);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)3258;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-4315), 832);
      assertEquals(0, int0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4315), (short) (-377), (short) (-1993), (short)0, (short)2, (short)3258}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1163.15598168);
      doubleArray0[1] = 3559.3732;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1163.15598168), 3559.3732}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-2147483648L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (-3507L);
      longArray0[4] = (-2147483648L);
      longArray0[5] = (-17L);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      assertArrayEquals(new long[] {(-2147483648L), 0L, 0L, (-3507L), (-2147483648L), (-17L)}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Byte byte0 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-28);
      intArray0[1] = (int) (byte) (-28);
      intArray0[2] = (int) (byte) (-28);
      intArray0[3] = (int) (byte) (-28);
      intArray0[4] = 2335;
      intArray0[5] = (int) (byte) (-28);
      intArray0[6] = (int) (byte) (-28);
      intArray0[7] = (int) (byte) (-28);
      intArray0[8] = (int) (byte) (-28);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2564), (-2564));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-28), (-28), (-28), (-28), 2335, (-28), (-28), (-28), (-28)}, intArray0);
      
      // Undeclared exception!
      try { 
        bitSet0.previousClearBit((-28));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < -1: -28
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-2142));
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2142);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-2142L), 0L}, longArray0);
      
      byte[] byteArray0 = new byte[8];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2, (int) (byte)2);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      byteArray0[5] = (byte) (-84);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-84), (int) (byte)0);
      assertEquals(1, int0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-84), (byte) (-84), (byte) (-84), (byte)0, (byte) (-84)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      Float float0 = new Float(1901.03F);
      assertEquals(1901.03F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-90), 0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-90), (byte)2}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) float0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (-1333);
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 7;
      longArray0[1] = (long) 'G';
      longArray0[2] = (long) (-1333);
      longArray0[3] = (long) (-1333);
      longArray0[4] = (long) (-1333);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1333L), 82);
      assertEquals(4, int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {7L, 71L, (-1333L), (-1333L), (-1333L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-1333)}, intArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 2431.8622786);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.swap(longArray0, 0, (-256));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {7L, 71L, (-1333L), (-1333L), (-1333L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      ArrayUtils.swap(longArray0, (int) (short)0, (int) (short)0, 61);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertEquals((short)0, object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], (int) (short)0);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (int) (short) (-1087), (int) (short) (-1087), (-104));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2031;
      shortArray0[1] = (short)2031;
      shortArray0[2] = (short) (byte)7;
      shortArray0[3] = (short) (-192);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-1087), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1087, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-233L);
      MutableInt[] mutableIntArray0 = new MutableInt[7];
      MutableInt mutableInt0 = new MutableInt((-233L));
      assertEquals("-233", mutableInt0.toString());
      assertEquals((-233.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-233.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-233), mutableInt0.intValue());
      assertEquals((short) (-233), mutableInt0.shortValue());
      assertEquals((-233), (int)mutableInt0.toInteger());
      assertEquals((byte)23, mutableInt0.byteValue());
      assertEquals((-233L), mutableInt0.longValue());
      assertEquals((-233), (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((-233L));
      assertEquals((-233L), mutableInt1.longValue());
      assertEquals((-233.0), mutableInt1.doubleValue(), 0.01);
      assertEquals("-233", mutableInt1.toString());
      assertEquals((short) (-233), mutableInt1.shortValue());
      assertEquals((-233), mutableInt1.intValue());
      assertEquals((-233), (int)mutableInt1.toInteger());
      assertEquals((byte)23, mutableInt1.byteValue());
      assertEquals((-233.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-233), (int)mutableInt1.getValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(122);
      assertEquals("122", mutableInt2.toString());
      assertEquals((short)122, mutableInt2.shortValue());
      assertEquals(122, mutableInt2.intValue());
      assertEquals(122L, mutableInt2.longValue());
      assertEquals(122.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(122, (int)mutableInt2.toInteger());
      assertEquals(122, (int)mutableInt2.getValue());
      assertEquals(122.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((byte)122, mutableInt2.byteValue());
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(122);
      assertEquals(122, (int)mutableInt3.getValue());
      assertEquals((byte)122, mutableInt3.byteValue());
      assertEquals(122, (int)mutableInt3.toInteger());
      assertEquals(122L, mutableInt3.longValue());
      assertEquals(122.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(122.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals("122", mutableInt3.toString());
      assertEquals(122, mutableInt3.intValue());
      assertEquals((short)122, mutableInt3.shortValue());
      assertNotNull(mutableInt3);
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt(mutableInt3);
      assertEquals(122, (int)mutableInt3.getValue());
      assertEquals((byte)122, mutableInt3.byteValue());
      assertEquals(122, (int)mutableInt3.toInteger());
      assertEquals(122L, mutableInt3.longValue());
      assertEquals(122.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(122.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals("122", mutableInt3.toString());
      assertEquals(122, mutableInt3.intValue());
      assertEquals((short)122, mutableInt3.shortValue());
      assertEquals((short)122, mutableInt4.shortValue());
      assertEquals("122", mutableInt4.toString());
      assertEquals(122.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals(122L, mutableInt4.longValue());
      assertEquals(122.0, mutableInt4.doubleValue(), 0.01);
      assertEquals(122, mutableInt4.intValue());
      assertEquals(122, (int)mutableInt4.getValue());
      assertEquals(122, (int)mutableInt4.toInteger());
      assertEquals((byte)122, mutableInt4.byteValue());
      assertNotNull(mutableInt4);
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertTrue(mutableInt4.equals((Object)mutableInt2));
      assertTrue(mutableInt4.equals((Object)mutableInt3));
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt(1);
      assertEquals(1, (int)mutableInt5.toInteger());
      assertEquals(1, (int)mutableInt5.getValue());
      assertEquals(1, mutableInt5.intValue());
      assertEquals(1L, mutableInt5.longValue());
      assertEquals((short)1, mutableInt5.shortValue());
      assertEquals(1.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals("1", mutableInt5.toString());
      assertEquals(1.0, mutableInt5.doubleValue(), 0.01);
      assertEquals((byte)1, mutableInt5.byteValue());
      assertNotNull(mutableInt5);
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt mutableInt6 = new MutableInt(65);
      assertEquals(65, mutableInt6.intValue());
      assertEquals("65", mutableInt6.toString());
      assertEquals(65L, mutableInt6.longValue());
      assertEquals(65, (int)mutableInt6.toInteger());
      assertEquals((byte)65, mutableInt6.byteValue());
      assertEquals(65.0F, mutableInt6.floatValue(), 0.01F);
      assertEquals(65, (int)mutableInt6.getValue());
      assertEquals(65.0, mutableInt6.doubleValue(), 0.01);
      assertEquals((short)65, mutableInt6.shortValue());
      assertNotNull(mutableInt6);
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      
      mutableIntArray0[6] = mutableInt6;
      MutableInt[] mutableIntArray1 = ArrayUtils.subarray(mutableIntArray0, (-1), 523);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotNull(mutableIntArray1);
      assertEquals(7, mutableIntArray1.length);
      assertEquals(7, mutableIntArray0.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = '\'';
      charArray0[3] = 's';
      Character character0 = Character.valueOf('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      long[] longArray0 = new long[14];
      charArray0[3] = 'C';
      longArray0[1] = (long) 'C';
      longArray0[2] = (long) 's';
      longArray0[3] = (long) 'C';
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 2864L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(14, longArray0.length);
      assertEquals(14, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'C', '\'', '\u0000', 'C', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'C', '\'', '\u0000', 'C', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      ArrayUtils.swap(longArray0, (-1), 2);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.add(longArray0, 0, (Long) null);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = new short[2];
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'T'}, charArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, Float.NaN);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2724, (int) (short)2724);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      Short[] shortArray1 = new Short[2];
      Short short0 = new Short((short)4142);
      assertEquals((short)4142, (short)short0);
      assertNotNull(short0);
      
      shortArray1[0] = short0;
      Short short1 = new Short((short)2724);
      assertEquals((short)2724, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray1[1] = short1;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray2, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray2.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1, (int) (short)1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (-2496.499035);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (short)1;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = (double) (short)1;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0);
      assertEquals(4, int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2496.499035), 0.0, (-1.0), 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      ArrayUtils.shift(shortArray0, 4, (int) (short)1, (-2419));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 131L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {131L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = Float.valueOf((-841.8F));
      assertEquals((-841.8F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-521.18F));
      assertEquals((-521.18F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.subarray(floatArray0, 398, 398);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      charArray0[1] = '(';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'}', '('}, charArray0);
      assertArrayEquals(new char[] {'}', '(', '}', '('}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '}';
      longArray0[1] = (long) '(';
      longArray0[2] = (long) 398;
      int int0 = ArrayUtils.indexOf(longArray0, 398L, 48);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {125L, 40L, 398L}, longArray0);
      
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1812.90338002391);
      assertEquals(1812.90338002391, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(398);
      assertEquals(398.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-1452.0));
      assertEquals((-1452.0), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[3]);
      assertEquals(0.0, (double)double6, 0.01);
      assertNotNull(double6);
      assertEquals(8, doubleArray0.length);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      assertEquals(0.0, (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertEquals((double)double7, (double)double4, 0.01);
      assertEquals((double)double7, (double)double3, 0.01);
      assertEquals((double)double7, (double)double6, 0.01);
      assertEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      
      doubleArray0[7] = double7;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse((int[]) null, (int) (byte)122, 0);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      float[] floatArray0 = new float[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(floatArray0, 3168, 797);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((short[]) null, (short)4382);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)4382;
      intArray0[1] = (int) (short)4382;
      intArray0[2] = 951;
      intArray0[3] = (int) (short)4382;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 797;
      intArray1[1] = 951;
      intArray1[2] = (int) (short)4382;
      intArray1[3] = 3168;
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.reverse(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {0, 3168, 4382, 951, 797}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(2787, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Short[] shortArray0 = ArrayUtils.insert(2, (Short[]) null, (Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 3559.3732;
      byte[] byteArray0 = new byte[8];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[3];
      MutableInt mutableInt0 = new MutableInt(593);
      assertEquals(593L, mutableInt0.longValue());
      assertEquals(593.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(593, (int)mutableInt0.toInteger());
      assertEquals(593, (int)mutableInt0.getValue());
      assertEquals((byte)81, mutableInt0.byteValue());
      assertEquals("593", mutableInt0.toString());
      assertEquals((short)593, mutableInt0.shortValue());
      assertEquals(593.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(593, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertEquals(593L, mutableInt0.longValue());
      assertEquals(593.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(593, (int)mutableInt0.toInteger());
      assertEquals(593, (int)mutableInt0.getValue());
      assertEquals((byte)81, mutableInt0.byteValue());
      assertEquals("593", mutableInt0.toString());
      assertEquals((short)593, mutableInt0.shortValue());
      assertEquals(593.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(593, mutableInt0.intValue());
      assertEquals(593, (int)mutableInt1.toInteger());
      assertEquals("593", mutableInt1.toString());
      assertEquals(593, (int)mutableInt1.getValue());
      assertEquals((byte)81, mutableInt1.byteValue());
      assertEquals(593.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)593, mutableInt1.shortValue());
      assertEquals(593.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(593, mutableInt1.intValue());
      assertEquals(593L, mutableInt1.longValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(mutableInt0);
      assertEquals(593L, mutableInt0.longValue());
      assertEquals(593.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(593, (int)mutableInt0.toInteger());
      assertEquals(593, (int)mutableInt0.getValue());
      assertEquals((byte)81, mutableInt0.byteValue());
      assertEquals("593", mutableInt0.toString());
      assertEquals((short)593, mutableInt0.shortValue());
      assertEquals(593.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(593, mutableInt0.intValue());
      assertEquals(593L, mutableInt2.longValue());
      assertEquals(593.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(593, (int)mutableInt2.getValue());
      assertEquals(593, (int)mutableInt2.toInteger());
      assertEquals(593.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((byte)81, mutableInt2.byteValue());
      assertEquals("593", mutableInt2.toString());
      assertEquals(593, mutableInt2.intValue());
      assertEquals((short)593, mutableInt2.shortValue());
      assertNotNull(mutableInt2);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt[] mutableIntArray1 = ArrayUtils.subarray(mutableIntArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertEquals(3, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'K';
      charArray1[1] = 'K';
      charArray1[2] = 'B';
      charArray1[3] = 'K';
      charArray1[4] = 'B';
      charArray1[5] = 'K';
      charArray1[6] = 'K';
      charArray1[7] = 'K';
      charArray1[8] = 'C';
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertEquals(18, charArray2.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'K', 'K', 'B', 'K', 'B', 'K', 'K', 'K', 'C'}, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-544);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-544)}, shortArray0);
      
      Character character0 = Character.valueOf('i');
      assertEquals('i', (char)character0);
      assertNotNull(character0);
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray0, (long) (short) (-544));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray2.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(4315, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4315, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = Float.valueOf((-841.8F));
      assertEquals((-841.8F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-521.18F));
      assertEquals((-521.18F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.subarray(floatArray0, 398, 398);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      charArray0[1] = '(';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertArrayEquals(new char[] {'}', '('}, charArray0);
      assertArrayEquals(new char[] {'}', '(', '}', '('}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '}';
      longArray0[1] = (long) '(';
      longArray0[2] = (long) 398;
      int int0 = ArrayUtils.indexOf(longArray0, 398L, 48);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {125L, 40L, 398L}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '}';
      intArray0[1] = (int) '(';
      intArray0[2] = (int) '(';
      ArrayUtils.reverse(intArray0, 4108, (-828));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {125, 40, 40}, intArray0);
      
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1812.90338002391);
      assertEquals(1812.90338002391, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(398);
      assertEquals(398.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      assertEquals(0.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-1452.0));
      assertEquals((-1452.0), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[3]);
      assertEquals(0.0, (double)double6, 0.01);
      assertNotNull(double6);
      assertEquals(8, doubleArray0.length);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      assertEquals(0.0, (double)double7, 0.01);
      assertNotNull(double7);
      assertEquals((double)double7, (double)double6, 0.01);
      assertEquals((double)double7, (double)double0, 0.01);
      assertEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      
      doubleArray0[7] = double7;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(40, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 40, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-233L);
      longArray0[1] = (-1L);
      longArray0[2] = 460L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {(-233L), (-1L), 460L}, longArray0);
      assertArrayEquals(new long[] {(-233L), (-1L), 460L, (-233L), (-1L), 460L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-233L);
      Double double0 = new Double(1.5);
      assertEquals(1.5, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(385.1192363);
      assertEquals(385.1192363, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 101);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (-233L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {(-233L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-233L), 0L, 0L, (-233L)}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      ArrayUtils.reverse((float[]) null);
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = (-1L);
      longArray0[4] = 3287L;
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, 3287L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(7, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 1L, (-1L), 3287L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1L, (-1L), 3287L, 0L, 3287L}, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 808.48645F;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-114);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)116;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1482), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1482, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      ArrayUtils.swap(longArray0, (int) (short)0, (int) (short)0, 61);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      short[] shortArray0 = ArrayUtils.insert(61, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null, (double) 61);
      assertNull(doubleArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-650.0), 0.0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)32, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
      
      Character character0 = Character.valueOf('u');
      assertEquals('u', (char)character0);
      assertNotNull(character0);
      
      Character character1 = ArrayUtils.get((Character[]) null, (-1958), character0);
      assertEquals('u', (char)character1);
      assertNotNull(character1);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1942.688677179;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1877.297231482;
      doubleArray0[4] = (-844.4285926196311);
      doubleArray0[5] = (-1124.358);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertArrayEquals(new double[] {1942.688677179, 2.0, 1.0, 1877.297231482, (-844.4285926196311), (-1124.358)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1942.688677179;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 1.0;
      doubleArray0[4] = (-844.4285926196311);
      doubleArray0[5] = (-1124.358);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertArrayEquals(new double[] {1942.688677179, 2.0, 1.0, 0.0, (-844.4285926196311), (-1124.358)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[2] = '\u0000';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '\u0000';
      floatArray0[1] = (float) ';';
      floatArray0[2] = (float) 'u';
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 117.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 59.0F, 117.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {117.0F, 0.0F, 59.0F, 117.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray2 = new Float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (float) 2652, 2652);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(bitSet0);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 59.0F, 117.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {117.0F, 0.0F, 59.0F, 117.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-5);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-5);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2146165455, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146165455, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.insert(751, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 751;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 751;
      doubleArray0[3] = (double) 751;
      doubleArray0[4] = (double) 751;
      doubleArray0[5] = (double) 751;
      doubleArray0[6] = (double) 751;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {751.0, 0.0, 751.0, 751.0, 751.0, 751.0, 751.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {751.0, 0.0, 751.0, 751.0, 751.0, 751.0, 751.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)32;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(751, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 751, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) long0, (Object) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2146466190;
      int int0 = ArrayUtils.indexOf(intArray0, 2146466190);
      assertEquals(1, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 2146466190}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      int int1 = ArrayUtils.lastIndexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short)122, 17);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)82;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-3536);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)91;
      shortArray0[8] = (short)2;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)3);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)82, (short)0, (short)0, (short)0, (short) (-3536), (short)0, (short)91, (short)2}, shortArray0);
      
      MutableInt mutableInt0 = new MutableInt(789);
      assertEquals(789, (int)mutableInt0.getValue());
      assertEquals((byte)21, mutableInt0.byteValue());
      assertEquals(789, (int)mutableInt0.toInteger());
      assertEquals(789.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("789", mutableInt0.toString());
      assertEquals(789L, mutableInt0.longValue());
      assertEquals(789, mutableInt0.intValue());
      assertEquals(789.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)789, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      int int1 = mutableInt0.decrementAndGet();
      assertEquals(788, (int)mutableInt0.getValue());
      assertEquals(788, (int)mutableInt0.toInteger());
      assertEquals("788", mutableInt0.toString());
      assertEquals((byte)20, mutableInt0.byteValue());
      assertEquals(788L, mutableInt0.longValue());
      assertEquals(788, mutableInt0.intValue());
      assertEquals(788.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(788.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)788, mutableInt0.shortValue());
      assertEquals(788, int1);
      assertFalse(int1 == int0);
      
      mutableInt0.subtract((Number) (short) (-1));
      assertEquals(789, (int)mutableInt0.getValue());
      assertEquals((byte)21, mutableInt0.byteValue());
      assertEquals(789, (int)mutableInt0.toInteger());
      assertEquals(789.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("789", mutableInt0.toString());
      assertEquals(789L, mutableInt0.longValue());
      assertEquals(789, mutableInt0.intValue());
      assertEquals(789.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)789, mutableInt0.shortValue());
      
      mutableInt0.add((int) (short)2);
      assertEquals(791.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(791, (int)mutableInt0.toInteger());
      assertEquals(791, (int)mutableInt0.getValue());
      assertEquals(791, mutableInt0.intValue());
      assertEquals(791L, mutableInt0.longValue());
      assertEquals("791", mutableInt0.toString());
      assertEquals((short)791, mutableInt0.shortValue());
      assertEquals((byte)23, mutableInt0.byteValue());
      assertEquals(791.0, mutableInt0.doubleValue(), 0.01);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      mutableInt0.decrement();
      assertEquals(790, (int)mutableInt0.toInteger());
      assertEquals((byte)22, mutableInt0.byteValue());
      assertEquals(790, (int)mutableInt0.getValue());
      assertEquals(790L, mutableInt0.longValue());
      assertEquals(790.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("790", mutableInt0.toString());
      assertEquals(790, mutableInt0.intValue());
      assertEquals((short)790, mutableInt0.shortValue());
      assertEquals(790.0, mutableInt0.doubleValue(), 0.01);
      
      int int2 = mutableInt0.addAndGet((Number) short0);
      assertEquals(790, (int)mutableInt0.toInteger());
      assertEquals((byte)22, mutableInt0.byteValue());
      assertEquals(790, (int)mutableInt0.getValue());
      assertEquals(790L, mutableInt0.longValue());
      assertEquals(790.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("790", mutableInt0.toString());
      assertEquals(790, mutableInt0.intValue());
      assertEquals((short)790, mutableInt0.shortValue());
      assertEquals(790.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(790, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) null, (Object) mutableInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      Short short2 = new Short((short)0);
      assertEquals((short)0, (short)short2);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short1;
      shortArray0[1] = short2;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      short[] shortArray1 = new short[8];
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)3077);
      assertEquals((-1), int0);
      assertEquals(8, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) short0);
      assertNull(longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (int) (short)2031, (-384L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2031, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2146466190;
      int int0 = ArrayUtils.indexOf(intArray0, 2146466190);
      assertEquals(1, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 2146466190}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_BOOLEAN_OBJECT_ARRAY);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-3081));
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3081)}, shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-1087);
      shortArray0[2] = (short) (-1087);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-1087), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1087, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, (-11), 1787.75);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      ArrayUtils.swap((short[]) null, (-2577), (-2577));
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = '9';
      charArray0[2] = 'Q';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertArrayEquals(new char[] {'_', '9', 'Q'}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (byte)0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 99.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {99.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 71;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 71);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {71}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = ArrayUtils.indexOf(intArray0, 71, 71);
      assertNotSame(intArray0, intArray1);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {71}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      Integer integer0 = new Integer((-31));
      assertEquals((-31), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Byte byte0 = new Byte((byte) (-39));
      assertEquals((byte) (-39), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-39));
      assertEquals((byte) (-39), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      ArrayUtils.swap(arrayUtils0.EMPTY_INT_ARRAY, 3913, (-1), (-1));
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3180);
      intArray0[1] = 737;
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = 11;
      intArray0[5] = 1962;
      int int0 = ArrayUtils.indexOf(intArray0, 0);
      assertEquals(2, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-3180), 737, 0, 2, 11, 1962}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      short[] shortArray0 = ArrayUtils.addFirst(arrayUtils0.EMPTY_SHORT_ARRAY, (short)0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)57;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)3, (int) (byte)121);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-86), (byte)121, (byte)74, (byte)57}, byteArray0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) longArray0, (Object) null);
      assertEquals((-1), int1);
      assertEquals(1, longArray0.length);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2619L));
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {704L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)18646;
      shortArray0[1] = (short)18646;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)18646);
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)18646, (short)18646}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)18646, (short)18646}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals((-1), int1);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(int1 == int0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int2 = ArrayUtils.lastIndexOf((Object[]) doubleArray1, (Object) null, 760);
      assertEquals((-1), int2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) doubleArray2, (Object) null, Integer.MAX_VALUE);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1209);
      shortArray0[1] = (short) (-192);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)43;
      doubleArray0[1] = (double) (short) (-2126);
      shortArray0[5] = (short) (-1176);
      shortArray0[6] = (short) (-3015);
      shortArray0[7] = (short) (-917);
      shortArray0[8] = (short) (-648);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertFalse(bitSet1.isEmpty());
      assertEquals(3, bitSet1.cardinality());
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      ArrayUtils.reverse(floatArray0, 3168, 797);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = 'v';
      charArray0[2] = 'H';
      charArray0[3] = 'q';
      charArray0[4] = '<';
      charArray0[5] = '1';
      charArray0[6] = 'T';
      charArray0[7] = 'c';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'2', 'v', 'H', 'q', '<', '1', 'T', 'c'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(0, int0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, (double) 0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3296.8079808}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(3, int1);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertFalse(int1 == int0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      int int2 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], Integer.MAX_VALUE);
      assertEquals(0, int2);
      assertEquals(1, objectArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) ';';
      doubleArray0[1] = (double) ';';
      doubleArray0[2] = (double) ';';
      doubleArray0[3] = (double) ';';
      doubleArray0[4] = (-1.0);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {59.0, 59.0, 59.0, 59.0, (-1.0)}, doubleArray0, 0.01);
      
      ArrayUtils.reverse((char[]) null);
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Character character0 = new Character('Y');
      assertEquals('Y', (char)character0);
      assertNotNull(character0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) ", Length: ", 434);
      assertEquals((-1), int1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse((int[]) null, (int) (byte)113, 0);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      short[] shortArray0 = new short[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)18646);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 516.9;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 516.9, (int) (short)18646);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {516.9}, doubleArray0, 0.01);
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)434);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[20];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(3, int0);
      assertEquals(20, booleanArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(20, booleanArray0.length);
      assertEquals(20, booleanArray1.length);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Character character0 = new Character('');
      assertEquals('', (char)character0);
      assertNotNull(character0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) character0, 3);
      assertEquals((-1), int1);
      assertEquals(20, booleanArray0.length);
      assertEquals(20, booleanArray1.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1852;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)18658);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)1852}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) doubleArray2, (Object) null, Integer.MAX_VALUE);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1209);
      shortArray0[1] = (short) (-192);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)43;
      shortArray0[4] = (short) (-2126);
      shortArray0[5] = (short) (-1176);
      shortArray0[6] = (short) (-3015);
      shortArray0[7] = (short) (-917);
      shortArray0[8] = (short) (-648);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Character character0 = new Character('Y');
      assertEquals('Y', (char)character0);
      assertNotNull(character0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) ", Length: ", 434);
      assertEquals((-1), int1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((short)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray1, (Object) integer0, (int) (short)0);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      int int0 = (-3180);
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[3] = '!';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3180), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3180, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      MutableInt[] mutableIntArray0 = ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      int int0 = new Byte((byte) (-58));
      assertEquals((byte) (-58), int0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte) (-58));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-58)}, shortArray1);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (short)1);
      assertFalse(boolean0);
      
      ArrayUtils.reverse((double[]) null);
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 751;
      doubleArray0[3] = (double) 751;
      doubleArray0[4] = (double) 751;
      doubleArray0[5] = (double) 751;
      doubleArray0[6] = (double) 751;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 751.0, 751.0, 751.0, 751.0, 751.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 751.0, 751.0, 751.0, 751.0, 751.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-76));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2146466190;
      int int0 = ArrayUtils.indexOf(intArray0, 2146466190);
      assertEquals(1, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 2146466190}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      MockRandom mockRandom0 = new MockRandom(1339L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(arrayUtils0.EMPTY_BYTE_ARRAY, (Random) mockRandom0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      Byte byte0 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      double[] doubleArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_DOUBLE_ARRAY, (double) 1339L);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1379.8592960868);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1.0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1379.8592960868), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1379.8592960868), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      assertEquals(704L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, 0.0F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift((int[]) null, (-1070));
      Byte byte0 = new Byte((byte)23);
      assertEquals((byte)23, (byte)byte0);
      assertNotNull(byte0);
      
      Character character0 = Character.valueOf('T');
      assertEquals('T', (char)character0);
      assertNotNull(character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 1.0;
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 509L, 954);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1808.918);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.swap((long[]) null, 954, (-1));
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Long[] longArray0 = new Long[0];
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 737;
      intArray0[2] = 0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 0, (-3180));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)2461);
      assertEquals((short)2461, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)120);
      assertEquals((short)120, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-167));
      assertEquals((short) (-167), (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      
      shortArray0[3] = short3;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (short)120, (int) (byte) (-58));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.contains(charArray0, 'i');
      assertFalse(boolean1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 0.0F);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int[] intArray0 = new int[0];
      ArrayUtils.subarray(intArray0, (-561), 512);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-561);
      floatArray0[1] = 719.0F;
      floatArray0[2] = (float) (-561);
      ArrayUtils.isEmpty(floatArray0);
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) (-561.0F);
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      ArrayUtils.indexesOf(floatArray0, 0.0F, 53);
      int[] intArray0 = new int[4];
      intArray0[0] = 53;
      intArray0[1] = 53;
      intArray0[2] = 53;
      intArray0[3] = 53;
      ArrayUtils.subarray(intArray0, 53, 53);
      ArrayUtils.isEmpty(floatArray0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 53;
      objectArray0[1] = (Object) (-1.0F);
      objectArray0[2] = (Object) (-1.0F);
      objectArray0[3] = (Object) (-1.0F);
      objectArray0[4] = (Object) 53;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) 53;
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      ArrayUtils.removeAllOccurrences(booleanArray0, true);
      ArrayUtils.removeElement((int[]) null, (int) (short) (-192));
      ArrayUtils.swap((short[]) null, (-2027), (int) (short) (-846), (int) (short) (-192));
      ArrayUtils.nullToEmpty((int[]) null);
      byte[] byteArray0 = new byte[0];
      ArrayUtils.isSameLength(byteArray0, byteArray0);
      ArrayUtils.addFirst(booleanArray0, false);
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      ArrayUtils.swap((short[]) null, (-2577), (-2577));
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = '9';
      charArray0[2] = 'J';
      ArrayUtils.toObject(charArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift(byteArray0, (-3067), (-3219), 48);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-888);
      intArray0[2] = 76;
      intArray0[3] = (-874);
      intArray0[4] = (-888);
      intArray0[5] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-874);
      integerArray0[1] = (Integer) (-888);
      ArrayUtils.isArrayIndexValid(integerArray0, 0);
      MockRandom mockRandom0 = new MockRandom(0);
      ArrayUtils.shuffle(intArray1, (Random) mockRandom0);
      assertArrayEquals(new int[] {(-888), 76, (-874), (-888), 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 3296.8079808;
      objectArray0[1] = (Object) 3296.8079808;
      ArrayUtils.isEmpty(objectArray0);
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      short[] shortArray1 = new short[0];
      int[] intArray0 = new int[13];
      intArray0[0] = (int) (short)98;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)835;
      ArrayUtils.swap(shortArray0, (-164), (int) (short)98);
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, (-164));
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.isSameType(object0, object0);
      long[] longArray0 = new long[3];
      longArray0[0] = (-4181L);
      longArray0[1] = 0L;
      longArray0[2] = (-1680L);
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'j';
      ArrayUtils.addFirst(charArray0, 'A');
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'A';
      intArray0[1] = (int) 'G';
      Byte byte0 = new Byte((byte)51);
      Byte byte1 = new Byte((byte)0);
      Byte byte2 = new Byte((byte)0);
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte0;
      byteArray0[1] = byte1;
      intArray0[0] = (int) (byte)byte0;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.isSameType(object0, object0);
      long[] longArray0 = new long[3];
      longArray0[0] = (-4181L);
      longArray0[1] = 0L;
      longArray0[2] = (-1680L);
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'j';
      ArrayUtils.addFirst(charArray0, 'A');
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'A';
      intArray0[1] = (int) 'G';
      ArrayUtils.shuffle(intArray0);
      Byte byte0 = new Byte((byte)51);
      Byte byte1 = new Byte((byte)0);
      Byte byte2 = new Byte((byte)0);
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte0;
      byteArray0[1] = byte1;
      intArray0[0] = (int) (byte)byte0;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      ArrayUtils.subarray(booleanArray1, 2, 2);
      ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2);
      ArrayUtils.lastIndexOf(doubleArray0, (-670.6430477), (int) (byte)28, (double) 2);
      ArrayUtils.toPrimitive((Short[]) null, (short) (byte)28);
      ArrayUtils.shuffle(doubleArray0);
      ArrayUtils.addFirst((char[]) null, '|');
      ArrayUtils.reverse(doubleArray0, 8, 850);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)835;
      ArrayUtils.swap(shortArray0, (-112), (int) (short)98);
      ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = '-';
      charArray0[2] = '.';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = 'E';
      charArray0[6] = 'G';
      charArray0[7] = 'A';
      ArrayUtils.addFirst(charArray0, '<');
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-16));
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)0);
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-16));
      byteArray0[2] = byte2;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)20901;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) (short)8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.indexesOf(shortArray0, (short)1, (int) (short)1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) (short) (-1737));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1737, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.0F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      Double double0 = new Double(0.0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 2146466190, 2);
      assertEquals((-1), int0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[3];
      MutableInt mutableInt0 = new MutableInt(double0);
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(double0);
      mutableIntArray0[2] = mutableInt2;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElement(mutableIntArray0, (Object) mutableInt1);
      assertEquals(2, mutableIntArray1.length);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.indexesOf(floatArray0, 0.0F);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertEquals(3, bitSet0.length());
      
      ArrayUtils.reverse(floatArray0, 3168, 797);
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      Long long0 = new Long((-456L));
      Double double0 = new Double(Double.NaN);
      Long.getLong("");
      AbstractMap.SimpleEntry<Double, Long> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Double, Long>(double0, (Long) null);
      AbstractMap.SimpleEntry<Double, Long> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Double, Long>(abstractMap_SimpleEntry0);
      Long long1 = new Long(3168);
      Double double1 = new Double(0.0);
      Long.getLong("org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle");
      AbstractMap.SimpleEntry<Double, Long> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Double, Long>(double1, (Long) null);
      AbstractMap.SimpleEntry<Double, Long>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Double, Long>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 3);
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry2;
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry2;
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<Double, Long>[] abstractMap_SimpleEntryArray1 = ArrayUtils.removeAllOccurences(abstractMap_SimpleEntryArray0, abstractMap_SimpleEntry2);
      assertEquals(0, abstractMap_SimpleEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 59, 59);
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = '\\';
      charArray0[2] = 'g';
      charArray0[3] = 'c';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'h', 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-233L);
      Double double0 = new Double(1.5);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) double0;
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) double0;
      objectArray0[3] = (Object) (-233L);
      objectArray0[4] = (Object) double0;
      objectArray0[5] = (Object) (-233L);
      objectArray0[6] = (Object) (-233L);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) double0, (-1));
      assertEquals("{0, 1, 2, 4}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      MutableInt mutableInt0 = new MutableInt((-846));
      MutableInt mutableInt1 = new MutableInt(138);
      MutableInt mutableInt2 = new MutableInt((-501));
      MutableInt mutableInt3 = new MutableInt(mutableInt0);
      MutableInt mutableInt4 = new MutableInt(0.0F);
      mutableInt0.addAndGet(383);
      MutableInt mutableInt5 = new MutableInt(mutableInt1);
      MutableInt mutableInt6 = new MutableInt((-1213));
      MutableInt[] mutableIntArray0 = new MutableInt[7];
      mutableIntArray0[0] = mutableInt2;
      mutableIntArray0[1] = mutableInt5;
      mutableIntArray0[3] = mutableInt3;
      mutableIntArray0[4] = mutableInt6;
      mutableIntArray0[5] = mutableInt4;
      mutableIntArray0[6] = mutableInt6;
      ArrayUtils.subarray(mutableIntArray0, (-1213), (-1));
      Object object0 = ArrayUtils.toPrimitive((Object) mutableInt6);
      assertNotSame(object0, mutableInt0);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      longArray0[0] = long0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      Double double0 = new Double(704L);
      int int0 = ArrayUtils.indexOf((Object[]) longArray0, (Object) longArray0[0]);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      ArrayUtils.removeAllOccurrences((double[]) null, (-2496.499035));
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 132, 132);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-225L);
      Double double0 = new Double(1.5);
      Double double1 = new Double(385.1192363);
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      ArrayUtils.indexesOf((short[]) null, (short) (-1));
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) doubleArray0[0];
      doubleArray1[1] = (double) doubleArray0[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (double) (-225L), (int) (short) (-1), 1.0);
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      Double double0 = new Double(0.0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2;
      ArrayUtils.lastIndexOf(floatArray0, (float) 2146466190, 2);
      ArrayUtils.nullToEmpty((Character[]) null);
      short[] shortArray0 = new short[7];
      floatArray0[0] = (float) (short)1945;
      shortArray0[1] = (short)1945;
      shortArray0[2] = (short)1945;
      shortArray0[3] = (short)1945;
      shortArray0[4] = (short)1945;
      shortArray0[5] = (short)1945;
      MutableInt mutableInt0 = new MutableInt(1945.0F);
      mutableInt0.addAndGet(2146466190);
      MutableInt mutableInt1 = new MutableInt(double0);
      MutableInt mutableInt2 = new MutableInt(Integer.MAX_VALUE);
      ArrayUtils.subarray((MutableInt[]) null, 1383, (int) 1945);
      MutableInt mutableInt3 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt1);
      assertEquals(0L, mutableInt3.longValue());
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      ArrayUtils.contains((double[]) null, (-264.60266092584), (-264.60266092584));
      Object object0 = new Object();
      ArrayUtils.isSameType(object0, "Array and element cannot both be null");
      ArrayUtils.swap((int[]) null, 4, (-4144));
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-940.1);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-60.276137606);
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'p', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 43, 0, (-3133.2276));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      ArrayUtils.swap(longArray0, (int) (short)0, (int) (short)0, 61);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[2] = (double) 61;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      ArrayUtils.toPrimitive((Double[]) null, (double) 61);
      double[] doubleArray2 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, (-1181.3772), (double) (short)0);
      ArrayUtils.isSorted(doubleArray1);
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) bitSet0, (Object) bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(272L);
      float[] floatArray0 = new float[2];
      mockRandom0.nextFloat();
      floatArray0[0] = (float) 1987L;
      floatArray0[1] = (float) 272L;
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {1987.0F, 272.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1378);
      shortArray0[1] = (short) (-1378);
      shortArray0[2] = (short) (-1378);
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'T');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      int int0 = ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      assertEquals(0, int0);
      
      ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      Boolean boolean0 = new Boolean(", '");
      ArrayUtils.shift(doubleArray0, 0, 533, 0);
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 533;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      Float float0 = new Float((double) 10);
      Float float1 = new Float((double) 2.0F);
      Float float2 = new Float(Double.NaN);
      Float float3 = new Float(Double.NaN);
      Float float4 = new Float((float) 2);
      Float float5 = new Float(1.0);
      ArrayUtils.toPrimitive((Float[]) null);
      MutableInt mutableInt0 = new MutableInt(111);
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals(111, (int)mutableInt1.getValue());
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((-3139.154443));
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      float[] floatArray1 = new float[3];
      floatArray1[0] = 2957.17F;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) floatArray0[0];
      ArrayUtils.shift(floatArray1, 0);
      boolean boolean1 = ArrayUtils.isEmpty(floatArray1);
      assertArrayEquals(new float[] {2957.17F, 0.0F, (-3139.1545F)}, floatArray1, 0.01F);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty((double[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-147.3135039356);
      doubleArray0[2] = (-1703.5);
      doubleArray0[3] = (-940.1);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      Float float0 = new Float(99.0F);
      Float float1 = new Float((-940.1));
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      ArrayUtils.toPrimitive(floatArray0);
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      ArrayUtils.shift((boolean[]) null, 1, 1, 48);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float((-3139.154443));
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      floatArray0[2] = float2;
      Float float3 = new Float((double) floatArray0[1]);
      floatArray0[3] = float3;
      Float float4 = new Float(0.0);
      floatArray0[4] = float4;
      Float float5 = new Float((double) floatArray0[0]);
      floatArray0[5] = float5;
      Float float6 = new Float(0.0F);
      floatArray0[6] = float6;
      Float float7 = new Float((-4822.78571));
      floatArray0[7] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-3139.1545F), (-3139.1545F), (-3139.1545F), (-3139.1545F), 0.0F, (-3139.1545F), 0.0F, (-4822.7856F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "a:@GkX.FYgAQ?5Ny";
      stringArray0[2] = "";
      stringArray0[3] = "Array and element cannot both be null";
      stringArray0[4] = "";
      String string0 = ArrayUtils.get(stringArray0, (-2288));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      long[] longArray0 = new long[3];
      Double double0 = new Double(1.5);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (-47.72075258414);
      doubleArray0[2] = (double) (-233L);
      doubleArray0[3] = 385.1192363;
      doubleArray0[4] = 385.1192363;
      ArrayUtils.shift(doubleArray0, (-1), (-1), (-1));
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      
      long[] longArray1 = new long[1];
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertEquals(2, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      ArrayUtils.swap(longArray0, (int) (short)0, (int) (short)0, 61);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 61;
      doubleArray0[2] = 2.14722176E9;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 61;
      doubleArray0[6] = (double) 61;
      ArrayUtils.shift(doubleArray0, (int) (short)0);
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      ArrayUtils.shift(doubleArray0, 726, (int) (byte)122, (-883));
      ArrayUtils.add((boolean[]) null, true);
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      ArrayUtils.insert(751, (short[]) null, (short[]) null);
      Double double0 = new Double(751);
      Double double1 = new Double((-151.32380896));
      Double double2 = new Double((-151.32380896));
      Double double3 = new Double(385.1192363);
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double1;
      doubleArray0[1] = double3;
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = double3;
      doubleArray0[5] = double3;
      doubleArray0[6] = double3;
      doubleArray0[7] = double1;
      doubleArray0[8] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      
      ArrayUtils.shift(doubleArray1, 751, 1073741824, 975);
      assertArrayEquals(new double[] {(-151.32380896), 385.1192363, (-151.32380896), (-151.32380896), 385.1192363, 385.1192363, 385.1192363, (-151.32380896), 751.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-834);
      doubleArray0[2] = 1747.9748;
      doubleArray0[3] = 1747.9748;
      doubleArray0[4] = (double) (-834);
      doubleArray0[5] = 1747.9748;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1747.9748, (-834));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      Object object0 = new Object();
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)434;
      intArray0[1] = (int) (short)434;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 434, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.isSorted(byteArray0);
      short[] shortArray0 = new short[0];
      ArrayUtils.addAll(shortArray0, shortArray0);
      short[] shortArray1 = new short[2];
      shortArray1[0] = (short)102;
      shortArray1[1] = (short) (-2464);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)102;
      intArray0[1] = (int) (short)102;
      intArray0[2] = (int) (short) (-2464);
      intArray0[3] = (int) (short)102;
      intArray0[4] = (int) (short) (-2464);
      intArray0[5] = (int) (short) (-2464);
      intArray0[6] = 0;
      intArray0[7] = (int) (short)102;
      intArray0[8] = (int) (short)102;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 102, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.isSameType(object0, object0);
      long[] longArray0 = new long[3];
      longArray0[0] = (-4195L);
      longArray0[1] = 0L;
      longArray0[2] = (-1680L);
      ArrayUtils.shift(longArray0, (-1), (-1191), 65);
      Double double0 = new Double(1617.580628262);
      Double[] doubleArray0 = new Double[10];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)91;
      byte[] byteArray1 = ArrayUtils.insert(3, byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-49), (byte) (-3), (byte) (-1), (byte) (-49), (byte) (-3), (byte)91, (byte)91}, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-233L);
      Double double0 = new Double(1.5);
      Double double1 = new Double(385.1192363);
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 2080374784);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-147.3135039356);
      doubleArray0[2] = (-1703.5);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1012.031157077009, (-1703.5));
      assertEquals((-1), int0);
      
      ArrayUtils.shift((Object[]) null, (-1));
      long[] longArray0 = new long[8];
      longArray0[0] = 2566L;
      longArray0[1] = (long) (-1);
      longArray0[2] = (-816L);
      longArray0[3] = (-816L);
      longArray0[4] = (-816L);
      longArray0[5] = (-816L);
      longArray0[6] = 2566L;
      longArray0[7] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertArrayEquals(new long[] {2566L, (-816L), (-816L), (-816L), (-816L), 2566L, (-1L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      Boolean boolean0 = new Boolean("Z1z!iHRtipgnCv<d@x");
      Boolean boolean1 = Boolean.valueOf(false);
      Boolean boolean2 = Boolean.FALSE;
      Boolean boolean3 = Boolean.valueOf((String) null);
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean3;
      booleanArray0[3] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shuffle(booleanArray0);
      Character.valueOf('P');
      byte[] byteArray0 = new byte[0];
      ArrayUtils.isNotEmpty((byte[]) null);
      ArrayUtils.addFirst((byte[]) null, (byte) (-29));
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-233L);
      Double double0 = new Double(1.5);
      Double double1 = new Double(385.1192363);
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 2080374784);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 3296.8079808;
      objectArray0[1] = (Object) 3296.8079808;
      ArrayUtils.isEmpty(objectArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1332.9109F);
      floatArray0[1] = (-1332.9109F);
      ArrayUtils.shift(objectArray0, 3385);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2084);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short) (-2084);
      objectArray0[1] = (Object) (short) (-2084);
      objectArray0[2] = (Object) (short) (-2084);
      objectArray0[3] = (Object) (short) (-2084);
      objectArray0[4] = (Object) (short) (-2084);
      ArrayUtils.shift(objectArray0, 3385);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3296.8079808;
      ArrayUtils.indexOf(doubleArray0, 3296.8079808, 0, 1787.75);
      ArrayUtils.removeElements((MutableInt[]) null, (MutableInt[]) null);
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '+';
      charArray0[2] = 'I';
      charArray0[3] = '3';
      charArray0[4] = 'J';
      charArray0[5] = '&';
      charArray0[6] = '^';
      charArray0[7] = 'Y';
      charArray0[8] = 'G';
      ArrayUtils.swap(charArray0, 0, 0, (-739));
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short)98;
      ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      short[] shortArray1 = new short[0];
      int[] intArray0 = new int[1];
      ArrayUtils.contains(shortArray1, (short) (-1379));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2917.31109);
      doubleArray0[1] = (double) (short)835;
      doubleArray0[2] = (-1118.890448509);
      doubleArray0[3] = (double) (short) (-1379);
      doubleArray0[4] = (double) (short)98;
      ArrayUtils.contains(doubleArray0, 1270.24242336, (-2917.31109));
      ArrayUtils.swap(intArray0, 1, (int) (short)98);
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      ArrayUtils.swap(charArray0, (-3433), (-3433));
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = '(';
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      ArrayUtils.swap(charArray0, (-739), (-1116), (-1520));
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) ';';
      floatArray0[1] = (float) ';';
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) ';';
      floatArray0[4] = (float) ';';
      floatArray0[5] = (float) (-617);
      floatArray0[6] = (float) (-1116);
      floatArray0[7] = (float) (-739);
      ArrayUtils.swap(floatArray0, (-739), (-1634), (-617));
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ArrayUtils.isSorted(shortArray0);
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.valueOf(true);
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((String) null);
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf((String) null);
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      booleanArray0[4] = boolean4;
      ArrayUtils.nullToEmpty(booleanArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-38), (-38), 0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 1.0;
      doubleArray0[2] = 1.0;
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 65, 65);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(5, booleanArray1.length);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (int) (short) (-192));
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)8;
      int[] intArray1 = new int[2];
      intArray1[0] = (int) (byte) (-86);
      intArray1[1] = (int) (byte) (-86);
      int int0 = ArrayUtils.lastIndexOf(intArray1, 540, (-86));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'R');
      assertArrayEquals(new char[] {'R', '\u0000'}, charArray1);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 1.0;
      int[] intArray0 = new int[0];
      ArrayUtils.lastIndexOf(intArray0, (-273), 8192);
      long[] longArray0 = new long[0];
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-331.401499532429);
      doubleArray0[1] = (-3548.367326967261);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-3548.367326967261));
      assertArrayEquals(new double[] {(-331.401499532429), (-3548.367326967261), (-3548.367326967261)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      ArrayUtils.reverse(charArray0, 0, 0);
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 3931.334171553, (double) 0.0F);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      char char0 = '7';
      Character character0 = Character.valueOf('7');
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = new Character(char0);
      characterArray0[2] = character1;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'7', '7', '7', '7', '7', '7', '7'}, charArray0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(704L);
      longArray0[0] = long0;
      ArrayUtils.nullToEmpty(longArray0);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.add(booleanArray0, false);
      long[] longArray1 = new long[0];
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      ArrayUtils.isNotEmpty((int[]) null);
      int[] intArray0 = ArrayUtils.add((int[]) null, 1197);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1197, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1197, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      ArrayUtils.addAll((int[]) null, (int[]) null);
      MutableInt mutableInt0 = new MutableInt((-1089));
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      ArrayUtils.addFirst((boolean[]) null, false);
      MutableInt[] mutableIntArray0 = new MutableInt[7];
      MutableInt mutableInt0 = new MutableInt(0);
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(mutableInt0);
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(mutableInt1);
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt(0);
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt(0);
      mutableIntArray0[5] = mutableInt5;
      MutableInt mutableInt6 = new MutableInt(0);
      mutableIntArray0[6] = mutableInt6;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements((MutableInt[]) null, mutableIntArray0);
      assertNull(mutableIntArray1);
  }
}
