/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:07:15 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.LongBuffer;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      long[] longArray0 = new long[6];
      longArray0[0] = (-1203L);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) '3';
      longArray0[3] = (long) '3';
      longArray0[4] = (long) '3';
      longArray0[5] = (long) 0;
      ArrayUtils.swap(longArray0, 0, 0, 0);
      assertArrayEquals(new long[] {(-1203L), 0L, 51L, 51L, 51L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)107;
      ArrayUtils.swap(byteArray0, 0, (int) (byte)107, (int) (byte)107);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte) (-89), (byte)107, (byte)107}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2L, 3612);
      assertArrayEquals(new long[] {(-1203L), 0L, 51L, 51L, 51L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((boolean[]) null, (int) (byte)107, (-2837), 466);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1157L;
      longArray0[4] = (-3727L);
      longArray0[5] = 0L;
      longArray0[6] = 1366L;
      longArray0[7] = (-1L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 1157L, (-3727L), 0L, 1366L, (-1L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1795.7886F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-3727L);
      doubleArray0[3] = (-1606.550576);
      doubleArray0[4] = (double) 1157L;
      doubleArray0[5] = (double) 0L;
      ArrayUtils.shift(doubleArray0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, (-3727.0), (-1606.550576), 1157.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      long[] longArray2 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 1157L, (-3727L), 0L, 1366L, (-1L)}, longArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {0L, 0L, 1157L, (-3727L), 0L, 1366L, (-1L)}, longArray2);
      assertEquals(8, longArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(7, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1761.3912876852476;
      doubleArray0[3] = 338.35036829782;
      doubleArray0[4] = 1926.25;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {1.5, Double.NaN, 1761.3912876852476, 338.35036829782, 1926.25}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-3453));
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1610612736;
      intArray0[1] = 76;
      intArray0[2] = 1610612736;
      intArray0[3] = 1610612736;
      intArray0[4] = (-3453);
      intArray0[5] = (-3453);
      intArray0[6] = 1610612736;
      intArray0[7] = (-3453);
      intArray0[8] = 1610612736;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1610612736, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1610612736, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 11, 3272);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = new boolean[6];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray1, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true}, booleanArray1));
      assertEquals(6, booleanArray1.length);
      assertTrue(boolean0);
      
      Byte byte0 = Byte.valueOf((byte) (-9));
      assertNotNull(byte0);
      assertEquals((byte) (-9), (byte)byte0);
      
      Character[] characterArray0 = ArrayUtils.removeElement((Character[]) null, (Object) byte0);
      assertNull(characterArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-9);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-1735));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1735, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      char[] charArray0 = new char[9];
      charArray0[1] = 'Q';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      charArray0[5] = 'Q';
      charArray0[6] = 'A';
      charArray0[8] = 'A';
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'A';
      charArray1[1] = 'A';
      charArray1[2] = 'u';
      charArray1[3] = '}';
      charArray1[4] = 'A';
      charArray1[5] = 'b';
      charArray1[6] = 'Q';
      charArray1[7] = 'Q';
      charArray1[8] = 'Q';
      ArrayUtils.reverse(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'Q', 'Q', 'Q', 'b', 'A', '}', 'u', 'A', 'A'}, charArray1);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'Q';
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {81L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'Q', 'Q', 'Q', 'b', 'A', '}', 'u', 'A', 'A'}, charArray1);
      assertEquals(18, charArray2.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertArrayEquals(new char[] {'\u0000', 'Q', '\u0000', 'Q', 'Q', 'Q', 'A', '\u0000', 'A'}, charArray0);
      assertArrayEquals(new char[] {'Q', 'Q', 'Q', 'b', 'A', '}', 'u', 'A', 'A'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray2.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(boolean1);
      
      char[] charArray3 = ArrayUtils.removeAllOccurences(charArray0, 'Q');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertNotNull(charArray3);
      assertArrayEquals(new char[] {'\u0000', 'Q', '\u0000', 'Q', 'Q', 'Q', 'A', '\u0000', 'A'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'A', '\u0000', 'A'}, charArray3);
      assertEquals(9, charArray0.length);
      assertEquals(5, charArray3.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 847L;
      longArray0[1] = 2651L;
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {847L, 2651L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {847L, 2651L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)12);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)12}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 2651L;
      ArrayUtils.shift(objectArray0, (int) (byte) (-80), 614, 9);
      assertEquals(1, objectArray0.length);
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'Y';
      doubleArray0[1] = (double) (byte) (-80);
      boolean boolean2 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {89.0, (-80.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 'Y';
      objectArray1[1] = (Object) 89.0;
      objectArray1[2] = (Object) integer0;
      objectArray1[3] = (Object) 2651L;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'Y', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.shift(intArray1, 1242, 1790, 1242);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      Object[] objectArray0 = new Object[6];
      Float float0 = new Float((float) 1);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Object object0 = ArrayUtils.get(objectArray0, 1, (Object) float0);
      assertNull(object0);
      assertEquals(6, objectArray0.length);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.toPrimitive((Object) float0);
      assertNotNull(object1);
      assertEquals(1.0F, object1);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      objectArray0[2] = null;
      Object object3 = ArrayUtils.get(objectArray0, 1, object1);
      assertNotNull(object3);
      assertEquals(6, objectArray0.length);
      assertEquals(1.0F, object3);
      
      objectArray0[3] = object3;
      Object object4 = ArrayUtils.toPrimitive(objectArray0[3]);
      assertNotNull(object4);
      assertEquals(6, objectArray0.length);
      assertEquals(1.0F, object4);
      
      objectArray0[4] = object4;
      Object object5 = ArrayUtils.get(objectArray0, (-1710));
      assertNull(object5);
      assertEquals(6, objectArray0.length);
      
      objectArray0[5] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      ArrayUtils.swap(longArray0, 0, 0, 0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      ArrayUtils.swap(byteArray0, (int) (byte) (-89), 0, (int) (byte) (-89));
      assertArrayEquals(new byte[] {(byte)107}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1788L), 0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = '8';
      charArray0[2] = 'F';
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, 0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '-';
      ArrayUtils.reverse(charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'-'}, charArray1);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Long long0 = new Long(184L);
      assertNotNull(long0);
      assertEquals(184L, (long)long0);
      
      BitSet bitSet1 = new BitSet(2);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) long0, bitSet1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-797), byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-797);
      intArray0[1] = (-797);
      intArray0[2] = (int) (short) (-1246);
      intArray0[3] = 3;
      intArray0[4] = (int) (short) (-1246);
      intArray0[5] = (int) (short) (-1246);
      intArray0[6] = (int) (short) (-1246);
      intArray0[7] = 2109;
      ArrayUtils.shift(intArray0, 1569);
      assertArrayEquals(new int[] {2109, (-797), (-797), (-1246), 3, (-1246), (-1246), (-1246)}, intArray0);
      assertEquals(8, intArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2109;
      floatArray0[1] = (float) (-1246);
      floatArray0[2] = 2323.094F;
      floatArray0[3] = (float) 1569;
      floatArray0[4] = (float) (short) (-1246);
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2109.0F, (-1246.0F), 2109.0F, (-1246.0F), 2323.094F, 1569.0F, (-1246.0F), 2323.094F, 1569.0F, (-1246.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2109.0F, (-1246.0F), 2323.094F, 1569.0F, (-1246.0F)}, floatArray0, 0.01F);
      assertEquals(10, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (byte) (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2109, (-797), (-797), (-1246), 3, (-1246), (-1246), (-1246)}, intArray0);
      assertArrayEquals(new int[] {(-1), 2109, (-797), (-797), (-1246), 3, (-1246), (-1246), (-1246)}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.shift(booleanArray0, 2133521577, 567, 2142247063);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'O';
      charArray0[4] = 'b';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', 'b', 'b', 'O', 'b'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray1, 'b');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'\u0000', 'b', 'b', 'O', 'b'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = (Character) '\u0000';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000'}, charArray2);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      char[] charArray3 = ArrayUtils.subarray(charArray1, (int) characterArray0[0], (int) 'O');
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray1);
      assertNotNull(charArray3);
      assertArrayEquals(new char[] {'\u0000', 'b', 'b', 'O', 'b'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray3);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(1, characterArray0.length);
      assertEquals(0, charArray3.length);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray4 = new char[6];
      assertFalse(charArray4.equals((Object)charArray2));
      assertFalse(charArray4.equals((Object)charArray1));
      assertFalse(charArray4.equals((Object)charArray0));
      assertFalse(charArray4.equals((Object)charArray3));
      
      charArray4[0] = 'b';
      charArray4[1] = 'O';
      charArray4[2] = (char) characterArray0[0];
      charArray4[3] = 'b';
      charArray4[4] = 'b';
      charArray4[5] = 'O';
      int int0 = ArrayUtils.indexOf(charArray4, 'b', (-2146283264));
      assertNotSame(charArray4, charArray2);
      assertNotSame(charArray4, charArray1);
      assertNotSame(charArray4, charArray0);
      assertNotSame(charArray4, charArray3);
      assertArrayEquals(new char[] {'b', 'O', '\u0000', 'b', 'b', 'O'}, charArray4);
      assertEquals(6, charArray4.length);
      assertFalse(charArray4.equals((Object)charArray2));
      assertFalse(charArray4.equals((Object)charArray1));
      assertFalse(charArray4.equals((Object)charArray0));
      assertFalse(charArray4.equals((Object)charArray3));
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'O';
      doubleArray0[1] = (double) (-2146283264);
      doubleArray0[2] = (double) (-2146283264);
      doubleArray0[3] = (-2348.8083958);
      doubleArray0[4] = (double) 'b';
      doubleArray0[5] = (double) 'b';
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-2196.0));
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {79.0, (-2.146283264E9), (-2.146283264E9), (-2348.8083958), 98.0, 98.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)9;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-71), (byte) (-119), (byte)9}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-71), (byte) (-119), (byte)9, (byte) (-92), (byte) (-71), (byte) (-119), (byte)9}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)9;
      objectArray0[1] = (Object) (byte) (-119);
      objectArray0[2] = (Object) (byte)9;
      objectArray0[3] = (Object) (byte) (-71);
      objectArray0[4] = (Object) (byte) (-92);
      objectArray0[5] = (Object) (byte) (-119);
      objectArray0[6] = (Object) (byte) (-119);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[3], 18688);
      assertEquals(7, objectArray0.length);
      assertEquals(3, int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-71);
      longArray0[1] = (long) 3;
      longArray0[2] = (long) (byte) (-119);
      longArray0[3] = (long) (byte) (-92);
      longArray0[4] = (long) (byte)9;
      longArray0[5] = (long) (byte) (-71);
      longArray0[6] = (long) (byte)9;
      longArray0[7] = 83L;
      longArray0[8] = (long) (byte) (-92);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, (-71L), 3L, (-119L), (-92L), 9L, (-71L), 9L, 83L, (-92L)}, longArray1);
      assertArrayEquals(new long[] {(-71L), 3L, (-119L), (-92L), 9L, (-71L), 9L, 83L, (-92L)}, longArray0);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-5332.0107F);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 10;
      floatArray0[3] = (float) 52;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (float) 10;
      floatArray0[6] = (float) 52;
      floatArray0[7] = (float) 52;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 70);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-5332.0107F), 0.0F, 10.0F, 52.0F, Float.NaN, 10.0F, 52.0F, 52.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-5332.0107F), 0.0F, 10.0F, 52.0F, Float.NaN, 10.0F, 52.0F, 52.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '-');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray((char[]) null, (-495), (-1));
      assertNull(charArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 52.0F;
      doubleArray0[1] = (double) 10.0F;
      doubleArray0[2] = (-2731.46624156198);
      doubleArray0[3] = (-1038.4566177705);
      doubleArray0[4] = (double) Float.NaN;
      doubleArray0[5] = (double) (-5332.0107F);
      doubleArray0[6] = (double) (-495);
      doubleArray0[7] = (double) 52.0F;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 23.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {52.0, 10.0, (-2731.46624156198), (-1038.4566177705), Double.NaN, (-5332.0107421875), (-495.0), 52.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {52.0, 10.0, (-2731.46624156198), (-1038.4566177705), Double.NaN, (-5332.0107421875), (-495.0), 52.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)443;
      shortArray0[1] = (short) (-320);
      shortArray0[2] = (short)65;
      shortArray0[3] = (short)669;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)4483;
      shortArray0[6] = (short)900;
      shortArray0[7] = (short)628;
      shortArray0[8] = (short)2751;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)628);
      assertArrayEquals(new short[] {(short)443, (short) (-320), (short)65, (short)669, (short) (-1), (short)4483, (short)900, (short)628, (short)2751}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 212.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)23;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-119), (byte)15, (byte)45, (byte)23, (byte)0, (byte)4, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-119));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-119), (byte)15, (byte)45, (byte)23, (byte)0, (byte)4, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)45, (byte)23, (byte)0, (byte)4, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, Integer.MAX_VALUE, (int) (byte)4, (int) (byte)45);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (int) (byte)0, (double) (byte)23);
      assertArrayEquals(new double[] {212.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, int0);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)45, 76);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.get(objectArray0, 874, object0);
      assertNotSame(object0, object1);
      assertSame(object0, object2);
      assertNotSame(object2, object1);
      assertSame(object2, object0);
      assertNotNull(object2);
      assertEquals(6, objectArray0.length);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1124.1666));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1124.1666), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1));
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((-1.0), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(3176.7543);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals(3176.7543, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      int int0 = (-1904);
      Double double5 = ArrayUtils.get(doubleArray0, (-1904));
      assertNull(double5);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 2058);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 2058;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[2] = (double) 2058;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.0), (-1.0), 2058.0, 2058.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = ArrayUtils.get(objectArray0, (-278));
      assertNull(object0);
      assertEquals(8, objectArray0.length);
      
      objectArray0[0] = null;
      int[] intArray0 = new int[6];
      intArray0[0] = (-278);
      intArray0[1] = (-278);
      intArray0[2] = (-278);
      intArray0[3] = (-278);
      intArray0[4] = (-278);
      intArray0[5] = (-278);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -278, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2325);
      intArray0[1] = 2;
      intArray0[2] = 42;
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-79));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[4];
      ArrayUtils.swap(charArray0, (int) (byte)0, (int) (byte)0, 84);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)59, 2827);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 13L, 2);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (-1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)9);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)18}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('1');
      assertNotNull(character0);
      assertEquals('1', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('1');
      assertNotNull(character1);
      assertEquals('1', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'1', '1'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)18}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)18;
      shortArray0[1] = (short) (byte)9;
      shortArray0[2] = (short) (byte)9;
      shortArray0[3] = (short) (byte)9;
      shortArray0[4] = (short) (byte)18;
      shortArray0[5] = (short) (byte)18;
      shortArray0[6] = (short) (byte)18;
      shortArray0[7] = (short) (byte)18;
      ArrayUtils.shift(shortArray0, 207, 270, 207);
      assertArrayEquals(new short[] {(short)18, (short)9, (short)9, (short)9, (short)18, (short)18, (short)18, (short)18}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      assertTrue(integer0.equals((Object)int0));
      
      MutableInt mutableInt1 = new MutableInt(0);
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'O';
      charArray0[2] = 'b';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'b', 'O', 'b'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray1, 'k');
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'b', 'O', 'b'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = new char[1];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 'O';
      char[] charArray3 = ArrayUtils.removeElement(charArray2, 'b');
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertNotNull(charArray3);
      assertArrayEquals(new char[] {'O'}, charArray2);
      assertArrayEquals(new char[] {'O'}, charArray3);
      assertEquals(1, charArray2.length);
      assertEquals(1, charArray3.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = 0.1;
      doubleArray0[3] = (double) 'O';
      doubleArray0[4] = (double) 'b';
      doubleArray0[5] = (double) 'O';
      ArrayUtils.swap(doubleArray0, 6, 0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.1, 79.0, 98.0, 79.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-724L);
      longArray0[1] = 2067L;
      longArray0[2] = (-3860L);
      longArray0[3] = 66L;
      longArray0[4] = (-1788L);
      longArray0[5] = (-156L);
      longArray0[6] = 185L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 2067L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-724L), 2067L, (-3860L), 66L, (-1788L), (-156L), 185L}, longArray0);
      assertArrayEquals(new long[] {2067L, (-724L), 2067L, (-3860L), 66L, (-1788L), (-156L), 185L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-510));
      assertNotNull(integer0);
      assertEquals((-510), (int)integer0);
      
      integerArray0[0] = integer0;
      Object object0 = ArrayUtils.get((Object[]) integerArray0, (-3050));
      assertNull(object0);
      assertEquals(8, integerArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, stringArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 50);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-510), 50, 50, 50, 50, 50, 50, 50}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)98;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)12, (byte)83, (byte)11, (byte)18, (byte)98}, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)83, (byte)11, (byte)18, (byte)98}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      Float[] floatArray0 = new Float[8];
      Float float0 = Float.valueOf((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1913.63F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1913.63F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1.0F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-776.0309F));
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-776.0309F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) floatArray0[1]);
      assertNotNull(float4);
      assertEquals(8, floatArray0.length);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((-1913.63F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-1913.63F));
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals((-1913.63F), (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((-776.0309F));
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((-776.0309F), (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float(1034.0F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertEquals(1034.0F, (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[6]);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1913.63F), 1.0F, (-776.0309F), (-1913.63F), (-1913.63F), (-776.0309F), 1034.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[11];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 9);
      assertEquals(11, booleanArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "L({nAced?Fe~";
      stringArray0[1] = "BjL]_DI.UdZ'";
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1267);
      shortArray0[1] = (short) (-1817);
      shortArray0[2] = (short)648;
      shortArray0[3] = (short)182;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 874, (int) (short)182);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1267), (short) (-1817), (short)648, (short)182}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.swap(booleanArray0, 9, 9, 1889);
      assertEquals(11, booleanArray0.length);
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray0, (short)115);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-1267), (short) (-1817), (short)648, (short)182}, shortArray0);
      assertArrayEquals(new short[] {(short)115, (short) (-1267), (short) (-1817), (short)648, (short)182}, shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      int int1 = ArrayUtils.hashCode((Object) "L({nAced?Fe~");
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-3356), (int) (short) (-3356));
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      short short0 = (short) (-244);
      int int1 = 3;
      ArrayUtils.shift(shortArray1, (int) (short) (-244), 3, 3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Double double0 = new Double(1.5);
      assertNotNull(double0);
      assertEquals(1.5, (double)double0, 0.01);
      
      BitSet bitSet1 = (BitSet)ArrayUtils.toPrimitive((Object) bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotSame(shortArray0, shortArray1);
      assertSame(bitSet0, bitSet1);
      assertSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int2 = 3270;
      ArrayUtils.shift(shortArray1, 3270);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(1996.0F);
      assertNotNull(float0);
      assertEquals(1996.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      try { 
        Float.valueOf("java.util.stream.LongPipeline$Head");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)104;
      ArrayUtils.shift(byteArray0, 154);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)104, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), (-1540));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)104, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Short short0 = new Short((byte)91);
      assertNotNull(short0);
      assertEquals((short)91, (short)short0);
      
      Short short1 = new Short((short)1063);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)1063, (short)short1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)6);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)104, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals((-1), int0);
      
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(11, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2047);
      shortArray0[1] = (short) (-3373);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short)45;
      shortArray0[7] = (short) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 2720, (int) (byte)0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Long[] longArray0 = new Long[8];
      Long long0 = Long.getLong(")HYg/(kZ}RF+zGI", (-3495L));
      assertNotNull(long0);
      assertEquals((-3495L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-2034L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-2034L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((short)0);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(0L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = Long.getLong(")HYg/(kZ}RF+zGI");
      assertNull(long3);
      
      longArray0[3] = null;
      Long long4 = new Long((long) longArray0[1]);
      assertNotNull(long4);
      assertEquals(8, longArray0.length);
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertEquals((-2034L), (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((-3495L));
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long0));
      assertEquals((-3495L), (long)long5);
      
      longArray0[5] = long5;
      Long long6 = Long.getLong(")HYg/(kZ}RF+zGI", (Long) null);
      assertNull(long6);
      
      longArray0[6] = null;
      Long long7 = new Long((byte)0);
      assertNotNull(long7);
      assertFalse(long7.equals((Object)long5));
      assertTrue(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long0));
      assertEquals(0L, (long)long7);
      
      longArray0[7] = long7;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 2107.2996F;
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-26));
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)126;
      shortArray0[1] = (short) (byte)126;
      shortArray0[2] = (short) (byte) (-26);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2147095367), 14);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)126, (short)126, (short) (-26)}, shortArray0);
      assertArrayEquals(new short[] {(short)126, (short)126, (short) (-26)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.swap(booleanArray0, (-2145585409), (-67), 14);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'a');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) characterArray0, (Object[]) characterArray0);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean boolean2 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1174.85));
      assertNotNull(double0);
      assertEquals((-1174.85), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (-15243);
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (-15243);
      shortArray0[4] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (byte)2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short) (-15243), (short)2, (short) (-15243), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-15243), (short) (-15243)}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (short) (-15243);
      intArray0[2] = (int) (short)2;
      intArray0[3] = (int) (short)2;
      intArray0[4] = (int) (short) (-15243);
      intArray0[5] = (int) (short) (-15243);
      intArray0[6] = (int) (short)2;
      intArray0[7] = (-1);
      intArray0[8] = 8;
      ArrayUtils.swap(intArray0, (int) (short) (-15243), (-15243), 107);
      assertArrayEquals(new int[] {2, (-15243), 2, 2, (-15243), (-15243), 2, (-1), 8}, intArray0);
      assertEquals(9, intArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (byte)0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) (byte)0;
      longArray0[8] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 2146304359, (-1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = 2159.59F;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      ArrayUtils.shift(floatArray0, (-3022));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 2159.59F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      long[] longArray2 = ArrayUtils.removeAll(longArray0, intArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray2.length);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      int[] intArray3 = ArrayUtils.removeAll(intArray0, intArray2);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, intArray2.length);
      assertEquals(5, intArray3.length);
      assertEquals(5, intArray0.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1614.52237040981);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1614.52237040981);
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 1034);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1614.52237040981), (-1.0), (-1614.52237040981), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1614.52237040981), (-1.0), (-1614.52237040981), 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1034;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 1034, 0);
      assertArrayEquals(new float[] {1034.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, int0);
      
      Short[] shortArray0 = new Short[7];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)0, (short)short1);
      
      doubleArray0[0] = (double) (short)short1;
      Short short2 = new Short((short)0);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)0, (short)short2);
      
      shortArray0[1] = short2;
      shortArray0[2] = (Short) short0;
      Short short3 = new Short((short)5);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short)5, (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short(short0);
      assertNotNull(short4);
      assertTrue(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short1));
      assertEquals((short)0, (short)short4);
      
      shortArray0[4] = (Short) short0;
      Short short5 = new Short(short0);
      assertNotNull(short5);
      assertTrue(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short4));
      assertEquals((short)0, (short)short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)0);
      assertNotNull(short6);
      assertTrue(short6.equals((Object)short4));
      assertTrue(short6.equals((Object)short1));
      assertTrue(short6.equals((Object)short0));
      assertTrue(short6.equals((Object)short2));
      assertTrue(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short3));
      assertEquals((short)0, (short)short6);
      
      shortArray0[6] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)5, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray0, (short) (-1));
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)0, (short)5, (short)0, (short)0, (short)0}, shortArray2);
      assertEquals(7, shortArray2.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 3);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3.0, 3.0);
      assertEquals(5, bitSet0.length());
      assertEquals(5, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {3.0, 3.0, 3.0, 3.0, 3.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf((float[]) null, 1011.5F, 3);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 3.0;
      objectArray0[1] = (Object) bitSet0;
      objectArray0[2] = (Object) 3.0;
      objectArray0[3] = (Object) 3.0;
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) 3.0;
      objectArray0[6] = (Object) 3.0;
      objectArray0[7] = (Object) 3.0;
      ArrayUtils.swap(objectArray0, (-1), (-1), (-1));
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) ':';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.reverse(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      
      Object[] objectArray0 = new Object[13];
      objectArray0[0] = (Object) (-1.0F);
      objectArray0[1] = (Object) (-1.0F);
      objectArray0[2] = (Object) (-1L);
      objectArray0[3] = (Object) (-1L);
      objectArray0[4] = (Object) (-1.0F);
      objectArray0[5] = (Object) ':';
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "Array and element cannot both be null");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      assertEquals(13, objectArray0.length);
      
      Double double0 = new Double(18.0);
      assertNotNull(double0);
      assertEquals(18.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      Double double1 = new Double((double) doubleArray0[1]);
      assertNotNull(double1);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(18.0, (double)double1, 0.01);
      
      doubleArray0[6] = double1;
      Double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) doubleArray0[3];
      doubleArray2[3] = (double) (-1L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray2, 1.0, 0);
      assertArrayEquals(new double[] {0.0, (-1.0), 18.0, (-1.0)}, doubleArray2, 0.01);
      assertEquals(4, doubleArray2.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 36);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 36;
      ArrayUtils.shift(intArray0, 36);
      assertArrayEquals(new int[] {2, 36}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray1 = ArrayUtils.insert((-1), floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 2058);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 128;
      intArray0[3] = 0;
      ArrayUtils.shift(intArray0, (-332));
      assertArrayEquals(new int[] {(-1), (-1), 128, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-1250), 4996);
      assertNull(charArray0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 1183.7454);
      assertNull(doubleArray0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) 128;
      integerArray0[2] = (Integer) (-1);
      integerArray0[3] = (Integer) (-1);
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) (-1);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 128);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), 128, (-1), (-1), 0, (-1)}, intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(6, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-40));
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2249;
      shortArray0[1] = (short) (byte) (-40);
      shortArray0[2] = (short) (byte) (-40);
      shortArray0[3] = (short)5;
      shortArray0[4] = (short) (byte) (-40);
      shortArray0[5] = (short) (byte) (-40);
      shortArray0[6] = (short) (byte) (-40);
      shortArray0[7] = (short) (byte) (-40);
      shortArray0[8] = (short) (byte) (-40);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2060, 1277);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2249, (short) (-40), (short) (-40), (short)5, (short) (-40), (short) (-40), (short) (-40), (short) (-40), (short) (-40)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, (-1663), 2, (-67));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[6];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray2));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = 0.0F;
      Short short0 = new Short((short) (-492));
      assertNotNull(short0);
      assertEquals((short) (-492), (short)short0);
      
      Short[] shortArray0 = new Short[0];
      Short short1 = new Short((short) (-492));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-492), (short)short1);
      
      Short[] shortArray1 = ArrayUtils.add(shortArray0, short1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertTrue(short1.equals((Object)short0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Long long0 = new Long((-4199L));
      assertNotNull(long0);
      assertEquals((-4199L), (long)long0);
      
      int int0 = ArrayUtils.indexOf((Object[]) shortArray1, (Object) long0, (int) (short) (-492));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(short1.equals((Object)short0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals((-1), int0);
      
      short[] shortArray2 = new short[7];
      shortArray2[0] = (short) (-492);
      shortArray2[1] = (short) (-492);
      shortArray2[2] = (short) (-492);
      shortArray2[3] = (short) (-1);
      shortArray2[4] = (short) (-492);
      int int1 = ArrayUtils.lastIndexOf((char[]) null, ',', 2);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.shift((char[]) null, 8);
      int int2 = ArrayUtils.lastIndexOf((int[]) null, (-1603), 8);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((short) (-492));
      assertNotNull(double0);
      assertEquals((-492.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(5800.539);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(5800.539, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-4199L));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-492.0), 5800.539}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 4, 4);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 4;
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 4;
      longArray1[1] = (long) 4;
      longArray1[2] = 0L;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 4;
      longArray2[2] = (long) 4;
      long[] longArray3 = ArrayUtils.addAll(longArray1, longArray2);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {4L, 4L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 4L, 4L}, longArray2);
      assertArrayEquals(new long[] {4L, 4L, 0L, 0L, 4L, 4L}, longArray3);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      assertEquals(6, longArray3.length);
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-221), (-452));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-85.942F);
      floatArray0[1] = (-1005.773F);
      floatArray0[2] = 1560.118F;
      floatArray0[3] = 1280.906F;
      floatArray0[4] = (-1416.8F);
      floatArray0[5] = (-3988.0F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1280.906F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-85.942F), (-1005.773F), 1560.118F, 1280.906F, (-1416.8F), (-3988.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-85.942F), (-1005.773F), 1560.118F, 1280.906F, (-1416.8F), (-3988.0F), 1280.906F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.addFirst(stringArray0, "', has a length less than 2");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-2152));
      assertNotNull(integer0);
      assertEquals((-2152), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2152));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2152), (int)integer1);
      
      floatArray0[1] = (float) (int)integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertNotNull(integer2);
      assertEquals(3, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals((-2152), (int)integer2);
      
      integerArray0[2] = integer2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-639), 3020);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(2147483647L);
      assertNotNull(long0);
      assertEquals(2147483647L, (long)long0);
      
      Long long1 = Long.getLong(", '", long0);
      assertNotNull(long1);
      assertEquals(2147483647L, (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long((-639));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-639L), (long)long2);
      
      longArray0[1] = long2;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 3020, 11);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-639);
      doubleArray0[1] = (double) (long)longArray0[1];
      doubleArray0[2] = (double) (long)longArray0[0];
      doubleArray0[3] = (double) 2147483647L;
      doubleArray0[4] = (double) (-639);
      doubleArray0[5] = (-516.806694);
      doubleArray0[6] = (double) (long)longArray0[1];
      doubleArray0[7] = (double) (long)longArray0[0];
      doubleArray0[8] = (double) 11;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-723), 1024.2811);
      assertArrayEquals(new double[] {(-639.0), (-639.0), 2.147483647E9, 2.147483647E9, (-639.0), (-516.806694), (-639.0), 2.147483647E9, 11.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean boolean0 = false;
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1798);
      floatArray0[1] = (float) (-1798);
      floatArray0[2] = (float) (-1798);
      floatArray0[3] = (float) (-1798);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1798.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1798.0F), (-1798.0F), (-1798.0F), (-1798.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1798.0F), (-1798.0F), (-1798.0F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      
      Boolean boolean4 = Boolean.valueOf(true);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4);
      
      Boolean[] booleanArray1 = new Boolean[7];
      booleanArray1[0] = boolean1;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = boolean1;
      booleanArray1[3] = boolean1;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, boolean0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, false}, booleanArray2));
      assertEquals(7, booleanArray2.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-4611.1F), (-1907));
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1798.0F), (-1798.0F), (-1798.0F), (-1798.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals((-1), int0);
      
      ArrayUtils.swap(booleanArray2, 98, (-1907), (-1798));
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, false}, booleanArray2));
      assertEquals(7, booleanArray2.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String string0 = ArrayUtils.toString((Object) boolean0);
      assertNotNull(string0);
      assertEquals("true", string0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      short[] shortArray0 = new short[0];
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-323), 6);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 6;
      floatArray0[1] = (float) (-3088L);
      floatArray0[2] = (float) 4114;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 4114;
      floatArray0[5] = (float) 6;
      floatArray0[6] = (float) 0;
      ArrayUtils.reverse(floatArray0, 0, 4114);
      assertArrayEquals(new float[] {0.0F, 6.0F, 4114.0F, 0.0F, 4114.0F, (-3088.0F), 6.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      boolean[] booleanArray1 = new boolean[1];
      booleanArray1[0] = (boolean) boolean0;
      boolean[] booleanArray2 = ArrayUtils.insert(1, booleanArray1, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray2));
      assertEquals(1, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean boolean2 = ArrayUtils.contains(floatArray0, 342.0F);
      assertArrayEquals(new float[] {0.0F, 6.0F, 4114.0F, 0.0F, 4114.0F, (-3088.0F), 6.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      Short short0 = new Short((short) (-802));
      assertNotNull(short0);
      assertEquals((short) (-802), (short)short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)91;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)98, (byte)91, (byte)91, (byte)91}, byteArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)98, (byte)91, (byte)91, (byte)91}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '+', (int) (byte)91);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)91;
      floatArray0[1] = (float) (byte)91;
      floatArray0[2] = (float) (byte)98;
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, (float) (byte)98, 4025);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertArrayEquals(new float[] {91.0F, 91.0F, 98.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(529L);
      assertNotNull(long0);
      assertEquals(529L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(529L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(529L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((short) (-802));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-802L), (long)long2);
      
      longArray0[2] = long2;
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyLong() , anyLong());
      boolean boolean0 = ArrayUtils.isSorted(longArray0, comparator0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-4935), 191);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 191;
      Float float0 = new Float(4023.158F);
      assertNotNull(float0);
      assertEquals(4023.158F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      Float float1 = new Float((float) (short) (-4935));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-4935.0F), (float)float1, 0.01F);
      
      floatArray0[2] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertNotNull(float2);
      assertEquals(4, floatArray0.length);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(4023.158F, (float)float2, 0.01F);
      
      floatArray0[3] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {4023.158F, 4023.158F, (-4935.0F), 4023.158F}, floatArray1, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray1, (Object) floatArray0[0]);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(1, booleanArray1.length);
      assertEquals(4, floatArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray1);
      
      short[] shortArray1 = ArrayUtils.insert(191, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.reverse(booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      Character character0 = new Character('c');
      assertNotNull(character0);
      assertEquals('c', (char)character0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1105.385;
      doubleArray0[1] = (-119.0);
      doubleArray0[2] = (double) (byte) (-123);
      doubleArray0[3] = (double) (byte) (-123);
      doubleArray0[4] = 0.7;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (byte) (-123);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1164.06545), (-1), 0.1);
      assertArrayEquals(new double[] {1105.385, (-119.0), (-123.0), (-123.0), 0.7, 0.0, (-1.0), (-123.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength("Z58U5b=}>\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-119);
      floatArray0[2] = (float) (byte) (-117);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-102));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)120;
      shortArray0[1] = (short) (byte) (-117);
      shortArray0[2] = (short) (byte) (-119);
      shortArray0[3] = (short) (byte) (-119);
      shortArray0[4] = (short) (byte) (-119);
      shortArray0[5] = (short) (byte) (-40);
      shortArray0[6] = (short) (byte) (-102);
      shortArray0[7] = (short) (byte) (-40);
      floatArray0[2] = (float) (byte) (-117);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 879, (int) (short) (-119));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)120, (short) (-117), (short) (-119), (short) (-119), (short) (-119), (short) (-40), (short) (-102), (short) (-40), (short)0}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 5, (-2099), (int) (short) (-40));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Short short0 = new Short((short)45);
      assertNotNull(short0);
      assertEquals((short)45, (short)short0);
      
      String string0 = ArrayUtils.toString((Object) short0);
      assertNotNull(string0);
      assertEquals("45", string0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)0, (-190));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)120, (short) (-117), (short) (-119), (short) (-119), (short) (-119), (short) (-40), (short) (-102), (short) (-40), (short)0}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)13461;
      shortArray0[3] = (short) (-543);
      shortArray0[2] = (short)13461;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1230;
      longArray0[1] = (long) 1230;
      longArray0[2] = 1929L;
      longArray0[3] = (long) 1230;
      longArray0[4] = (long) 1230;
      longArray0[5] = (long) (short) (-2312);
      longArray0[6] = (long) (-5);
      longArray0[7] = (long) (short) (-543);
      ArrayUtils.shift(longArray0, 2134, (int) (short)13461, (int) (short)13461);
      assertArrayEquals(new long[] {1230L, 1230L, 1929L, 1230L, 1230L, (-2312L), (-5L), (-543L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-543);
      doubleArray0[1] = (double) 1929L;
      doubleArray0[2] = (double) (-5);
      doubleArray0[3] = (double) (short) (-543);
      doubleArray0[4] = 862.2149448660688;
      ArrayUtils.swap(doubleArray0, (int) (short) (-543), (int) (short)13461);
      assertArrayEquals(new double[] {(-543.0), 1929.0, (-5.0), (-543.0), 862.2149448660688}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-543.0);
      objectArray0[1] = (Object) 1230L;
      ArrayUtils.shift(objectArray0, 2134);
      assertEquals(2, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (int) (short)13461);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, 2, 2134, (-3190));
      assertArrayEquals(new long[] {1230L, 1230L, (-5L), (-543L), 1929L, 1230L, 1230L, (-2312L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      ArrayUtils.reverse(longArray0, 52, 2372);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)2414);
      assertNotNull(short0);
      assertEquals((short)2414, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertNotNull(short1);
      assertEquals(2, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)2414, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = ArrayUtils.get(shortArray0, (int) shortArray0[1]);
      assertNull(short2);
      assertEquals(2, shortArray0.length);
      
      long[] longArray2 = ArrayUtils.removeAllOccurences((long[]) null, (-2740L));
      assertNull(longArray2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)2414;
      intArray0[1] = 2372;
      intArray0[2] = (int) (short)shortArray0[0];
      intArray0[3] = 2372;
      intArray0[4] = (int) (short)shortArray0[1];
      intArray0[5] = 2372;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2414, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2206;
      shortArray0[1] = (short)4239;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), (int) (short)4239);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2206, (short)4239}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)2206;
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)41, (int) (short) (-1));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)2206, (short)4239}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)17);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2206, (short)4239}, shortArray0);
      assertArrayEquals(new short[] {(short)17, (short)2206, (short)4239}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)1519, (-102));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertArrayEquals(new short[] {(short)2206, (short)4239}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      ArrayUtils.reverse((float[]) null, (-102), 1131);
      boolean[] booleanArray0 = ArrayUtils.insert((int) (short)1519, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-1857L);
      longArray0[1] = (long) 1131;
      ArrayUtils.shift(longArray0, (-1946), (int) (short)4239, 1131);
      assertArrayEquals(new long[] {1131L, (-1857L)}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)120;
      byteArray0[8] = (byte) (-40);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-40));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)98, (byte) (-102), (byte)23, (byte) (-54), (byte)126, (byte)120, (byte)120, (byte) (-40)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)98, (byte) (-102), (byte)23, (byte) (-54), (byte)126, (byte)120, (byte)120}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-903), (-935));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, (-67), (int) (byte) (-102), (int) (byte) (-102));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) boolean0, (int) (byte)126);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      ArrayUtils.swap(longArray0, 0, 0, 0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)107;
      objectArray0[1] = (Object) (byte)107;
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) 0.0F;
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) (byte)107;
      objectArray0[6] = (Object) 0.0F;
      objectArray0[7] = (Object) 0L;
      Double double0 = new Double(409.0924235051861);
      assertNotNull(double0);
      assertEquals(409.0924235051861, (double)double0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) double0, 104);
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)120;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)23;
      floatArray0[1] = (float) (byte) (-1);
      ArrayUtils.swap(floatArray0, (int) (byte)23, (int) (byte)98, 9);
      assertArrayEquals(new float[] {23.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = new long[14];
      longArray0[0] = (long) (byte)126;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (byte)120);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(14, longArray0.length);
      assertEquals(15, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      MutableInt mutableInt0 = new MutableInt(49);
      assertEquals("49", mutableInt0.toString());
      assertEquals(49.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)49, mutableInt0.byteValue());
      assertEquals(49.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(49, (int)mutableInt0.toInteger());
      assertEquals(49, (int)mutableInt0.getValue());
      assertEquals(49L, mutableInt0.longValue());
      assertEquals((short)49, mutableInt0.shortValue());
      assertEquals(49, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((Number) (byte) (-54));
      assertEquals((-54.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((byte) (-54), mutableInt1.byteValue());
      assertEquals((-54.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((short) (-54), mutableInt1.shortValue());
      assertEquals((-54L), mutableInt1.longValue());
      assertEquals((-54), (int)mutableInt1.toInteger());
      assertEquals((-54), (int)mutableInt1.getValue());
      assertEquals("-54", mutableInt1.toString());
      assertEquals((-54), mutableInt1.intValue());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt((Number) (byte) (-102));
      assertEquals((-102), (int)mutableInt2.toInteger());
      assertEquals((byte) (-102), mutableInt2.byteValue());
      assertEquals((-102.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((short) (-102), mutableInt2.shortValue());
      assertEquals((-102L), mutableInt2.longValue());
      assertEquals("-102", mutableInt2.toString());
      assertEquals((-102.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-102), mutableInt2.intValue());
      assertEquals((-102), (int)mutableInt2.getValue());
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      
      MutableInt[] mutableIntArray0 = new MutableInt[5];
      mutableIntArray0[0] = mutableInt0;
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt3 = new MutableInt((int) (byte)120);
      assertEquals((short)120, mutableInt3.shortValue());
      assertEquals(120.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(120, mutableInt3.intValue());
      assertEquals(120L, mutableInt3.longValue());
      assertEquals((byte)120, mutableInt3.byteValue());
      assertEquals(120.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(120, (int)mutableInt3.toInteger());
      assertEquals(120, (int)mutableInt3.getValue());
      assertEquals("120", mutableInt3.toString());
      assertNotNull(mutableInt3);
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      
      mutableIntArray0[2] = mutableInt3;
      mutableIntArray0[3] = mutableInt2;
      MutableInt mutableInt4 = new MutableInt(mutableInt0);
      assertEquals((byte)49, mutableInt4.byteValue());
      assertEquals(49, (int)mutableInt4.getValue());
      assertEquals(49, (int)mutableInt4.toInteger());
      assertEquals((short)49, mutableInt4.shortValue());
      assertEquals(49.0, mutableInt4.doubleValue(), 0.01);
      assertEquals(49.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals("49", mutableInt4.toString());
      assertEquals(49L, mutableInt4.longValue());
      assertEquals(49, mutableInt4.intValue());
      assertEquals("49", mutableInt0.toString());
      assertEquals(49.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)49, mutableInt0.byteValue());
      assertEquals(49.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(49, (int)mutableInt0.toInteger());
      assertEquals(49, (int)mutableInt0.getValue());
      assertEquals(49L, mutableInt0.longValue());
      assertEquals((short)49, mutableInt0.shortValue());
      assertEquals(49, mutableInt0.intValue());
      assertNotNull(mutableInt4);
      assertTrue(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertEquals(5, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)21;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)21;
      intArray0[2] = (int) (byte)21;
      intArray0[3] = (int) (byte)97;
      intArray0[4] = (int) (byte)97;
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 0, 191, 21);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse(byteArray0, 114, (-490));
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 21;
      Object object0 = ArrayUtils.get(objectArray0, 191);
      assertNull(object0);
      assertEquals(6, objectArray0.length);
      
      objectArray0[2] = (Object) (byte)21;
      objectArray0[3] = (Object) (byte)97;
      objectArray0[4] = (Object) (byte)97;
      objectArray0[5] = (Object) (byte)21;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 108);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 21;
      longArray1[1] = (long) 21;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(1);
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      ArrayUtils.hashCode((Object) mutableInt0);
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, mutableInt0.intValue());
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)66, 0);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-33), (byte)77, (byte)66, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[11];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 9);
      assertEquals(11, booleanArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "L({nAced?Fe~";
      stringArray0[1] = "BjL]_DI.UdZ'";
      stringArray0[2] = "L({nAced?Fe~";
      stringArray0[3] = "L({nAced?Fe~";
      stringArray0[4] = "BjL]_DI.UdZ'";
      stringArray0[5] = "BjL]_DI.UdZ'";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (-1), (-2313));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(11, bitSet0.length());
      assertEquals(11, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(11, booleanArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 9;
      floatArray0[1] = (float) (-2313);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 9;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 9;
      floatArray0[6] = (float) (-2313);
      floatArray0[7] = (float) 9;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {9.0F, (-2313.0F), (-1.0F), 9.0F, (-1.0F), 9.0F, (-2313.0F), 9.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, 9, 10);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = ',';
      charArray0[2] = 'x';
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((int) (byte)0, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift(doubleArray0, (-492), (-807), 21);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Sp(8S<0;Yy%F";
      stringArray0[1] = "Sp(8S<0;Yy%F";
      stringArray0[2] = ";S3";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 2146562771, (-24));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.shift(booleanArray1, 7361);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray2.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      ArrayUtils.reverse((double[]) null);
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 4);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 409.0924235051861);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[0];
      Long long0 = new Long(14);
      assertNotNull(long0);
      assertEquals(14L, (long)long0);
      
      Long long1 = new Long((-238L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-238L), (long)long1);
      
      Long[] longArray1 = new Long[3];
      doubleArray0[0] = (double) (long)long1;
      longArray1[1] = long1;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-793.42));
      assertArrayEquals(new double[] {(-238.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(charArray0, 14);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-238.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-238.0), 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4416;
      ArrayUtils.swap(shortArray0, (-2027), (int) (short)4416, (int) (short)4416);
      assertArrayEquals(new short[] {(short)4416}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)4416;
      intArray0[1] = (int) (short)4416;
      intArray0[2] = (int) (short)4416;
      intArray0[3] = 3;
      ArrayUtils.swap(shortArray0, 4416, 4, (-3919));
      assertArrayEquals(new short[] {(short)4416}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-1490), (-1));
      assertNull(longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (byte)0;
      ArrayUtils.shift(floatArray0, (int) (byte)0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2176;
      shortArray0[1] = (short)4239;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), (int) (short)4239);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2176, (short)4239}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)4239;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1029.66, (int) (short) (-1), 0.0);
      assertArrayEquals(new double[] {4239.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)4239;
      intArray0[1] = (int) (short)2176;
      intArray0[3] = (int) (short)2176;
      intArray0[4] = (-1);
      ArrayUtils.shift(intArray0, (int) (short)2176, 4239, (-3344));
      assertArrayEquals(new int[] {4239, 2176, 0, 2176, (-1)}, intArray0);
      assertEquals(5, intArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 4239, 2176);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 128;
      floatArray0[1] = (float) 2176;
      floatArray0[2] = (float) (short)4239;
      floatArray0[3] = (float) (short)2176;
      floatArray0[4] = (float) 2176;
      floatArray0[5] = 2055.2F;
      floatArray0[6] = (float) (short)4239;
      ArrayUtils.shift(floatArray0, 256);
      assertArrayEquals(new float[] {2176.0F, 2176.0F, 2055.2F, 4239.0F, 128.0F, 2176.0F, 4239.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-4935);
      floatArray0[1] = (float) 1718;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 1718;
      ArrayUtils.shift(floatArray0, (-1), (int) (short) (-4935), 4431);
      assertArrayEquals(new float[] {(-4935.0F), 1718.0F, 0.0F, 1718.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 184;
      doubleArray0[3] = (double) 184;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 295.83634, (-843.476682));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(22, doubleArray0.length);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, 2112);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2112}, intArray1);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = 1.0F;
      ArrayUtils.shift(floatArray0, (-2440), (-1402), 184);
      assertArrayEquals(new float[] {2.14748365E9F, 1.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1187);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1187}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-18.3536223147524), 757, 1779.74491);
      assertEquals(22, doubleArray0.length);
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 1, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[5];
      intArray0[1] = 1;
      intArray0[2] = (int) '3';
      intArray0[3] = 1;
      intArray0[4] = (int) '3';
      ArrayUtils.reverse(intArray0, 51, 1);
      assertArrayEquals(new int[] {0, 1, 51, 1, 51}, intArray0);
      assertEquals(5, intArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 51;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 51;
      floatArray0[6] = (-676.2763F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 91);
      assertArrayEquals(new float[] {1.0F, 51.0F, 1.0F, 1.0F, 1.0F, 51.0F, (-676.2763F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 784L);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1996;
      doubleArray0[1] = (double) 1996;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 784L, 2236);
      assertArrayEquals(new double[] {1996.0, 1996.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1996;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 2593.1807F);
      assertArrayEquals(new float[] {1996.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = '<';
      charArray0[2] = 'L';
      charArray0[3] = 'k';
      charArray0[4] = '|';
      charArray0[5] = ' ';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'y', '<', 'L', 'k', '|', ' '}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(0);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, mutableInt1.intValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      MutableInt mutableInt2 = new MutableInt(mutableInt0);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt2.longValue());
      assertEquals(0.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(0, mutableInt2.intValue());
      assertEquals((short)0, mutableInt2.shortValue());
      assertEquals(0.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt2.toInteger());
      assertEquals((byte)0, mutableInt2.byteValue());
      assertEquals("0", mutableInt2.toString());
      assertEquals(0, (int)mutableInt2.getValue());
      assertNotNull(mutableInt2);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      
      MutableInt mutableInt3 = new MutableInt((-1877));
      assertEquals((byte) (-85), mutableInt3.byteValue());
      assertEquals((-1877.0), mutableInt3.doubleValue(), 0.01);
      assertEquals((-1877), (int)mutableInt3.getValue());
      assertEquals((-1877L), mutableInt3.longValue());
      assertEquals("-1877", mutableInt3.toString());
      assertEquals((-1877), (int)mutableInt3.toInteger());
      assertEquals((short) (-1877), mutableInt3.shortValue());
      assertEquals((-1877), mutableInt3.intValue());
      assertEquals((-1877.0F), mutableInt3.floatValue(), 0.01F);
      assertNotNull(mutableInt3);
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'b');
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 3439L;
      ArrayUtils.shift(longArray0, 2, (-474), 2);
      assertArrayEquals(new long[] {3439L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 17, 128);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {3439L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 17;
      floatArray0[1] = (float) 17;
      floatArray0[2] = (float) 369;
      floatArray0[3] = (float) 3439L;
      ArrayUtils.shift(floatArray0, 17);
      assertArrayEquals(new float[] {3439.0F, 17.0F, 17.0F, 369.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 369.0F;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-116);
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-116)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-85.942F);
      floatArray0[1] = (-1005.773F);
      floatArray0[2] = 1560.118F;
      floatArray0[3] = 1280.906F;
      floatArray0[4] = (-1416.8F);
      floatArray0[5] = (-3988.0F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1280.906F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-85.942F), (-1005.773F), 1560.118F, 1280.906F, (-1416.8F), (-3988.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-85.942F), (-1005.773F), 1560.118F, 1280.906F, (-1416.8F), (-3988.0F), 1280.906F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.addFirst(stringArray0, "', has a length less than 2");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-2165));
      assertNotNull(integer0);
      assertEquals((-2165), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2165));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2165), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertNotNull(integer2);
      assertEquals(3, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals((-2165), (int)integer2);
      
      integerArray0[2] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-2165), (-2165), (-2165)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)121);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)12}, byteArray0);
      assertArrayEquals(new byte[] {(byte)12}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'9'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      Short short0 = new Short((short)4846);
      assertNotNull(short0);
      assertEquals((short)4846, (short)short0);
      
      Short short1 = new Short((short)4846);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)4846, (short)short1);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-79));
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)4846;
      shortArray0[1] = (short)4846;
      shortArray0[2] = (short) (byte) (-40);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-935), (-2486));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)4846, (short)4846, (short) (-40)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.swap(booleanArray0, (int) (short) (-115), (int) (byte)126, (int) (short)4846);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      Character character0 = new Character('c');
      assertNotNull(character0);
      assertEquals('c', (char)character0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, (-2134546998), (-1), 4976);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(344);
      assertNotNull(integer0);
      assertEquals(344, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte1));
      assertEquals((byte) (-14), object0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-14);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (int)  (-14), (-469));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 344;
      longArray0[2] = (long) (byte) (-14);
      longArray0[3] = (long) (-469);
      longArray0[4] = (long) (byte) (-14);
      longArray0[5] = (long) 344;
      longArray0[6] = (long) (byte) (-14);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 344L, (-14L), (-469L), (-14L), 344L, (-14L)}, longArray0);
      assertArrayEquals(new long[] {0L, 344L, (-14L), (-469L), (-14L), 344L, (-14L)}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.shift(booleanArray0, 3358, 3625, 3625);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 2341L);
      assertNull(longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = '0';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'B', 218);
      assertArrayEquals(new char[] {'B', '0'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'B';
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = (Character) '0';
      Character character0 = Character.valueOf('w');
      assertNotNull(character0);
      assertEquals('w', (char)character0);
      
      characterArray0[1] = character0;
      characterArray0[2] = (Character) 'B';
      characterArray0[3] = (Character) '0';
      characterArray0[4] = (Character) 'B';
      characterArray0[5] = (Character) '0';
      characterArray0[6] = (Character) '0';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'0', 'w', 'B', '0', 'B', '0', '0'}, charArray2);
      assertEquals(7, charArray2.length);
      assertEquals(7, characterArray0.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      char[] charArray3 = ArrayUtils.subarray(charArray2, 0, (int) characterArray0[6]);
      assertNotSame(charArray2, charArray3);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertNotNull(charArray3);
      assertArrayEquals(new char[] {'0', 'w', 'B', '0', 'B', '0', '0'}, charArray2);
      assertArrayEquals(new char[] {'0', 'w', 'B', '0', 'B', '0', '0'}, charArray3);
      assertEquals(7, charArray2.length);
      assertEquals(7, charArray3.length);
      assertEquals(7, characterArray0.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      int int1 = ArrayUtils.indexOf(charArray0, (char) characterArray0[6], 0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray3);
      assertArrayEquals(new char[] {'B', '0'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(7, characterArray0.length);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray3));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)13461;
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (short)13461;
      floatArray0[2] = (float) (short)13461;
      floatArray0[3] = (float) (short) (-543);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 13461.0F, 13461.0F, (-543.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-543.0F);
      doubleArray0[1] = (double) 13461.0F;
      doubleArray0[2] = (double) 13461.0F;
      doubleArray0[3] = (double) (short)13461;
      doubleArray0[4] = (double) (short)13461;
      doubleArray0[5] = 0.7;
      doubleArray0[6] = (double) (short)13461;
      doubleArray0[7] = (double) (short)13461;
      doubleArray0[8] = (double) 13461.0F;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-543.0), 13461.0, 13461.0, 13461.0, 13461.0, 0.7, 13461.0, 13461.0, 13461.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      
      String string0 = ArrayUtils.toString((Object) "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1845.8F;
      floatArray0[2] = (-218.672F);
      floatArray0[3] = 322.0F;
      floatArray0[4] = 1056.8656F;
      int int0 = ArrayUtils.indexOf(floatArray0, 1845.8F, 101);
      assertArrayEquals(new float[] {1.0F, 1845.8F, (-218.672F), 322.0F, 1056.8656F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 101;
      longArray0[1] = (long) 101;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 101;
      longArray0[4] = (long) 101;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) 101, 1797);
      assertArrayEquals(new long[] {101L, 101L, (-1L), 101L, 101L, (-1L), (-1L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Integer[] integerArray0 = new Integer[3];
      MutableInt mutableInt0 = new MutableInt((-1));
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1602));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1602), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1797);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1797, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = (-40.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.7;
      doubleArray0[5] = (-1216.0936129);
      doubleArray0[6] = (-793.42);
      doubleArray0[7] = 42.0;
      doubleArray0[8] = 1167.4;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-793.42));
      assertArrayEquals(new double[] {3.0, (-40.0), 0.0, 0.0, 0.7, (-1216.0936129), (-793.42), 42.0, 1167.4}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      Character character0 = new Character('8');
      assertNotNull(character0);
      assertEquals('8', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '8';
      charArray1[1] = '8';
      char[] charArray2 = ArrayUtils.subarray(charArray1, 2, 104);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'8', '8'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(2, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '8';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {56.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(2270);
      assertNotNull(integer0);
      assertEquals(2270, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1480));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1480), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2132774855));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-2132774855), (int)integer2);
      
      integerArray0[2] = integer2;
      MutableInt mutableInt0 = new MutableInt((Number) integer1);
      assertEquals((-1480L), mutableInt0.longValue());
      assertEquals((-1480), mutableInt0.intValue());
      assertEquals("-1480", mutableInt0.toString());
      assertEquals((byte)56, mutableInt0.byteValue());
      assertEquals((-1480), (int)mutableInt0.getValue());
      assertEquals((short) (-1480), mutableInt0.shortValue());
      assertEquals((-1480.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1480.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1480), (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      
      Integer integer3 = mutableInt0.toInteger();
      assertEquals((-1480L), mutableInt0.longValue());
      assertEquals((-1480), mutableInt0.intValue());
      assertEquals("-1480", mutableInt0.toString());
      assertEquals((byte)56, mutableInt0.byteValue());
      assertEquals((-1480), (int)mutableInt0.getValue());
      assertEquals((short) (-1480), mutableInt0.shortValue());
      assertEquals((-1480.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1480.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1480), (int)mutableInt0.toInteger());
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertEquals((-1480), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(589);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(589, (int)integer4);
      
      integerArray0[4] = integer4;
      MutableInt mutableInt1 = new MutableInt((Number) integerArray0[0]);
      assertEquals(2270.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)2270, mutableInt1.shortValue());
      assertEquals(2270L, mutableInt1.longValue());
      assertEquals(2270, mutableInt1.intValue());
      assertEquals(2270.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("2270", mutableInt1.toString());
      assertEquals(2270, (int)mutableInt1.getValue());
      assertEquals((byte) (-34), mutableInt1.byteValue());
      assertEquals(2270, (int)mutableInt1.toInteger());
      assertNotNull(mutableInt1);
      assertEquals(6, integerArray0.length);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      Integer integer5 = mutableInt1.getValue();
      assertEquals(2270.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)2270, mutableInt1.shortValue());
      assertEquals(2270L, mutableInt1.longValue());
      assertEquals(2270, mutableInt1.intValue());
      assertEquals(2270.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("2270", mutableInt1.toString());
      assertEquals(2270, (int)mutableInt1.getValue());
      assertEquals((byte) (-34), mutableInt1.byteValue());
      assertEquals(2270, (int)mutableInt1.toInteger());
      assertNotSame(mutableInt1, mutableInt0);
      assertNotNull(integer5);
      assertEquals(6, integerArray0.length);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertEquals(2270, (int)integer5);
      
      integerArray0[5] = integer5;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(184, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 184, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(345);
      assertNotNull(integer0);
      assertEquals(345, (int)integer0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 55;
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (byte) (-14));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 55;
      boolean boolean2 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {55L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short)16067, (int) (byte) (-14), 1.5);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((boolean[]) null, 69, 1086, (int) (short)16067);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {55.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {55.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)16067, (-1482));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2334);
      intArray0[1] = 2;
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, (-2334));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)75;
      longArray0[1] = (long) (byte) (-123);
      byteArray0[3] = (byte)75;
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)75;
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-73);
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)75, (byte)75, (byte)0, (byte)75}, byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-29), (byte) (-29), (byte)0, (byte) (-73)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)75, (byte)75}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-29);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {(short) (-29)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      float[] floatArray2 = new float[1];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 466.7F;
      boolean boolean1 = ArrayUtils.isSorted(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {466.7F}, floatArray2, 0.01F);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-73);
      longArray0[1] = (long) (byte) (-123);
      byteArray0[3] = (byte) (-73);
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)75;
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte)75;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-73);
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-73), (byte)0, (byte) (-73)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-29), (byte)75, (byte)0, (byte) (-73)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-73)}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-29);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {(short) (-29)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Float float0 = new Float((-347.724F));
      assertNotNull(float0);
      assertEquals((-347.724F), (float)float0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSameType(float0, float0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)21;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)97;
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[3] = '*';
      charArray0[3] = '0';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)97;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) (short)97);
      assertNotNull(doubleStream0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)97}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.shift(charArray0, 89, (-1222), 1250);
      assertArrayEquals(new char[] {'Z', 'Z', '\u0000', '0'}, charArray0);
      assertEquals(4, charArray0.length);
      
      ArrayUtils.shift((boolean[]) null, (int) (byte) (-73), 7, 159);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      ArrayUtils.shift((boolean[]) null, 0, 1455, (-637));
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)335;
      shortArray0[1] = (short)780;
      shortArray0[2] = (short)167;
      shortArray0[3] = (short)13;
      shortArray0[4] = (short)532;
      shortArray0[5] = (short)22;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)780);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)335, (short)780, (short)167, (short)13, (short)532, (short)22}, shortArray0);
      assertArrayEquals(new short[] {(short)780, (short)335, (short)780, (short)167, (short)13, (short)532, (short)22}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-705.2689F);
      floatArray0[1] = (-856.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-856.0F));
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-705.2689F), (-856.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-705.2689F);
      ArrayUtils.swap(floatArray1, 1996, 1996);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-705.2689F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-705.2689F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-705.2689F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-705.2689F), 1996);
      assertArrayEquals(new double[] {(-705.2689208984375)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      Character character0 = Character.valueOf('r');
      assertNotNull(character0);
      assertEquals('r', (char)character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(characterArray0, 0);
      assertEquals(3, characterArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0;
      ArrayUtils.shift(doubleArray0, 48, 2670, 69);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1);
      floatArray0[8] = (float) (-1);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-2990));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-2990)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (-600), 2);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.reverse(floatArray0, (int) (short) (-2990), (int) (short) (-600));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-126), booleanArray0, (boolean[]) null);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short) (-2990);
      int int0 = ArrayUtils.lastIndexOf(shortArray2, (short) (-2990));
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertArrayEquals(new short[] {(short) (-2990)}, shortArray2);
      assertEquals(1, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-793.42);
      doubleArray0[1] = (-793.42);
      doubleArray0[2] = (-793.42);
      doubleArray0[3] = (-793.42);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-793.42));
      assertArrayEquals(new double[] {(-793.42), (-793.42), (-793.42), (-793.42)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = 'h';
      charArray0[2] = 'y';
      ArrayUtils.shift(charArray0, 1913);
      assertArrayEquals(new char[] {'h', 'y', ' '}, charArray0);
      assertEquals(3, charArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-793.42), (-793.42), (-793.42), (-793.42)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-793.42), (-793.42), (-793.42), (-793.42)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'h', 'y', ' '}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      
      ArrayUtils.swap((short[]) null, 1913, 69, 23);
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[0] = (byte) (-123);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 93.0, 0, (-119.0));
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, (int) (byte) (-123), 52, 69);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 16L;
      longArray0[2] = 16L;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 16L, 16L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      ArrayUtils.swap((byte[]) null, 8, 1143);
      int[] intArray0 = new int[4];
      longArray0[1] = (long) 'K';
      intArray0[1] = (int) 'K';
      intArray0[2] = 1143;
      intArray0[3] = (int) 'r';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 75, 1143, 114}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 16L;
      longArray0[2] = 16L;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 16L, 16L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      ArrayUtils.swap((byte[]) null, 8, 1143);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'K';
      intArray0[1] = (int) 'K';
      intArray0[2] = 1143;
      intArray0[3] = (int) 'r';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {75, 75, 1143, 114}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 184;
      longArray0[1] = (long) 184;
      longArray0[2] = (long) 184;
      longArray0[3] = (-53L);
      longArray0[4] = (long) 184;
      longArray0[5] = (long) 184;
      longArray0[6] = (long) 184;
      longArray0[7] = (long) 184;
      longArray0[8] = (long) 184;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {184L, 184L, 184L, (-53L), 184L, 184L, 184L, 184L, 184L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-80));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[20];
      objectArray0[0] = (Object) 184L;
      Long long0 = new Long(184);
      assertNotNull(long0);
      assertEquals(184L, (long)long0);
      
      Long long1 = new Long(184);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(184L, (long)long1);
      
      Long[] longArray1 = new Long[3];
      longArray1[0] = (Long) 184L;
      longArray1[1] = (Long) (-53L);
      longArray1[2] = (Long) 184L;
      Long long2 = Long.valueOf((long) longArray1[0]);
      assertNotNull(long2);
      assertEquals(3, longArray1.length);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertEquals(184L, (long)long2);
      
      Long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray1, long2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertEquals(3, longArray1.length);
      assertEquals(1, longArray2.length);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      Float float0 = new Float((double) (byte) (-80));
      assertNotNull(float0);
      assertEquals((-80.0F), (float)float0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray1, (Object) float0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(longArray1, longArray2);
      assertNotNull(bitSet0);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray2));
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray2 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      
      ArrayUtils.shift((Object[]) longArray1, 0, (-2129587950), 3);
      assertNotSame(longArray0, longArray2);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray2));
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (-1476.4932F));
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)2;
      ArrayUtils.shift(byteArray0, (int) (byte)2, (int) (byte) (-96), 3);
      assertArrayEquals(new byte[] {(byte) (-96), (byte)2, (byte)2, (byte) (-40), (byte)111, (byte)0, (byte) (-14), (byte)2}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte) (-40);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1310.798400697), (-2131.9465));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-40.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.reverse(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) "', has a length less than 2";
      objectArray0[3] = (Object) bitSet0;
      objectArray0[6] = (Object) (byte)0;
      objectArray0[7] = (Object) (byte)0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "]xG4Dw![xS2ASZ8lT&");
      assertNotNull(stringArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(8, stringArray0.length);
      
      Double double0 = new Double((byte)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double0;
      Double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-2828);
      shortArray0[1] = (short) (-2694);
      shortArray0[2] = (short)432;
      shortArray0[3] = (short) (-24);
      shortArray0[4] = (short)520;
      shortArray0[5] = (short) (-198);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-198), (short)520, (short) (-24), (short)432, (short) (-2694), (short) (-2828)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Integer integer0 = Integer.getInteger((String) null);
      assertNull(integer0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)13461;
      shortArray0[3] = (short) (-543);
      shortArray0[2] = (short)13461;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-119)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)13461;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (short)13461;
      floatArray0[3] = (float) (short)13461;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) (short) (-543);
      floatArray0[6] = (float) (byte) (-119);
      ArrayUtils.swap(floatArray0, 1, (int) (short)13461, (-4578));
      assertArrayEquals(new float[] {13461.0F, 1.0F, 13461.0F, 13461.0F, 1.0F, (-543.0F), (-119.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 290L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {290L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      MutableInt mutableInt0 = new MutableInt((-1332));
      assertEquals((-1332.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-52), mutableInt0.byteValue());
      assertEquals((-1332L), mutableInt0.longValue());
      assertEquals((-1332), (int)mutableInt0.toInteger());
      assertEquals((-1332), (int)mutableInt0.getValue());
      assertEquals("-1332", mutableInt0.toString());
      assertEquals((-1332.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1332), mutableInt0.intValue());
      assertEquals((short) (-1332), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(1.0F);
      assertEquals(1.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("1", mutableInt1.toString());
      assertEquals(1, mutableInt1.intValue());
      assertEquals((short)1, mutableInt1.shortValue());
      assertEquals(1, (int)mutableInt1.toInteger());
      assertEquals((byte)1, mutableInt1.byteValue());
      assertEquals(1L, mutableInt1.longValue());
      assertEquals(1.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt1.getValue());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt((Number) (short)13461);
      assertEquals(13461.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(13461L, mutableInt2.longValue());
      assertEquals((short)13461, mutableInt2.shortValue());
      assertEquals("13461", mutableInt2.toString());
      assertEquals((byte) (-107), mutableInt2.byteValue());
      assertEquals(13461, mutableInt2.intValue());
      assertEquals(13461, (int)mutableInt2.toInteger());
      assertEquals(13461.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(13461, (int)mutableInt2.getValue());
      assertNotNull(mutableInt2);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      
      MutableInt[] mutableIntArray0 = new MutableInt[3];
      mutableIntArray0[0] = mutableInt2;
      mutableIntArray0[1] = mutableInt2;
      mutableIntArray0[2] = mutableInt0;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertEquals(3, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)94;
      doubleArray0[1] = (double) (byte)94;
      doubleArray0[2] = (double) (byte)94;
      MutableInt mutableInt0 = new MutableInt((int) (byte)94);
      assertEquals(94, (int)mutableInt0.getValue());
      assertEquals((short)94, mutableInt0.shortValue());
      assertEquals(94.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(94, (int)mutableInt0.toInteger());
      assertEquals((byte)94, mutableInt0.byteValue());
      assertEquals(94.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(94, mutableInt0.intValue());
      assertEquals(94L, mutableInt0.longValue());
      assertEquals("94", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      Integer integer0 = new Integer((byte)94);
      assertNotNull(integer0);
      assertEquals(94, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, "'E9u/V=z");
      assertFalse(boolean0);
      
      Double double0 = new Double(94.0);
      assertNotNull(double0);
      assertEquals(94.0, (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[5];
      Double double1 = new Double(94.0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(94.0, (double)double1, 0.01);
      
      doubleArray1[0] = double1;
      Double double2 = new Double(3956.7698015);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(3956.7698015, (double)double2, 0.01);
      
      doubleArray1[2] = double2;
      doubleArray1[3] = (Double) 94.0;
      doubleArray1[4] = double0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      ArrayUtils.reverse((Object[]) null);
      char[] charArray0 = new char[17];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertEquals(17, charArray0.length);
      assertEquals(34, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[4];
      charArray0[3] = '\u0000';
      doubleArray0[3] = (double) '\u0000';
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1130.303502585));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(charArray1, (-1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(17, charArray0.length);
      assertEquals(34, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(characterArray0);
      assertEquals(17, charArray0.length);
      assertEquals(34, charArray1.length);
      assertEquals(34, characterArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, 0.1, 0.1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2176;
      shortArray0[1] = (short)4239;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), (int) (short)4239);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2176, (short)4239}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)4239;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1029.66, (int) (short) (-1), 0.0);
      assertArrayEquals(new double[] {4239.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)4239;
      intArray0[1] = (int) (short)2176;
      intArray0[2] = (int) (short)2176;
      intArray0[3] = (int) (short)2176;
      intArray0[4] = (-1);
      ArrayUtils.shift(intArray0, (int) (short)2176, 4239, (-3344));
      assertArrayEquals(new int[] {4239, 2176, 2176, 2176, (-1)}, intArray0);
      assertEquals(5, intArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 1.5, (-1130.303502585));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {4239.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short)2176, (short)2176);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2176, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2325);
      intArray0[1] = 2;
      intArray0[2] = 42;
      intArray0[3] = (-226);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray0);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = null;
      Float[] floatArray1 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-96);
      byte[] byteArray1 = ArrayUtils.insert(2, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-14), (byte) (-14), (byte) (-96)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-14), (byte) (-71), (byte) (-14), (byte) (-14), (byte) (-96), (byte) (-14), (byte) (-96)}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2325);
      doubleArray0[1] = (double) (-226);
      doubleArray0[2] = (double) (-226);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.7, 2, (double) 0L);
      assertArrayEquals(new double[] {(-2325.0), (-226.0), (-226.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[9];
      try { 
        Short.valueOf("i/:w24%h\"kH{U!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"i/:w24%h\"kH{U!\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2325);
      intArray0[1] = 2;
      intArray0[2] = 42;
      intArray0[3] = (-226);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray0);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2325);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (-2325);
      longArray0[3] = (long) (-226);
      longArray0[4] = (long) (-2325);
      longArray0[5] = (long) (-226);
      longArray0[6] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, (long) 42);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2325L), 2L, (-2325L), (-226L), (-2325L), (-226L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-2325L), 2L, (-2325L), (-226L), (-2325L), (-226L), 0L, 42L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-71);
      byte byte0 = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-96);
      byte[] byteArray1 = ArrayUtils.insert(2, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-14), (byte) (-14), (byte) (-96)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-14), (byte) (-71), (byte) (-14), (byte) (-14), (byte) (-96), (byte) (-14), (byte) (-96)}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2325);
      doubleArray0[1] = (double) (-226);
      doubleArray0[2] = (double) (-226);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.7, 2, (double) 0L);
      assertArrayEquals(new double[] {(-2325.0), (-226.0), (-226.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[9];
      try { 
        Short.valueOf("i/:w24%h\"kH{U!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"i/:w24%h\"kH{U!\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      Short short0 = new Short((short) (-802));
      assertNotNull(short0);
      assertEquals((short) (-802), (short)short0);
      
      Short short1 = new Short((short) (-802));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-802), (short)short1);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character('{');
      assertNotNull(character0);
      assertEquals('{', (char)character0);
      
      characterArray0[0] = character0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(characterArray0, 1007);
      assertEquals(1, characterArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Character character1 = new Character('a');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('a', (char)character1);
      
      Character character2 = new Character('w');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('w', (char)character2);
      
      Double double0 = new Double(94.0);
      assertNotNull(double0);
      assertEquals(94.0, (double)double0, 0.01);
      
      Integer integer0 = Integer.getInteger((String) null);
      assertNull(integer0);
      
      Byte byte0 = new Byte((byte) (-119));
      assertNotNull(byte0);
      assertEquals((byte) (-119), (byte)byte0);
      
      Boolean boolean2 = new Boolean("QmJ4?==xYiBQfmH:;Ay");
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      ArrayUtils.hashCode((Object) boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-119);
      ArrayUtils.shift(byteArray0, (int) character0, (-1037), 37);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)2, (byte)92, (byte) (-119), (byte) (-119), (byte) (-119), (byte) (-119)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'a';
      floatArray0[1] = (float) (short) (-802);
      floatArray0[2] = (float) 37;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {97.0F, (-802.0F), 37.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {97.0F, (-802.0F), 37.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 313.477F;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-4913);
      shortArray0[1] = (short) (-4913);
      shortArray0[2] = (short) (-4913);
      shortArray0[3] = (short) (-4913);
      shortArray0[4] = (short) (-4913);
      shortArray0[5] = (short) (-4913);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-4913));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4913), (short) (-4913), (short) (-4913), (short) (-4913), (short) (-4913), (short) (-4913)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      ArrayUtils.reverse((Object[]) null);
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Sp(8S<0;Yy%F";
      stringArray0[1] = "Sp(8S<0;Yy%F";
      stringArray0[2] = ";S3";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 2146562771, (-24));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = ArrayUtils.subarray(stringArray1, (-2113876705), 639);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotNull(stringArray2);
      assertEquals(3, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-24);
      longArray0[1] = (long) 639;
      longArray0[2] = (long) (-2113876705);
      longArray0[3] = (long) (-24);
      longArray0[4] = (long) 2146562771;
      longArray0[5] = (long) 639;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-24L), 639L, (-2113876705L), (-24L), 2146562771L, 639L}, longArray1);
      assertArrayEquals(new long[] {(-24L), 639L, (-2113876705L), (-24L), 2146562771L, 639L}, longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)65;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)15, (int) (byte)65);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)61, (byte) (-57), (byte)99, (byte) (-77), (byte) (-65), (byte)0, (byte)28, (byte) (-1), (byte)65}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(10, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BjL]_I.UzBd;'";
      stringArray0[2] = "BjL]_I.UzBd;'";
      stringArray0[3] = stringArray0[1];
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '>';
      charArray0[2] = 's';
      charArray0[3] = 'S';
      charArray0[4] = 'z';
      charArray0[5] = '-';
      charArray0[6] = 'z';
      charArray0[7] = 'Y';
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'S';
      floatArray0[1] = (float) '-';
      floatArray0[2] = 25.1F;
      floatArray0[3] = 0.0F;
      floatArray0[5] = (-889.8F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-889.8F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {83.0F, 45.0F, 25.1F, 0.0F, 0.0F, (-889.8F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {83.0F, 45.0F, 25.1F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-655.31683F);
      floatArray0[1] = 2286.1467F;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {2286.1467F, (-655.31683F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-100);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-81));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)49, (byte) (-56), (byte) (-65), (byte) (-81), (byte)89, (byte) (-100)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)49, (byte) (-56), (byte) (-65), (byte) (-81), (byte)89, (byte) (-100), (byte) (-81)}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 18;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) 18;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = (-793.42);
      doubleArray0[6] = (double) 18;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 813.52233913162, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {18.0, 2.147483647E9, 18.0, 2.147483647E9, 2.147483647E9, (-793.42), 18.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((char[]) null, 875, 18);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = 2961.35955812871;
      doubleArray0[4] = (-4382.297857544008);
      doubleArray0[5] = (-0.69893851424105);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2868.0858288689356);
      assertArrayEquals(new double[] {(-1.0), 1.0, 1.5, 2961.35955812871, (-4382.297857544008), (-0.69893851424105)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      
      short short0 = (short)1136;
      Short short1 = Short.valueOf((short)1136);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)1136, (short)short1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short1);
      assertNotNull(object0);
      assertTrue(short1.equals((Object)short0));
      assertTrue(object0.equals((Object)short0));
      assertEquals((short)1136, object0);
      
      String string0 = ArrayUtils.toString(object0, "Cannot store ");
      assertNotNull(string0);
      assertTrue(short1.equals((Object)short0));
      assertTrue(object0.equals((Object)short0));
      assertEquals("1136", string0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object1);
      assertEquals(true, object1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) short1, object1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[21];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) ':';
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) ':';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.reverse(charArray0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-1.0F);
      objectArray0[1] = (Object) (-1.0F);
      objectArray0[2] = (Object) (-1L);
      objectArray0[3] = (Object) (-1L);
      objectArray0[4] = (Object) (-1.0F);
      objectArray0[5] = (Object) ':';
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "Array and element cannot both be null");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, objectArray0.length);
      
      Double double0 = new Double(18.0);
      assertNotNull(double0);
      assertEquals(18.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      Double double1 = new Double((double) doubleArray0[1]);
      assertNotNull(double1);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(18.0, (double)double1, 0.01);
      
      doubleArray0[6] = double1;
      Double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(14, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1130.303502585);
      doubleArray2[2] = (double) doubleArray0[3];
      doubleArray2[3] = (double) (-1L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray2, 1.0, 0);
      assertArrayEquals(new double[] {0.0, (-1130.303502585), 18.0, (-1.0)}, doubleArray2, 0.01);
      assertEquals(4, doubleArray2.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      floatArray0[1] = 91.0F;
      floatArray0[2] = (float) 1;
      ArrayUtils.swap(floatArray0, 1, (-1920), 1);
      assertArrayEquals(new float[] {91.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1, 10);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {91.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '-');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1920), (-604));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1920);
      doubleArray0[1] = (double) (-1920);
      doubleArray0[2] = (double) (-1920);
      doubleArray0[3] = (double) (-604);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1038.4566177705));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1920.0), (-1920.0), (-1920.0), (-604.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1920.0), (-1920.0), (-1920.0), (-604.0)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1920.0), (-1920.0), (-1920.0), (-604.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1157L;
      longArray0[4] = (-3727L);
      longArray0[5] = 0L;
      longArray0[6] = 1366L;
      longArray0[7] = 0L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 1157L, (-3727L), 0L, 1366L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      ArrayUtils.shift((Object[]) longArray1, (-4));
      assertArrayEquals(new long[] {0L, 0L, 0L, 1157L, (-3727L), 0L, 1366L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = ArrayUtils.indexOf(intArray1, 1224, 639);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)82);
      assertArrayEquals(new byte[] {(byte)82, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-1225), (-2147483641), (-3109));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((byte)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-3109));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-3109.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertNotNull(double2);
      assertEquals(3, doubleArray0.length);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((-3109.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = ArrayUtils.get(doubleArray0, 16067);
      assertNull(double3);
      assertEquals(3, doubleArray0.length);
      
      MutableInt mutableInt0 = new MutableInt(double1);
      assertEquals((-3109L), mutableInt0.longValue());
      assertEquals((-3109.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3109.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-3109", mutableInt0.toString());
      assertEquals((-3109), (int)mutableInt0.getValue());
      assertEquals((byte) (-37), mutableInt0.byteValue());
      assertEquals((-3109), (int)mutableInt0.toInteger());
      assertEquals((-3109), mutableInt0.intValue());
      assertEquals((short) (-3109), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      assertEquals((double)double1, (double)double2, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, mutableInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      byte byte0 = (byte)97;
      Byte byte1 = new Byte((byte)97);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)97, (byte)byte1);
      
      byte byte2 = (byte) (-110);
      Byte byte3 = new Byte((byte) (-110));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-110), (byte)byte3);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte3;
      byteArray0[1] = byte3;
      byteArray0[2] = byte3;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte3;
      byteArray0[7] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-110), (byte) (-110), (byte)97, (byte)97, (byte)97, (byte) (-110), (byte)97}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byte0 == byte2);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-110), (byte) (-110), (byte)97, (byte)97, (byte)97, (byte) (-110), (byte)97}, byteArray2);
      assertEquals(8, byteArray2.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (int) byte2);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-110)}, intArray1);
      assertEquals(1, intArray1.length);
      assertFalse(byte2 == byte0);
      
      byte[] byteArray3 = ArrayUtils.removeElement(byteArray1, byte0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-110), (byte) (-110), (byte)97, (byte)97, (byte)97, (byte) (-110), (byte)97}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-110), (byte) (-110), (byte)97, (byte)97, (byte) (-110), (byte)97}, byteArray3);
      assertEquals(8, byteArray1.length);
      assertEquals(7, byteArray3.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byte0 == byte2);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-2130);
      floatArray0[1] = (float) byte0;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte)97);
      assertArrayEquals(new float[] {(-2130.0F), 97.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      byte byte0 = (byte)97;
      Byte byte1 = new Byte((byte)97);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)97, (byte)byte1);
      
      byte byte2 = (byte) (-110);
      Byte byte3 = new Byte((byte) (-110));
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-110), (byte)byte3);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte1;
      byteArray0[1] = byte3;
      byteArray0[2] = byte3;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte3;
      byteArray0[7] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-110), (byte) (-110), (byte)97, (byte)97, (byte)97, (byte) (-110), (byte)97}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byte0 == byte2);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-110), (byte) (-110), (byte)97, (byte)97, (byte)97, (byte) (-110), (byte)97}, byteArray2);
      assertEquals(8, byteArray2.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (int) byte2);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-110)}, intArray1);
      assertEquals(1, intArray1.length);
      assertFalse(byte2 == byte0);
      
      ArrayUtils.swap((Object[]) byteArray0, (-2130), (-8), 1930);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      int int0 = (-50);
      Integer integer0 = new Integer((-50));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-50), (int)integer0);
      
      Integer integer1 = new Integer(4);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(4, (int)integer1);
      
      Integer integer2 = new Integer(2594);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(2594, (int)integer2);
      
      Byte byte0 = new Byte((byte) (-105));
      assertNotNull(byte0);
      assertEquals((byte) (-105), (byte)byte0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer1;
      integerArray0[7] = integer2;
      Integer[] integerArray1 = ArrayUtils.removeElement(integerArray0, (Object) int0);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotNull(integerArray1);
      assertEquals(7, integerArray1.length);
      assertEquals(8, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte) (-105);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-105), (byte) (-105), (byte) (-105), (byte) (-1), (byte) (-105), (byte)51, (byte) (-105)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-105), (byte) (-105), (byte) (-105), (byte) (-1), (byte) (-105), (byte)51, (byte) (-105)}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[1] = (long) ':';
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) ':';
      longArray0[4] = (long) ':';
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean1 = new Boolean("");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean1);
      assertNotNull(boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf("");
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.valueOf(false);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = new Boolean("");
      assertNotNull(boolean7);
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7);
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = new Boolean((String) null);
      assertNotNull(boolean8);
      assertTrue(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean3));
      assertFalse(boolean8);
      
      booleanArray0[7] = boolean8;
      Boolean boolean9 = Boolean.valueOf((String) null);
      assertNotNull(boolean9);
      assertFalse(boolean9.equals((Object)boolean3));
      assertFalse(boolean9.equals((Object)boolean0));
      assertTrue(boolean9.equals((Object)boolean7));
      assertTrue(boolean9.equals((Object)boolean1));
      assertTrue(boolean9.equals((Object)boolean2));
      assertTrue(boolean9.equals((Object)boolean8));
      assertFalse(boolean9);
      
      booleanArray0[8] = boolean9;
      Boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, (Object) boolean7);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean9));
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean8));
      assertTrue(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean3));
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      Double double0 = new Double((short) (-2019));
      assertNotNull(double0);
      assertEquals((-2019.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2019.0), (-2019.0), (-2019.0), (-2019.0), (-2019.0), (-2019.0), (-2019.0), (-2019.0)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      Comparator<MutableInt> comparator0 = (Comparator<MutableInt>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(mutableIntArray0, comparator0);
      assertEquals(0, mutableIntArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2, (int) (byte)2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Byte byte0 = new Byte((byte)97);
      assertNotNull(byte0);
      assertEquals((byte)97, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-110));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-110), (byte)byte1);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)97;
      longArray0[1] = (long) (byte) (-110);
      longArray0[2] = (long) (byte) (-110);
      longArray0[3] = (long) (byte) (-110);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {97L, (-110L), (-110L), (-110L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = 'P';
      charArray0[2] = '&';
      charArray0[3] = 'f';
      charArray0[4] = '.';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'6', 'P', '&', 'f', '.', '6', 'P', '&', 'f', '.'}, charArray1);
      assertArrayEquals(new char[] {'6', 'P', '&', 'f', '.'}, charArray0);
      assertEquals(10, charArray1.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1811.410278;
      doubleArray0[1] = (double) 'P';
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 100.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1811.410278, 80.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1811.410278, 80.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Long[] longArray1 = ArrayUtils.removeAllOccurrences((Long[]) null, (Long) (-110L));
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 847L;
      longArray0[1] = 2651L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {847L, 2651L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-635);
      intArray0[1] = 11;
      intArray0[2] = (-3);
      intArray0[3] = (-2372);
      intArray0[4] = 1;
      intArray0[5] = 771;
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = 'J';
      charArray0[2] = 'E';
      charArray0[3] = 'G';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'G', 'E', 'J', 'Y'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {847L, 2651L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'G', 'E', 'J', 'Y', 'G', 'E', 'J', 'Y'}, charArray1);
      assertArrayEquals(new char[] {'G', 'E', 'J', 'Y'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 11);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)94;
      doubleArray0[1] = (double) (byte)94;
      doubleArray0[2] = (double) (byte)94;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (byte)94;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3461.399824553978));
      assertArrayEquals(new double[] {94.0, 94.0, 94.0, (-1.0), 94.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, (int) 94);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'y';
      intArray0[1] = (int) '9';
      doubleArray0[1] = (double) '9';
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {121, 57, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Character character1 = new Character('Z');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('Z', (char)character1);
      
      Character character2 = new Character('3');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('3', (char)character2);
      
      Character character3 = new Character('y');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertEquals('y', (char)character3);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, (-1), 2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      Character[] characterArray1 = ArrayUtils.toObject(charArray0);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray1.length);
      assertEquals(0, characterArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 3000.9321F;
      ArrayUtils.shuffle(floatArray0, (Random) null);
      assertArrayEquals(new float[] {3000.9321F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean boolean3 = ArrayUtils.isSameLength(charArray2, charArray0);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(characterArray0, characterArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertEquals(0, characterArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)75;
      byteArray0[6] = (byte) (-1);
      byteArray0[5] = (byte) (-73);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-123), (byte) (-6), (byte)75, (byte)0, (byte) (-73), (byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-123);
      shortArray0[1] = (short) (byte) (-123);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)97;
      shortArray0[4] = (short) (byte)75;
      shortArray0[5] = (short) (byte)75;
      shortArray0[6] = (short) (byte) (-123);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-123));
      assertArrayEquals(new short[] {(short) (-123), (short) (-123), (short)0, (short)97, (short)75, (short)75, (short) (-123)}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((int) (byte) (-1), longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-598));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -598, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(345);
      assertNotNull(integer0);
      assertEquals(345, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte1));
      assertEquals((byte) (-14), object0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-14);
      ArrayUtils.swap(doubleArray0, (-1), (-2952), (int) (byte) (-14));
      assertArrayEquals(new double[] {(-14.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (byte) (-14));
      assertFalse(boolean1);
      
      Character[] characterArray0 = new Character[5];
      char char0 = 'L';
      Character character0 = new Character('L');
      assertNotNull(character0);
      assertTrue(character0.equals((Object)char0));
      assertEquals('L', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('_');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertEquals('_', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character1);
      assertNotNull(character2);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertEquals('_', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf((char) character0);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertTrue(character0.equals((Object)char0));
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character1));
      assertEquals('L', (char)character3);
      
      characterArray0[3] = character3;
      char char1 = 'P';
      Character character4 = Character.valueOf('P');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertEquals('P', (char)character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char1);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'L', '_', '_', 'L', 'P'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertFalse(char1 == char0);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-14.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (char)character1;
      intArray0[1] = (int) char0;
      intArray0[2] = (-1);
      intArray0[3] = 311;
      intArray0[4] = (int) (char)character0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-2134546998));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2134546998), 95, 76, (-1), 311, 76}, intArray1);
      assertArrayEquals(new int[] {95, 76, (-1), 311, 76}, intArray0);
      assertEquals(6, intArray1.length);
      assertEquals(5, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2325);
      intArray0[1] = 2;
      intArray0[2] = 42;
      intArray0[3] = (-226);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray0);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-2325);
      longArray0[1] = (long) 2;
      intArray0[3] = (-2325);
      longArray0[3] = (long) (-226);
      longArray0[4] = (long) (-2325);
      longArray0[5] = (long) (-226);
      longArray0[6] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, (long) 42);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2325L), 2L, 0L, (-226L), (-2325L), (-226L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-2325L), 2L, 0L, (-226L), (-2325L), (-226L), 0L, 0L, 42L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, int0);
      
      ArrayUtils.shift(longArray1, 2, 2, (-1134));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-2325L), 2L, 0L, (-226L), (-2325L), (-226L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-2325L), 2L, 0L, (-226L), (-2325L), (-226L), 0L, 0L, 42L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int1 = ArrayUtils.indexOf(intArray1, 42, (-2325));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-2325)}, intArray0);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2325);
      intArray0[1] = 2;
      intArray0[2] = 42;
      intArray0[3] = (-226);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray0);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2325);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (-2325);
      longArray0[3] = (long) (-226);
      longArray0[4] = (long) (-2325);
      longArray0[5] = (long) (-226);
      longArray0[6] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, (long) 42);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2325L), 2L, (-2325L), (-226L), (-2325L), (-226L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-2325L), 2L, (-2325L), (-226L), (-2325L), (-226L), 0L, 42L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, int0);
      
      ArrayUtils.shift(longArray1, 2, 2, (-1134));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-2325L), 2L, (-2325L), (-226L), (-2325L), (-226L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-2325L), 2L, (-2325L), (-226L), (-2325L), (-226L), 0L, 42L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int1 = ArrayUtils.indexOf(intArray1, 42, (-2325));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray0);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)13461;
      shortArray0[3] = (short) (-543);
      shortArray0[2] = (short)13461;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1230;
      longArray0[1] = (long) 1230;
      longArray0[2] = 1929L;
      longArray0[3] = (long) 1230;
      longArray0[4] = (long) 1230;
      longArray0[5] = (long) (short) (-2312);
      longArray0[6] = (long) (-5);
      longArray0[7] = (long) (short) (-543);
      ArrayUtils.shift(longArray0, 2134, (int) (short)13461, (int) (short)13461);
      assertArrayEquals(new long[] {1230L, 1230L, 1929L, 1230L, 1230L, (-2312L), (-5L), (-543L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-543);
      doubleArray0[1] = (double) 1929L;
      doubleArray0[2] = (double) (-5);
      doubleArray0[3] = (double) (short) (-543);
      doubleArray0[4] = 849.9480783867932;
      ArrayUtils.swap(doubleArray0, (int) (short) (-543), (int) (short)13461);
      assertArrayEquals(new double[] {(-543.0), 1929.0, (-5.0), (-543.0), 849.9480783867932}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-543.0);
      objectArray0[1] = (Object) 1230L;
      ArrayUtils.shift(objectArray0, 2134);
      assertEquals(2, objectArray0.length);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {1230L, 1230L, 1929L, 1230L, 1230L, (-2312L), (-5L), (-543L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((float) 1230L);
      assertNotNull(float0);
      assertEquals(1230.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1929.0);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1929.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1.0);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) (short)13461);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(13461.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) 1230);
      assertNotNull(float4);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals(1230.0F, (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-3191.3566));
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((-3191.3567F), (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1230.0F, 1929.0F, 1.0F, 13461.0F, 1230.0F, (-3191.3567F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      Character character0 = new Character('8');
      assertNotNull(character0);
      assertEquals('8', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      Double double0 = new Double(2);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      ArrayUtils.hashCode((Object) double0);
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)98, (-2488));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)98;
      doubleArray0[1] = (double) (-2488);
      doubleArray0[2] = (double) (-2488);
      doubleArray0[3] = (double) '8';
      doubleArray0[4] = (double) (-2488);
      doubleArray0[5] = 0.1;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-2488);
      doubleArray0[8] = (double) (-1);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {98.0, (-2488.0), (-2488.0), 56.0, (-2488.0), 0.1, (-1.0), (-2488.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte)88;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-110), (byte)126, (byte) (-103), (byte) (-113), (byte)40, (byte)57, (byte)88}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = '>';
      charArray0[2] = 'I';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)0, (int) '>');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'R', '>', 'I', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'R', '>', 'I', '\u0000'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'R';
      int int0 = ArrayUtils.indexOf(intArray0, 82);
      assertArrayEquals(new int[] {82}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short)98;
      shortArray0[0] = (short)98;
      Long long0 = new Long((short)98);
      assertNotNull(long0);
      assertEquals(98L, (long)long0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((int) (short)98, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = new float[8];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) (short)98;
      floatArray2[1] = (float) (short)98;
      floatArray2[2] = (float) (short)98;
      float float0 = (-588.24567F);
      floatArray2[3] = (-588.24567F);
      floatArray2[4] = (-3034.6313F);
      floatArray2[5] = (float) (short)98;
      floatArray2[6] = (float) (short)98;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {98.0F, 98.0F, 98.0F, (-588.24567F), (-3034.6313F), 98.0F, 98.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(8, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) long0;
      objectArray0[1] = (Object) (short)98;
      objectArray0[2] = (Object) (-3034.6313F);
      objectArray0[3] = (Object) (-588.24567F);
      objectArray0[4] = (Object) (short)98;
      objectArray0[5] = (Object) 98.0F;
      objectArray0[6] = (Object) 98.0F;
      // Undeclared exception!
      try { 
        Integer.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '3';
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '3';
      doubleArray0[1] = (double) '3';
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) '3';
      doubleArray0[5] = (double) '3';
      doubleArray0[6] = (double) '3';
      doubleArray0[7] = (double) '3';
      doubleArray0[8] = (double) '3';
      ArrayUtils.swap(doubleArray0, 2111085620, (-449), 111);
      assertArrayEquals(new double[] {51.0, 51.0, (-1.0), (-1.0), 51.0, 51.0, 51.0, 51.0, 51.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-1383));
      assertFalse(boolean0);
      
      Character character0 = new Character('3');
      assertNotNull(character0);
      assertEquals('3', (char)character0);
      
      Character character1 = new Character('3');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('3', (char)character1);
      
      Character character2 = new Character('}');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('}', (char)character2);
      
      Character character3 = Character.valueOf('L');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('L', (char)character3);
      
      Character character4 = Character.valueOf('P');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertEquals('P', (char)character4);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character3;
      characterArray0[1] = character2;
      characterArray0[2] = character4;
      characterArray0[3] = character3;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '3');
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'L', '}', 'P', 'L'}, charArray1);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2111085620;
      longArray0[1] = (long) '}';
      longArray0[2] = (long) '3';
      longArray0[3] = 2147483647L;
      longArray0[4] = (long) 'L';
      longArray0[5] = (long) (-1);
      int int0 = ArrayUtils.indexOf(longArray0, 2147483647L);
      assertArrayEquals(new long[] {2111085620L, 125L, 51L, 2147483647L, 76L, (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)48;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)48;
      doubleArray0[1] = (double) (short)48;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)48;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (short)48;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.5, (-1969.9047162149));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {48.0, 48.0, 0.0, 48.0, 0.0, 0.0, 48.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (short)0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Short[] shortArray1 = new Short[8];
      shortArray1[0] = (Short) (short)48;
      shortArray1[1] = (Short) (short)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, (int) shortArray1[1], (-970.876505067167));
      assertArrayEquals(new double[] {48.0, 48.0, 0.0, 48.0, 0.0, 0.0, 48.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals((-1), int0);
      
      shortArray1[2] = (Short) (short)48;
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      shortArray1[3] = short0;
      shortArray1[4] = (Short) (short)0;
      shortArray1[5] = (Short) (short)48;
      shortArray1[6] = (Short) (short)0;
      shortArray1[7] = (Short) (short)0;
      Short short1 = new Short((short)1645);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)1645, (short)short1);
      
      Short short2 = ArrayUtils.get(shortArray1, (int) shortArray1[3], short1);
      assertNotNull(short2);
      assertEquals(8, shortArray1.length);
      assertFalse(short1.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)48, (short)short2);
      
      ArrayUtils.shift((int[]) null, 1353, (int) (short)2721, 0);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 52;
      intArray0[1] = 52;
      intArray0[0] = 52;
      intArray0[3] = 52;
      intArray0[4] = 52;
      intArray0[5] = (-2143624182);
      int int0 = ArrayUtils.indexOf(intArray0, (-2143624182), (-2143624182));
      assertArrayEquals(new int[] {52, 52, 0, 52, 52, (-2143624182)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(5, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)76;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-66));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-98), (byte) (-121), (byte)23, (byte) (-105), (byte)1, (byte) (-10), (byte) (-66), (byte)76}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-121), (byte)23, (byte) (-105), (byte)1, (byte) (-10), (byte) (-66), (byte)76}, byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1614.52237040981);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1614.52237040981);
      doubleArray0[4] = 0.0;
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)7);
      assertNotNull(byte0);
      assertEquals((byte)7, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      Integer integer0 = new Integer(1463);
      assertNotNull(integer0);
      assertEquals(1463, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = '\'';
      charArray0[2] = '0';
      charArray0[3] = '=';
      charArray0[4] = '4';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'`', '\'', '0', '=', '4'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 409.0924235051861);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[0];
      Long long0 = new Long(14);
      assertNotNull(long0);
      assertEquals(14L, (long)long0);
      
      Long long1 = new Long((-238L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-238L), (long)long1);
      
      Long[] longArray1 = new Long[3];
      doubleArray0[0] = (double) (long)long1;
      longArray1[1] = long1;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-793.42));
      assertArrayEquals(new double[] {(-238.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(charArray0, 14);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-238.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-238.0), 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4416;
      ArrayUtils.swap(shortArray0, (-2027), (int) (short)4416, (int) (short)4416);
      assertArrayEquals(new short[] {(short)4416}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)4416;
      intArray0[1] = (int) (short)4416;
      intArray0[2] = (int) (short)4416;
      intArray0[3] = 3;
      intArray0[4] = 14;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {4416, 4416, 4416, 3, 14}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-54), (-54));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Long long0 = Long.valueOf((long) (-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1992.522139032;
      doubleArray0[1] = (double) 2156;
      doubleArray0[2] = (-3461.399825);
      ArrayUtils.shift(doubleArray0, 2156);
      assertArrayEquals(new double[] {1992.522139032, 2156.0, (-3461.399825), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[3] = 'm';
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift((short[]) null, (-1), 1723, (-1835));
      Double double0 = new Double((-3461.399825));
      assertNotNull(double0);
      assertEquals((-3461.399825), (double)double0, 0.01);
      
      Boolean boolean1 = Boolean.valueOf("Array and element cannot both be null");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean1);
      assertNotNull(object0);
      assertFalse(object0.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean0));
      assertEquals(false, object0);
      
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ArrayUtils.shift((short[]) null, (-1));
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      ArrayUtils.shift((char[]) null, (-1), 2578, (-54));
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short) (-810);
      ArrayUtils.shift(shortArray0, 8);
      assertArrayEquals(new short[] {(short)6, (short) (-810)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)116);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)6, (short) (-810)}, shortArray0);
      assertArrayEquals(new short[] {(short)6, (short) (-810)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Long[] longArray0 = new Long[9];
      Long long0 = new Long(8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short)6);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(6L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((short) (-810));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-810L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-994L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertEquals((-994L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((-801L));
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertEquals((-801L), (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((short)6);
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long1));
      assertEquals(6L, (long)long5);
      
      longArray0[5] = long5;
      Long long6 = new Long(83L);
      assertNotNull(long6);
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long5));
      assertEquals(83L, (long)long6);
      
      longArray0[6] = long6;
      Long long7 = new Long((long) longArray0[0]);
      assertNotNull(long7);
      assertEquals(9, longArray0.length);
      assertTrue(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long3));
      assertEquals(8L, (long)long7);
      
      Long long8 = Long.getLong("Bbq%{)ywN", long7);
      assertNotNull(long8);
      assertEquals(9, longArray0.length);
      assertTrue(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long6));
      assertFalse(long8.equals((Object)long4));
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long2));
      assertTrue(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long5));
      assertEquals(8L, (long)long8);
      
      longArray0[7] = long8;
      Long long9 = new Long((-1L));
      assertNotNull(long9);
      assertFalse(long9.equals((Object)long2));
      assertFalse(long9.equals((Object)long5));
      assertFalse(long9.equals((Object)long7));
      assertFalse(long9.equals((Object)long0));
      assertFalse(long9.equals((Object)long6));
      assertFalse(long9.equals((Object)long3));
      assertFalse(long9.equals((Object)long8));
      assertFalse(long9.equals((Object)long4));
      assertFalse(long9.equals((Object)long1));
      assertEquals((-1L), (long)long9);
      
      longArray0[8] = long9;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (short) (-810));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {8L, 6L, (-810L), (-994L), (-801L), 6L, 83L, 8L, (-1L)}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) (-994);
      doubleArray0[1] = (-1194.2);
      doubleArray0[4] = (double) (-994);
      doubleArray0[6] = (double) 296L;
      doubleArray0[6] = (double) (-994);
      doubleArray0[7] = (double) (-994);
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {(-1194.2), 0.0, 0.0, (-994.0), 0.0, (-994.0), (-994.0), 2.147483647E9}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)111);
      assertNotNull(byte0);
      assertEquals((byte)111, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      
      Byte byte2 = new Byte((byte)111);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)111, (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-1));
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte3);
      
      Byte byte4 = new Byte((byte)53);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte)53, (byte)byte4);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-114));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0);
      assertSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-994);
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = (-3879L);
      longArray0[6] = 296L;
      longArray0[7] = (long) (byte)111;
      int int0 = ArrayUtils.indexOf(longArray0, (long) (-994));
      assertArrayEquals(new long[] {(-994L), 2147483647L, 2147483647L, (-1L), (-1L), (-3879L), 296L, 111L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2325);
      intArray0[1] = 2;
      intArray0[2] = 44;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 44;
      floatArray0[1] = (float) (-226);
      floatArray0[1] = (-445.341F);
      floatArray0[3] = (float) (byte)91;
      floatArray0[4] = (float) 0;
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = (double) (-445.341F);
      doubleArray0[1] = (double) 44.0F;
      doubleArray0[2] = 158.0;
      doubleArray0[3] = (-2262.77818295);
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = (double) (byte)91;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 0.0F, (double) 44);
      assertEquals(22, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)91;
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)91}, byteArray1);
      assertArrayEquals(new byte[] {(byte)91, (byte)91}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      charArray0[1] = '4';
      charArray0[2] = 'f';
      charArray0[3] = '~';
      charArray0[4] = '=';
      charArray0[5] = '#';
      charArray0[6] = 'x';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 160, '1');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 160, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1157L;
      longArray0[4] = (-3727L);
      longArray0[5] = 0L;
      longArray0[6] = 1366L;
      longArray0[7] = (-1L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 1157L, (-3727L), 0L, 1366L, (-1L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      ArrayUtils.shift((Object[]) longArray1, 0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 1157L, (-3727L), 0L, 1366L, (-1L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = ArrayUtils.indexOf(intArray1, 1224, 639);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)82, (byte) (-93), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (int) (byte) (-93), (int) (byte)0, (int) (byte)82);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray2 = ArrayUtils.removeAllOccurrences(intArray0, 99);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray0.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((int[]) null, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-226);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 42;
      doubleArray0[3] = (double) (-226);
      doubleArray0[4] = (double) (-226);
      doubleArray0[5] = (double) 42;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-40);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)3;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-40), (short) (-1), (short)3}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(2885);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2885, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short) (-40));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-40), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 847L;
      longArray0[1] = 2651L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {847L, 2651L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-635);
      intArray0[1] = 11;
      intArray0[2] = (-3);
      intArray0[3] = (-2372);
      intArray0[4] = 1;
      intArray0[5] = 771;
      intArray0[6] = (-1225);
      ArrayUtils.shift(intArray0, 771, Integer.MAX_VALUE, 11);
      assertArrayEquals(new int[] {(-635), 11, (-3), (-2372), 1, 771, (-1225)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.5);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'i');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'9'}, charArray0);
      assertArrayEquals(new char[] {'i', '9'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-24);
      shortArray0[1] = (short)5488;
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short)5488);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2325);
      intArray0[1] = 2;
      intArray0[2] = 42;
      intArray0[3] = (-226);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray0);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 36);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(3, int0);
      
      ArrayUtils.shift(intArray1, (-2325));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray0);
      assertArrayEquals(new int[] {2, 42, (-226), (-2325)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 42;
      floatArray0[1] = (float) (-2325);
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {42.0F, (-2325.0F), 42.0F, (-2325.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {42.0F, (-2325.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 42;
      doubleArray0[1] = (double) 2;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {42.0, 2.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift(doubleArray0, (-1425), 21, 3);
      assertArrayEquals(new double[] {2.0, 42.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 0, 52);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)7);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)7}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1516.9F;
      floatArray0[1] = (float) 52;
      floatArray0[2] = (float) (byte)7;
      floatArray0[3] = (float) (byte)7;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (byte)7;
      floatArray0[6] = (float) (byte)7;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 99.08F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1516.9F, 52.0F, 7.0F, 7.0F, 0.0F, 7.0F, 7.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1516.9F, 52.0F, 7.0F, 7.0F, 0.0F, 7.0F, 7.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int0 = ArrayUtils.indexOf(floatArray0, 99.08F, 52);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1516.9F, 52.0F, 7.0F, 7.0F, 0.0F, 7.0F, 7.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)2;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)99);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)99, (byte)2}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      byteArray0[4] = (byte)0;
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      BitSet bitSet0 = new BitSet((byte)0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte) (-1);
      BitSet bitSet1 = (BitSet)ArrayUtils.toPrimitive((Object) bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertSame(bitSet1, bitSet0);
      assertSame(bitSet0, bitSet1);
      assertNotNull(bitSet1);
      
      objectArray0[2] = (Object) bitSet1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (byte)0;
      ArrayUtils.shift(objectArray0, (int) (byte) (-1), (int) (byte)0, 108);
      assertEquals(5, objectArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 874.428F);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) (byte)99, 2153);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (-2069);
      shortArray0[2] = (short) (byte)99;
      shortArray0[3] = (short)4;
      shortArray0[4] = (short) (-1);
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (byte) (-1));
      assertArrayEquals(new short[] {(short)0, (short) (-2069), (short)99, (short)4, (short) (-1)}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 93.0;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)31, (double) (byte)31);
      assertArrayEquals(new double[] {93.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[4];
      char char0 = '#';
      Character character0 = Character.valueOf('#');
      assertNotNull(character0);
      assertEquals('#', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertEquals('#', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('#');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertEquals('#', (char)character2);
      
      characterArray0[2] = character2;
      characterArray0[3] = (Character) char0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'#', '#', '#', '#'}, charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 993, (-495));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'#', '#', '#', '#'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2325);
      intArray0[1] = 2;
      intArray0[2] = 42;
      intArray0[3] = (-226);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray0);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-2325);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (-2325);
      longArray0[3] = (long) (-226);
      longArray0[4] = (long) (-2325);
      longArray0[5] = (long) (-226);
      longArray0[6] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, (long) 42);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2325L), 2L, (-2325L), (-226L), (-2325L), (-226L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-2325L), 2L, (-2325L), (-226L), (-2325L), (-226L), 0L, 42L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, int0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)121;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)121}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-2325L), 2L, (-2325L), (-226L), (-2325L), (-226L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-2325L), 2L, (-2325L), (-226L), (-2325L), (-226L), 0L, 42L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)13461;
      shortArray0[3] = (short) (-543);
      shortArray0[2] = (short)13461;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1230;
      longArray0[1] = (long) 1230;
      longArray0[2] = 1929L;
      longArray0[3] = (long) 1230;
      longArray0[4] = (long) 1230;
      longArray0[5] = (long) (short) (-2312);
      longArray0[6] = (long) (-5);
      longArray0[7] = (long) (short) (-543);
      ArrayUtils.shift(longArray0, 2134, (int) (short)13461, (int) (short)13461);
      assertArrayEquals(new long[] {1230L, 1230L, 1929L, 1230L, 1230L, (-2312L), (-5L), (-543L)}, longArray0);
      assertEquals(8, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-543);
      doubleArray0[1] = (double) 1929L;
      doubleArray0[2] = (double) (-5);
      doubleArray0[3] = (double) (short) (-543);
      doubleArray0[4] = 862.2149448660688;
      ArrayUtils.swap(doubleArray0, (int) (short) (-543), (int) (short)13461);
      assertArrayEquals(new double[] {(-543.0), 1929.0, (-5.0), (-543.0), 862.2149448660688}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-543.0);
      objectArray0[1] = (Object) 1230L;
      ArrayUtils.shift(objectArray0, 2134);
      assertEquals(2, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (int) (short)13461);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, 2, 2134, (-3190));
      assertArrayEquals(new long[] {1230L, 1230L, (-5L), (-543L), 1929L, 1230L, 1230L, (-2312L)}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)120;
      byteArray0[8] = (byte) (-40);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-40));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)98, (byte) (-102), (byte)23, (byte) (-54), (byte)126, (byte)120, (byte)120, (byte) (-40)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)98, (byte) (-102), (byte)23, (byte) (-54), (byte)126, (byte)120, (byte)120}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-903), (-935));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, (-67), (int) (byte) (-102), (int) (byte) (-102));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      Short[] shortArray2 = new Short[2];
      Short short0 = new Short((byte) (-102));
      assertNotNull(short0);
      assertEquals((short) (-102), (short)short0);
      
      shortArray2[0] = short0;
      Short short1 = new Short((byte)126);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)126, (short)short1);
      
      shortArray2[1] = short1;
      Short[] shortArray3 = ArrayUtils.removeAllOccurences(shortArray2, short1);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertNotNull(shortArray3);
      assertEquals(2, shortArray2.length);
      assertEquals(1, shortArray3.length);
      assertFalse(short1.equals((Object)short0));
      assertFalse(shortArray3.equals((Object)shortArray2));
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3774;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4201.50666;
      doubleArray0[1] = (double) (-25);
      doubleArray0[2] = (double) (short)3774;
      doubleArray0[3] = (double) (short)3774;
      doubleArray0[4] = (double) (-1455);
      doubleArray0[5] = (double) (short)3774;
      ArrayUtils.shift(doubleArray0, (-25), (int) (short)3774, (-1506));
      assertArrayEquals(new double[] {4201.50666, (-25.0), 3774.0, 3774.0, (-1455.0), 3774.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3774;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)3774;
      intArray0[1] = 85;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)3774;
      doubleArray0[1] = (double) 3774;
      doubleArray0[2] = (double) 85;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 3945.0);
      assertArrayEquals(new double[] {3774.0, 3774.0, 85.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, Integer.MAX_VALUE);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {3774, 85, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Character character1 = new Character('y');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('y', (char)character1);
      
      Character character2 = new Character('o');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('o', (char)character2);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short)3774, Integer.MAX_VALUE);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 847L;
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {847L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 847L;
      char[] charArray2 = ArrayUtils.subarray(charArray0, 126, 126);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 0L);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {847.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {847.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)5;
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)5, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)5, (short)0, (short)5, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)5;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {5L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) 0);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2146863149), (int) (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Short short0 = new Short((byte)12);
      assertNotNull(short0);
      assertEquals((short)12, (short)short0);
      
      Short short1 = new Short((byte)72);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)72, (short)short1);
      
      Short short2 = new Short((short) (-115));
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short) (-115), (short)short2);
      
      Short short3 = new Short((short) (-2658));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short) (-2658), (short)short3);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)12}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (short) (-2658);
      longArray0[2] = (long) (short)shortArray0[0];
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (byte)72;
      longArray0[5] = (long) (short) (-2658);
      longArray0[6] = (long) (short) (-115);
      longArray0[7] = (long) (-1);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, (-2658L), 12L, (-1L), 72L, (-2658L), (-115L), (-1L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 3439L;
      longArray0[1] = (-3088L);
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Float float0 = new Float((double) (-3088L));
      assertNotNull(float0);
      assertEquals((-3088.0F), (float)float0, 0.01F);
      
      String string0 = ArrayUtils.toString((Object) float0);
      assertNotNull(string0);
      assertEquals("-3088.0", string0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals((-3088), (int)mutableInt0.toInteger());
      assertEquals((-3088), (int)mutableInt0.getValue());
      assertEquals((-3088.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-16), mutableInt0.byteValue());
      assertEquals((short) (-3088), mutableInt0.shortValue());
      assertEquals((-3088.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3088), mutableInt0.intValue());
      assertEquals((-3088L), mutableInt0.longValue());
      assertEquals("-3088", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt((-3088L));
      assertEquals((-3088), mutableInt1.intValue());
      assertEquals((-3088L), mutableInt1.longValue());
      assertEquals((-3088), (int)mutableInt1.toInteger());
      assertEquals((-3088), (int)mutableInt1.getValue());
      assertEquals((short) (-3088), mutableInt1.shortValue());
      assertEquals((-3088.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-3088.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((byte) (-16), mutableInt1.byteValue());
      assertEquals("-3088", mutableInt1.toString());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      MutableInt mutableInt2 = new MutableInt((-3088L));
      assertEquals((-3088), mutableInt2.intValue());
      assertEquals((-3088L), mutableInt2.longValue());
      assertEquals((short) (-3088), mutableInt2.shortValue());
      assertEquals((byte) (-16), mutableInt2.byteValue());
      assertEquals("-3088", mutableInt2.toString());
      assertEquals((-3088.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-3088.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-3088), (int)mutableInt2.toInteger());
      assertEquals((-3088), (int)mutableInt2.getValue());
      assertNotNull(mutableInt2);
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      MutableInt mutableInt3 = new MutableInt((Number) (-1));
      assertEquals((byte) (-1), mutableInt3.byteValue());
      assertEquals((-1), (int)mutableInt3.getValue());
      assertEquals((-1), (int)mutableInt3.toInteger());
      assertEquals((-1L), mutableInt3.longValue());
      assertEquals((-1.0), mutableInt3.doubleValue(), 0.01);
      assertEquals((-1), mutableInt3.intValue());
      assertEquals("-1", mutableInt3.toString());
      assertEquals((-1.0F), mutableInt3.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt3.shortValue());
      assertNotNull(mutableInt3);
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      
      MutableInt[] mutableIntArray0 = ArrayUtils.removeAllOccurences((MutableInt[]) null, mutableInt3);
      assertEquals((byte) (-1), mutableInt3.byteValue());
      assertEquals((-1), (int)mutableInt3.getValue());
      assertEquals((-1), (int)mutableInt3.toInteger());
      assertEquals((-1L), mutableInt3.longValue());
      assertEquals((-1.0), mutableInt3.doubleValue(), 0.01);
      assertEquals((-1), mutableInt3.intValue());
      assertEquals("-1", mutableInt3.toString());
      assertEquals((-1.0F), mutableInt3.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt3.shortValue());
      assertNotSame(mutableInt3, mutableInt2);
      assertNotSame(mutableInt3, mutableInt1);
      assertNotSame(mutableInt3, mutableInt0);
      assertNull(mutableIntArray0);
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1748.527091856);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      char char0 = 'l';
      charArray0[1] = 'l';
      char char1 = '7';
      charArray0[2] = '7';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2325);
      intArray0[1] = 2;
      intArray0[2] = 42;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 42;
      floatArray0[1] = (float) (-226);
      floatArray0[2] = (-445.341F);
      floatArray0[3] = (float) (byte)91;
      floatArray0[4] = (float) 0;
      ArrayUtils.shift(floatArray0, 2, Integer.MAX_VALUE, 6);
      assertArrayEquals(new float[] {42.0F, (-226.0F), (-445.341F), 91.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)91;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-226));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -226, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 36);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(2, int0);
      
      ArrayUtils.shift(intArray0, 36);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 2;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 2;
      floatArray2[1] = (float) 12;
      floatArray2[2] = 0.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(12, floatArray1, floatArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 847L;
      longArray0[1] = 2651L;
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {847L, 2651L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {847L, 2651L}, longArray0);
      assertArrayEquals(new long[] {847L, 2651L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3422.464F);
      floatArray0[1] = (float) 847L;
      floatArray0[2] = (float) 2651L;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) 2651L;
      floatArray0[5] = (float) 'Y';
      floatArray0[6] = (float) 2651L;
      int[] intArray0 = new int[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {(-3422.464F), 847.0F, 2651.0F, 1.0F, 2651.0F, 89.0F, 2651.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-3422.464F), 847.0F, 2651.0F, 1.0F, 2651.0F, 89.0F, 2651.0F}, floatArray0, 0.01F);
      assertEquals(0, intArray0.length);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-73);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-123), (byte) (-6), (byte)75, (byte) (-1), (byte) (-73), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-123);
      shortArray0[1] = (short) (byte) (-123);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte)97;
      shortArray0[4] = (short) (byte)75;
      shortArray0[5] = (short) (byte)75;
      shortArray0[6] = (short) (byte) (-123);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-123));
      assertArrayEquals(new short[] {(short) (-123), (short) (-123), (short) (-1), (short)97, (short)75, (short)75, (short) (-123)}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((byte) (-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray2 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(0, intArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short)1035;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)1035, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)121;
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'l';
      charArray0[2] = 'P';
      ArrayUtils.reverse(charArray0, (-452), 102);
      assertArrayEquals(new char[] {'P', 'l', 'u'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 5870.0592084);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'A';
      charArray0[2] = 'R';
      ArrayUtils.reverse((int[]) null, (-611), (-1353));
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short short0 = new Short((short)7);
      assertNotNull(short0);
      assertEquals((short)7, (short)short0);
      
      Short short1 = new Short((short)1136);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)1136, (short)short1);
      
      Short short2 = new Short((short)30719);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)30719, (short)short2);
      
      Short short3 = new Short((short)30719);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertEquals((short)30719, (short)short3);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)7);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)30719}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Double[] doubleArray2 = new Double[0];
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2, 1.0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (-1.0), 4732, 184.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      ArrayUtils.shift(charArray0, (int) (short)0, (int) (short)0, (-1));
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      int[] intArray0 = new int[2];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "o\"\"?okrJd-!:|");
      assertNull(stringArray0);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 'N';
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 78L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.swap((byte[]) null, 8, 0);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)37;
      shortArray0[2] = (short) (-2704);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)9);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)37, (short) (-2704)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)37, (short) (-2704)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      doubleArray0[1] = (-251.4758988586571);
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = (float) (-1L);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1817);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1817));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1817)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1817), (short) (-1817)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short)366);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-1817), (short) (-1817)}, shortArray2);
      assertArrayEquals(new short[] {(short) (-1817)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1817), (short) (-1817)}, shortArray1);
      assertEquals(2, shortArray2.length);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Integer[] integerArray0 = new Integer[8];
      int int0 = 69;
      Integer integer0 = new Integer(69);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(69, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(63);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(63, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(69, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-3220));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals((-3220), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(1, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(3205);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertEquals(3205, (int)integer5);
      
      Integer integer6 = Integer.getInteger("org.evosuite.runtime.mock.java.util.MockRandom", integer5);
      assertNotNull(integer6);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertEquals(3205, (int)integer6);
      
      integerArray0[5] = integer6;
      Integer integer7 = new Integer((short) (-1817));
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertEquals((-1817), (int)integer7);
      
      integerArray0[6] = integer7;
      Integer integer8 = new Integer(2477);
      assertNotNull(integer8);
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer0));
      assertEquals(2477, (int)integer8);
      
      integerArray0[7] = integer8;
      Integer[] integerArray1 = ArrayUtils.addFirst(integerArray0, integer2);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(9, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(integer2.equals((Object)integer6));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer7));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer8));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer5));
      assertFalse(integer2.equals((Object)integer4));
      assertTrue(integer2.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-149.33974852023);
      doubleArray0[1] = (-149.33974852023);
      doubleArray0[2] = (-149.33974852023);
      doubleArray0[3] = (-149.33974852023);
      doubleArray0[4] = (-149.33974852023);
      doubleArray0[5] = (-149.33974852023);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-149.33974852023), 98.0);
      assertArrayEquals(new double[] {(-149.33974852023), (-149.33974852023), (-149.33974852023), (-149.33974852023), (-149.33974852023), (-149.33974852023)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 485;
      ArrayUtils.shift(doubleArray0, 1210, (-1365), (int) (short)996);
      assertEquals(18, doubleArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)996;
      ArrayUtils.shift(shortArray0, (-1), 110, 2);
      assertArrayEquals(new short[] {(short)996}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Double double0 = new Double(1.5);
      assertNotNull(double0);
      assertEquals(1.5, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertNotNull(object0);
      assertEquals(1.5, object0);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = new Character(',');
      assertNotNull(character0);
      assertEquals(',', (char)character0);
      
      characterArray0[0] = character0;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      ArrayUtils.swap((Object[]) characterArray0, 1804, 1, (-1));
      assertEquals(1, characterArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = (char) character0;
      charArray0[1] = (char) character0;
      charArray0[2] = ',';
      int int0 = ArrayUtils.lastIndexOf(charArray0, (char) character0);
      assertArrayEquals(new char[] {',', ',', ','}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(2, int0);
      
      ArrayUtils.reverse(charArray0, (int) character0, 110);
      assertArrayEquals(new char[] {',', ',', ','}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1784);
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)121;
      shortArray0[3] = (short) (-3228);
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)76;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)1;
      shortArray0[8] = (short) (-1299);
      ArrayUtils.swap(shortArray0, 394, (int) (short) (-1299));
      assertArrayEquals(new short[] {(short) (-1784), (short)3, (short)121, (short) (-3228), (short)4, (short)76, (short)2, (short)1, (short) (-1299)}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom((-1));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short)1;
      objectArray0[1] = (Object) (short)76;
      Short short0 = new Short((short)13);
      assertNotNull(short0);
      assertEquals((short)13, (short)short0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) short0, (int) (short)1);
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
      
      Double double0 = new Double((short) (-1784));
      assertNotNull(double0);
      assertEquals((-1784.0), (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Double[]) null, 127, double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      byte byte0 = (byte)94;
      Byte[] byteArray1 = new Byte[5];
      byte byte1 = (byte) (-1);
      Byte byte2 = new Byte((byte) (-1));
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      
      byteArray1[0] = byte2;
      Byte byte3 = new Byte((byte) (-1));
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte3);
      
      byteArray1[1] = byte3;
      Byte byte4 = new Byte((byte)94);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte)94, (byte)byte4);
      
      byteArray1[2] = byte4;
      Byte byte5 = new Byte((byte)94);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertEquals((byte)94, (byte)byte5);
      
      byteArray1[3] = byte5;
      Byte byte6 = new Byte((byte) (-1));
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte6);
      
      byteArray1[4] = byte6;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, byte1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)94, (byte)94, (byte) (-1)}, byteArray2);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertFalse(byte1 == byte0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) byte0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {94}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(byte0 == byte1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte1;
      objectArray0[2] = (Object) byte2;
      objectArray0[3] = (Object) byte1;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) byte1;
      objectArray0[6] = (Object) byte5;
      objectArray0[7] = (Object) byte1;
      objectArray0[8] = (Object) byte1;
      ArrayUtils.swap(objectArray0, (int) (byte) (-1), 2128309686, (int) (byte) (-43));
      assertEquals(9, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.reverse(booleanArray0, 2728, 2728);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      Integer integer0 = new Integer(2728);
      assertNotNull(integer0);
      assertEquals(2728, (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0, "java.lang.Character");
      assertNotNull(string0);
      assertEquals("2728", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byte byte0 = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      byte byte1 = (byte)55;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-46);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)68, (byte) (-103), (byte)55, (byte) (-46)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte) (-103), (byte)55, (byte) (-46)}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = Short.valueOf((short) (byte)55);
      assertNotNull(short0);
      assertEquals((short)55, (short)short0);
      
      shortArray0[0] = short0;
      try { 
        Short.decode("java.lang.Character");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Character\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2325);
      intArray0[1] = 2;
      intArray0[2] = 42;
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-79));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[4];
      charArray0[1] = '0';
      charArray0[2] = '0';
      intArray0[1] = (int) '0';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'X', (int) (byte)0);
      assertArrayEquals(new char[] {'\u0000', '0', '0', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(charArray0, 1193);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '0', '0'}, charArray0);
      assertEquals(4, charArray0.length);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray2.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '0', '0'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '0', '0'}, charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      charArray0[7] = '0';
      charArray0[8] = '0';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '0', 0);
      assertArrayEquals(new char[] {'0', '0', '0', '0', '0', '0', '0', '0', '0'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(0, int0);
      
      ArrayUtils.shift(charArray0, 17);
      assertArrayEquals(new char[] {'0', '0', '0', '0', '0', '0', '0', '0', '0'}, charArray0);
      assertEquals(9, charArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '0';
      intArray0[1] = 0;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 218, 48);
      assertArrayEquals(new int[] {48, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = 235.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {17.0, 235.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {17.0, 235.0, 17.0, 235.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) 17, 0, (-1037.01245576333));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {17.0, 235.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[1] = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)5;
      doubleArray0[1] = (double) (byte)5;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = 213.3326;
      doubleArray0[5] = (double) (byte)5;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-2222.9595350419));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {5.0, 5.0, 0.0, 0.0, 213.3326, 5.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.0, 5.0, 0.0, 0.0, 213.3326, 5.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 2107.2996F;
      floatArray0[4] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-3422.464F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 2107.2996F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 2107.2996F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean boolean0 = new Boolean("org.apache.commons.lang3.mutable.MutableInt");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      
      Boolean boolean4 = Boolean.valueOf(true);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-483);
      shortArray0[1] = (short) (-1155);
      shortArray0[2] = (short)465;
      shortArray0[3] = (short)111;
      shortArray0[4] = (short) (-1574);
      boolean boolean5 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-483), (short) (-1155), (short)465, (short)111, (short) (-1574)}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean5);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short) (-483), 122, (double) (short) (-1155));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2325);
      intArray0[1] = 2;
      intArray0[2] = 42;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2325), 2, 42, 0}, intArray0);
      assertArrayEquals(new int[] {(-2325), 2, 42, 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 36);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(5, int0);
      
      ArrayUtils.shift(intArray1, (-2325));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2325), 2, 42, 0}, intArray0);
      assertArrayEquals(new int[] {2, 42, 0, (-2325)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 42;
      floatArray0[1] = (float) (-2325);
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {42.0F, (-2325.0F), 42.0F, (-2325.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {42.0F, (-2325.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      byte byte0 = (byte)97;
      Byte byte1 = new Byte((byte)97);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)97, (byte)byte1);
      
      byte byte2 = (byte) (-110);
      Byte byte3 = new Byte((byte) (-110));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-110), (byte)byte3);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte3;
      byteArray0[1] = byte3;
      byteArray0[2] = byte3;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte3;
      byteArray0[7] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-110), (byte) (-110), (byte)97, (byte)97, (byte)97, (byte) (-110), (byte)97}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byte0 == byte2);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-110), (byte) (-110), (byte)97, (byte)97, (byte)97, (byte) (-110), (byte)97}, byteArray2);
      assertEquals(8, byteArray2.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (int) byte2);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-110)}, intArray1);
      assertEquals(1, intArray1.length);
      assertFalse(byte2 == byte0);
      
      ArrayUtils.swap((Object[]) byteArray0, (-2130), 0, 1930);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      ArrayUtils.reverse((Object[]) null);
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '\u0000';
      doubleArray0[3] = (double) '\u0000';
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1130.303502585));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(charArray1, (-1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float(1067.56616);
      assertNotNull(float0);
      assertEquals(1067.5662F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(0.0);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1.0F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) floatArray0[3]);
      assertNotNull(float4);
      assertEquals(7, floatArray0.length);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float4, 0.01F);
      
      Float float5 = new Float(0.0);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((-1487.88));
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertEquals((-1487.88F), (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      ArrayUtils.reverse((Object[]) null);
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '\u0000';
      doubleArray0[3] = (double) '\u0000';
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Sp(8S<0;Yy%F";
      stringArray0[1] = "~k6lC('D6(hD%,O";
      stringArray0[2] = ";S3";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 2146562771, (-24));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1158.9404F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 1158.9404F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1158.9404F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 19;
      intArray0[1] = 2146562771;
      intArray0[2] = (-24);
      intArray0[3] = 2146562771;
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {19, 2146562771, (-24), 2146562771}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ArrayUtils.shift(charArray0, (-714), 2146562771, (-24));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 184;
      doubleArray0[3] = (double) 184;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 295.83634, 184.0);
      assertEquals("{2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(22, doubleArray0.length);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, 2112);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2112}, intArray1);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Double double0 = new Double(184);
      assertNotNull(double0);
      assertEquals(184.0, (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 184.0;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)7;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)2);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertArrayEquals(new byte[] {(byte)0, (byte)78, (byte)123, (byte)70, (byte) (-105), (byte)16, (byte)64, (byte)7}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      float[] floatArray0 = new float[11];
      floatArray0[0] = 0.0F;
      Character character0 = Character.valueOf(',');
      assertNotNull(character0);
      assertEquals(',', (char)character0);
      
      int[] intArray0 = new int[6];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      
      Character character1 = new Character(',');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals(',', (char)character1);
      
      Character character2 = new Character('2');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('2', (char)character2);
      
      Double double0 = new Double((-1229.46597808623));
      assertNotNull(double0);
      assertEquals((-1229.46597808623), (double)double0, 0.01);
      
      Integer integer0 = Integer.getInteger((String) null);
      assertNull(integer0);
      
      Byte byte0 = new Byte((byte)92);
      assertNotNull(byte0);
      assertEquals((byte)92, (byte)byte0);
      
      ArrayUtils.hashCode((Object) null);
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      ArrayUtils.shift(byteArray0, (-1037), 2520, 70);
      assertEquals(21, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2179.022144);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      Character[] characterArray0 = new Character[1];
      char char0 = 'y';
      Character character0 = Character.valueOf('y');
      assertNotNull(character0);
      assertEquals('y', (char)character0);
      
      characterArray0[0] = character0;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, (int) char0);
      assertEquals(1, characterArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Character character1 = new Character('a');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertEquals('a', (char)character1);
      
      Character character2 = new Character('2');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('2', (char)character2);
      
      Double double0 = new Double((-1069.95641689));
      assertNotNull(double0);
      assertEquals((-1069.95641689), (double)double0, 0.01);
      
      Integer integer0 = Integer.getInteger((String) null);
      assertNull(integer0);
      
      Byte byte0 = new Byte((byte)92);
      assertNotNull(byte0);
      assertEquals((byte)92, (byte)byte0);
      
      ArrayUtils.hashCode((Object) byte0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      ArrayUtils.shift(byteArray0, (-1037), (int) (byte)92, (int) char0);
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)92, (byte)92, (byte)92}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[11];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 9);
      assertEquals(11, booleanArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "L({nAced?Fe~";
      stringArray0[1] = "BjL]_DI.UdZ'";
      stringArray0[2] = "L({nAced?Fe~";
      stringArray0[3] = "L({nAced?Fe~";
      stringArray0[4] = "BjL]_DI.UdZ'";
      stringArray0[5] = "BjL]_DI.UdZ'";
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(11, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((float) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(689.0289F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(689.0289F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 689.0289F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 9;
      intArray0[2] = 9;
      intArray0[3] = 2626;
      intArray0[4] = 9;
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = 45;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 9, (-1));
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 2, 4}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1), 9, 9, 2626, 9, (-1), (-1), 45}, intArray0);
      assertEquals(8, intArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte) (-20);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-108), 869);
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-128), (byte)92, (byte) (-7), (byte) (-108), (byte)93, (byte) (-110), (byte) (-20)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      ArrayUtils.swap(longArray0, 0, 0, 0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      ArrayUtils.swap(byteArray0, (int) (byte) (-89), 0, (int) (byte) (-89));
      assertArrayEquals(new byte[] {(byte)107}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1788L), 0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = '8';
      charArray0[2] = 'F';
      ArrayUtils.shift((boolean[]) null, (-2837), (-3329), 0);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 13L, 2);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (-1);
      boolean boolean0 = ArrayUtils.contains(intArray0, 2140);
      assertArrayEquals(new int[] {0, (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, 1686L);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = ArrayUtils.indexOf(intArray0, 463, 235);
      assertArrayEquals(new int[] {0, (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1941.1486507272782;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (-2572.076436395);
      doubleArray0[3] = (double) 1686L;
      doubleArray0[4] = (double) 235;
      doubleArray0[5] = (double) 463;
      doubleArray0[6] = (double) 2140;
      doubleArray0[7] = (double) (-1);
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 1941.1486507272782, 2.0);
      assertArrayEquals(new double[] {1941.1486507272782, 2.0, (-2572.076436395), 1686.0, 235.0, 463.0, 2140.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-1712.0F));
      assertNotNull(float0);
      assertEquals((-1712.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(79.66856);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(79.66856F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1941.1486507272782);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1941.1487F, (float)float2, 0.01F);
      
      Float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, float2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      doubleArray0[0] = 409.0924235051861;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 409.0924235051861);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {409.0924235051861, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, 14);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-15);
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(false);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(false);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      Boolean[] booleanArray1 = new Boolean[6];
      booleanArray1[0] = boolean0;
      Boolean boolean4 = new Boolean("S");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4);
      
      booleanArray1[1] = boolean4;
      booleanArray1[2] = boolean2;
      booleanArray1[3] = boolean2;
      booleanArray1[4] = boolean0;
      booleanArray1[5] = boolean3;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, (boolean) boolean2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(boolean2.equals((Object)boolean3));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean4));
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt mutableInt0 = new MutableInt(53);
      assertEquals("53", mutableInt0.toString());
      assertEquals(53, (int)mutableInt0.getValue());
      assertEquals((short)53, mutableInt0.shortValue());
      assertEquals(53L, mutableInt0.longValue());
      assertEquals(53, mutableInt0.intValue());
      assertEquals(53.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(53.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(53, (int)mutableInt0.toInteger());
      assertEquals((byte)53, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((int) (byte) (-15));
      assertEquals((byte) (-15), mutableInt1.byteValue());
      assertEquals((-15.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-15), (int)mutableInt1.toInteger());
      assertEquals((-15), (int)mutableInt1.getValue());
      assertEquals((short) (-15), mutableInt1.shortValue());
      assertEquals((-15.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-15), mutableInt1.intValue());
      assertEquals((-15L), mutableInt1.longValue());
      assertEquals("-15", mutableInt1.toString());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt[] mutableIntArray1 = ArrayUtils.addAll(mutableIntArray0, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotNull(mutableIntArray1);
      assertEquals(2, mutableIntArray0.length);
      assertEquals(4, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean5 = ArrayUtils.isSorted((String[]) null, comparator0);
      assertTrue(boolean5);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2515);
      intArray0[1] = 63;
      intArray0[2] = (-5129);
      intArray0[3] = 1;
      intArray0[4] = (-2849);
      intArray0[5] = (-3022);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2515), 63, (-5129), 1, (-2849), (-3022)}, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      
      Character character0 = new Character('');
      assertNotNull(character0);
      assertEquals('', (char)character0);
      
      Double double0 = new Double(0.1);
      assertNotNull(double0);
      assertEquals(0.1, (double)double0, 0.01);
      
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted((Double[]) null, comparator0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2849);
      doubleArray0[1] = (double) (-5129);
      doubleArray0[2] = 0.1;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) (-3022);
      doubleArray0[5] = (double) '';
      doubleArray0[6] = (double) 63;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.1);
      assertArrayEquals(new double[] {(-2849.0), (-5129.0), 0.1, 1.0, (-3022.0), 127.0, 63.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, int0);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)7);
      assertNotNull(byte0);
      assertEquals((byte)7, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)7);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)7, (byte)byte1);
      
      byteArray0[1] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(344);
      assertNotNull(integer0);
      assertEquals(344, (int)integer0);
      
      MockRandom mockRandom0 = new MockRandom(344);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((-1788L));
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      LongStream longStream0 = mockRandom1.longs();
      assertNotSame(mockRandom1, mockRandom0);
      assertNotNull(longStream0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = '{';
      charArray0[2] = 't';
      charArray0[3] = '#';
      charArray0[4] = '_';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom1);
      assertNotSame(mockRandom1, mockRandom0);
      assertArrayEquals(new char[] {'{', 't', '#', '_', '%'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      Character character0 = new Character('{');
      assertNotNull(character0);
      assertEquals('{', (char)character0);
      
      boolean boolean0 = ArrayUtils.isSameType(mockRandom1, character0);
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      Character character0 = new Character('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      Character character1 = new Character('t');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('t', (char)character1);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character0;
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      characterArray0[3] = character1;
      characterArray0[4] = character1;
      characterArray0[5] = character1;
      characterArray0[6] = character0;
      characterArray0[7] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '+');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'t', 't', 't', 't', 't', 't', 't', 't'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (char)character1;
      doubleArray0[1] = (double) '+';
      doubleArray0[2] = (double) 't';
      doubleArray0[3] = (double) (-678);
      doubleArray0[4] = (double) (short)98;
      doubleArray0[5] = (double) (short) (-2019);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) character1);
      assertArrayEquals(new double[] {116.0, 43.0, 116.0, (-678.0), 98.0, (-2019.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(character1.equals((Object)character0));
      assertEquals(0, int0);
      
      ArrayUtils.shift(charArray0, (int) character0);
      assertArrayEquals(new char[] {'t', 't', 't', 't', 't', 't', 't', 't'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      assertTrue(character0.equals((Object)character1));
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {116.0, 43.0, 116.0, (-678.0), 98.0, (-2019.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {116.0, 43.0, 116.0, (-678.0), 98.0, (-2019.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 't';
      charArray1[1] = ':';
      charArray1[2] = '+';
      charArray1[3] = '{';
      Character[] characterArray1 = ArrayUtils.toObject(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertArrayEquals(new char[] {'t', ':', '+', '{'}, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, characterArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-5);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-31), (byte)119, (byte)0, (byte)24, (byte)6, (byte) (-5)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-14));
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-14), (byte)byte2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = 'p';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {')', 'p'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-14);
      shortArray0[1] = (short)4;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)120, (int) (byte) (-14));
      assertArrayEquals(new short[] {(short) (-14), (short)4}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-14), (short)4}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'p';
      intArray0[1] = (int) (short)4;
      intArray0[2] = (int) (byte)108;
      intArray0[3] = (-1);
      intArray0[4] = (int) ')';
      intArray0[5] = (int) ')';
      ArrayUtils.swap(intArray0, 83, (-952));
      assertArrayEquals(new int[] {112, 4, 108, (-1), 41, 41}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BjL]_I.UzBd;'";
      stringArray0[2] = "BjL]_I.UzBd;'";
      stringArray0[3] = stringArray0[1];
      stringArray0[4] = "F =$*eD7lii+B9p";
      int int0 = 2313;
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 2313, (int) 0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray0 = new long[7];
      longArray0[2] = (long) (byte)0;
      longArray0[6] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = '<';
      charArray0[2] = 'Q';
      charArray0[3] = '@';
      charArray0[4] = '(';
      charArray0[5] = 'W';
      charArray0[6] = 's';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'<', 'Q', '@', '(', 'W', 's', 'F'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Integer[] integerArray0 = new Integer[5];
      try { 
        Integer.valueOf(stringArray0[3]);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-109));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)57, (byte)57}, byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte)57}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)57;
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) (byte)57;
      objectArray0[3] = (Object) (-1.0);
      objectArray0[4] = (Object) (byte)57;
      objectArray0[5] = (Object) (-1.0);
      objectArray0[6] = (Object) (byte)57;
      objectArray0[7] = (Object) (byte)57;
      objectArray0[8] = (Object) (-1.0);
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(9, objectArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)57;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte)57);
      assertArrayEquals(new float[] {57.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 0, 52);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      Short[] shortArray0 = new Short[1];
      Short short0 = ArrayUtils.get(shortArray0, 0);
      assertNull(short0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1320L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray0 = new int[0];
      long[] longArray2 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      
      Long long0 = new Long((-611L));
      assertNotNull(long0);
      assertEquals((-611L), (long)long0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object0);
      assertEquals((-611L), object0);
      
      short[] shortArray1 = new short[8];
      shortArray1[0] = (short)293;
      shortArray1[1] = (short)55;
      shortArray1[2] = (short) (-1076);
      shortArray1[3] = (short) (-2279);
      shortArray1[4] = (short) (-12598);
      shortArray1[5] = (short)2651;
      shortArray1[6] = (short) (-1);
      shortArray1[7] = (short)454;
      int int1 = ArrayUtils.indexOf(shortArray1, (short)293);
      assertArrayEquals(new short[] {(short)293, (short)55, (short) (-1076), (short) (-2279), (short) (-12598), (short)2651, (short) (-1), (short)454}, shortArray1);
      assertEquals(8, shortArray1.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-585));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      MutableInt[] mutableIntArray0 = new MutableInt[7];
      Float float0 = new Float(184.0);
      assertNotNull(float0);
      assertEquals(184.0F, (float)float0, 0.01F);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals(184L, mutableInt0.longValue());
      assertEquals(184.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("184", mutableInt0.toString());
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals(184, (int)mutableInt0.getValue());
      assertEquals(184, (int)mutableInt0.toInteger());
      assertEquals(184.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(184, mutableInt0.intValue());
      assertEquals((short)184, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((-1));
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-1L), mutableInt1.longValue());
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((-1), mutableInt1.intValue());
      assertEquals("-1", mutableInt1.toString());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(mutableInt0);
      assertEquals(184L, mutableInt0.longValue());
      assertEquals(184.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("184", mutableInt0.toString());
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals(184, (int)mutableInt0.getValue());
      assertEquals(184, (int)mutableInt0.toInteger());
      assertEquals(184.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(184, mutableInt0.intValue());
      assertEquals((short)184, mutableInt0.shortValue());
      assertEquals(184, mutableInt2.intValue());
      assertEquals(184L, mutableInt2.longValue());
      assertEquals(184.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)184, mutableInt2.shortValue());
      assertEquals("184", mutableInt2.toString());
      assertEquals(184.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((byte) (-72), mutableInt2.byteValue());
      assertEquals(184, (int)mutableInt2.toInteger());
      assertEquals(184, (int)mutableInt2.getValue());
      assertNotNull(mutableInt2);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(mutableInt2);
      assertEquals(184L, mutableInt0.longValue());
      assertEquals(184.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("184", mutableInt0.toString());
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals(184, (int)mutableInt0.getValue());
      assertEquals(184, (int)mutableInt0.toInteger());
      assertEquals(184.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(184, mutableInt0.intValue());
      assertEquals((short)184, mutableInt0.shortValue());
      assertEquals(184, mutableInt2.intValue());
      assertEquals(184L, mutableInt2.longValue());
      assertEquals(184.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)184, mutableInt2.shortValue());
      assertEquals("184", mutableInt2.toString());
      assertEquals(184.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((byte) (-72), mutableInt2.byteValue());
      assertEquals(184, (int)mutableInt2.toInteger());
      assertEquals(184, (int)mutableInt2.getValue());
      assertEquals(184, (int)mutableInt3.getValue());
      assertEquals(184.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(184, (int)mutableInt3.toInteger());
      assertEquals((byte) (-72), mutableInt3.byteValue());
      assertEquals("184", mutableInt3.toString());
      assertEquals(184, mutableInt3.intValue());
      assertEquals(184L, mutableInt3.longValue());
      assertEquals(184.0, mutableInt3.doubleValue(), 0.01);
      assertEquals((short)184, mutableInt3.shortValue());
      assertNotNull(mutableInt3);
      assertTrue(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertTrue(mutableInt3.equals((Object)mutableInt2));
      assertTrue(mutableInt3.equals((Object)mutableInt0));
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt((-201));
      assertEquals((-201), mutableInt4.intValue());
      assertEquals((-201), (int)mutableInt4.getValue());
      assertEquals((-201), (int)mutableInt4.toInteger());
      assertEquals((byte)55, mutableInt4.byteValue());
      assertEquals((-201.0F), mutableInt4.floatValue(), 0.01F);
      assertEquals((short) (-201), mutableInt4.shortValue());
      assertEquals("-201", mutableInt4.toString());
      assertEquals((-201.0), mutableInt4.doubleValue(), 0.01);
      assertEquals((-201L), mutableInt4.longValue());
      assertNotNull(mutableInt4);
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt(mutableInt0);
      assertEquals(184L, mutableInt0.longValue());
      assertEquals(184.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("184", mutableInt0.toString());
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals(184, (int)mutableInt0.getValue());
      assertEquals(184, (int)mutableInt0.toInteger());
      assertEquals(184.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(184, mutableInt0.intValue());
      assertEquals((short)184, mutableInt0.shortValue());
      assertEquals(184, mutableInt5.intValue());
      assertEquals(184L, mutableInt5.longValue());
      assertEquals(184.0, mutableInt5.doubleValue(), 0.01);
      assertEquals((short)184, mutableInt5.shortValue());
      assertEquals("184", mutableInt5.toString());
      assertEquals((byte) (-72), mutableInt5.byteValue());
      assertEquals(184, (int)mutableInt5.getValue());
      assertEquals(184.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals(184, (int)mutableInt5.toInteger());
      assertNotNull(mutableInt5);
      assertTrue(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt0.equals((Object)mutableInt3));
      assertFalse(mutableInt0.equals((Object)mutableInt4));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertTrue(mutableInt5.equals((Object)mutableInt3));
      assertTrue(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertTrue(mutableInt5.equals((Object)mutableInt0));
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt mutableInt6 = new MutableInt((-201));
      assertEquals((-201.0), mutableInt6.doubleValue(), 0.01);
      assertEquals((-201L), mutableInt6.longValue());
      assertEquals((-201), mutableInt6.intValue());
      assertEquals("-201", mutableInt6.toString());
      assertEquals((-201.0F), mutableInt6.floatValue(), 0.01F);
      assertEquals((-201), (int)mutableInt6.toInteger());
      assertEquals((-201), (int)mutableInt6.getValue());
      assertEquals((byte)55, mutableInt6.byteValue());
      assertEquals((short) (-201), mutableInt6.shortValue());
      assertNotNull(mutableInt6);
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertTrue(mutableInt6.equals((Object)mutableInt4));
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      
      mutableIntArray0[6] = mutableInt6;
      MutableInt[] mutableIntArray1 = ArrayUtils.add(mutableIntArray0, 0, mutableInt4);
      assertEquals((-201), mutableInt4.intValue());
      assertEquals((-201), (int)mutableInt4.getValue());
      assertEquals((-201), (int)mutableInt4.toInteger());
      assertEquals((byte)55, mutableInt4.byteValue());
      assertEquals((-201.0F), mutableInt4.floatValue(), 0.01F);
      assertEquals((short) (-201), mutableInt4.shortValue());
      assertEquals("-201", mutableInt4.toString());
      assertEquals((-201.0), mutableInt4.doubleValue(), 0.01);
      assertEquals((-201L), mutableInt4.longValue());
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableInt4, mutableInt5);
      assertNotSame(mutableInt4, mutableInt0);
      assertNotSame(mutableInt4, mutableInt1);
      assertNotSame(mutableInt4, mutableInt2);
      assertNotSame(mutableInt4, mutableInt3);
      assertNotSame(mutableInt4, mutableInt6);
      assertNotNull(mutableIntArray1);
      assertEquals(8, mutableIntArray1.length);
      assertEquals(7, mutableIntArray0.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertTrue(mutableInt4.equals((Object)mutableInt6));
      assertFalse(mutableInt4.equals((Object)mutableInt5));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertFalse(mutableInt4.equals((Object)mutableInt3));
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.07035867344490586;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.07035867344490586;
      doubleArray0[7] = (double) (short)1136;
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)1136;
      longArray0[1] = (long) 'B';
      longArray0[2] = (long) 'B';
      longArray0[3] = (long) 'B';
      longArray0[4] = (long) 'B';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1886, (int) (short)1136);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1136L, 66L, 66L, 66L, 66L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift((float[]) null, 1072);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)121;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)121, (byte)0, (byte)0, (byte)121}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)13461;
      shortArray0[2] = (short) (-2105);
      shortArray0[3] = (short) (-2312);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)13461, (short)0, (short) (-2105), (short) (-2312)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      ArrayUtils.swap(charArray0, 1038, (int) (short)13461, Integer.MIN_VALUE);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2;
      ArrayUtils.shift(floatArray0, 2);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)39;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)69, (byte)24, (byte)84, (byte) (-1), (byte)39}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      int[] intArray0 = new int[2];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "o\"\"?okrJd-!:|");
      assertNull(stringArray0);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 'N';
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 78L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.swap((byte[]) null, 8, 0);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)37;
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      doubleArray0[0] = 409.0924235051861;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 409.0924235051861);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {409.0924235051861, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, 14);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-78);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-14);
      shortArray0[1] = (short) (byte) (-91);
      shortArray0[2] = (short) (byte) (-15);
      shortArray0[3] = (short) (byte) (-15);
      shortArray0[4] = (short) (byte)83;
      shortArray0[5] = (short) (byte)83;
      shortArray0[6] = (short) (byte) (-91);
      ArrayUtils.swap(shortArray0, 2, 2174);
      assertArrayEquals(new short[] {(short) (-14), (short) (-91), (short) (-15), (short) (-15), (short)83, (short)83, (short) (-91)}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 0;
      longArray0[1] = (long) (byte)21;
      ArrayUtils.shift(longArray0, 191, 369, 1342);
      assertArrayEquals(new long[] {0L, 21L}, longArray0);
      assertEquals(2, longArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)21;
      ArrayUtils.reverse(byteArray0, (-14), (int) (byte)97);
      assertArrayEquals(new byte[] {(byte)21, (byte)10, (byte)97, (byte)97, (byte)97, (byte)21, (byte)21, (byte)21, (byte)21}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((byte) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte) (-1));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1), (int)integer1);
      
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (byte)21);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      
      ArrayUtils.shift(longArray0, (-14));
      assertArrayEquals(new long[] {0L, 21L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      byte byte0 = (byte) (-14);
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', is neither of type Map.Entry nor an Array");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-14));
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-14), (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-14));
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-14), (byte)byte3);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte4 = new Byte((byte)107);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte)107, (byte)byte4);
      
      byteArray0[0] = byte4;
      byteArray0[1] = byte2;
      Byte byte5 = new Byte((byte)0);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte5);
      
      byteArray0[2] = byte5;
      byteArray0[3] = byte2;
      byteArray0[4] = byte1;
      byteArray0[5] = byte2;
      byteArray0[6] = byte3;
      byteArray0[7] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-43));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)107, (byte) (-14), (byte)0, (byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14)}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)107, (byte) (-14), (byte)0, (byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14)}, byteArray2);
      assertEquals(8, byteArray2.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (byte)0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.swap((Object[]) stringArray0, (-1), 1804, (int) (byte)108);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (int) byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -14, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3774;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)3774;
      intArray0[1] = 85;
      intArray0[2] = (int) (short)3774;
      intArray0[3] = (int) (short)3774;
      intArray0[4] = (int) (short)3774;
      intArray0[5] = (int) (short)3774;
      intArray0[6] = (int) (short)3774;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "', has a length less than 2";
      objectArray0[1] = (Object) "', has a length less than 2";
      objectArray0[2] = (Object) 3774;
      objectArray0[3] = (Object) 3774;
      objectArray0[4] = (Object) (short)3774;
      objectArray0[5] = (Object) "', has a length less than 2";
      objectArray0[6] = (Object) 3774;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, objectArray0.length);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null, 3774);
      assertNull(intArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = '';
      charArray0[2] = 'c';
      charArray0[3] = 'S';
      charArray0[4] = 'E';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'u', '', 'c', 'S', 'E'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)21;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)21;
      intArray0[2] = (int) (byte)21;
      intArray0[3] = (int) (byte)97;
      intArray0[4] = (int) (byte)97;
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 0, 191, 21);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse(byteArray0, 114, (-490));
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 21;
      Object object0 = ArrayUtils.get(objectArray0, 191);
      assertNull(object0);
      assertEquals(6, objectArray0.length);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) (byte)21;
      objectArray0[3] = (Object) (byte)97;
      objectArray0[4] = (Object) (byte)97;
      objectArray0[5] = (Object) (byte)21;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 108);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 21;
      longArray1[1] = (long) 21;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, 2352L);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(longArray1, longArray0);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {21L, 21L}, longArray1);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = 'L';
      charArray0[2] = '$';
      charArray0[3] = '\'';
      charArray0[4] = 'W';
      charArray0[5] = '|';
      charArray0[6] = 'l';
      charArray0[7] = 'b';
      ArrayUtils.swap(charArray0, (-490), (int) (byte)21, (int) (byte)97);
      assertArrayEquals(new char[] {'[', 'L', '$', '\'', 'W', '|', 'l', 'b'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2047);
      shortArray0[1] = (short) (-3356);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short)45;
      shortArray0[7] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, (int) (byte)0, 394, 2720);
      assertArrayEquals(new short[] {(short) (-2047), (short) (-3356), (short)0, (short)0, (short)0, (short)0, (short)45, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      Double double0 = new Double((byte)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-526);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-385);
      intArray0[3] = 0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)45;
      intArray0[6] = (int) (short) (-3356);
      intArray0[7] = (int) (short)0;
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (short)0, Integer.MAX_VALUE);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, (-526), 0, (-385), 0, 0, 45, (-3356), 0}, intArray1);
      assertArrayEquals(new int[] {(-526), 0, (-385), 0, 0, 45, (-3356), 0}, intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.addAll((Character[]) null, (Character[]) null);
      assertNull(characterArray0);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-54), (-54));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '-');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'-'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, (-54), (int) '-');
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'-'}, charArray1);
      assertArrayEquals(new char[] {'-'}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-54);
      doubleArray0[1] = (double) (-54);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-477.70367617));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-54.0), (-54.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-54.0), (-54.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Character character0 = new Character('M');
      assertNotNull(character0);
      assertEquals('M', (char)character0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 92, (-2923));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'d', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-73);
      longArray0[1] = (long) (byte) (-123);
      byteArray0[3] = (byte)75;
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)75;
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte)75;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-73);
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-73), (byte)0, (byte)75}, byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-29), (byte)75, (byte)0, (byte) (-73)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-29);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {(short) (-29)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Float float0 = new Float((-347.724F));
      assertNotNull(float0);
      assertEquals((-347.724F), (float)float0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSameType(float0, float0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-1));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 1172);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)2;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)99);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)99, (byte)2}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      BitSet bitSet0 = new BitSet((byte)0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Character character0 = new Character('E');
      assertNotNull(character0);
      assertEquals('E', (char)character0);
      
      Character character1 = new Character('`');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('`', (char)character1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'H');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((byte)99);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int int0 = mockRandom0.nextInt();
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(0, int0);
      
      ArrayUtils.shift(charArray0, 0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'E';
      doubleArray0[1] = (double) '`';
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {69.0, 96.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {69.0, 96.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Character[] characterArray1 = ArrayUtils.toObject(charArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-1366));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((-2550.8375153));
      assertNotNull(float0);
      assertEquals((-2550.8374F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (-1));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) (-1));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2550.8374F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      Float float3 = new Float(99.08F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(99.08F, (float)float3, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType("'E9u/V=z", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 105;
      intArray0[2] = 105;
      intArray0[3] = 105;
      intArray0[4] = (int) (short)0;
      intArray0[5] = 105;
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = '2';
      intArray0[0] = (int) 'Z';
      charArray0[3] = '*';
      charArray0[4] = 'Z';
      charArray0[5] = 'Z';
      MockRandom mockRandom0 = new MockRandom((-178L));
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'2', '\u0000', '*', 'Z', 'Z', 'Z'}, charArray0);
      assertEquals(6, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameType(mockRandom0, mockRandom0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      Character character0 = new Character('c');
      assertNotNull(character0);
      assertEquals('c', (char)character0);
      
      boolean boolean0 = ArrayUtils.isSameType(character0, character0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      double[] doubleArray0 = new double[5];
      ArrayUtils.swap(doubleArray0, 15, 15);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 13;
      floatArray0[1] = (float) 'r';
      floatArray0[2] = 1384.7118F;
      floatArray0[3] = (float) 'r';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-845), 13);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {13.0F, 114.0F, 1384.7118F, 114.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {13.0F, 114.0F, 1384.7118F, 114.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 2107.2996F;
      floatArray0[4] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-3422.464F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 2107.2996F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 2107.2996F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean boolean0 = new Boolean("org.apache.commons.lang3.mutable.MutableInt");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      
      Boolean boolean4 = Boolean.valueOf(true);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(booleanArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-6);
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character character1 = new Character(' ');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals(' ', (char)character1);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-6);
      longArray0[1] = (long) (-4712);
      longArray0[2] = (long) (byte)75;
      longArray0[3] = (long) (-4712);
      ArrayUtils.shift(longArray0, 2, (-5), 1230);
      assertArrayEquals(new long[] {(-6L), (-4712L), 75L, (-4712L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-238.809082), (int) (byte) (-6));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(characterArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertEquals(0, characterArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-6);
      shortArray0[1] = (short) (byte)97;
      shortArray0[2] = (short) (byte)97;
      shortArray0[3] = (short) (byte) (-123);
      shortArray0[4] = (short) (byte) (-6);
      shortArray0[5] = (short) (byte)97;
      shortArray0[6] = (short) (byte) (-123);
      shortArray0[7] = (short) (byte) (-6);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-6), (short)97, (short)97, (short) (-123), (short) (-6), (short)97, (short) (-123), (short) (-6)}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-845);
      floatArray0[1] = (float) (-845);
      floatArray0[2] = 1384.7118F;
      floatArray0[3] = 1384.7118F;
      floatArray0[4] = 1384.7118F;
      floatArray0[5] = 1384.7118F;
      floatArray0[6] = 1384.7118F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-4676), (-4676));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-845.0F), (-845.0F), 1384.7118F, 1384.7118F, 1384.7118F, 1384.7118F, 1384.7118F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) (-19);
      floatArray0[1] = (float) Integer.MAX_VALUE;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 8, (-19));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 2.14748365E9F, (-19.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, 114, "+~*00N4#*");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 114, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1378;
      intArray0[1] = 484;
      intArray0[2] = 1832;
      intArray0[3] = (-3915);
      intArray0[4] = 36;
      intArray0[5] = 6;
      intArray0[6] = 487;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1832, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'J';
      charArray0[1] = '\'';
      charArray0[2] = 'm';
      charArray0[3] = '\'';
      charArray0[4] = 'C';
      charArray0[5] = 'z';
      charArray0[6] = 'N';
      charArray0[7] = 'V';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'J', '\'', 'm', '\'', 'C', 'z', 'N', 'V'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '\'';
      floatArray0[1] = (float) 'm';
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) 'N';
      floatArray0[4] = (float) 'V';
      floatArray0[5] = (float) 'J';
      floatArray0[6] = (float) 'z';
      floatArray0[7] = (float) 'm';
      floatArray0[8] = (float) 'N';
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'V';
      intArray0[1] = (int) 'N';
      intArray0[2] = (int) 'C';
      intArray0[3] = (int) 'C';
      intArray0[4] = (int) 'N';
      intArray0[5] = (int) 'C';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 86, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)117;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-128), (byte) (-6), (byte)2, (byte)76, (byte)1, (byte)117}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)64, (byte) (-128), (byte) (-6), (byte)2, (byte)76, (byte)1, (byte)117}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (long) (byte)1;
      longArray0[2] = (long) (byte)2;
      int int0 = ArrayUtils.indexOf(longArray0, 2147483647L);
      assertArrayEquals(new long[] {1L, 1L, 2L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (byte)64;
      doubleArray0[3] = (double) (byte)117;
      doubleArray0[4] = (double) (byte) (-128);
      doubleArray0[5] = (double) 2147483647L;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (-4795.157);
      doubleArray0[8] = (double) 2L;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)117;
      intArray0[1] = (int) (byte)76;
      intArray0[2] = (int) (byte)117;
      intArray0[3] = 98;
      intArray0[4] = (int) (byte)76;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 117, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1920.0);
      doubleArray0[2] = (-1038.4566177705);
      doubleArray0[3] = 18.0;
      doubleArray0[4] = 457.7347;
      doubleArray0[5] = (-38.80066559266);
      doubleArray0[6] = 328.0;
      doubleArray0[7] = 837.60339;
      doubleArray0[8] = 45.0;
      int[] intArray0 = new int[5];
      intArray0[0] = 1610;
      intArray0[1] = 2;
      intArray0[2] = (-987);
      intArray0[3] = (-50);
      intArray0[4] = (-102);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1610, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(345);
      assertNotNull(integer0);
      assertEquals(345, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte1));
      assertEquals((byte) (-14), object0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 55;
      boolean boolean3 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {55.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (byte) (-14));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.reverse((char[]) null);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 55;
      boolean boolean4 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {55L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      
      boolean boolean5 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      String[] stringArray0 = new String[4];
      stringArray0[1] = "-14";
      stringArray0[1] = "-14";
      stringArray0[2] = "-14";
      stringArray0[3] = "-14";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (int) 16067, (-3356));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {55L}, longArray1);
      assertArrayEquals(new long[] {55L}, longArray0);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      
      boolean boolean6 = ArrayUtils.isSorted((char[]) null);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, Float.NaN);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {55.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {55.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, 55L, 55);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertArrayEquals(new long[] {55L}, longArray1);
      assertArrayEquals(new long[] {55L}, longArray0);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[2] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0L);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      ArrayUtils.shift((long[]) null, 211, 114, 2);
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 211;
      intArray0[2] = 211;
      intArray0[3] = 114;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-1), 211, 211, 114}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 114;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 114);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 114.0F, (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 114;
      intArray1[1] = 211;
      intArray1[2] = 2;
      ArrayUtils.swap(intArray1, 11, 2578);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {114, 211, 2, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (-1), (-1));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1629);
      intArray0[1] = (-1629);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1629), (-1629)}, intArray0);
      assertArrayEquals(new int[] {(-1629), (-1629)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      long[] longArray0 = new long[3];
      longArray0[0] = (-2704L);
      longArray0[1] = (long) (byte)59;
      longArray0[2] = (long) (byte)15;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1912L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2704L), 59L, 15L}, longArray0);
      assertArrayEquals(new long[] {(-1912L), (-2704L), 59L, 15L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 15L;
      doubleArray0[1] = (double) (-1912L);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) (-2704L);
      doubleArray0[4] = (double) (byte)59;
      doubleArray0[5] = (double) (byte) (-41);
      doubleArray0[6] = (double) 59L;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {15.0, (-1912.0), (-1.0), (-2704.0), 59.0, (-41.0), 59.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      Long long0 = new Long((byte)15);
      assertNotNull(long0);
      assertEquals(15L, (long)long0);
      
      Long[] longArray2 = new Long[0];
      Long long1 = new Long((-1L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      
      Long[] longArray3 = ArrayUtils.removeAllOccurences(longArray2, long1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotNull(longArray3);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertFalse(long1.equals((Object)long0));
      assertFalse(longArray3.equals((Object)longArray2));
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Sp(8S<0;Yy%F";
      stringArray0[1] = "Sp(8S<0;Yy%F";
      stringArray0[2] = ";S3";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 2146562771, (-24));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1158.9404F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 1158.9404F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1158.9404F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = '#';
      charArray0[2] = '[';
      charArray0[3] = 'j';
      charArray0[4] = '6';
      charArray0[5] = 'E';
      charArray0[6] = 'j';
      charArray0[7] = '`';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'s', '#', '[', 'j', '6', 'E', 'j', '`'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)13457;
      char[] charArray0 = new char[2];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '\u0000';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      Long long0 = Long.valueOf((long) (short)13457);
      assertNotNull(long0);
      assertEquals(13457L, (long)long0);
      
      Long long1 = new Long((short)13457);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(13457L, (long)long1);
      
      Long long2 = new Long((short)13457);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertEquals(13457L, (long)long2);
      
      Long[] longArray0 = new Long[7];
      longArray0[0] = long1;
      longArray0[1] = long0;
      longArray0[2] = long2;
      longArray0[3] = long1;
      Long long3 = new Long((long) longArray0[2]);
      assertNotNull(long3);
      assertEquals(7, longArray0.length);
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertEquals(13457L, (long)long3);
      
      longArray0[4] = long3;
      longArray0[5] = long1;
      longArray0[6] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {13457L, 13457L, 13457L, 13457L, 13457L, 13457L, 13457L}, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.reverse(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      Long long0 = Long.valueOf((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((-1L));
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      
      Long long2 = new Long((-2902L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-2902L), (long)long2);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      
      ArrayUtils.reverse((byte[]) null, 51, 51);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)30586;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2037;
      shortArray0[3] = (short)14;
      shortArray0[4] = (short) (-1448);
      shortArray0[5] = (short)1422;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2037);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)30586, (short)0, (short)2037, (short)14, (short) (-1448), (short)1422}, shortArray0);
      assertArrayEquals(new short[] {(short)30586, (short)0, (short)14, (short) (-1448), (short)1422}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = 'T';
      charArray0[2] = 'p';
      charArray0[3] = 'Z';
      charArray0[4] = 'P';
      charArray0[5] = 'c';
      charArray0[6] = 'W';
      ArrayUtils.swap(charArray0, 2162, 2, 217);
      assertArrayEquals(new char[] {'8', 'T', 'p', 'Z', 'P', 'c', 'W'}, charArray0);
      assertEquals(7, charArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) '8';
      floatArray0[2] = (float) 'Z';
      floatArray0[3] = (float) Integer.MAX_VALUE;
      floatArray0[4] = (float) 217;
      ArrayUtils.shift(floatArray0, 2614);
      assertArrayEquals(new float[] {56.0F, 90.0F, 2.14748365E9F, 217.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 184;
      longArray0[1] = (long) 184;
      longArray0[2] = (long) 184;
      longArray0[3] = (-53L);
      longArray0[4] = (long) 184;
      longArray0[5] = (long) 184;
      longArray0[6] = (long) 184;
      longArray0[7] = (long) 184;
      longArray0[8] = (long) 184;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {184L, 184L, 184L, (-53L), 184L, 184L, 184L, 184L, 184L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-80));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[20];
      objectArray0[0] = (Object) 184L;
      objectArray0[1] = (Object) 184L;
      objectArray0[2] = (Object) 184L;
      objectArray0[3] = (Object) 184L;
      ArrayUtils.shift(objectArray0, 9, 184, (int) (byte) (-80));
      assertEquals(20, objectArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) 184L);
      assertNull(floatArray0);
      
      ArrayUtils.reverse(longArray0, (int) (byte) (-80), 69);
      assertArrayEquals(new long[] {184L, 184L, 184L, 184L, 184L, (-53L), 184L, 184L, 184L}, longArray0);
      assertEquals(9, longArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 's';
      charArray0[2] = 'p';
      charArray0[3] = 'r';
      charArray0[4] = '6';
      charArray0[5] = '@';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'6', 's', 'p', 'r', '6', '@'}, charArray0);
      assertArrayEquals(new char[] {'6', 's', 'p', 'r', '6', '@'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      Object object2 = ArrayUtils.get(objectArray0, 7, (Object) "Sp(8S<0;Yy%F");
      assertNotNull(object2);
      assertEquals(1, objectArray0.length);
      assertEquals("Sp(8S<0;Yy%F", object2);
      
      Object object3 = ArrayUtils.get(objectArray0, 7);
      assertNull(object3);
      assertEquals(1, objectArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-1));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(344);
      assertNotNull(integer0);
      assertEquals(344, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte1));
      assertEquals((byte) (-14), object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) "-14";
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) integer0;
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = objectArray0[3];
      Object object1 = ArrayUtils.get(objectArray0, 344);
      assertNull(object1);
      assertEquals(8, objectArray0.length);
      
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) byte1;
      objectArray1[1] = objectArray0[5];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)530);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)1;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)1, (byte) (-1), (byte)1, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = 'E';
      charArray0[2] = '5';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'c');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\'', 'E', '5'}, charArray0);
      assertArrayEquals(new char[] {'\'', 'E', '5'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 'E';
      byteArray0[3] = (byte) (-1);
      objectArray0[2] = (Object) (byte) (-1);
      objectArray0[3] = (Object) '\'';
      objectArray0[4] = (Object) (byte) (-1);
      objectArray0[5] = (Object) '\'';
      objectArray0[6] = (Object) '5';
      objectArray0[7] = (Object) (byte) (-1);
      objectArray0[8] = (Object) (byte) (-1);
      ArrayUtils.shift(objectArray0, (-2083), (int) (byte) (-1), (int) (byte) (-1));
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)1;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)1, (byte) (-1), (byte)1, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = 'E';
      charArray0[2] = '5';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'c');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\'', 'E', '5'}, charArray0);
      assertArrayEquals(new char[] {'\'', 'E', '5'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 'E';
      objectArray0[1] = (Object) (byte) (-1);
      objectArray0[2] = (Object) (byte) (-1);
      objectArray0[3] = (Object) '\'';
      objectArray0[4] = (Object) (byte) (-1);
      objectArray0[5] = (Object) '\'';
      objectArray0[6] = (Object) '5';
      objectArray0[7] = (Object) (byte) (-1);
      objectArray0[8] = (Object) (byte)1;
      ArrayUtils.shift(objectArray0, (-2083), (int) (byte) (-1), 43);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 184;
      longArray0[1] = (long) 184;
      longArray0[2] = (long) 184;
      longArray0[3] = (-53L);
      longArray0[5] = (long) 184;
      longArray0[6] = (long) 184;
      longArray0[7] = (long) 184;
      longArray0[8] = (long) 184;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {184L, 184L, 184L, (-53L), 0L, 184L, 184L, 184L, 184L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-80));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[20];
      objectArray0[0] = (Object) 184L;
      objectArray0[1] = (Object) 184L;
      objectArray0[2] = (Object) 184L;
      objectArray0[3] = (Object) 184L;
      ArrayUtils.shift(objectArray0, 9, 184, (int) (byte) (-80));
      assertEquals(20, objectArray0.length);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2743L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2743L);
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-2743L), (-2952));
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      long[] longArray2 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-104);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)14, (byte) (-8), (byte)14, (byte)14, (byte) (-104), (byte) (-104)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (int)  (-104), 9);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(250, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertNotSame(longArray0, longArray2);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte) (-95));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-95)}, byteArray2);
      assertArrayEquals(new byte[] {(byte)14, (byte) (-8), (byte)14, (byte)14, (byte) (-104), (byte) (-104)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray2.length);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shift((Object[]) stringArray0, 65, 191, 1894);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(250, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, (-350));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -350, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 117);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(3, int0);
      
      ArrayUtils.shift((int[]) null, (-1));
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 52;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 117;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(52, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 52, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      float[] floatArray0 = new float[5];
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, (int) (short)0, Integer.MAX_VALUE, 2720);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Double double0 = new Double(1724.6669262175);
      assertNotNull(double0);
      assertEquals(1724.6669262175, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertNotNull(object0);
      assertEquals(1724.6669262175, object0);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1992.522139032;
      doubleArray0[1] = (double) 2156;
      doubleArray0[2] = (-3461.399824553978);
      ArrayUtils.shift(doubleArray0, 2156);
      assertArrayEquals(new double[] {1992.522139032, 2156.0, (-3461.399824553978), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[3] = 'm';
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift((char[]) null, 3752);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      long[] longArray0 = new long[10];
      DoubleStream doubleStream0 = mockRandom0.doubles((long) 3752);
      assertNotNull(doubleStream0);
      
      longArray0[0] = (long) 'm';
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 109L}, longArray0);
      assertEquals(10, longArray0.length);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray2, 3752);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3752, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      short[] shortArray0 = new short[14];
      shortArray0[0] = (short) (-1301);
      shortArray0[1] = (short) (-638);
      shortArray0[2] = (short)18;
      ArrayUtils.shift((char[]) null, 3752);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles(1L);
      assertNotNull(doubleStream0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)18;
      longArray0[1] = (long) (short)18;
      longArray0[2] = 1L;
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {18L, 1L, 18L}, longArray0);
      assertEquals(3, longArray0.length);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((short) (-1301));
      assertNotNull(double0);
      assertEquals((-1301.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((short) (-638));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-638.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-3202.569834929));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-3202.569834929), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertNotNull(double3);
      assertEquals(4, doubleArray0.length);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((-3202.569834929), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1301.0), (-638.0), (-3202.569834929), (-3202.569834929)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray1, (int) (short) (-1301));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1301, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-2143067391));
      assertNotNull(integer0);
      assertEquals((-2143067391), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      doubleArray0[0] = 409.0924235051861;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 409.0924235051861);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {409.0924235051861, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)101;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {101.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-15));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-15)}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      Integer[] integerArray0 = new Integer[3];
      MutableInt mutableInt0 = new MutableInt((Number) (byte)101);
      assertEquals((short)101, mutableInt0.shortValue());
      assertEquals(101, (int)mutableInt0.toInteger());
      assertEquals(101, (int)mutableInt0.getValue());
      assertEquals(101L, mutableInt0.longValue());
      assertEquals("101", mutableInt0.toString());
      assertEquals(101, mutableInt0.intValue());
      assertEquals(101.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(101.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)101, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.toInteger();
      assertEquals((short)101, mutableInt0.shortValue());
      assertEquals(101, (int)mutableInt0.toInteger());
      assertEquals(101, (int)mutableInt0.getValue());
      assertEquals(101L, mutableInt0.longValue());
      assertEquals("101", mutableInt0.toString());
      assertEquals(101, mutableInt0.intValue());
      assertEquals(101.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(101.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)101, mutableInt0.byteValue());
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte)101);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(101, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((byte)101);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(101, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 485;
      ArrayUtils.shift(doubleArray0, 1210, (-1365), (int) (short)996);
      assertEquals(18, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)996, 5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(18, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, (-2862.89));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(18, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      ArrayUtils.swap((byte[]) null, (-1), (-1570), 2482);
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 485;
      ArrayUtils.shift(doubleArray0, 1210, (-1365), (int) (short)996);
      assertEquals(18, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      Object object0 = ArrayUtils.get((Object[]) null, (-2688));
      assertNull(object0);
      
      Object object1 = ArrayUtils.get((Object[]) null, 45);
      assertNull(object1);
      
      Object object2 = ArrayUtils.get((Object[]) null, (-2312));
      assertNull(object2);
      
      Integer integer0 = new Integer(485);
      assertNotNull(integer0);
      assertEquals(485, (int)integer0);
      
      Object object3 = ArrayUtils.get((Object[]) null, 1210, (Object) integer0);
      assertNotNull(object3);
      assertEquals(485, object3);
      
      Integer integer1 = new Integer(1210);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)object3));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1210, (int)integer1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) integer0, (-1365));
      assertFalse(integer0.equals((Object)integer1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 2107.2996F;
      floatArray0[4] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-3422.464F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 2107.2996F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 2107.2996F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean boolean0 = new Boolean("org.apache.commons.lang3.mutable.MutableInt");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      
      Boolean boolean4 = Boolean.valueOf(true);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 1L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertEquals("{0, 1, 3, 4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 0L, 1L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      ArrayUtils.reverse((char[]) null, 1, 322);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      Short[] shortArray0 = new Short[4];
      short short0 = (short)1;
      Short short1 = new Short((short)1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)1, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)1, (short)short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short)2);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short)2, (short)short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short((short)2);
      assertNotNull(short4);
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertEquals((short)2, (short)short4);
      
      shortArray0[3] = short4;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-105), (-1288490189));
      assertArrayEquals(new byte[] {(byte) (-51), (byte)104, (byte) (-58), (byte)2, (byte)64, (byte)2, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = 'M';
      charArray0[2] = 'W';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'M';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2028, charArray0, charArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2028, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      int int0 = 0;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      Float float0 = new Float((float) (byte)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertNotNull(object0);
      assertEquals(0.0F, object0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1743;
      longArray0[1] = (long) (byte)0;
      ArrayUtils.swap(longArray0, 5, (-827), (-2134546998));
      assertArrayEquals(new long[] {1743L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 105;
      intArray0[2] = 105;
      intArray0[3] = 105;
      intArray0[4] = (int) (short)0;
      intArray0[5] = 105;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 105, 105, 105, 0, 105}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 105;
      integerArray0[1] = (Integer) 105;
      Integer integer0 = ArrayUtils.get(integerArray0, 105, (Integer) 105);
      assertNotNull(integer0);
      assertEquals(2, integerArray0.length);
      assertEquals(105, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(2, integerArray0.length);
      assertEquals(105, object0);
      
      ArrayUtils.swap(longArray0, 49, 120, 2761);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(10, longArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      Object object0 = ArrayUtils.get((Object[]) null, 91);
      assertNull(object0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 184;
      doubleArray0[3] = (double) 184;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 295.83634, (-843.476682));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(22, doubleArray0.length);
      
      int[] intArray1 = ArrayUtils.insert(184, (int[]) null, (int[]) null);
      assertNull(intArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 2112, (double) 184);
      assertEquals(22, doubleArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 184;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0.0;
      MutableInt mutableInt0 = new MutableInt(184.0);
      assertEquals(184.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(184.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(184, mutableInt0.intValue());
      assertEquals((short)184, mutableInt0.shortValue());
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals(184, (int)mutableInt0.getValue());
      assertEquals(184, (int)mutableInt0.toInteger());
      assertEquals("184", mutableInt0.toString());
      assertEquals(184L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.get(objectArray0, 184, (Object) mutableInt0);
      assertEquals(184.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(184.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(184, mutableInt0.intValue());
      assertEquals((short)184, mutableInt0.shortValue());
      assertEquals((byte) (-72), mutableInt0.byteValue());
      assertEquals(184, (int)mutableInt0.getValue());
      assertEquals(184, (int)mutableInt0.toInteger());
      assertEquals("184", mutableInt0.toString());
      assertEquals(184L, mutableInt0.longValue());
      assertEquals(184, (int)mutableInt1.toInteger());
      assertEquals((byte) (-72), mutableInt1.byteValue());
      assertEquals(184.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals("184", mutableInt1.toString());
      assertEquals(184, (int)mutableInt1.getValue());
      assertEquals(184L, mutableInt1.longValue());
      assertEquals((short)184, mutableInt1.shortValue());
      assertEquals(184.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(184, mutableInt1.intValue());
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      assertNotNull(mutableInt1);
      assertEquals(6, objectArray0.length);
      
      objectArray0[5] = (Object) mutableInt1;
      ArrayUtils.swap(objectArray0, 46, 2112, 184);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      short[] shortArray0 = new short[4];
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 105;
      intArray0[2] = 105;
      intArray0[3] = 105;
      intArray0[4] = (int) (short)0;
      intArray0[5] = 105;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 105, 105, 105, 0, 105}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)4103);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)4103}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)4103}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L), (-836));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-836);
      intArray0[1] = (-836);
      intArray0[2] = (-836);
      intArray0[3] = (-836);
      intArray0[4] = (-836);
      intArray0[5] = (-836);
      intArray0[6] = (-836);
      intArray0[7] = (-836);
      intArray0[8] = (-836);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-173), (-836));
      assertArrayEquals(new int[] {(-836), (-836), (-836), (-836), (-836), (-836), (-836), (-836), (-836)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (-1));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '>';
      charArray0[1] = '5';
      charArray0[2] = 'k';
      charArray0[3] = '`';
      charArray0[4] = 'R';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -836, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)127;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)127}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "F =$*eD7lii+B9p";
      stringArray0[1] = "BjL]_I.UzBd;'";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (int) 118, 1019);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '@';
      charArray0[2] = '{';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'Z');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'', '@', '{'}, charArray0);
      assertArrayEquals(new char[] {'', '@', '{'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.addAll((Character[]) null, (Character[]) null);
      assertNull(characterArray0);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-54), (-54));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '-');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'-'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, (-54), (-1));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'-'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-54);
      doubleArray0[1] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-477.70367617));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-54.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-54.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 8;
      floatArray0[2] = (float) 8;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 8, 1856);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 8.0F, 8.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2146863149), (int) (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Short short0 = new Short((byte)12);
      assertNotNull(short0);
      assertEquals((short)12, (short)short0);
      
      Short short1 = new Short((byte)72);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)72, (short)short1);
      
      Short short2 = new Short((short) (-115));
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short) (-115), (short)short2);
      
      Short short3 = new Short((short) (-2658));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short) (-2658), (short)short3);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)12}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-187), (-187));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-6);
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character character1 = new Character(' ');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals(' ', (char)character1);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-6);
      longArray0[1] = (long) (-4712);
      longArray0[2] = (long) (byte)75;
      longArray0[3] = (long) (-4712);
      ArrayUtils.shift(longArray0, 2, (-5), 1230);
      assertArrayEquals(new long[] {(-6L), (-4712L), 75L, (-4712L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.swap(doubleArray0, (int) (byte) (-123), 1);
      assertArrayEquals(new double[] {0.0, 93.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-123);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1019, 13);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-123.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 1);
      Class<Long> class0 = Long.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      byteArray0[3] = (byte) (-41);
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)31, 1.0);
      assertArrayEquals(new double[] {93.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)31);
      assertArrayEquals(new byte[] {(byte)31, (byte)31, (byte)0, (byte) (-41)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Long long0 = Long.getLong((String) null);
      assertNull(long0);
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray0, (byte)31);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)31, (byte)31, (byte)0, (byte) (-41)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)31, (byte)31, (byte)31, (byte)0, (byte) (-41)}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      long[] longArray1 = new long[5];
      longArray1[0] = (long) (byte)31;
      longArray1[1] = (long) (-1);
      longArray1[2] = (long) (byte)31;
      longArray1[3] = 1065L;
      longArray1[4] = (long) (byte)31;
      int int2 = ArrayUtils.indexOf(longArray1, 1065L, (-2158));
      assertArrayEquals(new long[] {31L, (-1L), 31L, 1065L, 31L}, longArray1);
      assertEquals(5, longArray1.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3, int2);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, ')');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'D');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[7];
      intArray0[1] = 2;
      intArray0[2] = (int) 'D';
      intArray0[3] = 6;
      intArray0[4] = 6;
      intArray0[5] = (int) 'D';
      intArray0[6] = 6;
      int[] intArray1 = ArrayUtils.insert(6, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 2, 68, 6, 6, 68, 6}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      try { 
        Short.valueOf("", 6);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      Short short0 = new Short((short)4846);
      assertNotNull(short0);
      assertEquals((short)4846, (short)short0);
      
      Short short1 = new Short((short)4846);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)4846, (short)short1);
      
      Short short2 = new Short((short)4846);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)4846, (short)short2);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)4846;
      longArray0[1] = (long) (short)4846;
      longArray0[5] = (long) (short) (-115);
      longArray0[3] = (long) (short)4846;
      Long long0 = new Long(4254L);
      assertNotNull(long0);
      assertEquals(4254L, (long)long0);
      
      Long[] longArray1 = new Long[7];
      longArray1[0] = (Long) 4846L;
      longArray1[1] = long0;
      longArray1[2] = (Long) 4846L;
      longArray1[3] = (Long) 4846L;
      longArray1[4] = long0;
      longArray1[5] = (Long) (-115L);
      longArray1[6] = (Long) (-115L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {4846L, 4254L, 4846L, 4846L, 4254L, (-115L), (-115L)}, longArray2);
      assertEquals(7, longArray2.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray0));
      
      ArrayUtils.reverse((byte[]) null, 1158, (-1665));
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.addAll((Character[]) null, (Character[]) null);
      assertNull(characterArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)555;
      shortArray0[1] = (short)3341;
      shortArray0[2] = (short)555;
      shortArray0[3] = (short)555;
      shortArray0[4] = (short) (-1246);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)555;
      ArrayUtils.swap(doubleArray0, (int) (short)555, 105, (-9));
      assertArrayEquals(new double[] {555.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'd');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift((byte[]) null, 0);
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)90);
      assertNull(byteArray0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 409.0924235051861);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = false;
      int int0 = 14;
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Long long0 = Long.valueOf((long) 14);
      assertNotNull(long0);
      assertEquals(14L, (long)long0);
      
      Long long1 = new Long((-238L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-238L), (long)long1);
      
      Long[] longArray1 = new Long[5];
      longArray1[0] = long1;
      longArray1[1] = long1;
      longArray1[3] = long0;
      longArray1[4] = long0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 3439L;
      longArray0[1] = (-3088L);
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, 40, 40);
      assertArrayEquals(new long[] {3439L, (-3088L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[4] = 'p';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'p', (-1));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', 'p', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      ArrayUtils.swap((byte[]) null, 40, 90);
      int[] intArray0 = new int[4];
      intArray0[0] = (-350);
      intArray0[1] = (int) 'p';
      intArray0[2] = (int) '\u0000';
      intArray0[3] = (int) '\u0000';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {(-350), 112, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(charArray0, '\u0000', (-992));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', 'p', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = 'Q';
      charArray0[3] = '+';
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '+';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-319), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -319, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1L;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 1L;
      floatArray0[4] = (float) 1L;
      floatArray0[5] = (float) 1L;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)100;
      shortArray0[1] = (short) (-1101);
      shortArray0[2] = (short) (-1300);
      shortArray0[3] = (short) (-1721);
      shortArray0[4] = (short)3786;
      shortArray0[5] = (short)322;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1721), (int) (short) (-1101));
      assertArrayEquals(new short[] {(short)100, (short) (-1101), (short) (-1300), (short) (-1721), (short)3786, (short)322}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Float float0 = new Float((-177.0F));
      assertNotNull(float0);
      assertEquals((-177.0F), (float)float0, 0.01F);
      
      Object object0 = ArrayUtils.get(objectArray0, (-427), (Object) float0);
      assertNotNull(object0);
      assertEquals(8, objectArray0.length);
      assertEquals((-177.0F), object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.toPrimitive((Object) float0);
      assertNotNull(object1);
      assertEquals((-177.0F), object1);
      
      objectArray0[1] = object1;
      Integer integer0 = new Integer((-427));
      assertNotNull(integer0);
      assertEquals((-427), (int)integer0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 447;
      intArray0[1] = (-427);
      intArray0[2] = (-427);
      int int0 = 114;
      intArray0[3] = 114;
      intArray0[4] = (-427);
      intArray0[5] = (-427);
      intArray0[6] = 70;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-427));
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 2, 4, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {447, (-427), (-427), 114, (-427), (-427), 70}, intArray0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2325);
      intArray0[1] = 2;
      intArray0[2] = 42;
      intArray0[3] = (-226);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray0);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 36);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(3, int0);
      
      ArrayUtils.shift(intArray1, (-2325));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2325), 2, 42, (-226)}, intArray0);
      assertArrayEquals(new int[] {2, 42, (-226), (-2325)}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-342.3);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 42, (-342.3));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-342.3)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-797), byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((float[]) null, 14.0F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 2290L;
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (-797);
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 2290L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2290L, (-1L), (-797L), (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-797L), (-1L), (-1L), (-1L)}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 2341L);
      assertNull(longArray0);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1718.903));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1718.903), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1154.485858398);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(1154.485858398, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      assertNotNull(double3);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(0.7, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(100.0);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals(100.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(0.1);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals(0.1, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 1210;
      int int0 = (-54);
      intArray0[2] = (-54);
      int int1 = 2104;
      intArray0[3] = 2104;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2104, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2176;
      shortArray0[1] = (short)4239;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), (int) (short)4239);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2176, (short)4239}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)2176;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1029.66, (int) (short) (-1), 0.0);
      assertArrayEquals(new double[] {2176.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)4239;
      intArray0[0] = (int) (short)2176;
      intArray0[3] = (int) (short)2176;
      intArray0[4] = (-1);
      ArrayUtils.shift(intArray0, (int) (short)2176, 2176, (-3344));
      assertArrayEquals(new int[] {2176, 0, 0, 2176, (-1)}, intArray0);
      assertEquals(5, intArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 2440.93783585963, 2176, 2176.0);
      assertArrayEquals(new double[] {2176.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray1 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray1, (int) (short)4239);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4239, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-881.9079F);
      floatArray0[2] = (-2976.0F);
      floatArray0[3] = 0.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (-484));
      assertArrayEquals(new float[] {1.0F, (-881.9079F), (-2976.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[8];
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-484);
      longArray0[6] = (long) (-484);
      longArray0[7] = (long) (-484);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 2147483646, 1504);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L), (-1L), (-484L), (-484L), (-484L)}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-484));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -484, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 485;
      ArrayUtils.shift(doubleArray0, 1210, (-1365), (int) (short)996);
      assertEquals(18, doubleArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)996;
      ArrayUtils.shift(shortArray0, (-1), 110, 2);
      assertArrayEquals(new short[] {(short)996}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Double double0 = new Double(1.5);
      assertNotNull(double0);
      assertEquals(1.5, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertNotNull(object0);
      assertEquals(1.5, object0);
      
      Character[] characterArray0 = new Character[1];
      char char0 = ',';
      Character character0 = new Character(',');
      assertNotNull(character0);
      assertTrue(character0.equals((Object)char0));
      assertEquals(',', (char)character0);
      
      characterArray0[0] = character0;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 59;
      intArray0[2] = (int) (short)996;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(characterArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 996, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(344);
      assertNotNull(integer0);
      assertEquals(344, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte1));
      assertEquals((byte) (-14), object0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)16067, 0);
      assertEquals((-1), int0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-118);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-118), 3061);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-14), (byte) (-118), (byte) (-118)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-55));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-14), (byte) (-118), (byte) (-118)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-14), (byte) (-118), (byte) (-118)}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 184;
      floatArray0[1] = (float) 184;
      floatArray0[2] = (float) 184;
      floatArray0[3] = (float) 184;
      floatArray0[4] = (float) 184;
      floatArray0[5] = (-2416.0833F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {184.0F, 184.0F, 184.0F, 184.0F, 184.0F, (-2416.0833F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)9;
      shortArray0[2] = (short) (-575);
      shortArray0[3] = (short) (-1097);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-1297);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-1691);
      ArrayUtils.swap(shortArray0, (-1), 2);
      assertArrayEquals(new short[] {(short) (-575), (short)9, (short)0, (short) (-1097), (short)2, (short) (-1297), (short)0, (short) (-1691)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = 'y';
      charArray0[2] = 'm';
      charArray0[3] = 'N';
      charArray0[4] = '{';
      charArray0[5] = 'W';
      charArray0[6] = 'z';
      charArray0[7] = '-';
      ArrayUtils.reverse(charArray0, 4, (-2232));
      assertArrayEquals(new char[] {'+', 'y', 'm', 'N', '{', 'W', 'z', '-'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) (short)996;
      doubleArray0[1] = (double) 485;
      ArrayUtils.shift(doubleArray0, 1210, (-1365), (int) (short)996);
      assertEquals(18, doubleArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 996.0;
      objectArray0[1] = (Object) 485.0;
      objectArray0[2] = (Object) 485.0;
      objectArray0[3] = (Object) 485.0;
      objectArray0[4] = (Object) 485.0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "PdOG'GxgcH");
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1301);
      shortArray0[1] = (short) (-640);
      shortArray0[2] = (short)18;
      shortArray0[3] = (short)2995;
      shortArray0[4] = (short)32;
      shortArray0[5] = (short) (-244);
      shortArray0[6] = (short)919;
      ArrayUtils.shift(shortArray0, (-2079), (int) (short)18, (-1835));
      assertArrayEquals(new short[] {(short) (-640), (short)18, (short)2995, (short)32, (short) (-244), (short)919, (short) (-1301)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Double double0 = new Double((short)32);
      assertNotNull(double0);
      assertEquals(32.0, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertNotNull(object0);
      assertEquals(32.0, object0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'd');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(345);
      assertNotNull(integer0);
      assertEquals(345, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte1));
      assertEquals((byte) (-14), object0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 55;
      boolean boolean3 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {55.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (byte) (-14));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.reverse((char[]) null);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 55;
      boolean boolean4 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {55L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      
      boolean boolean5 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-14";
      stringArray0[1] = "-14";
      stringArray0[2] = "-14";
      stringArray0[3] = "-14";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (int) 16067, (-3356));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(4, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {55L}, longArray1);
      assertArrayEquals(new long[] {55L}, longArray0);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray0.length);
      
      boolean boolean6 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, Float.NaN);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {55.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {55.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(345);
      assertNotNull(integer0);
      assertEquals(345, (int)integer0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[1];
      ArrayUtils.swap(doubleArray0, (-1), (-2952), (int) (byte) (-14));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (byte) (-14));
      assertFalse(boolean1);
      
      Character character0 = new Character('_');
      assertNotNull(character0);
      assertEquals('_', (char)character0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 345;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-2715.935F);
      floatArray0[4] = (float) '_';
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-1);
      boolean boolean2 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertArrayEquals(new float[] {345.0F, 1.0F, (-2715.935F), 0.0F, 95.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.addAll((Character[]) null, (Character[]) null);
      assertNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((float[]) null, 3907.0F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3461.399824553978);
      doubleArray0[1] = (-3461.399824553978);
      doubleArray0[2] = (-3461.399824553978);
      doubleArray0[3] = (-3461.399824553978);
      doubleArray0[4] = (double) (byte)94;
      doubleArray0[5] = (-3461.399824553978);
      doubleArray0[6] = (double) (byte)94;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 94.0);
      assertArrayEquals(new double[] {(-3461.399824553978), (-3461.399824553978), (-3461.399824553978), (-3461.399824553978), 94.0, (-3461.399824553978), 94.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      
      char char0 = '=';
      Character character0 = Character.valueOf('=');
      assertNotNull(character0);
      assertEquals('=', (char)character0);
      
      Character[] characterArray0 = new Character[6];
      Character character1 = new Character('9');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertEquals('9', (char)character1);
      
      characterArray0[0] = character1;
      characterArray0[1] = character0;
      Character character2 = new Character('9');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertEquals('9', (char)character2);
      
      characterArray0[2] = character2;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      Character character3 = new Character((char) character2);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertEquals('9', (char)character3);
      
      characterArray0[5] = character3;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, (int) char0);
      assertEquals(6, characterArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.shift(doubleArray0, (int) (byte)94, 823, 2146671437);
      assertArrayEquals(new double[] {(-3461.399824553978), (-3461.399824553978), (-3461.399824553978), (-3461.399824553978), 94.0, (-3461.399824553978), 94.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) character3, (-1), 4730.554);
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3, 4, 5, 6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-3461.399824553978), (-3461.399824553978), (-3461.399824553978), (-3461.399824553978), 94.0, (-3461.399824553978), 94.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character2.equals((Object)character3));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      
      Float[] floatArray0 = new Float[7];
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-3826.8235F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-3826.8235F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1.0F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[0]);
      assertNotNull(float3);
      assertEquals(7, floatArray0.length);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) 823);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(823.0F, (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((float) floatArray0[0]);
      assertNotNull(float5);
      assertEquals(7, floatArray0.length);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float(0.0);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertEquals(0.0F, (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-3826.8235F), 1.0F, (-1.0F), 823.0F, (-1.0F), 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) (-994);
      doubleArray0[2] = (-1194.2);
      doubleArray0[3] = (double) (-994);
      doubleArray0[4] = (double) (-994);
      doubleArray0[5] = (double) 296L;
      doubleArray0[6] = (double) (-994);
      doubleArray0[7] = (double) (-994);
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {(-994.0), (-1194.2), (-994.0), (-994.0), 296.0, (-994.0), (-994.0), 2.147483647E9}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)111;
      Byte byte0 = new Byte((byte)111);
      assertNotNull(byte0);
      assertEquals((byte)111, (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      
      Byte byte2 = new Byte((byte)111);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)111, (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-1));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte3);
      
      Byte byte4 = new Byte((byte)53);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte)53, (byte)byte4);
      
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-114));
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray1);
      assertSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)111);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)111}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray1 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = ' ';
      charArray0[2] = '6';
      charArray0[3] = ']';
      charArray0[4] = 'M';
      charArray0[5] = '+';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ']');
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertEquals("{3}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'#', ' ', '6', ']', 'M', '+'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 409.0924235051861;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 409.0924235051861);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {409.0924235051861, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[14];
      booleanArray0[0] = false;
      ArrayUtils.reverse(doubleArray0, (int) (byte) (-15), 13);
      assertArrayEquals(new double[] {0.0, 409.0924235051861}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(345);
      assertNotNull(integer0);
      assertEquals(345, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte1));
      assertEquals((byte) (-14), object0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray0 = ArrayUtils.insert(17, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(345);
      assertNotNull(integer0);
      assertEquals(345, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte1));
      assertEquals((byte) (-14), object0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)16067, 0);
      assertEquals((-1), int0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = 'G';
      charArray0[2] = 'P';
      ArrayUtils.shift(charArray0, 3273);
      assertArrayEquals(new char[] {'X', 'G', 'P'}, charArray0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'G';
      floatArray0[1] = (float) (byte) (-14);
      floatArray0[2] = (float) 'G';
      floatArray0[3] = 2637.168F;
      floatArray0[4] = (float) 'X';
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (byte) (-14);
      float[] floatArray1 = ArrayUtils.insert(0, (float[]) null, floatArray0);
      assertNull(floatArray1);
      assertArrayEquals(new float[] {71.0F, (-14.0F), 71.0F, 2637.168F, 88.0F, (-1.0F), (-14.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Integer integer0 = new Integer(3608);
      assertNotNull(integer0);
      assertEquals(3608, (int)integer0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object1);
      assertEquals(3608, object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = ArrayUtils.get(objectArray0, 3608);
      assertNull(object3);
      assertEquals(7, objectArray0.length);
      
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      
      objectArray0[4] = object4;
      Object[] objectArray1 = new Object[6];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) integer0;
      objectArray1[1] = object4;
      objectArray1[2] = (Object) integer0;
      objectArray1[3] = object2;
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-3073.9));
      assertNotNull(double0);
      assertEquals((-3073.9), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = ArrayUtils.get(doubleArray0, 3608);
      assertNull(double1);
      assertEquals(1, doubleArray0.length);
      
      Object object5 = ArrayUtils.get(objectArray1, 3608, (Object) null);
      assertNotSame(objectArray1, objectArray0);
      assertNull(object5);
      assertEquals(6, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray0[5] = null;
      long[] longArray0 = new long[2];
      longArray0[0] = 2147L;
      longArray0[1] = (long) 3608;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1916L, 3608);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {2147L, 3608L}, longArray0);
      assertEquals(2, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object2, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 99;
      intArray0[1] = (-3339);
      intArray0[2] = (-4110);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {99, (-3339), (-4110)}, intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)100;
      ArrayUtils.swap(byteArray0, 351, 83, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)63, (byte)2, (byte) (-64), (byte)100}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = (-1L);
      longArray0[2] = (-2533L);
      longArray0[3] = 83L;
      longArray0[4] = (-2144L);
      longArray0[5] = 0L;
      longArray0[6] = 110L;
      longArray0[7] = 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 110L, (-35));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{6}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(7, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {1L, (-1L), (-2533L), 83L, (-2144L), 0L, 110L, 1L}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-797), byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1817));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1817)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 0, 52);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      Object[] objectArray0 = new Object[0];
      Short[] shortArray0 = new Short[1];
      Short short0 = ArrayUtils.get(shortArray0, 0);
      assertNull(short0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      
      Long long0 = new Long((-611L));
      assertNotNull(long0);
      assertEquals((-611L), (long)long0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object0);
      assertEquals((-611L), object0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 52;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 52;
      floatArray0[3] = (float) (-611L);
      floatArray0[4] = (float) 1320L;
      boolean boolean1 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {52.0F, 0.0F, 52.0F, (-611.0F), 1320.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 184;
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'd';
      charArray0[3] = 'q';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeElement(charArray1, 'S');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'q';
      Short short0 = new Short((short)53);
      assertNotNull(short0);
      assertEquals((short)53, (short)short0);
      
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-193L);
      longArray1[1] = (-193L);
      longArray1[2] = (long) (short)53;
      long[] longArray2 = ArrayUtils.addAll(longArray1, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-193L), (-193L), 53L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(14, longArray2.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      char[] charArray3 = ArrayUtils.removeElement(charArray1, 'K');
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray3);
      assertNotNull(charArray3);
      assertArrayEquals(new char[] {}, charArray3);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray3.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      
      char[] charArray4 = ArrayUtils.nullToEmpty(charArray3);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray4);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray4, charArray3);
      assertNotSame(charArray4, charArray2);
      assertSame(charArray4, charArray1);
      assertNotSame(charArray4, charArray0);
      assertSame(charArray1, charArray4);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray3);
      assertNotNull(charArray4);
      assertArrayEquals(new char[] {}, charArray3);
      assertArrayEquals(new char[] {}, charArray4);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray3.length);
      assertEquals(0, charArray4.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray4.equals((Object)charArray3));
      assertFalse(charArray4.equals((Object)charArray2));
      assertFalse(charArray4.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray3));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "style";
      stringArray0[1] = "-\"q?dNU[";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)114;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)120);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)2, (byte)114}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)2, (byte)114}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_em2VEo]q7j,UWW5223";
      stringArray0[1] = "i|DM3b~vA;<H)f_sQ~|";
      stringArray0[2] = "q#z'2bzBDW@";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.addAll((Character[]) null, (Character[]) null);
      assertNull(characterArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)555;
      shortArray0[1] = (short)3341;
      shortArray0[2] = (short)555;
      shortArray0[3] = (short)555;
      shortArray0[4] = (short) (-1246);
      shortArray0[5] = (short) (-2350);
      shortArray0[6] = (short)2227;
      shortArray0[7] = (short) (-1274);
      shortArray0[8] = (short)99;
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (-1.0));
      assertNull(doubleArray0);
      
      ArrayUtils.shift((char[]) null, (int) (short)2227);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-6);
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character character1 = new Character(' ');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals(' ', (char)character1);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-6);
      longArray0[1] = (long) (-4712);
      longArray0[2] = (long) (byte)75;
      longArray0[3] = (long) (-4712);
      ArrayUtils.shift(longArray0, 2, (-5), 1230);
      assertArrayEquals(new long[] {(-6L), (-4712L), 75L, (-4712L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.swap(doubleArray0, (int) (byte) (-123), (int) ' ');
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) characterArray0, (int) (byte) (-123));
      assertEquals(0, characterArray0.length);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, 114);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, 2, (int) (byte)97, (int) (byte) (-6));
      assertArrayEquals(new long[] {(-6L), (-4712L), 75L, (-4712L)}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      float[] floatArray0 = new float[5];
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1956);
      intArray0[1] = (int) (byte)59;
      intArray0[2] = (-1);
      intArray0[3] = (-1956);
      intArray0[4] = (-1956);
      intArray0[5] = (-1);
      intArray0[6] = (-2972);
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)59, (int) (byte)59);
      assertArrayEquals(new int[] {(-1956), 59, (-1), (-1956), (-1956), (-1), (-2972)}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      long[] longArray1 = new long[6];
      longArray1[0] = (long) 1;
      longArray1[1] = (long) (byte)59;
      longArray1[2] = (long) (-1956);
      longArray1[3] = (long) (-1956);
      longArray1[4] = (long) (-1);
      longArray1[5] = (long) (-1);
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {1L, 59L, (-1956L), (-1956L), (-1L), (-1L)}, longArray1);
      assertEquals(0, longArray2.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray1));
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-1956));
      assertNotNull(double0);
      assertEquals((-1956.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2972));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2972.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-633.6073500817));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-633.6073500817), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(3.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(3.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1956));
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((-1956.0), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-702.604851604));
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((-702.604851604), (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      ArrayUtils.shift(charArray0, (int) (short)0, (int) (short)0, (-1));
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2179.022144);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      Character[] characterArray0 = new Character[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) characterArray0);
      assertSame(characterArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '-');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '-';
      intArray0[1] = (int) '+';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '?');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.swap(charArray1, 43, 43, 108);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 2341L);
      assertNull(longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = '0';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'B', 218);
      assertArrayEquals(new char[] {'B', '0'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'B';
      charArray1[1] = '0';
      charArray1[2] = '0';
      charArray1[3] = '0';
      charArray1[4] = 'B';
      charArray1[5] = 'B';
      ArrayUtils.shift(charArray1, 0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'B', '0', '0', '0', 'B', 'B'}, charArray1);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int1 = ArrayUtils.lastIndexOf((int[]) null, 0, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Class<Long[]> class0 = Long[].class;
      Long[] longArray1 = ArrayUtils.nullToEmpty((Long[]) null, class0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)98;
      intArray0[1] = (int) (short)98;
      intArray0[2] = (int) (short)98;
      intArray0[3] = (int) (short)98;
      intArray0[4] = (-253);
      intArray0[5] = (int) 't';
      intArray0[6] = (int) 't';
      intArray0[7] = (int) (short) (-2019);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, (int) (short)98);
      assertArrayEquals(new int[] {98, 98, 98, 98, (-253), 116, 116, (-2019)}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 98;
      objectArray0[1] = (Object) (-2019);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (short)98;
      objectArray0[4] = (Object) 98;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      assertEquals(5, objectArray1.length);
      assertEquals(5, objectArray0.length);
      
      ArrayUtils.swap((char[]) null, 98, 51, 537);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      Character character0 = new Character('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short)98, (short) (-2019));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object0 = ArrayUtils.get(objectArray1, 2);
      assertNotSame(objectArray1, objectArray0);
      assertNull(object0);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray0[0] = null;
      Object[] objectArray2 = new Object[0];
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      
      Object object1 = ArrayUtils.get(objectArray2, 0);
      assertNotSame(objectArray2, objectArray1);
      assertNotSame(objectArray2, objectArray0);
      assertNull(object1);
      assertEquals(0, objectArray2.length);
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      
      objectArray0[1] = null;
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      Object object2 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object2);
      assertEquals(2L, object2);
      
      objectArray0[2] = object2;
      Object object3 = ArrayUtils.get(objectArray1, (-1));
      assertNotSame(objectArray1, objectArray2);
      assertNotSame(objectArray1, objectArray0);
      assertNull(object3);
      assertEquals(0, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray2));
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray0[3] = null;
      Object object4 = ArrayUtils.get(objectArray0, 0);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray0, objectArray2);
      assertNull(object4);
      assertEquals(4, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray0.equals((Object)objectArray2));
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray1);
      assertNotSame(objectArray1, objectArray2);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray1.length);
      assertEquals(0, stringArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray2));
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)91);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      Byte byte0 = new Byte((byte)25);
      assertNotNull(byte0);
      assertEquals((byte)25, (byte)byte0);
      
      Byte byte1 = new Byte((byte)57);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)57, (byte)byte1);
      
      MutableInt mutableInt0 = new MutableInt((int) (byte)57);
      assertEquals((byte)57, mutableInt0.byteValue());
      assertEquals(57.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(57.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(57, (int)mutableInt0.toInteger());
      assertEquals(57, (int)mutableInt0.getValue());
      assertEquals(57L, mutableInt0.longValue());
      assertEquals("57", mutableInt0.toString());
      assertEquals(57, mutableInt0.intValue());
      assertEquals((short)57, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0);
      assertEquals((byte)57, mutableInt0.byteValue());
      assertEquals(57.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(57.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(57, (int)mutableInt0.toInteger());
      assertEquals(57, (int)mutableInt0.getValue());
      assertEquals(57L, mutableInt0.longValue());
      assertEquals("57", mutableInt0.toString());
      assertEquals(57, mutableInt0.intValue());
      assertEquals((short)57, mutableInt0.shortValue());
      assertNotNull(string0);
      assertEquals("57", string0);
      
      Integer integer0 = new Integer(3768);
      assertNotNull(integer0);
      assertEquals(3768, (int)integer0);
      
      Byte byte2 = new Byte((byte)25);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)25, (byte)byte2);
      
      Object object0 = ArrayUtils.get((Object[]) null, 1210);
      assertNull(object0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (byte)57);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)127;
      intArray0[5] = 4217;
      intArray0[2] = (int) (byte)50;
      intArray0[3] = (int) (byte)50;
      intArray0[4] = (int) (byte) (-18);
      intArray0[5] = (int) (byte) (-18);
      ArrayUtils.swap(intArray0, (int) (byte) (-1), (-1), 36);
      assertArrayEquals(new int[] {127, 0, 50, 50, (-18), (-18), 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((byte)50);
      assertNotNull(long0);
      assertEquals(50L, (long)long0);
      
      longArray0[0] = long0;
      long long1 = 59L;
      Long long2 = new Long(59L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals(59L, (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(Integer.MAX_VALUE);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertEquals(2147483647L, (long)long3);
      
      longArray0[2] = long3;
      Long long4 = new Long((-1839L));
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertEquals((-1839L), (long)long4);
      
      longArray0[3] = long4;
      Long long5 = new Long(50);
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long2));
      assertEquals(50L, (long)long5);
      
      longArray0[4] = long5;
      String string0 = "x`M\"";
      try { 
        Long.decode("x`M\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"x`M\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "bWGgTbUI<,3Kh");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '6');
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'='}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {184, 0}, intArray0);
      assertArrayEquals(new int[] {184, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'k', 2257);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertArrayEquals(new char[] {'='}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[1] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[2] = class1;
      classArray0[3] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, 1599);
      assertNull(intArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1, "_y0D#iL;BRbW&dr1");
      assertNotNull(stringArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = 'k';
      charArray0[2] = 's';
      charArray0[3] = '$';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'k');
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'+', 'k', 's', '$'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int[] intArray1 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, '[', 1599);
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertArrayEquals(new char[] {'+', 'k', 's', '$'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '0', (-2548));
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(charArray0, 218);
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-2144L);
      longArray0[1] = (long) (-2548);
      longArray0[2] = 4039L;
      longArray0[3] = (long) '0';
      longArray0[4] = 0L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {(-2144L), (-2548L), 4039L, 48L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-931L), (-1));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-2144L), (-2548L), 4039L, 48L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2548);
      intArray0[1] = 218;
      intArray0[2] = (int) '0';
      intArray0[3] = (int) '0';
      intArray0[4] = (-1);
      intArray0[5] = (-2548);
      ArrayUtils.swap(intArray0, (-2093), 0);
      assertArrayEquals(new int[] {(-2548), 218, 48, 48, (-1), (-2548)}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      Character character0 = new Character(';');
      assertNotNull(character0);
      assertEquals(';', (char)character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {';', ';', ';'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1070, 56);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {';', ';', ';'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'k', 1540);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {';', ';', ';'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      long[] longArray0 = new long[1];
      longArray0[0] = 4431L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 3439L);
      assertArrayEquals(new long[] {4431L}, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2668L;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1.0F);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2147051644), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2147051644, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[1];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-4935), 191);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 191;
      ArrayUtils.reverse(intArray0, 103, 103);
      assertArrayEquals(new int[] {1, 191}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray3.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {1, 191}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean1);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      boolean[] booleanArray4 = ArrayUtils.toPrimitive(booleanArray1, (boolean) booleanArray1[0]);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotNull(booleanArray4);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray4));
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray4.length);
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)108, (-1));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 191;
      doubleArray0[1] = (double) 103;
      doubleArray0[2] = (double) 191;
      doubleArray0[3] = 2.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {191.0, 103.0, 191.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 191.0, 103.0, 191.0, 2.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'false', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 36);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 36;
      intArray0[2] = 36;
      intArray0[3] = 36;
      intArray0[4] = 36;
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = 36;
      intArray0[8] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      char[] charArray0 = new char[2];
      int int0 = ArrayUtils.indexOf(charArray0, '9', 9);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((int[]) null);
      Double[] doubleArray0 = new Double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-55);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-63), (byte) (-35), (byte) (-29), (byte) (-73), (byte) (-55)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-63);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-29);
      shortArray0[3] = (short) (byte) (-55);
      shortArray0[4] = (short) (byte) (-73);
      shortArray0[5] = (short) (byte) (-73);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-63), (short) (-1), (short) (-29), (short) (-55), (short) (-73), (short) (-73)}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = new short[8];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (byte) (-29);
      shortArray2[1] = (short) (byte) (-73);
      shortArray2[2] = (short) (byte) (-35);
      shortArray2[3] = (short) (byte) (-1);
      shortArray2[4] = (short) (byte) (-73);
      shortArray2[5] = (short) (byte) (-73);
      shortArray2[6] = (short) (byte) (-29);
      shortArray2[7] = (short) (byte) (-73);
      int int0 = ArrayUtils.indexOf(shortArray2, (short) (-73));
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {(short) (-29), (short) (-73), (short) (-35), (short) (-1), (short) (-73), (short) (-73), (short) (-29), (short) (-73)}, shortArray2);
      assertEquals(8, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertEquals(1, int0);
      
      org.evosuite.runtime.Random.setNextRandom((short) (-1));
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf('W');
      assertNotNull(character0);
      assertEquals('W', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = 'C';
      Character character1 = Character.valueOf('C');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('C', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('W');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertEquals('W', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('C');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals('C', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(char0);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)char0));
      assertEquals('C', (char)character4);
      
      characterArray0[4] = character4;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-73);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (short) (-55);
      intArray0[3] = (int) 'W';
      intArray0[4] = 34;
      intArray0[5] = (int) (byte) (-1);
      intArray0[6] = (int) (short) (-73);
      intArray0[7] = (int) (short) (-29);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(characterArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 87, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(345);
      assertNotNull(integer0);
      assertEquals(345, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte1));
      assertEquals((byte) (-14), object0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 55;
      boolean boolean3 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {55.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (byte) (-14));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.reverse((char[]) null);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 55;
      boolean boolean4 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {55L}, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      
      boolean boolean5 = ArrayUtils.isEmpty((double[]) null);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, true, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Float[] floatArray1 = new Float[5];
      floatArray1[0] = (Float) 55.0F;
      floatArray1[1] = (Float) 55.0F;
      floatArray1[2] = (Float) 55.0F;
      floatArray1[3] = (Float) 55.0F;
      floatArray1[4] = (Float) 55.0F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {55.0F, 55.0F, 55.0F, 55.0F, 55.0F}, floatArray2, 0.01F);
      assertEquals(5, floatArray2.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2515.4185343;
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = 'V';
      charArray0[4] = 'h';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'V');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'h', 'c', 'c', 'V', 'h'}, charArray0);
      assertArrayEquals(new char[] {'V', 'h', 'c', 'c', 'V', 'h'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 4632;
      intArray0[1] = 922;
      intArray0[2] = (int) 'h';
      intArray0[3] = (int) 'c';
      intArray0[4] = (int) 'h';
      intArray0[5] = (int) 'h';
      intArray0[6] = 922;
      intArray0[7] = (int) 'V';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 104);
      assertArrayEquals(new int[] {4632, 922, 104, 99, 104, 104, 922, 86}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) ':';
      longArray0[2] = (long) ':';
      longArray0[3] = (long) ':';
      longArray0[4] = (long) ':';
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, Integer.MAX_VALUE, 3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short)9;
      shortArray0[2] = (short) (-2668);
      shortArray0[3] = (short)9;
      shortArray0[4] = (short) (-2668);
      shortArray0[5] = (short)78;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-2668);
      shortArray0[8] = (short)9;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-104));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)9, (short)9, (short) (-2668), (short)9, (short) (-2668), (short)78, (short)0, (short) (-2668), (short)9}, shortArray0);
      assertArrayEquals(new short[] {(short)9, (short)9, (short) (-2668), (short)9, (short) (-2668), (short)78, (short)0, (short) (-2668), (short)9}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) classArray0, (Object) class0);
      assertEquals(3, classArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 212.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)23;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-119), (byte)15, (byte)45, (byte)23, (byte)0, (byte)4, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-119));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-119), (byte)15, (byte)45, (byte)23, (byte)0, (byte)4, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)45, (byte)23, (byte)0, (byte)4, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)4;
      Object[] objectArray1 = new Object[8];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (byte)0;
      objectArray1[1] = (Object) 212.0;
      Object object0 = ArrayUtils.get(objectArray0, (-2688));
      assertNotSame(objectArray0, objectArray1);
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      
      objectArray1[2] = null;
      objectArray1[3] = (Object) (byte)4;
      objectArray1[4] = (Object) (byte)0;
      objectArray1[5] = (Object) (byte)4;
      objectArray1[6] = objectArray0[2];
      Object object1 = ArrayUtils.get(objectArray0, (int) 0);
      assertNotSame(objectArray0, objectArray1);
      assertNotNull(object1);
      assertEquals(4, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals((byte)0, object1);
      
      objectArray1[7] = object1;
      Object object2 = ArrayUtils.get(objectArray1, (int) 45, objectArray1[0]);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(object2);
      assertEquals(8, objectArray1.length);
      assertTrue(object2.equals((Object)object1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals((byte)0, object2);
      
      objectArray0[3] = object2;
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, 0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(4, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-110), (byte)15, (byte)59, (byte) (-1), (byte) (-73), (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)97);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-110), (byte)15, (byte)59, (byte) (-1), (byte) (-73), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)15, (byte)59, (byte) (-1), (byte) (-73), (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte) (-73);
      Object[] objectArray1 = new Object[8];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (byte)0;
      objectArray1[1] = (Object) 93.0;
      Object object0 = ArrayUtils.get(objectArray0, (-2688));
      assertNotSame(objectArray0, objectArray1);
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      
      objectArray1[2] = null;
      objectArray1[3] = (Object) (byte) (-73);
      objectArray1[4] = (Object) (byte)0;
      objectArray1[5] = (Object) (byte) (-73);
      Object object1 = ArrayUtils.get(objectArray1, (int)  (-1));
      assertNotSame(objectArray1, objectArray0);
      assertNull(object1);
      assertEquals(8, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[6] = null;
      Object object2 = ArrayUtils.get(objectArray0, (int)  (-1));
      assertNotSame(objectArray0, objectArray1);
      assertNull(object2);
      assertEquals(4, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      
      objectArray1[7] = null;
      Object object3 = ArrayUtils.get(objectArray1, (int) 59, objectArray1[0]);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(object3);
      assertEquals(8, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals((byte)0, object3);
      
      objectArray0[3] = object3;
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, 0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(4, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[6] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)21;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)21;
      intArray0[2] = (int) (byte)21;
      intArray0[3] = (int) (byte)97;
      intArray0[4] = (int) (byte)97;
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 0, 191, 21);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse(byteArray0, 114, (-495));
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 21;
      Object object0 = ArrayUtils.get(objectArray0, 191);
      assertNull(object0);
      assertEquals(6, objectArray0.length);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) (byte)21;
      objectArray0[3] = (Object) (byte)97;
      objectArray0[4] = (Object) (byte)97;
      objectArray0[5] = (Object) (byte)21;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 108);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {108}, intArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2312);
      shortArray0[1] = (short) (-2312);
      shortArray0[2] = (short) (-2312);
      shortArray0[3] = (short) (-2105);
      shortArray0[4] = (short) (-2105);
      shortArray0[5] = (short) (-2312);
      shortArray0[6] = (short) (-543);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-2312), (short) (-2312), (short) (-2312), (short) (-2105), (short) (-2105), (short) (-2312), (short) (-543), (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEquals((Object) null, "'E9u/V=z");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Double double0 = new Double((short) (-2312));
      assertNotNull(double0);
      assertEquals((-2312.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      Double double1 = Double.valueOf((double) (short) (-2105));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2105.0), (double)double1, 0.01);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2105.0), (-2312.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean2 = ArrayUtils.contains((Object[]) doubleArray0, (Object) doubleArray0[1]);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 18, (-1641));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = '2';
      charArray0[2] = '[';
      charArray0[3] = 'R';
      charArray0[4] = '6';
      charArray0[5] = 'z';
      charArray0[6] = '&';
      charArray0[7] = 'H';
      charArray0[8] = 'e';
      ArrayUtils.reverse(charArray0, (-1), (-1641));
      assertArrayEquals(new char[] {'n', '2', '[', 'R', '6', 'z', '&', 'H', 'e'}, charArray0);
      assertEquals(9, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-1641), '&');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1641, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-3356), (int) (short) (-3356));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      ArrayUtils.reverse((float[]) null, 4114, 4114);
      boolean[] booleanArray0 = ArrayUtils.insert((int) (short) (-3356), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, 2.0, (int) (short) (-3356));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-73);
      longArray0[1] = (long) (byte) (-123);
      byteArray0[3] = (byte)75;
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)75;
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte)75;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-73);
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-73), (byte)0, (byte)75}, byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-29), (byte)75, (byte)0, (byte) (-73)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-29);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {(short) (-29)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Short[] shortArray1 = new Short[6];
      shortArray1[0] = (Short) (short) (-29);
      shortArray1[1] = (Short) (short) (-29);
      Short short0 = new Short((short) (-2433));
      assertNotNull(short0);
      assertEquals((short) (-2433), (short)short0);
      
      shortArray1[2] = short0;
      Short short1 = new Short((short) shortArray1[2]);
      assertNotNull(short1);
      assertEquals(6, shortArray1.length);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-2433), (short)short1);
      
      shortArray1[3] = short1;
      shortArray1[4] = (Short) (short) (-29);
      shortArray1[5] = (Short) (short) (-29);
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-1);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, (-1), 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-559));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      Float float0 = new Float((float) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      MutableInt mutableInt0 = new MutableInt();
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      try { 
        Long.valueOf("G(B  UD(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"G(B  UD(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1136;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1136;
      floatArray0[1] = (float) (short)1136;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {1136.0F, 1136.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((short)1136);
      assertNotNull(integer0);
      assertEquals(1136, (int)integer0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1136.0F;
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (long) (short)1136;
      longArray0[2] = (long) (short)1136;
      longArray0[3] = (-1301L);
      longArray0[4] = (long) (short)1136;
      boolean boolean1 = ArrayUtils.contains(longArray0, 1L);
      assertArrayEquals(new long[] {(-1L), 1136L, 1136L, (-1301L), 1136L}, longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {1136.0F, 1136.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 313.477F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {313.477F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Double double0 = new Double(313.477F);
      assertNotNull(double0);
      assertEquals(313.47698974609375, (double)double0, 0.01);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)96;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte) (-1), (byte) (-67), (byte)96, (byte) (-71)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-2403));
      assertNotNull(integer0);
      assertEquals((-2403), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("java.util.stream.LongPipeline$Head", (int) (byte) (-1));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), (int)integer1);
      
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-2403), (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "', has a length less than 2");
      assertNull(stringArray0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Short short0 = new Short((short) (-1320));
      assertNotNull(short0);
      assertEquals((short) (-1320), (short)short0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) "', has a length less than 2", (Object) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      char char0 = '^';
      Character character0 = new Character('^');
      assertNotNull(character0);
      assertTrue(character0.equals((Object)char0));
      assertEquals('^', (char)character0);
      
      char char1 = ')';
      Character character1 = Character.valueOf('^');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)char1));
      assertTrue(character1.equals((Object)character0));
      assertEquals('^', (char)character1);
      
      Character character2 = new Character('-');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)char1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('-', (char)character2);
      
      Character character3 = new Character(')');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)char1));
      assertFalse(character3.equals((Object)character1));
      assertEquals(')', (char)character3);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character2;
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character2;
      characterArray0[5] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'-', '^', '^', '^', '-', '^'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (char)character0;
      floatArray1[1] = (float) (char)character2;
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '=');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'=', '-', '^', '^', '^', '-', '^'}, charArray1);
      assertArrayEquals(new char[] {'-', '^', '^', '^', '-', '^'}, charArray0);
      assertEquals(7, charArray1.length);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) character2, (Object) character2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 184;
      longArray0[1] = (long) 184;
      longArray0[2] = (long) 184;
      longArray0[3] = (-53L);
      longArray0[4] = (long) 184;
      longArray0[5] = (long) 184;
      longArray0[6] = (long) 184;
      longArray0[7] = (long) 184;
      longArray0[8] = (long) 184;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {184L, 184L, 184L, (-53L), 184L, 184L, 184L, 184L, 184L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-80));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 184L;
      objectArray0[1] = (Object) 184L;
      objectArray0[2] = (Object) 184L;
      objectArray0[3] = (Object) 184L;
      ArrayUtils.shift(objectArray0, 9, 184, (int) (byte) (-80));
      assertEquals(4, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2830.5520634677;
      doubleArray0[1] = (-12.096);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {2830.5520634677, (-12.096)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 184);
      assertArrayEquals(new int[] {184, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2312);
      shortArray0[1] = (short) (-1515);
      shortArray0[2] = (short) (-2312);
      shortArray0[3] = (short) (-2312);
      shortArray0[4] = (short) (-2105);
      shortArray0[5] = (short) (-2312);
      shortArray0[6] = (short) (-2105);
      shortArray0[7] = (short) (-2312);
      shortArray0[8] = (short) (-2105);
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1515);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short) (-2312), (short) (-1515), (short) (-2312), (short) (-2312), (short) (-2105), (short) (-2312), (short) (-2105), (short) (-2312), (short) (-2105)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1515)}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Double double0 = new Double((-1541.02933));
      assertNotNull(double0);
      assertEquals((-1541.02933), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1541.02933), (-1541.02933), (-1541.02933), (-1541.02933), (-1541.02933)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (short) (-1515));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(doubleArray1, (double) doubleArray0[2], 2);
      assertArrayEquals(new double[] {(-1541.02933), (-1541.02933), (-1541.02933), (-1541.02933), (-1541.02933)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)30406);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-2312), (short) (-1515), (short) (-2312), (short) (-2312), (short) (-2105), (short) (-2312), (short) (-2105), (short) (-2312), (short) (-2105)}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)110;
      shortArray0[1] = (short)83;
      shortArray0[2] = (short) (-29128);
      shortArray0[3] = (short) (-606);
      shortArray0[4] = (short) (-1117);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)110, (short)83, (short) (-29128), (short) (-606), (short) (-1117)}, shortArray0);
      assertArrayEquals(new short[] {(short)110, (short)83, (short) (-29128), (short) (-606), (short) (-1117)}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray1, (short[]) null);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)110, (short)83, (short) (-29128), (short) (-606), (short) (-1117)}, shortArray0);
      assertArrayEquals(new short[] {(short)110, (short)83, (short) (-29128), (short) (-606), (short) (-1117)}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean0);
      
      LongBuffer longBuffer0 = LongBuffer.allocate((short)110);
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(110, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=110 cap=110]", longBuffer0.toString());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertEquals(110, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertEquals(110, longBuffer0.limit());
      assertNotNull(longBuffer0);
      
      BitSet bitSet0 = BitSet.valueOf(longBuffer0);
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(110, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=110 cap=110]", longBuffer0.toString());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertEquals(110, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertEquals(110, longBuffer0.limit());
      assertEquals(0, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-1117);
      intArray0[1] = (int) (short) (-29128);
      intArray0[2] = (int) (short)83;
      intArray0[3] = (int) (short) (-1117);
      intArray0[4] = (int) (short) (-29128);
      intArray0[5] = (int) (short) (-29128);
      intArray0[6] = (-4494);
      intArray0[7] = (-2318);
      intArray0[8] = (int) (short) (-1117);
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, (-1509), (int) (short)83);
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertArrayEquals(new int[] {(-1117), (-29128), 83, (-1117), (-29128), (-29128), (-4494), (-2318), (-1117)}, intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      bitSet0.xor(bitSet1);
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(110, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=110 cap=110]", longBuffer0.toString());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertEquals(110, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertEquals(110, longBuffer0.limit());
      assertEquals(0, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(bitSet0, bitSet1);
      assertArrayEquals(new int[] {(-1117), (-29128), 83, (-1117), (-29128), (-29128), (-4494), (-2318), (-1117)}, intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet0.equals((Object)bitSet1));
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals(110, longBuffer0.remaining());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=110 cap=110]", longBuffer0.toString());
      assertFalse(longBuffer0.isReadOnly());
      assertFalse(longBuffer0.isDirect());
      assertTrue(longBuffer0.hasArray());
      assertEquals(110, longBuffer0.capacity());
      assertEquals(0, longBuffer0.position());
      assertEquals(110, longBuffer0.limit());
      assertEquals(0, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotSame(bitSet0, bitSet1);
      assertNull(object0);
      assertTrue(bitSet0.equals((Object)bitSet1));
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      boolean boolean1 = ArrayUtils.isEquals("'E9u/V=z", (Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Double double0 = new Double(714.197192571013);
      assertNotNull(double0);
      assertEquals(714.197192571013, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {714.197192571013, 714.197192571013, 714.197192571013, 714.197192571013, 714.197192571013, 714.197192571013, 714.197192571013}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-1));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 59L;
      floatArray0[1] = (float) (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {59.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)15;
      byteArray1[1] = (byte)11;
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte)0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)15, (byte)11, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)15, (byte)11}, byteArray1);
      assertEquals(3, byteArray2.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2743L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2743L);
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-2743L), (-2952));
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      long[] longArray2 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-104);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)14, (byte) (-8), (byte)14, (byte)14, (byte) (-104), (byte) (-104)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (int)  (-104), 9);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(250, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(stringArray0, (int)  (-8), "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -8, Length: 250
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2743L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2743L);
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-2743L), (-2952));
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 2724.39);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2724.39}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray2 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-104);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)14, (byte) (-8), (byte)14, (byte)14, (byte) (-104), (byte) (-104)}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (int)  (-104), 9);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(250, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(stringArray0, (int)  (-8), "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -8, Length: 250
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = ArrayUtils.insert((-2494), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)94;
      doubleArray0[1] = (double) (byte)94;
      doubleArray0[2] = (double) (byte)94;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (byte)94;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3461.399824553978));
      assertArrayEquals(new double[] {94.0, 94.0, 94.0, (-1.0), 94.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      boolean boolean1 = new Boolean(false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.shift(doubleArray0, (-1), (int) (byte)94, 1406);
      assertArrayEquals(new double[] {94.0, 94.0, 94.0, 94.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) characterArray0, (-1), (-1), (-1));
      assertEquals(0, characterArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1628.1605689717, (-619));
      assertArrayEquals(new double[] {94.0, 94.0, 94.0, 94.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-705.2689F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-705.2689F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-705.2689F);
      ArrayUtils.swap(floatArray1, 1996, 1996);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-705.2689F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-705.2689F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-705.2689F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-705.2689F), 1996);
      assertArrayEquals(new double[] {(-705.2689208984375)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1136;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1136;
      floatArray0[1] = (float) (short)1136;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {1136.0F, 1136.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((short)1136);
      assertNotNull(integer0);
      assertEquals(1136, (int)integer0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1136.0F;
      doubleArray0[1] = (double) (short)1136;
      doubleArray0[2] = (double) (short)1136;
      doubleArray0[3] = (double) (short)1136;
      doubleArray0[4] = (-793.42);
      doubleArray0[5] = (double) 1136.0F;
      doubleArray0[6] = (double) 1136.0F;
      doubleArray0[7] = (double) 1136.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1136.0, 18);
      assertArrayEquals(new double[] {1136.0, 1136.0, 1136.0, 1136.0, (-793.42), 1136.0, 1136.0, 1136.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, int0);
      
      ArrayUtils.reverse((char[]) null, 875, 2138);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5057.6227;
      byte byte0 = (byte) (-1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte[] byteArray2 = new Byte[8];
      byteArray2[0] = (Byte) (byte) (-1);
      byteArray2[1] = (Byte) (byte) (-1);
      byteArray2[2] = (Byte) (byte) (-1);
      byteArray2[3] = (Byte) (byte) (-1);
      byteArray2[4] = (Byte) (byte) (-1);
      byteArray2[5] = (Byte) (byte) (-1);
      byteArray2[6] = (Byte) (byte) (-1);
      byteArray2[7] = (Byte) (byte) (-1);
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(8, byteArray2.length);
      assertEquals(8, byteArray3.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) byte0;
      floatArray0[4] = (float) byte0;
      ArrayUtils.shift(floatArray0, 1887, 2, 11);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (-291));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Short short0 = new Short((byte)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Short short1 = new Short((byte)12);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)12, (short)short1);
      
      Short short2 = new Short((short)78);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)78, (short)short2);
      
      Short short3 = new Short((short) (-18049));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short) (-18049), (short)short3);
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short3;
      shortArray0[1] = short2;
      shortArray0[2] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-18049), (short)78, (short) (-18049)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      Short short0 = new Short((short) (-802));
      assertNotNull(short0);
      assertEquals((short) (-802), (short)short0);
      
      Short short1 = new Short((short) (-802));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-802), (short)short1);
      
      Short[] shortArray0 = ArrayUtils.add((Short[]) null, short1);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-802);
      doubleArray0[1] = (double) (short) (-802);
      doubleArray0[2] = (double) (short) (-802);
      doubleArray0[3] = (double) (short) (-802);
      doubleArray0[4] = (double) (short) (-802);
      doubleArray0[5] = (double) (short) (-802);
      doubleArray0[6] = (double) (short) (-802);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-149.33974852023), (-802.0));
      assertArrayEquals(new double[] {(-802.0), (-802.0), (-802.0), (-802.0), (-802.0), (-802.0), (-802.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[2] = (byte)11;
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.contains(longArray0, 2668L);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-52);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)11;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-52);
      intArray0[1] = (int) (byte)11;
      intArray0[2] = 752;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)11;
      ArrayUtils.swap(intArray0, (int) (byte)11, 30, (int) (byte)11);
      assertArrayEquals(new int[] {(-52), 11, 752, 0, 0, 0, 11}, intArray0);
      assertEquals(7, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.contains(longArray0, 980L);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (-2275.26465734);
      doubleArray0[5] = (double) (-1.0F);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-2275.26465734), (-1.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) (-2275.26465734);
      objectArray0[2] = (Object) (-1.0);
      objectArray0[3] = (Object) (-1.0);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-1.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 2578;
      intArray0[2] = 2578;
      intArray0[4] = 2578;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 409.0924235051861;
      doubleArray0[1] = 409.0924235051861;
      doubleArray0[2] = (double) 2578;
      doubleArray0[3] = (double) 2578;
      doubleArray0[4] = (double) 2578;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-129.00125446861));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {409.0924235051861, 409.0924235051861, 2578.0, 2578.0, 2578.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {409.0924235051861, 409.0924235051861, 2578.0, 2578.0, 2578.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      
      bitSet0.set(2578, 2578);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {409.0924235051861, 409.0924235051861, 2578.0, 2578.0, 2578.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      BitSet bitSet1 = (BitSet)bitSet0.clone();
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {409.0924235051861, 409.0924235051861, 2578.0, 2578.0, 2578.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 2578;
      objectArray0[1] = (Object) 2578;
      objectArray0[2] = (Object) 2578;
      objectArray0[3] = (Object) 2578.0;
      objectArray0[4] = (Object) 2578;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) 2578.0;
      objectArray0[7] = (Object) 2578.0;
      objectArray0[8] = (Object) 2578.0;
      Integer integer0 = (Integer)ArrayUtils.get(objectArray0, 1);
      assertNotNull(integer0);
      assertEquals(9, objectArray0.length);
      assertEquals(2578, (int)integer0);
      
      Object[] objectArray1 = new Object[4];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[7], intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(floatArray0, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 409.0924235051861;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 409.0924235051861);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {409.0924235051861, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {409.0924235051861, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) bitSet0;
      // Undeclared exception!
      try { 
        bitSet0.set((-39), (-39));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < 0: -39
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'd';
      charArray0[2] = 'S';
      charArray0[3] = 'q';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeElement(charArray1, 'S');
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'q';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-4);
      ArrayUtils.shift(byteArray0, (-1024));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-4)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-78);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-4);
      byteArray1[5] = (byte) (-4);
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte) (-4);
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray1, (byte)103);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-78), (byte) (-1), (byte) (-4), (byte) (-4), (byte) (-1), (byte) (-4)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-78), (byte) (-1), (byte) (-4), (byte) (-4), (byte) (-1), (byte) (-4)}, byteArray1);
      assertEquals(8, byteArray2.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'S';
      doubleArray0[1] = 4181.8581;
      doubleArray0[2] = (double) 'q';
      doubleArray0[3] = (double) 184;
      doubleArray0[4] = (-793.42);
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = (double) (-1024);
      doubleArray0[7] = (double) (byte)103;
      doubleArray0[8] = (double) 184;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {83.0, 4181.8581, 113.0, 184.0, (-793.42), (-1.0), (-1024.0), 103.0, 184.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 184;
      intArray0[0] = 184;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "o\"\"?okrJd-!:|");
      assertNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)97;
      Byte byte1 = new Byte((byte)97);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)97, (byte)byte1);
      
      byteArray0[1] = byte1;
      byte byte2 = (byte)12;
      Byte byte3 = new Byte((byte)12);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)12, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)12);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertEquals((byte)12, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)12);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      assertEquals((byte)12, (byte)byte5);
      
      byteArray0[4] = byte5;
      byte byte6 = (byte)4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)4);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte)97, (byte)12, (byte)12, (byte)12}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.5);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[4] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)15);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)15, (byte)0}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) 0.0F;
      objectArray0[4] = (Object) 0.0F;
      objectArray0[5] = (Object) 0.0F;
      objectArray0[6] = (Object) 0.0F;
      objectArray0[7] = (Object) 0.0F;
      Object[] objectArray1 = new Object[6];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 0.0F;
      objectArray1[2] = (Object) 0.0F;
      objectArray1[3] = (Object) 0.0F;
      objectArray1[4] = (Object) 0.0F;
      objectArray1[5] = (Object) 0.0F;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(6, objectArray1.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = '=';
      charArray0[2] = '1';
      charArray0[3] = '?';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '=');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'?', '=', '1', '?'}, charArray0);
      assertArrayEquals(new char[] {'?', '1', '?'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) '1';
      objectArray0[1] = (Object) '?';
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(2, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)110;
      shortArray0[1] = (short)83;
      shortArray0[2] = (short)83;
      shortArray0[3] = (short) (-606);
      shortArray0[4] = (short) (-1117);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)110, (short)83, (short)83, (short) (-606), (short) (-1117)}, shortArray0);
      assertArrayEquals(new short[] {(short)110, (short)83, (short)83, (short) (-606), (short) (-1117)}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[1] = 'V';
      charArray0[2] = 'v';
      charArray0[3] = 'c';
      charArray0[4] = 'h';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'B');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'z', 'V', 'v', 'c', 'h', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'B', 'z', 'V', 'v', 'c', 'h', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'V';
      int int0 = ArrayUtils.indexOf(longArray0, (long) (short)83, (int) (short) (-1117));
      assertArrayEquals(new long[] {86L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(charArray1, 28, (int) (short)83, (int) (short) (-1117));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'z', 'V', 'v', 'c', 'h', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'B', 'z', 'V', 'v', 'c', 'h', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)15;
      byteArray0[1] = (byte)59;
      Short[] shortArray0 = new Short[9];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)0, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)0, (short)short2);
      
      shortArray0[1] = short2;
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((byte)15);
      assertNotNull(long0);
      assertEquals(15L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1796L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1796L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((byte)0);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(0L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-1796L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals((-1796L), (long)long3);
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte)59);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {15L, (-1796L), 0L, (-1796L)}, longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      
      Double double0 = new Double((double) longArray0[2]);
      assertNotNull(double0);
      assertEquals(4, longArray0.length);
      assertEquals(0.0, (double)double0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) long3, (int) short0);
      assertEquals(4, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      
      ArrayUtils.shift(longArray1, (int) (byte)0);
      assertArrayEquals(new long[] {15L, (-1796L), 0L, (-1796L)}, longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-43));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-43);
      floatArray0[1] = (float) (-43);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (-43));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-43.0F), (-43.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-43.0F), (-43.0F), (-43.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 16L;
      longArray0[2] = 16L;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 16L, 16L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      ArrayUtils.swap((byte[]) null, 8, 1143);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'K';
      intArray0[1] = (int) 'K';
      intArray0[2] = 1143;
      intArray0[3] = (int) 'r';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {75, 75, 1143, 114}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Integer integer0 = new Integer(1884);
      assertNotNull(integer0);
      assertEquals(1884, (int)integer0);
      
      byte[] byteArray1 = ArrayUtils.removeElement((byte[]) null, (byte)104);
      assertNull(byteArray1);
      
      Short short0 = new Short((short)1861);
      assertNotNull(short0);
      assertEquals((short)1861, (short)short0);
      
      Short[] shortArray0 = new Short[0];
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      Long[] longArray1 = new Long[5];
      longArray1[0] = (Long) 0L;
      longArray1[1] = (Long) 0L;
      longArray1[2] = (Long) 0L;
      longArray1[3] = (Long) 0L;
      longArray1[4] = (Long) 0L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray2);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      float[] floatArray0 = new float[7];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)104;
      Byte[] byteArray1 = new Byte[4];
      byteArray1[1] = (Byte) (byte)0;
      byteArray1[2] = (Byte) (byte) (-1);
      byteArray1[3] = (Byte) (byte) (-1);
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      
      Integer integer0 = new Integer(17);
      assertNotNull(integer0);
      assertEquals(17, (int)integer0);
      
      byte[] byteArray3 = ArrayUtils.removeElement(byteArray0, (byte)1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte) (-1), (byte)104, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)91, (byte)0, (byte) (-1), (byte)104, (byte)0, (byte)0, (byte)0}, byteArray3);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      Short short0 = new Short((short)10157);
      assertNotNull(short0);
      assertEquals((short)10157, (short)short0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (byte) (-1));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      byte byte0 = (byte) (-11);
      Byte byte1 = new Byte((byte) (-11));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-11), (byte)byte1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-53);
      intArray0[1] = (int) (byte) (-11);
      intArray0[2] = (int) (byte) (-11);
      intArray0[3] = (int) (byte) (-11);
      intArray0[4] = (int) (byte) (-11);
      intArray0[5] = (int) (byte) (-11);
      intArray0[6] = (int) (byte) (-11);
      intArray0[7] = (int) (byte) (-11);
      boolean boolean0 = ArrayUtils.contains(intArray0, 1158);
      assertArrayEquals(new int[] {(-53), (-11), (-11), (-11), (-11), (-11), (-11), (-11)}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1158;
      longArray0[1] = (long) (-53);
      longArray0[2] = (long) (-11);
      longArray0[3] = (long) (-11);
      longArray0[4] = (long) (-11);
      longArray0[5] = (long) (-11);
      longArray0[6] = (long) (-11);
      longArray0[7] = (long) 1158;
      longArray0[8] = (long) (-11);
      boolean boolean1 = ArrayUtils.contains(longArray0, 1916L);
      assertArrayEquals(new long[] {1158L, (-53L), (-11L), (-11L), (-11L), (-11L), (-11L), 1158L, (-11L)}, longArray0);
      assertEquals(9, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-11);
      doubleArray0[1] = (double) (-11L);
      doubleArray0[2] = (double) (-11L);
      doubleArray0[3] = (double) byte0;
      boolean boolean2 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-11.0), (-11.0), (-11.0), (-11.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 2578;
      intArray0[2] = 2578;
      intArray0[4] = 2578;
      intArray0[7] = 2578;
      ArrayUtils.swap(intArray0, 1463, 2578);
      assertArrayEquals(new int[] {0, 2578, 2578, 0, 2578, 0, 0, 2578}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) (byte) (-14);
      floatArray0[2] = (float) (byte) (-14);
      floatArray0[3] = (float) (byte) (-14);
      floatArray0[4] = (float) (byte) (-14);
      floatArray0[5] = (float) (byte) (-14);
      floatArray0[6] = (float) (byte) (-14);
      floatArray0[7] = 875.26F;
      floatArray0[8] = (float) (byte) (-14);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1620.534F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {Float.NaN, (-14.0F), (-14.0F), (-14.0F), (-14.0F), (-14.0F), (-14.0F), 875.26F, (-14.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, (-14.0F), (-14.0F), (-14.0F), (-14.0F), (-14.0F), (-14.0F), 875.26F, (-14.0F)}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-14.0F);
      doubleArray0[1] = (double) Float.NaN;
      ArrayUtils.shift(doubleArray0, (int) (byte) (-14));
      assertArrayEquals(new double[] {(-14.0), Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[2] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0L);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      ArrayUtils.shift((long[]) null, 211, 114, 2);
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 211;
      intArray0[2] = 211;
      intArray0[3] = 114;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-1), 211, 211, 114}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 114;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 114;
      floatArray0[4] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 114);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 114.0F, (-1.0F), 114.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 114;
      intArray1[1] = 211;
      intArray1[2] = 2;
      ArrayUtils.swap(intArray1, 11, 2578);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {114, 211, 2}, intArray1);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String string0 = ArrayUtils.toString((Object) boolean0);
      assertNotNull(string0);
      assertEquals("true", string0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      short[] shortArray0 = new short[0];
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[4] = boolean0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 9);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "L({nAced?Fe~";
      stringArray0[1] = "BjL]_I.UzBd;'";
      stringArray0[2] = "L({nAced?Fe~";
      stringArray0[3] = "L({nAced?Fe~";
      stringArray0[4] = "BjL]_I.UzBd;'";
      stringArray0[5] = "BjL]_I.UzBd;'";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (-1), (-2313));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 9, 2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = (-2313);
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = 9;
      intArray0[7] = 2;
      int[] intArray1 = ArrayUtils.add(intArray0, (-2146863149));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2, (-2313), 2, 2, (-1), (-1), 9, 2, (-2146863149)}, intArray1);
      assertArrayEquals(new int[] {2, (-2313), 2, 2, (-1), (-1), 9, 2}, intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '&';
      charArray0[2] = 'r';
      charArray0[3] = '4';
      charArray0[4] = 'K';
      charArray0[5] = '&';
      charArray0[6] = '4';
      charArray0[7] = '6';
      charArray0[3] = '4';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '6', '4', '&', 'K', '4', 'r', '&', 'K'}, charArray0);
      assertEquals(9, charArray0.length);
      
      charArray0[6] = '&';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '&';
      intArray0[1] = (int) 'r';
      Object object0 = ArrayUtils.toPrimitive((Object) '&');
      assertNotNull(object0);
      assertEquals('&', object0);
      
      ArrayUtils.swap(longArray0, 114, 1743, 114);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '&';
      charArray0[2] = 'r';
      charArray0[3] = '4';
      charArray0[4] = 'K';
      charArray0[5] = '&';
      charArray0[6] = '4';
      charArray0[7] = '6';
      charArray0[8] = '4';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'4', '6', '4', '&', 'K', '4', 'r', '&', 'K'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) '6';
      characterArray0[1] = (Character) 'r';
      charArray0[6] = '&';
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '&';
      intArray0[1] = (int) 'r';
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.toPrimitive((Object) '&');
      assertNotNull(object0);
      assertEquals('&', object0);
      
      ArrayUtils.swap(longArray0, 114, 1743, 114);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 3439L;
      longArray0[1] = 3439L;
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, 40, 40);
      assertArrayEquals(new long[] {3439L, 3439L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 40, 40);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)919;
      shortArray0[1] = (short)919;
      shortArray0[2] = (short)919;
      ArrayUtils.shift(shortArray0, (-3797), (-2800), (int) (short)919);
      assertArrayEquals(new short[] {(short)919, (short)919, (short)919}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Double double0 = new Double(100.0);
      assertNotNull(double0);
      assertEquals(100.0, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 93.0;
      doubleArray0[1] = (-251.4758988586571);
      BitSet bitSet0 = new BitSet();
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = 1L;
      longArray0[3] = (-1545L);
      longArray0[4] = (-3560L);
      longArray0[5] = (-1L);
      longArray0[6] = (-1858L);
      ArrayUtils.swap(longArray0, 30516, 78, (-988));
      assertArrayEquals(new long[] {(-1L), (-1L), 1L, (-1545L), (-3560L), (-1L), (-1858L)}, longArray0);
      assertEquals(7, longArray0.length);
      
      org.evosuite.runtime.Random.setNextRandom(65536);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) (-1L), 2, (double) (-1L));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      ArrayUtils.swap(objectArray0, (-94), 34);
      assertEquals(6, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(6, objectArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (-997L));
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-997L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)70;
      shortArray0[1] = (short)30516;
      shortArray0[2] = (short) (-186);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)70, (short)30516, (short) (-186), (short)0, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)70, (short)30516, (short) (-186), (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (byte)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isEquals("'E9u/V=z", object0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Double double0 = new Double(518.17);
      assertNotNull(double0);
      assertEquals(518.17, (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 0.0;
      Double double1 = new Double(94.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(94.0, (double)double1, 0.01);
      
      doubleArray1[1] = double1;
      doubleArray1[2] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 94.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = ArrayUtils.removeElements((Integer[]) null, (Integer[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 862.2149448660688;
      ArrayUtils.swap(doubleArray0, (int) (byte) (-14), (int) (byte) (-14));
      assertArrayEquals(new double[] {862.2149448660688}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) null, (-1127));
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, (-1127));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (long) (-3190);
      longArray0[2] = (-2001L);
      longArray0[3] = (long) (-1);
      ArrayUtils.shift(longArray0, (-3190), (-1), (-1834));
      assertArrayEquals(new long[] {0L, (-3190L), (-2001L), (-1L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-1834);
      floatArray0[2] = (float) (-1L);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (byte) (-14));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-1834.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1834.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.shift(doubleArray0, (-1));
      assertArrayEquals(new double[] {862.2149448660688}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(345);
      assertNotNull(integer0);
      assertEquals(345, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte1));
      assertEquals((byte) (-14), object0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-14);
      ArrayUtils.swap(doubleArray0, (-1), (-2952), (int) (byte) (-14));
      assertArrayEquals(new double[] {(-14.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (byte) (-14));
      assertFalse(boolean1);
      
      Character[] characterArray0 = new Character[5];
      Character character0 = new Character('L');
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('_');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('_', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character1);
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character1.equals((Object)character0));
      assertEquals('_', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf((char) character0);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character1));
      assertEquals('L', (char)character3);
      
      characterArray0[3] = character3;
      char char0 = 'P';
      Character character4 = Character.valueOf('P');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertEquals('P', (char)character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'L', '_', '_', 'L', 'P'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(characterArray0, (Comparator<Character>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      char[] charArray0 = new char[8];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '2', (-1836));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '2';
      longArray0[1] = (long) 65536;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {50L, 65536L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 218;
      objectArray0[1] = (Object) '2';
      objectArray0[3] = (Object) (-1836);
      Object object0 = ArrayUtils.get(objectArray0, (-1947));
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[4] = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(274, 2141948896);
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(5, objectArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Integer integer0 = new Integer((-2175));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-2175), (int)integer0);
      
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) integer0);
      assertEquals(5, objectArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) 1874, (-2262.77818295));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)94;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)94;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (byte)94;
      longArray0[3] = 1843L;
      longArray0[4] = (long) (-1);
      longArray0[5] = 1843L;
      longArray0[6] = (long) (byte)94;
      longArray0[7] = 1843L;
      longArray0[8] = 1843L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 94L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {94L, (-1L), 94L, 1843L, (-1L), 1843L, 94L, 1843L, 1843L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 1843L, (-1L), 1843L, 1843L, 1843L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = ArrayUtils.toString((Object) "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)94;
      floatArray0[1] = (-998.678F);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(791, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 791, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)59;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 93.0;
      objectArray0[1] = (Object) (byte)97;
      objectArray0[2] = (Object) mockRandom0;
      objectArray0[3] = (Object) (byte)59;
      objectArray0[4] = (Object) (byte)21;
      objectArray0[5] = (Object) (byte)97;
      objectArray0[6] = (Object) (byte)21;
      objectArray0[7] = (Object) (byte)97;
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom1);
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(8, objectArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = ',';
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(387L);
      assertNotNull(long0);
      assertEquals(387L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((byte)0);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-1882L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-1882L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((byte)0);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals(0L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((long) longArray0[0]);
      assertNotNull(long4);
      assertEquals(5, longArray0.length);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long0));
      assertEquals(387L, (long)long4);
      
      longArray0[4] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[1]);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {387L, 0L, (-1882L), 0L, 387L}, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      
      Double double0 = new Double((-3748.0));
      assertNotNull(double0);
      assertEquals((-3748.0), (double)double0, 0.01);
      
      ArrayUtils.shift(longArray1, Integer.MAX_VALUE);
      assertArrayEquals(new long[] {0L, 387L, 387L, 0L, (-1882L)}, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1882L);
      doubleArray0[1] = (double) (long)longArray0[4];
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)0, (int) (byte)0, (double) (byte)0);
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {(-1882.0), 387.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = (Character) 'a';
      characterArray0[1] = (Character) ',';
      characterArray0[2] = (Character) ',';
      characterArray0[3] = (Character) 'a';
      characterArray0[4] = (Character) 'a';
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      characterArray0[5] = character0;
      characterArray0[6] = (Character) 'a';
      characterArray0[7] = (Character) 'a';
      Character character1 = new Character((char) character0);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('U', (char)character1);
      
      Character[] characterArray1 = ArrayUtils.removeAllOccurrences(characterArray0, character1);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      assertEquals(7, characterArray1.length);
      assertEquals(8, characterArray0.length);
      assertTrue(character1.equals((Object)character0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertTrue(character0.equals((Object)character1));
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "o\"\"?okrJd-!:|");
      assertNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-27);
      Byte byte1 = new Byte((byte) (-27));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-27), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)108);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)108, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte) (-27), (byte)byte3);
      
      byteArray0[2] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)108, (byte) (-27)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)108, (byte) (-27)}, byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1588);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {184, 0}, intArray0);
      assertArrayEquals(new int[] {1588, 184, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.swap((Object[]) null, 14, (int) (byte)4, (int) (byte) (-27));
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (int) byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -27, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5057.6227;
      doubleArray0[1] = (-1.0);
      long[] longArray0 = new long[2];
      longArray0[0] = 14L;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 3, (-2145262877));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)8, (byte)8}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)8;
      floatArray0[1] = (float) 14L;
      floatArray0[2] = (float) 14L;
      floatArray0[3] = 2149.3F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2149.3F);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {8.0F, 14.0F, 14.0F, 2149.3F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Byte[] byteArray2 = new Byte[4];
      byteArray2[0] = (Byte) (byte)8;
      byteArray2[1] = (Byte) (byte)8;
      byteArray2[2] = (Byte) (byte)8;
      byteArray2[3] = (Byte) (byte)8;
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)29);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)8, (byte)8}, byteArray3);
      assertEquals(4, byteArray3.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (-1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-423);
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(2804);
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {(-423), (-1)}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-6);
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character character1 = new Character(' ');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals(' ', (char)character1);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-6);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, 2731L);
      assertArrayEquals(new long[] {(-6L), 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 9);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "L({nAced?Fe~";
      stringArray0[1] = "BjL]_I.UzBd;'";
      stringArray0[2] = "L({nAced?Fe~";
      stringArray0[3] = "L({nAced?Fe~";
      stringArray0[4] = "BjL]_I.UzBd;'";
      stringArray0[5] = "BjL]_I.UzBd;'";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (-1), (-2313));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 0, 52);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      Object[] objectArray0 = new Object[0];
      Short[] shortArray0 = new Short[0];
      Short short0 = ArrayUtils.get(shortArray0, 0);
      assertNull(short0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1320L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      longArray0[1] = (-1857L);
      longArray0[2] = (-2147483648L);
      longArray0[3] = (-1L);
      longArray0[4] = 1497L;
      longArray0[5] = (-2072L);
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-2072L);
      longArray1[1] = (-2147483648L);
      longArray1[2] = 1497L;
      longArray1[3] = (-2072L);
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {1L, (-1857L), (-2147483648L), (-1L), 1497L, (-2072L)}, longArray0);
      assertArrayEquals(new long[] {(-2072L), (-2147483648L), 1497L, (-2072L)}, longArray1);
      assertArrayEquals(new long[] {1L, (-1857L), (-2147483648L), (-1L), 1497L, (-2072L), (-2072L), (-2147483648L), 1497L, (-2072L)}, longArray2);
      assertEquals(6, longArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(10, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'V');
      assertNull(charArray0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      short short0 = (short) (-412);
      Short short1 = new Short((short) (-412));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-412), (short)short1);
      
      int int0 = 2113929216;
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (int) (short) (-412), 2113929216);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) short1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, Integer.MAX_VALUE, 91);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-1), (byte)127, (byte)118, (byte)50, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)127;
      intArray0[1] = 4217;
      intArray0[2] = (int) (byte)50;
      intArray0[3] = (int) (byte)50;
      intArray0[4] = (int) (byte) (-18);
      intArray0[5] = (int) (byte) (-18);
      intArray0[6] = (int) (byte)118;
      ArrayUtils.swap(intArray0, (int) (byte) (-1), (-1), 36);
      assertArrayEquals(new int[] {127, 4217, 50, 50, (-18), (-18), 118}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-73);
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-2800), 2);
      assertNull(byteArray0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 36;
      intArray1[1] = (int) (byte) (-1);
      intArray1[2] = (int) (byte) (-73);
      intArray1[3] = 2;
      intArray1[4] = (int) (byte) (-73);
      intArray1[5] = (-1);
      ArrayUtils.swap(intArray1, (-1), (-948), (int) (short) (-513));
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {36, (-1), (-73), 2, (-73), (-1)}, intArray1);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-73)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      Short short0 = new Short((short)4846);
      assertNotNull(short0);
      assertEquals((short)4846, (short)short0);
      
      Short short1 = new Short((short)4846);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)4846, (short)short1);
      
      Short short2 = new Short((short)4846);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short)4846, (short)short2);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)4846;
      longArray0[1] = (long) (short)4846;
      longArray0[2] = (long) (short) (-115);
      longArray0[3] = (long) (short)4846;
      longArray0[4] = (long) (short) (-115);
      longArray0[5] = (long) (short)4846;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4846L, 4846L, (-115L), 4846L, (-115L), 4846L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 3439L;
      ArrayUtils.shift(longArray0, 2, (-474), 2);
      assertArrayEquals(new long[] {3439L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)2;
      byte byte0 = (byte)57;
      byteArray0[2] = (byte)57;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1381, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1381, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) (-994);
      doubleArray0[2] = (-1194.2);
      doubleArray0[3] = (double) (-994);
      doubleArray0[4] = (double) (-994);
      doubleArray0[5] = (double) 296L;
      doubleArray0[6] = (double) (-994);
      doubleArray0[7] = (double) (-994);
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {(-994.0), (-1194.2), (-994.0), (-994.0), 296.0, (-994.0), (-994.0), 2.147483647E9}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)111;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '-');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, 9);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "BjL]_DI.UdZ'";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (-2313), (-2313));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1342.5839F);
      ArrayUtils.swap(floatArray0, 335, 1642);
      assertArrayEquals(new float[] {(-1342.5839F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte) (-104);
      byteArray0[8] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)121, (byte) (-1), (byte) (-54), (byte) (-104), (byte)14}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 118, (int)  (-104));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)121, (byte) (-1), (byte) (-54), (byte) (-104), (byte)14}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-819));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-4935), 213);
      assertEquals((-1), int0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-4935);
      intArray0[1] = 191;
      intArray0[2] = (int) (short) (-4935);
      intArray0[3] = (int) (short) (-4935);
      intArray0[4] = (int) (short) (-4935);
      intArray0[5] = (int) (short) (-4935);
      intArray0[6] = (-1);
      intArray0[7] = 191;
      intArray0[8] = (-1);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-4935), 191, (-4935), (-4935), (-4935), (-4935), (-1), 191, (-1)}, intArray0);
      assertArrayEquals(new int[] {(-4935), 191, (-4935), (-4935), (-4935), (-4935), (-1), 191, (-1)}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, (-935));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.shift(intArray0, (-1));
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {191, (-4935), (-4935), (-4935), (-4935), (-1), 191, (-1), (-4935)}, intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      
      double[] doubleArray0 = new double[4];
      intArray0[3] = (-4935);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-4935);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-4935.0), 3.0);
      assertEquals("{3}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), (-4935.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)13457;
      shortArray0[3] = (short) (-543);
      shortArray0[2] = (short) (-2105);
      shortArray0[3] = (short) (-2312);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)13457, (short)0, (short) (-2105), (short) (-2312)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, (int) (short) (-2312));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.removeAllOccurrences(stringArray0, "org.apache.commons.lang3.ArrayUtils");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-2105);
      doubleArray0[1] = (double) (short) (-2105);
      doubleArray0[2] = (double) (short)13457;
      doubleArray0[3] = (double) (short) (-2105);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {(-2105.0), (-2105.0), 13457.0, (-2105.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 2341L);
      assertNull(longArray0);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.7, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1154.485858398);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(1154.485858398, (double)double2, 0.01);
      
      Byte byte0 = new Byte((byte)15);
      assertNotNull(byte0);
      assertEquals((byte)15, (byte)byte0);
      
      Byte byte1 = new Byte((byte)15);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)15, (byte)byte1);
      
      Byte byte2 = new Byte((byte)15);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)15, (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-33));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-33), (byte)byte3);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)53);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 93.0;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "o\"\"?okrJd-!:|");
      assertNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte)97);
      assertNotNull(byte0);
      assertEquals((byte)97, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)97);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)97, (byte)byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)12);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)12, (byte)byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)12);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)12, (byte)byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte)12);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte)12, (byte)byte4);
      
      byteArray0[4] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)4);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)12, (byte)12, (byte)12}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)12, (byte)12, (byte)12}, byteArray2);
      assertEquals(5, byteArray2.length);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (byte)4);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {184, 0}, intArray0);
      assertArrayEquals(new int[] {4, 184, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.swap((Object[]) byteArray0, 1835, 14, (int) (byte)97);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[2] = 0L;
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('V');
      assertNotNull(character0);
      assertEquals('V', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('`');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('`', (char)character1);
      
      ArrayUtils.swap((boolean[]) null, (-1288), (-67), 98);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte) (-39);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)4);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-99), (byte)4, (byte) (-65), (byte)32, (byte) (-44), (byte) (-39)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-530);
      intArray0[1] = (-1686);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 33;
      intArray0[4] = 82;
      intArray0[5] = 2197;
      intArray0[6] = (-701);
      int int0 = ArrayUtils.indexOf(intArray0, (-165));
      assertArrayEquals(new int[] {(-530), (-1686), Integer.MAX_VALUE, 33, 82, 2197, (-701)}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 33;
      objectArray0[1] = (Object) (-1686);
      objectArray0[2] = (Object) (-1686);
      objectArray0[3] = (Object) Integer.MAX_VALUE;
      objectArray0[4] = (Object) (-530);
      objectArray0[5] = (Object) (-1686);
      ArrayUtils.reverse(objectArray0, (-1), 4393);
      assertEquals(6, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, false, false}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 2107.2996F;
      floatArray0[4] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-3422.464F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 2107.2996F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 2107.2996F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean boolean0 = new Boolean("org.apache.commons.lang3.mutable.MutableInt");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = '\'';
      charArray0[2] = 'a';
      charArray0[3] = ' ';
      charArray0[4] = '$';
      ArrayUtils.shift(charArray0, 104);
      assertArrayEquals(new char[] {'\'', 'a', ' ', '$', ')'}, charArray0);
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1363), floatArray1, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1363, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      ArrayUtils.shift(charArray0, (int) (byte)0);
      assertArrayEquals(new char[] {'|'}, charArray0);
      assertEquals(1, charArray0.length);
      
      float[] floatArray0 = new float[13];
      floatArray0[0] = (float) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(19, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19, Length: 13
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      Long long0 = Long.getLong("Arguments cannot both be null");
      assertNull(long0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1320L;
      longArray0[1] = (-2743L);
      longArray0[2] = (-2147483648L);
      longArray0[3] = (-1L);
      longArray0[4] = (-2294L);
      longArray0[5] = 0L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1843L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1320L, (-2743L), (-2147483648L), (-1L), (-2294L), 0L}, longArray0);
      assertArrayEquals(new long[] {1320L, (-2743L), (-2147483648L), (-1L), (-2294L), 0L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = ArrayUtils.toString((Object) null, "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1320L;
      floatArray0[1] = (float) (-2294L);
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0L;
      floatArray1[1] = (float) 1320L;
      floatArray1[2] = (float) (-2743L);
      floatArray1[3] = (float) (-2743L);
      floatArray1[4] = (float) 0L;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(791, floatArray0, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 791, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) Integer.MAX_VALUE;
      ArrayUtils.swap((long[]) null, (-357913942), 17, 1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (-2314.161776);
      doubleArray0[3] = (double) 2.14748365E9F;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.147483647E9, 1.5, (-2314.161776), 2.147483648E9}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-19);
      floatArray1[1] = (float) Integer.MAX_VALUE;
      floatArray1[2] = (float) Integer.MAX_VALUE;
      floatArray1[3] = (float) 17;
      floatArray1[4] = (float) 17;
      floatArray1[5] = (float) (-357913942);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 2.14748365E9F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2.14748365E9F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-19.0F), 2.14748365E9F, 2.14748365E9F, 17.0F, 17.0F, (-3.57913952E8F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(3, floatArray2.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 713.424F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 76.69675F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1898.6F);
      floatArray0[5] = 551.787F;
      floatArray0[6] = 54.0F;
      floatArray0[7] = (-3309.0F);
      ArrayUtils.shift(floatArray0, 2);
      assertArrayEquals(new float[] {54.0F, (-3309.0F), 713.424F, 0.0F, 76.69675F, 0.0F, (-1898.6F), 551.787F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1898.6F);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {54.0F, (-3309.0F), 713.424F, 0.0F, 76.69675F, 0.0F, (-1898.6F), 551.787F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1898.6F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-7509);
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-7509), (short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-7509), (short) (-1)}, shortArray0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(2142L);
      assertNotNull(long0);
      assertEquals(2142L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertNotNull(long1);
      assertEquals(6, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertEquals(2142L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[0]);
      assertNotNull(long2);
      assertEquals(6, longArray0.length);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertEquals(2142L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[2]);
      assertNotNull(long3);
      assertEquals(6, longArray0.length);
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertEquals(2142L, (long)long3);
      
      Character character0 = new Character(']');
      assertNotNull(character0);
      assertEquals(']', (char)character0);
      
      ArrayUtils.hashCode((Object) character0);
      float[] floatArray0 = new float[6];
      floatArray0[2] = (float) ']';
      floatArray0[1] = (float) (long)longArray0[1];
      floatArray0[2] = (float) (long)longArray0[2];
      floatArray0[3] = (float) 2142L;
      floatArray0[4] = (float) (long)longArray0[1];
      floatArray0[5] = (float) (long)longArray0[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 2142.0F, 2142.0F, 2142.0F, 2142.0F, 2142.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.swap((Object[]) null, 52, 52);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      char char0 = '^';
      Character character0 = new Character('^');
      assertNotNull(character0);
      assertTrue(character0.equals((Object)char0));
      assertEquals('^', (char)character0);
      
      Character character1 = Character.valueOf('^');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('^', (char)character1);
      
      Character character2 = new Character('-');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('-', (char)character2);
      
      Character character3 = new Character(')');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertEquals(')', (char)character3);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character2;
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character2;
      characterArray0[5] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'-', '^', '^', '^', '-', '^'}, charArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (char)character0;
      floatArray1[1] = (float) (char)character2;
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) ')';
      floatArray2[1] = 1.0F;
      float[] floatArray3 = ArrayUtils.removeElements(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray2);
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {41.0F, 1.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {94.0F, 45.0F}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {94.0F, 45.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray2.length);
      assertEquals(2, floatArray3.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) char0;
      doubleArray0[1] = (double) 1.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (int) char0, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 94, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2515.4185343;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2976.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-2976.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1530.0F, (-484));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-2976.0F), 0.0F, 1.0F, 0.0F, (-2976.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-484);
      intArray0[1] = (-484);
      intArray0[2] = (-484);
      intArray0[3] = (-484);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-484), (-484), (-484), (-484)}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-484);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 12, (-484));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-484L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 48.0;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 48.0;
      objectArray0[1] = (Object) 48.0;
      objectArray0[2] = (Object) 48.0;
      objectArray0[3] = (Object) 48.0;
      objectArray0[5] = (Object) 48.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null, (-1));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(6, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true}, booleanArray0));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = 48.0;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = 48.0;
      doubleArray1[5] = 48.0;
      doubleArray1[6] = 48.0;
      ArrayUtils.shift(doubleArray1, (-1), (-1), (-1));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 48.0, (-1.0), (-1.0), 48.0, 48.0, 48.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'd';
      charArray0[2] = 'S';
      charArray0[3] = 'q';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeElement(charArray1, 'S');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'q';
      Short short0 = new Short((short)53);
      assertNotNull(short0);
      assertEquals((short)53, (short)short0);
      
      Short short1 = new Short((short) (-1467));
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-1467), (short)short1);
      
      Short short2 = new Short((short)1278);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)1278, (short)short2);
      
      Short short3 = new Short((short) (-1555));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short) (-1555), (short)short3);
      
      Short short4 = new Short((short) (-1555));
      assertNotNull(short4);
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertEquals((short) (-1555), (short)short4);
      
      Short short5 = new Short((short)1);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertEquals((short)1, (short)short5);
      
      Short short6 = new Short((short) (-1871));
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertEquals((short) (-1871), (short)short6);
      
      Short short7 = new Short((short)1);
      assertNotNull(short7);
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short0));
      assertTrue(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short6));
      assertEquals((short)1, (short)short7);
      
      Short[] shortArray0 = ArrayUtils.add((Short[]) null, short7);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short0));
      assertTrue(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short6));
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 0, 52);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-592.6235F);
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 52;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F, 0.0F, (-592.6235F), 0.0F, 0.0F, 52.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, (-592.6235F), 0.0F, 0.0F, 52.0F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2147051644);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 5547);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2147051644)}, intArray1);
      assertArrayEquals(new int[] {(-2147051644)}, intArray0);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Short[] shortArray0 = new Short[8];
      Short short0 = new Short((short)1922);
      assertNotNull(short0);
      assertEquals((short)1922, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertNotNull(short1);
      assertEquals(8, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)1922, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)1);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)1, (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-160));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short) (-160), (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) shortArray0[0]);
      assertNotNull(short4);
      assertEquals(8, shortArray0.length);
      assertTrue(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short1));
      assertEquals((short)1922, (short)short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short)1);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertEquals((short)1, (short)short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)1922);
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short3));
      assertTrue(short6.equals((Object)short0));
      assertTrue(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short5));
      assertTrue(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short2));
      assertEquals((short)1922, (short)short6);
      
      shortArray0[6] = short6;
      Short short7 = new Short((short)2240);
      assertNotNull(short7);
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short4));
      assertEquals((short)2240, (short)short7);
      
      shortArray0[7] = short7;
      Short short8 = new Short((short) (-3266));
      assertNotNull(short8);
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short5));
      assertFalse(short8.equals((Object)short6));
      assertFalse(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short4));
      assertEquals((short) (-3266), (short)short8);
      
      Short[] shortArray1 = ArrayUtils.add(shortArray0, short8);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short5));
      assertFalse(short8.equals((Object)short6));
      assertFalse(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short4));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)21;
      int[] intArray0 = new int[5];
      intArray0[2] = (int) (byte)21;
      intArray0[3] = (int) (byte)97;
      intArray0[4] = (int) (byte)97;
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 0, 191, 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.reverse(byteArray0, 114, 97);
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 21;
      Object object0 = ArrayUtils.get(objectArray0, 191);
      assertNull(object0);
      assertEquals(6, objectArray0.length);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) (byte)21;
      objectArray0[3] = (Object) (byte)97;
      objectArray0[4] = (Object) (byte)97;
      objectArray0[5] = (Object) (byte)21;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 108);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 3439L;
      ArrayUtils.shift(longArray0, 2, 369, 2);
      assertArrayEquals(new long[] {3439L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      ArrayUtils.reverse((byte[]) null, (-14), 2);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "org.evosuite.runtime.mock.java.util.MockRandom");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      Integer integer0 = new Integer(369);
      assertNotNull(integer0);
      assertEquals(369, (int)integer0);
      
      Integer integer1 = new Integer((-1193));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1193), (int)integer1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[2] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, Integer.MAX_VALUE);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-1193), Integer.MAX_VALUE, (-1193)}, intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.shift(longArray0, 369);
      assertArrayEquals(new long[] {3439L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      MockRandom mockRandom0 = new MockRandom((-1036L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)59, (int) (byte)59);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)102}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, (int)  (-750));
      assertNull(object0);
      assertEquals(6, objectArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(6, objectArray0.length);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      booleanArray1[7] = true;
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray1, false);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, true, true}, booleanArray1));
      assertEquals(7, booleanArray2.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Short[] shortArray1 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      ArrayUtils.shift((char[]) null, Integer.MAX_VALUE, 700, (-1058));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-40);
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-40), (byte)126, (byte)106, (byte)107}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (-1053L);
      longArray0[3] = 2006L;
      longArray0[4] = (long) (byte)107;
      longArray0[5] = 1403L;
      longArray0[6] = (long) (byte)107;
      ArrayUtils.reverse(longArray0, (int) (byte)126, (int) (byte)107);
      assertArrayEquals(new long[] {2147483647L, 2147483647L, (-1053L), 2006L, 107L, 1403L, 107L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-1.0F));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 0.1, (-2262.77818295));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)5427);
      assertNotNull(short0);
      assertEquals((short)5427, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)4);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)4, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)4);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)4, (short)short2);
      
      shortArray0[2] = short2;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = 0.0F;
      floatArray0[1] = 0.0F;
      short short0 = (short) (-492);
      Short short1 = new Short((short) (-492));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-492), (short)short1);
      
      Short[] shortArray0 = new Short[0];
      Short short2 = new Short((short) (-492));
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short) (-492), (short)short2);
      
      Short[] shortArray1 = ArrayUtils.add(shortArray0, short2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Long long0 = new Long((-4199L));
      assertNotNull(long0);
      assertEquals((-4199L), (long)long0);
      
      int int0 = ArrayUtils.indexOf((Object[]) shortArray1, (Object) long0, (int) (short) (-492));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals((-1), int0);
      
      int int1 = 160;
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, 160, "+~*00N4#*");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 160, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.reverse(booleanArray0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)1, (byte) (-1), (byte)2}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1301);
      shortArray0[1] = (short) (-640);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2995;
      shortArray0[4] = (short)32;
      shortArray0[5] = (short) (-244);
      shortArray0[6] = (short)919;
      ArrayUtils.shift(shortArray0, (-2079), (int) (short)2, (-1835));
      assertArrayEquals(new short[] {(short) (-640), (short) (-1301), (short)2, (short)2995, (short)32, (short) (-244), (short)919}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Double double0 = new Double((short)32);
      assertNotNull(double0);
      assertEquals(32.0, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertNotNull(object0);
      assertEquals(32.0, object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short) (-1301);
      objectArray0[1] = (Object) (short)919;
      objectArray0[2] = (Object) double0;
      objectArray0[3] = (Object) (short) (-640);
      objectArray0[4] = (Object) (short) (-640);
      objectArray0[5] = (Object) (short) (-640);
      objectArray0[6] = (Object) (short) (-244);
      ArrayUtils.shuffle(objectArray0);
      assertEquals(7, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2743L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2743L);
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-2743L), (-2952));
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 2724.39);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2724.39}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray2 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((-2743L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-2743L), (long)long1);
      
      Long long2 = new Long((-1L));
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-1L), (long)long2);
      
      Long[] longArray3 = ArrayUtils.removeAllOccurrences(longArray1, long2);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray3.length);
      assertFalse(longArray0.equals((Object)longArray2));
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertFalse(longArray3.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 2724.39);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2724.39}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray2 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((-1L));
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      
      Long[] longArray3 = ArrayUtils.removeAllOccurrences(longArray1, long1);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotNull(longArray3);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray3.length);
      assertTrue(long1.equals((Object)long0));
      assertFalse(longArray3.equals((Object)longArray1));
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, Integer.MAX_VALUE, (-1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1718;
      floatArray0[1] = (float) 1718;
      floatArray0[2] = (float) 83;
      floatArray0[3] = (float) (byte)94;
      ArrayUtils.shift(floatArray0, (-1802), 1718, 0);
      assertArrayEquals(new float[] {1718.0F, 1718.0F, 83.0F, 94.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('V');
      assertNotNull(character0);
      assertEquals('V', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, (char) character0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-4);
      byteArray0[8] = (byte) (-1);
      ArrayUtils.shift(byteArray0, (int) (byte) (-4));
      assertArrayEquals(new byte[] {(byte) (-4), (byte) (-1), (byte) (-1), (byte) (-4), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-4), (byte) (-1)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-50));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-4), (byte) (-1), (byte) (-1), (byte) (-4), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-4), (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-4), (byte) (-1), (byte) (-1), (byte) (-4), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-4), (byte) (-1)}, byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-362), (-362));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-362);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2), (-2));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-362)}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, true}, booleanArray2));
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-7);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-16));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)61, (byte) (-116), (byte) (-16), (byte) (-7), (byte) (-16)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)61, (byte) (-116), (byte) (-16), (byte) (-7)}, byteArray0);
      assertEquals(5, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.removeElement(longArray0, (Object) bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new int[] {(-362)}, intArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(1, intArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 432);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 432, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)555;
      shortArray0[1] = (short)3341;
      shortArray0[3] = (short)555;
      shortArray0[4] = (short) (-1246);
      shortArray0[5] = (short)555;
      shortArray0[6] = (short)2227;
      shortArray0[7] = (short) (-1274);
      shortArray0[8] = (short)99;
      ArrayUtils.reverse(shortArray0, (int) (short)2227, (int) (short)555);
      assertArrayEquals(new short[] {(short)555, (short)3341, (short)0, (short)555, (short) (-1246), (short)555, (short)2227, (short) (-1274), (short)99}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.insert((int) (short) (-1274), shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)555, (short)3341, (short)0, (short)555, (short) (-1246), (short)555, (short)2227, (short) (-1274), (short)99}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)555, (short)3341, (short)0, (short)555, (short) (-1246), (short)555, (short)2227, (short) (-1274), (short)99}, shortArray2);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = '|';
      charArray0[2] = '^';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'1', '|', '^'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)555;
      shortArray0[1] = (short)3341;
      shortArray0[3] = (short)1040;
      shortArray0[4] = (short) (-1246);
      shortArray0[5] = (short) (-2350);
      shortArray0[6] = (short)2227;
      shortArray0[7] = (short) (-1274);
      shortArray0[8] = (short)99;
      ArrayUtils.reverse(shortArray0, (int) (short)2227, (int) (short)1040);
      assertArrayEquals(new short[] {(short)555, (short)3341, (short)0, (short)1040, (short) (-1246), (short) (-2350), (short)2227, (short) (-1274), (short)99}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.insert((int) (short) (-1274), shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)555, (short)3341, (short)0, (short)1040, (short) (-1246), (short) (-2350), (short)2227, (short) (-1274), (short)99}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)555, (short)3341, (short)0, (short)1040, (short) (-1246), (short) (-2350), (short)2227, (short) (-1274), (short)99}, shortArray2);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = '|';
      charArray0[2] = '^';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'1', '|', '^'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.contains((int[]) null, 2171);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1686L;
      longArray0[1] = (long) 2171;
      longArray0[2] = 1686L;
      longArray0[3] = (long) 2171;
      longArray0[4] = 1686L;
      longArray0[5] = (long) 2171;
      longArray0[6] = (long) 2171;
      longArray0[7] = (long) 2171;
      boolean boolean1 = ArrayUtils.contains(longArray0, (-1156L));
      assertArrayEquals(new long[] {1686L, 2171L, 1686L, 2171L, 1686L, 2171L, 2171L, 2171L}, longArray0);
      assertEquals(8, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.shift((long[]) null, 2587);
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 1);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 0);
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 3215, 1874);
      assertNull(charArray0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (-3461.399824553978));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Character character0 = Character.valueOf('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      boolean boolean2 = ArrayUtils.isArrayIndexValid((Character[]) null, 2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ArrayUtils.shift((double[]) null, 2, 1874, 1811);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, 432, 57);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (-1), (-1), 3462);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 84, 956);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.reverse((Object[]) null);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1097;
      shortArray0[1] = (short) (-2318);
      shortArray0[2] = (short) (-14297);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1097, (short) (-2318), (short) (-14297), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1097, (short) (-2318), (short) (-14297), (short)0, (short)1097, (short) (-2318), (short) (-14297), (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-3274L));
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-2318));
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)1097, (short) (-2318), (short) (-14297), (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 2);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = 0.0F;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte) (-127);
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.swap(booleanArray0, (int) (byte) (-127), (-2134546998), (-2147483644));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      float[] floatArray0 = new float[9];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1516.9F, 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)120;
      byteArray0[8] = (byte) (-40);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-40));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)98, (byte) (-102), (byte)23, (byte) (-54), (byte)126, (byte)120, (byte)120, (byte) (-40)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)98, (byte) (-102), (byte)23, (byte) (-54), (byte)126, (byte)120, (byte)120}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-903), (-935));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, (-67), (int) (byte) (-102), (int) (byte) (-102));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      ArrayUtils.swap((long[]) null, (-2146820843), (-1246), 1);
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[3] = (float) (-1246);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, (-1246.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-4935), 191);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.addAll((Character[]) null, (Character[]) null);
      assertNull(characterArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)555;
      shortArray0[1] = (short)3341;
      shortArray0[2] = (short)555;
      shortArray0[3] = (short)555;
      shortArray0[4] = (short) (-1246);
      shortArray0[5] = (short) (-2350);
      shortArray0[6] = (short)2227;
      shortArray0[7] = (short) (-1274);
      shortArray0[8] = (short) (-1274);
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.insert((int) (short) (-1274), shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)555, (short)3341, (short)555, (short)555, (short) (-1246), (short) (-2350), (short)2227, (short) (-1274), (short) (-1274)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)555, (short)3341, (short)555, (short)555, (short) (-1246), (short) (-2350), (short)2227, (short) (-1274), (short) (-1274)}, shortArray2);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.addAll((Character[]) null, (Character[]) null);
      assertNull(characterArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)555;
      shortArray0[1] = (short)3341;
      shortArray0[2] = (short)555;
      shortArray0[3] = (short)1040;
      shortArray0[4] = (short) (-1246);
      shortArray0[5] = (short) (-2350);
      shortArray0[6] = (short)2227;
      shortArray0[7] = (short) (-1274);
      shortArray0[8] = (short)99;
      ArrayUtils.reverse(shortArray0, (int) (short)2227, (int) (short)1040);
      assertArrayEquals(new short[] {(short)555, (short)3341, (short)555, (short)1040, (short) (-1246), (short) (-2350), (short)2227, (short) (-1274), (short)99}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.insert((int) (short) (-1274), shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)555, (short)3341, (short)555, (short)1040, (short) (-1246), (short) (-2350), (short)2227, (short) (-1274), (short)99}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)555, (short)3341, (short)555, (short)1040, (short) (-1246), (short) (-2350), (short)2227, (short) (-1274), (short)99}, shortArray2);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-994);
      longArray0[1] = 296L;
      longArray0[2] = (long) (-994);
      longArray0[3] = 296L;
      longArray0[4] = (long) (-994);
      longArray0[5] = (long) (-994);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-994L), 296L, (-994L), 296L, (-994L), (-994L)}, longArray0);
      assertArrayEquals(new long[] {(-994L), 296L, (-994L), 296L, (-994L), (-994L)}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 335);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (-994);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)0;
      shortArray0[8] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0, (int) (short)0, 34);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 0, 52);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      Object[] objectArray0 = new Object[0];
      Short[] shortArray0 = new Short[1];
      Short short0 = ArrayUtils.get(shortArray0, 0);
      assertNull(short0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1320L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray0 = new int[0];
      long[] longArray2 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      
      Long long0 = new Long((-611L));
      assertNotNull(long0);
      assertEquals((-611L), (long)long0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object0);
      assertEquals((-611L), object0);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 0, 52);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      Object[] objectArray0 = new Object[0];
      Short[] shortArray0 = new Short[1];
      Short short0 = ArrayUtils.get(shortArray0, 0);
      assertNull(short0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1320L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray0 = new int[0];
      long[] longArray2 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      
      Long long0 = new Long((-611L));
      assertNotNull(long0);
      assertEquals((-611L), (long)long0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object0);
      assertEquals((-611L), object0);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)94;
      doubleArray0[1] = (double) (byte)94;
      doubleArray0[2] = (double) (byte)94;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (byte)94;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3461.399824553978));
      assertArrayEquals(new double[] {94.0, 94.0, 94.0, (-1.0), 94.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, (int) 94);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'y';
      intArray0[1] = (int) '9';
      doubleArray0[1] = (double) '9';
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {121, 57, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-64);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-64L)}, longArray0);
      assertArrayEquals(new long[] {(-64L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray0, (long) 121);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-64L)}, longArray0);
      assertArrayEquals(new long[] {(-64L)}, longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.subarray(longArray0, (int) (byte) (-1), (int) (byte) (-1));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {(-64L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1144;
      shortArray0[1] = (short) (byte)94;
      shortArray0[2] = (short) (byte) (-64);
      shortArray0[3] = (short) (byte) (-64);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte)94;
      shortArray0[6] = (short) (byte)94;
      shortArray0[7] = (short) (byte)94;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)94, (short) (-64), (short) (-64), (short) (-1), (short)94, (short)94, (short)94, (short)1144}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)94;
      doubleArray0[1] = (double) (byte)94;
      doubleArray0[2] = (double) (byte)94;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (byte)94;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3461.399824553978));
      assertArrayEquals(new double[] {94.0, 94.0, 94.0, (-1.0), 94.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, (int) 94);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'y';
      intArray0[1] = (int) '9';
      doubleArray0[1] = (double) '9';
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {121, 57, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-64);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-64L)}, longArray0);
      assertArrayEquals(new long[] {(-64L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray0, (long) 121);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-64L)}, longArray0);
      assertArrayEquals(new long[] {(-64L)}, longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.subarray(longArray0, (int) (byte) (-1), (int) (byte) (-1));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {(-64L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1144;
      shortArray0[1] = (short) (byte)94;
      shortArray0[3] = (short) (byte) (-64);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte)94;
      shortArray0[6] = (short) (byte)94;
      shortArray0[7] = (short) (byte)94;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)94, (short)0, (short) (-64), (short) (-1), (short)94, (short)94, (short)94, (short)1144}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "o\"\"?okrJd-!:|");
      assertNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      ArrayUtils.shift((byte[]) null, (-1214));
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)102);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'd';
      charArray0[2] = 'S';
      charArray0[3] = 'q';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeElement(charArray1, 'S');
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'q';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-4);
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray2, '=', 184);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 113L}, longArray0);
      assertEquals(3, longArray0.length);
      
      ArrayUtils.swap(byteArray0, 17, 2171);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-4)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {184, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(charArray1, 't', 2489);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'V';
      charArray0[4] = 'K';
      charArray0[5] = '6';
      charArray0[6] = '6';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'6', '6', 'K', 'V', 'K', 'K', '6'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)12, (int) (byte)12);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Double double0 = new Double(1.5);
      assertNotNull(double0);
      assertEquals(1.5, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)59;
      Short[] shortArray0 = new Short[9];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)0, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short)0, (short)short2);
      
      shortArray0[1] = short2;
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((byte)15);
      assertNotNull(long0);
      assertEquals(15L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1796L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1796L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((byte)0);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(0L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-1796L));
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertEquals((-1796L), (long)long3);
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte)59);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {15L, (-1796L), 0L, (-1796L)}, longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      
      Double double0 = new Double((double) longArray0[2]);
      assertNotNull(double0);
      assertEquals(4, longArray0.length);
      assertEquals(0.0, (double)double0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) long3, (int) short0);
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 3}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      
      ArrayUtils.shift(longArray1, (int) (byte)59);
      assertArrayEquals(new long[] {(-1796L), 0L, (-1796L), 15L}, longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[2] = 0L;
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('V');
      assertNotNull(character0);
      assertEquals('V', (char)character0);
      
      characterArray0[0] = character0;
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((int) character0);
      assertNotNull(integer0);
      assertEquals(86, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(421);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(421, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) character0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(86, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(84);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(84, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = ArrayUtils.get(integerArray0, (int) integerArray0[0], integer3);
      assertNotNull(integer4);
      assertEquals(4, integerArray0.length);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(84, (int)integer4);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) integer4, (int) integerArray0[1]);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertEquals(2, characterArray0.length);
      assertEquals(4, integerArray0.length);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      
      ArrayUtils.shift(longArray0, 977);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 421;
      intArray0[1] = 421;
      intArray0[2] = (int) (char)character0;
      intArray0[3] = 421;
      intArray0[4] = 15;
      intArray0[5] = (-151);
      intArray0[6] = (-3557);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-2127413706));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {421, 421, 86, 421, 15, (-151), (-3557)}, intArray0);
      assertArrayEquals(new int[] {421, 421, 86, 421, 15, (-151), (-3557)}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(3805L);
      assertNotNull(long0);
      assertEquals(3805L, (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 3805L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {3805L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      Double double0 = new Double(2515.4185343);
      assertNotNull(double0);
      assertEquals(2515.4185343, (double)double0, 0.01);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) boolean0, 2146964681);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      
      ArrayUtils.shift(longArray1, 115);
      assertArrayEquals(new long[] {3805L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 115;
      intArray0[1] = (-3557);
      intArray0[2] = 115;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 115);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {115, (-3557), 115}, intArray0);
      assertArrayEquals(new int[] {(-3557), 115}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)99);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Long long0 = Long.getLong((String) null);
      assertNull(long0);
      
      Long long1 = new Long(1772L);
      assertNotNull(long1);
      assertEquals(1772L, (long)long1);
      
      Long long2 = new Long(1485L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertEquals(1485L, (long)long2);
      
      Long long3 = new Long(1772L);
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals(1772L, (long)long3);
      
      Long[] longArray0 = new Long[6];
      longArray0[0] = long3;
      longArray0[1] = long3;
      longArray0[2] = null;
      longArray0[3] = long2;
      longArray0[5] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (-1));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1772L, 1772L, (-1L), 1485L, (-1L), 1772L}, longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) double0, 115);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(6, longArray0.length);
      
      ArrayUtils.shift(longArray1, (-3557));
      assertArrayEquals(new long[] {1772L, 1772L, 1772L, (-1L), 1485L, (-1L)}, longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-1);
      intArray0[2] = 115;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (int) 'S';
      intArray0[6] = (-3557);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-3557));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-1), 115, (-1), (-1), 83, (-3557)}, intArray0);
      assertArrayEquals(new int[] {0, (-1), 115, (-1), (-1), 83}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ")5C@'c(&)AH-.rG";
      stringArray0[1] = ")5C@'c(&)AH-.rG";
      stringArray0[2] = ")5C@'c(&)AH-.rG";
      stringArray0[3] = ")5C@'c(&)AH-.rG";
      stringArray0[4] = ")5C@'c(&)AH-.rG";
      stringArray0[5] = ")5C@'c(&)AH-.rG";
      stringArray0[6] = ")5C@'c(&)AH-.rG";
      String[] stringArray1 = ArrayUtils.removeElements(stringArray0, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(7, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      MockRandom mockRandom0 = new MockRandom(78L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.hashCode((Object) ")5C@'c(&)AH-.rG");
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      ArrayUtils.reverse((Object[]) null);
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':', ':'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) ':';
      doubleArray0[1] = (double) ':';
      doubleArray0[2] = (double) ':';
      doubleArray0[3] = (double) ':';
      int int0 = ArrayUtils.indexOf(doubleArray0, (-793.42));
      assertArrayEquals(new double[] {58.0, 58.0, 58.0, 58.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 3332.362284992);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {58.0, 58.0, 58.0, 58.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {58.0, 58.0, 58.0, 58.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "', has a length less than 2";
      stringArray0[2] = ")5C@'c(&)AH-.rG";
      String[] stringArray1 = ArrayUtils.removeElements(stringArray0, stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(3, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-103.0F), (-2138528675));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-2138528675);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, (-1), (-1), (-2138528675)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-2138528675);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (-1);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 128, (-2138528675));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1L), (-2138528675L), 0L, (-1L), 0L, 0L, (-1L)}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(floatArray0, (-1));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-881.9079F);
      floatArray0[2] = (-2976.0F);
      floatArray0[3] = 0.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, (-484));
      assertArrayEquals(new float[] {1.0F, (-881.9079F), (-2976.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-484);
      longArray0[6] = (long) (-484);
      longArray0[7] = (long) (-484);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 2147483646, 1504);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-484L), (-484L), (-484L)}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-73);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-123), (byte) (-6), (byte)75, (byte) (-1), (byte) (-73), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-123);
      shortArray0[1] = (short) (byte) (-123);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte)97;
      shortArray0[4] = (short) (byte)75;
      shortArray0[5] = (short) (byte)75;
      shortArray0[6] = (short) (byte) (-123);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-123));
      assertArrayEquals(new short[] {(short) (-123), (short) (-123), (short) (-1), (short)97, (short)75, (short)75, (short) (-123)}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)75;
      longArray0[1] = 981L;
      longArray0[2] = (long) (byte)97;
      longArray0[3] = (long) (byte) (-123);
      longArray0[4] = (long) (short) (-123);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2147L, (int) (short)75);
      assertArrayEquals(new long[] {75L, 981L, 97L, (-123L), (-123L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      ArrayUtils.swap(longArray0, 0, 0, 0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      ArrayUtils.swap(byteArray0, (int) (byte) (-89), 0, (int) (byte) (-89));
      assertArrayEquals(new byte[] {(byte)107}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1788L), 0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = '8';
      charArray0[2] = 'F';
      charArray0[3] = 'J';
      charArray0[4] = 'i';
      charArray0[5] = '\"';
      charArray0[6] = '-';
      charArray0[7] = '(';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '?');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'-', '8', 'F', 'J', 'i', '\"', '-', '('}, charArray1);
      assertArrayEquals(new char[] {'-', '8', 'F', 'J', 'i', '\"', '-', '('}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '0', (-2548));
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(charArray0, 218);
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-2144L);
      longArray0[1] = (long) (-2548);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 503, (-1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)21;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)97;
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[3] = '*';
      charArray0[3] = '\u001F';
      ArrayUtils.shift(charArray0, (-123), (int) (byte)21, 299);
      assertArrayEquals(new char[] {'Z', '\u0000', '\u001F', 'Z'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = (-8L);
      longArray0[2] = 0L;
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('V');
      assertNotNull(character0);
      assertEquals('V', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('s');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('s', (char)character1);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'A');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'V', 'A'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-8L));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertNotSame(mockRandom0, mockRandom1);
      assertArrayEquals(new char[] {'A', 'V'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      
      ArrayUtils.shift(charArray0, 2980, (-3681), (-102));
      assertArrayEquals(new char[] {'A', 'V'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.reverse(booleanArray0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 1456);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "mLXs";
      stringArray0[1] = "`zW8ANCV*p,";
      stringArray0[2] = "ri 24R";
      stringArray0[3] = "";
      stringArray0[4] = "~s/D{0txK!";
      stringArray0[5] = "Mf\"#%w8tM]>/,^";
      stringArray0[6] = "EHq<lVU;]$B*7;6";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 1456, 1456);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(7, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = '$';
      charArray0[2] = 'Z';
      charArray0[3] = 'H';
      charArray0[4] = '1';
      charArray0[5] = '.';
      int int1 = ArrayUtils.indexOf(charArray0, 'H');
      assertArrayEquals(new char[] {'7', '$', 'Z', 'H', '1', '.'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.addAll((Character[]) null, (Character[]) null);
      assertNull(characterArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)555;
      shortArray0[1] = (short)3341;
      shortArray0[2] = (short)555;
      shortArray0[3] = (short)555;
      shortArray0[4] = (short) (-1246);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)555;
      ArrayUtils.swap(doubleArray0, (int) (short)555, (int) (short)3341, (-9));
      assertArrayEquals(new double[] {555.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)3341, (-1236));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)555, (short)3341, (short)555, (short)555, (short) (-1246), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 102, (-9), 1237);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 313.477F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {313.477F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Double double0 = new Double(313.477F);
      assertNotNull(double0);
      assertEquals(313.47698974609375, (double)double0, 0.01);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)7;
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short) (byte) (-71);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String string0 = ArrayUtils.toString((Object) boolean0);
      assertNotNull(string0);
      assertEquals("true", string0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      short[] shortArray0 = new short[0];
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(345);
      assertNotNull(integer0);
      assertEquals(345, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte1));
      assertEquals((byte) (-14), object0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2952), 52);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 52;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 372, 2817);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {52}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-1));
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = 'P';
      charArray0[2] = 'l';
      charArray0[3] = '\\';
      charArray0[4] = 'B';
      charArray0[5] = 'Q';
      charArray0[6] = ',';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'&', 'P', 'l', '\\', 'B', 'Q', ','}, charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = ',';
      charArray0[2] = 'x';
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'n';
      charArray1[1] = 'n';
      charArray1[2] = 'e';
      charArray1[3] = 'H';
      charArray1[5] = 'x';
      charArray1[7] = 'x';
      ArrayUtils.shift(charArray1, (int) (byte)0, (int) (byte)0, 1475);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'n', 'n', 'e', 'H', '\u0000', 'x', '\u0000', 'x'}, charArray1);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.indexOf(charArray1, 'x', 1475);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'n', 'n', 'e', 'H', '\u0000', 'x', '\u0000', 'x'}, charArray1);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short)0;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[1] = (Character) 'n';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) characterArray0);
      assertNotSame(characterArray0, objectArray0);
      assertSame(characterArray0, characterArray1);
      assertNotNull(objectArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, objectArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) ',';
      longArray0[1] = (long) 'x';
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) 1475, (int) characterArray0[1]);
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(characterArray0, objectArray0);
      assertSame(characterArray0, characterArray1);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {44L, 120L}, longArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(2, longArray0.length);
      assertFalse(characterArray0.equals((Object)objectArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int2 = ArrayUtils.indexOf(booleanArray0, false, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      Character character0 = Character.valueOf('\u0085');
      assertNotNull(character0);
      assertEquals('\u0085', (char)character0);
      
      Character character1 = new Character('\u0085');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('\u0085', (char)character1);
      
      byte[] byteArray0 = new byte[2];
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'd');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      ArrayUtils.shift(byteArray0, (int) (short)98);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((short)98);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'V'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'V';
      intArray0[1] = (int) 'V';
      intArray0[2] = (int) 'V';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 86);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 86, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)9;
      short short0 = (short)2104;
      shortArray0[1] = (short)2104;
      shortArray0[2] = (short)2043;
      ArrayUtils.swap(shortArray0, 299, 2);
      assertArrayEquals(new short[] {(short)9, (short)2104, (short)2043}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, (int) (short)2043);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2043, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(345);
      assertNotNull(integer0);
      assertEquals(345, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte1));
      assertEquals((byte) (-14), object0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)16067, 0);
      assertEquals((-1), int0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)16067;
      doubleArray0[1] = 2667.1591796875;
      doubleArray0[2] = (double) 345;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte) (-14);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean boolean2 = ArrayUtils.contains((short[]) null, (short)573);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Integer integer0 = Integer.valueOf((int) (byte) (-14));
      assertNotNull(integer0);
      assertEquals((-14), (int)integer0);
      
      Byte byte0 = new Byte((byte)94);
      assertNotNull(byte0);
      assertEquals((byte)94, (byte)byte0);
      
      Byte byte1 = new Byte((byte)94);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)94, (byte)byte1);
      
      Object object0 = ArrayUtils.get(objectArray0, (int)  (-14));
      assertNull(object0);
      assertEquals(0, objectArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-15241));
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-1907));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)94;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)94);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)94, (byte) (-14), (byte) (-14), (byte)94}, byteArray0);
      assertArrayEquals(new byte[] {(byte)94, (byte) (-14), (byte) (-14), (byte)94, (byte)94}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-14);
      floatArray0[1] = (float) (-14);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 2107.2996F;
      floatArray0[4] = (float) (-14);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-3422.464F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-14.0F), (-14.0F), (-1.0F), 2107.2996F, (-14.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-14.0F), (-14.0F), (-1.0F), 2107.2996F, (-14.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean boolean0 = new Boolean("org.apache.commons.lang3.mutable.MutableInt");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      
      Boolean boolean4 = Boolean.valueOf(true);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-14);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-2441));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-14)}, intArray1);
      assertArrayEquals(new int[] {(-14)}, intArray0);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('V');
      assertNotNull(character0);
      assertEquals('V', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('U');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('U', (char)character1);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'A');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'V', 'A'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int int0 = mockRandom1.nextInt();
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0, int0);
      
      int int1 = mockRandom1.nextInt();
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertNotSame(mockRandom0, mockRandom1);
      assertArrayEquals(new char[] {'A', 'V'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1292;
      shortArray0[1] = (short) (-1024);
      int int2 = ArrayUtils.lastIndexOf(shortArray0, (short) (-216));
      assertArrayEquals(new short[] {(short)1292, (short) (-1024)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (short) (-1024));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 847L;
      longArray0[1] = 2651L;
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {847L, 2651L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short)2104;
      shortArray0[2] = (short)2043;
      ArrayUtils.swap(shortArray0, 299, 2);
      assertArrayEquals(new short[] {(short)9, (short)2104, (short)2043}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (short)9);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {9}, intArray0);
      assertEquals(1, intArray0.length);
      
      Short[] shortArray1 = new Short[2];
      Short short0 = new Short((short)2104);
      assertNotNull(short0);
      assertEquals((short)2104, (short)short0);
      
      shortArray1[0] = short0;
      shortArray1[1] = (Short) (short)2043;
      Short[] shortArray2 = ArrayUtils.addAll(shortArray1, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)2043;
      doubleArray0[1] = (double) 299;
      doubleArray0[2] = (double) (short)2104;
      doubleArray0[3] = (double) 299;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) (short)2104;
      doubleArray0[6] = (double) 299;
      doubleArray0[7] = (double) (short)9;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 9.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {9.0, 2043.0, 299.0, 2104.0, 299.0, 2.0, 2104.0, 299.0, 9.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2043.0, 299.0, 2104.0, 299.0, 2.0, 2104.0, 299.0, 9.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)2104;
      longArray0[1] = (long) (short)9;
      longArray0[2] = 1L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (short)9);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2104L, 9L, 1L}, longArray0);
      assertArrayEquals(new long[] {2104L, 1L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Long[] longArray2 = new Long[8];
      longArray2[0] = (Long) 2104L;
      longArray2[1] = (Long) 9L;
      longArray2[2] = (Long) 9L;
      longArray2[3] = (Long) 2104L;
      longArray0[1] = 9L;
      longArray2[5] = (Long) 9L;
      longArray2[6] = (Long) 1L;
      longArray2[7] = (Long) 9L;
      Long[] longArray3 = ArrayUtils.removeAllOccurrences(longArray2, longArray2[4]);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray2, longArray3);
      assertNotNull(longArray3);
      assertEquals(7, longArray3.length);
      assertEquals(8, longArray2.length);
      assertFalse(longArray3.equals((Object)longArray2));
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 847.0);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {847.0, 0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Long long0 = new Long((-110L));
      assertNotNull(long0);
      assertEquals((-110L), (long)long0);
      
      Long long1 = new Long(2979L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(2979L, (long)long1);
      
      Long[] longArray1 = new Long[6];
      longArray1[0] = long1;
      longArray1[2] = long1;
      Long long2 = new Long(15L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(15L, (long)long2);
      
      longArray1[3] = long2;
      longArray1[4] = long0;
      longArray1[5] = long1;
      Long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray1, (Long) null);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertEquals(6, longArray1.length);
      assertEquals(5, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.removeAllOccurences(longArray0, 1497L);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray3, longArray0);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray3.equals((Object)longArray0));
      
      long[] longArray4 = ArrayUtils.removeElement(longArray3, (-110L));
      assertNotSame(longArray4, longArray3);
      assertNotSame(longArray4, longArray0);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray4);
      assertNotSame(longArray3, longArray4);
      assertNotSame(longArray3, longArray0);
      assertNotNull(longArray4);
      assertArrayEquals(new long[] {}, longArray4);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(0, longArray4.length);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray3));
      assertFalse(longArray3.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(345);
      assertNotNull(integer0);
      assertEquals(345, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte1));
      assertEquals((byte) (-14), object0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)16067, 0);
      assertEquals((-1), int0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)16067;
      doubleArray0[1] = 2667.1591796875;
      doubleArray0[2] = (double) 345;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte) (-14);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ArrayUtils.reverse(intArray0, (-1), (-611));
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray1, false);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertEquals(1, booleanArray2.length);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean2);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray3));
      assertEquals(2, booleanArray3.length);
      assertEquals(2, booleanArray0.length);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte) (-14);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-14), 0);
      assertEquals(6, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 3, 4, 6, 7}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte)2, (byte) (-14), (byte) (-14), (byte)108, (byte) (-14), (byte) (-14)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3774;
      shortArray0[1] = (short)12;
      shortArray0[2] = (short)1035;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)1035, (short)12, (short)3774}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)3774;
      floatArray0[1] = (float) (short)1035;
      floatArray0[2] = (float) (short)1035;
      floatArray0[3] = (float) (short)3774;
      floatArray0[4] = (float) (short)12;
      float[] floatArray1 = ArrayUtils.add(floatArray0, Float.NaN);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3774.0F, 1035.0F, 1035.0F, 3774.0F, 12.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3774.0F, 1035.0F, 1035.0F, 3774.0F, 12.0F, Float.NaN}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 3439L;
      longArray0[1] = (-3088L);
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, 40, 40);
      assertArrayEquals(new long[] {3439L, (-3088L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 40, 40);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(345);
      assertNotNull(integer0);
      assertEquals(345, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte1));
      assertEquals((byte) (-14), object0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)16067, 0);
      assertEquals((-1), int0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-14), 55);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 55;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      boolean boolean3 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {55.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (byte) (-14));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte) (-14), 55);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.reverse(floatArray0, 6, (-2579));
      assertArrayEquals(new float[] {55.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.reverse(byteArray0, 0, (-1));
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-14);
      byteArray1[1] = (byte) (-14);
      byteArray1[2] = (byte) (-14);
      byteArray1[3] = (byte) (-14);
      byteArray1[4] = (byte) (-14);
      byteArray1[5] = (byte) (-14);
      byteArray1[6] = (byte) (-14);
      byteArray1[7] = (byte) (-14);
      byteArray1[8] = (byte) (-14);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray1, (int) (byte) (-14), (byte) (-14));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -14, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      short[] shortArray0 = ArrayUtils.insert((int) (byte) (-15), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.addFirst((short[]) null, (short)12);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)12}, shortArray1);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2515.4185343;
      doubleArray0[1] = 2515.4185343;
      doubleArray0[2] = 1073.584126350248;
      doubleArray0[3] = 48.0;
      doubleArray0[4] = (-1718.903);
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = new Boolean("The Array must not be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean2);
      assertNotNull(boolean3);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf((boolean) boolean3);
      assertNotNull(boolean4);
      assertTrue(boolean2.equals((Object)boolean3));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean2);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean3));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      booleanArray0[6] = boolean3;
      booleanArray0[7] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray1));
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray1, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      
      ArrayUtils.shift(doubleArray0, 3009, 2, 122);
      assertArrayEquals(new double[] {2515.4185343, 2515.4185343, 1073.584126350248, 48.0, (-1718.903), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1073.584126350248, (-1905));
      assertArrayEquals(new double[] {2515.4185343, 2515.4185343, 1073.584126350248, 48.0, (-1718.903), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2140;
      intArray0[1] = 117;
      intArray0[2] = 2140;
      intArray0[3] = 2140;
      intArray0[4] = 2140;
      intArray0[5] = 2140;
      intArray0[6] = 2140;
      intArray0[7] = 2140;
      intArray0[8] = 2140;
      boolean boolean0 = ArrayUtils.contains(intArray0, 117);
      assertArrayEquals(new int[] {2140, 117, 2140, 2140, 2140, 2140, 2140, 2140, 2140}, intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2140;
      boolean boolean1 = ArrayUtils.contains(longArray0, 2147483647L);
      assertArrayEquals(new long[] {2140L}, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.indexOf(intArray0, 463, 2140);
      assertArrayEquals(new int[] {2140, 117, 2140, 2140, 2140, 2140, 2140, 2140, 2140}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      long[] longArray0 = new long[5];
      longArray0[0] = 2224L;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2224L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Float float0 = new Float((float) 2224L);
      assertNotNull(float0);
      assertEquals(2224.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) 2224L);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2224.0F, (float)float1, 0.01F);
      
      Float float2 = new Float(0.0F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      Float float3 = new Float((-1726.0F));
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-1726.0F), (float)float3, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {2224L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0, longArray2.length);
      assertEquals(5, longArray0.length);
      assertFalse(longArray2.equals((Object)longArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[1] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[2] = class1;
      classArray0[3] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1236L;
      longArray0[1] = 1L;
      longArray0[2] = 1236L;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(10, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Float float0 = new Float((float) 10);
      assertNotNull(float0);
      assertEquals(10.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) 1236L);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1236.0F, (float)float1, 0.01F);
      
      Float float2 = new Float(0.0F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      Float float3 = new Float(0.0F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float3;
      floatArray0[1] = float0;
      floatArray0[2] = float3;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)104;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1), 1713);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte) (-1), (byte)104, (byte)104, (byte) (-1), (byte)104}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)104;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {104.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf("\"dh)hm*HrFF*KQ|8");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("%J=p-{(y&i9");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean("%J=p-{(y&i9");
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("\"dh)hm*HrFF*KQ|8");
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf(" is not in the range '0' - '9'");
      assertNotNull(boolean6);
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7);
      
      booleanArray0[7] = boolean7;
      boolean boolean8 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean8);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(2123L);
      assertNotNull(long0);
      assertEquals(2123L, (long)long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, long0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) longArray0);
      assertNotSame(longArray0, longArray1);
      assertEquals(1, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short) (-1);
      intArray0[5] = (int) (short)0;
      intArray0[7] = (int) (short) (-1);
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short)0;
      int[] intArray2 = ArrayUtils.removeAll(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, (-1), 0, (-1), 0, 0, (-1)}, intArray2);
      assertArrayEquals(new int[] {0, 0, (-1), 0, (-1), 0, 0, (-1)}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(7, intArray2.length);
      assertEquals(8, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-479));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      // Undeclared exception!
      try { 
        bitSet0.set((int) (short) (-1), (-1), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < 0: -1
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-3356), (int) (short) (-3356));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.reverse((float[]) null, 4114, 4114);
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean2 = ArrayUtils.isSameLength(booleanArray1, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Short[] shortArray1 = new Short[1];
      Short short0 = new Short((short) (-3356));
      assertNotNull(short0);
      assertEquals((short) (-3356), (short)short0);
      
      shortArray1[0] = short0;
      Double double0 = new Double((double) shortArray1[0]);
      assertNotNull(double0);
      assertEquals(1, shortArray1.length);
      assertEquals((-3356.0), (double)double0, 0.01);
      
      Short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (Object) double0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 48.0;
      doubleArray0[1] = (-1718.903);
      doubleArray0[2] = (-1601.23952);
      doubleArray0[3] = (-2568.8679);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1718.903));
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {48.0, (-1718.903), (-1601.23952), (-2568.8679)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.shift((long[]) null, 100, 100, 100);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 100;
      floatArray0[1] = (float) 100;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {48.0, (-1718.903), (-1601.23952), (-2568.8679)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-6);
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character character1 = new Character(' ');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals(' ', (char)character1);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-6);
      longArray0[1] = (long) (-4712);
      longArray0[2] = (long) (byte)75;
      longArray0[3] = (long) (-4712);
      ArrayUtils.shift(longArray0, 2, (-5), 1230);
      assertArrayEquals(new long[] {(-6L), (-4712L), 75L, (-4712L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.swap(doubleArray0, (int) (byte) (-123), 1);
      assertArrayEquals(new double[] {0.0, 93.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) characterArray0, (int) (byte) (-123));
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      byte byte0 = (byte) (-11);
      Byte byte1 = new Byte((byte) (-11));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-11), (byte)byte1);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-11), (byte) (-11)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences((double[]) null, (double) (byte) (-11));
      assertNull(doubleArray1);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-11), (byte) (-11)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-11), (byte) (-11), (byte) (-11), (byte) (-11), (byte) (-11)}, byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      boolean boolean0 = ArrayUtils.contains(byteArray1, (byte)120);
      assertNotSame(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-11), (byte) (-11)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-11), (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-55));
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte) (-55), (byte)byte3);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.shift((char[]) null, 68);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 93.0;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)31, (double) (byte)31);
      assertArrayEquals(new double[] {93.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      Long long0 = Long.getLong((String) null);
      assertNull(long0);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-879L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray1, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)31;
      byteArray1[1] = (byte)31;
      byteArray1[2] = (byte)31;
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (int) (byte)31;
      intArray0[3] = (int) (byte)31;
      intArray0[4] = (int) (byte)31;
      intArray0[5] = (-1);
      intArray0[6] = (int) (byte)31;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 31, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      Object object0 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 52;
      intArray0[1] = 0;
      intArray0[2] = 52;
      intArray0[3] = 0;
      intArray0[4] = 52;
      intArray0[5] = 7;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {52, 0, 52, 0, 52, 7}, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)52;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 52, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)94;
      doubleArray0[1] = (double) (byte)94;
      doubleArray0[2] = (double) (byte)94;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (byte)94;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3461.399824553978));
      assertArrayEquals(new double[] {94.0, 94.0, 94.0, (-1.0), 94.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, (int) 94);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) '9';
      doubleArray1[1] = (double) '9';
      doubleArray1[2] = (double) '9';
      doubleArray1[3] = (-3461.399824553978);
      doubleArray1[4] = (-3461.399824553978);
      doubleArray1[5] = (double) (-1);
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1406;
      doubleArray2[1] = (double) (byte)94;
      doubleArray2[2] = (double) (-1);
      doubleArray2[3] = (double) 1406;
      double[] doubleArray3 = ArrayUtils.removeElements(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1406.0, 94.0, (-1.0), 1406.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {57.0, 57.0, 57.0, (-3461.399824553978), (-3461.399824553978)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {57.0, 57.0, 57.0, (-3461.399824553978), (-3461.399824553978), (-1.0)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)104;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1), 1713);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte) (-1), (byte)104, (byte)104, (byte) (-1), (byte)104}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-606), 922, (-2123));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      Short short0 = new Short((short)4846);
      assertNotNull(short0);
      assertEquals((short)4846, (short)short0);
      
      Short short1 = new Short((short)4846);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)4846, (short)short1);
      
      Short short2 = new Short((short)4846);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short)4846, (short)short2);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)4846;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)4846;
      floatArray0[1] = (float) (short) (-115);
      floatArray0[2] = (float) 4846L;
      floatArray0[3] = 91.0F;
      floatArray0[4] = (float) 4846L;
      floatArray0[5] = (float) (short)4846;
      floatArray0[6] = (float) 4846L;
      floatArray0[7] = (float) (short)4846;
      floatArray0[8] = (float) 4846L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, Float.NaN, (int) (short) (-115));
      assertArrayEquals(new float[] {4846.0F, (-115.0F), 4846.0F, 91.0F, 4846.0F, 4846.0F, 4846.0F, 4846.0F, 4846.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-115);
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-115), (-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2143934088), (int) (short) (-115));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4846L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(floatArray0, (int) (short) (-115));
      assertArrayEquals(new float[] {4846.0F, 4846.0F, 4846.0F, (-115.0F), 4846.0F, 91.0F, 4846.0F, 4846.0F, 4846.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      byte byte0 = (byte) (-1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)104;
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = (Byte) (byte) (-1);
      byteArray1[1] = (Byte) (byte)104;
      byteArray1[2] = (Byte) (byte) (-1);
      byteArray1[3] = (Byte) (byte) (-1);
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      
      ArrayUtils.shift(floatArray0, (int) byte0, 1718, 83);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '&';
      charArray0[2] = 'r';
      charArray0[3] = '4';
      charArray0[4] = 'K';
      charArray0[5] = '&';
      charArray0[6] = '4';
      charArray0[7] = '6';
      charArray0[8] = '4';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'4', '6', '4', '&', 'K', '4', 'r', '&', 'K'}, charArray0);
      assertEquals(9, charArray0.length);
      
      charArray0[6] = '&';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '&';
      intArray0[1] = (int) 'r';
      Object object0 = ArrayUtils.toPrimitive((Object) '&');
      assertNotNull(object0);
      assertEquals('&', object0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-1.0F), 38);
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {38, 114}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(2, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 13, 99);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift((float[]) null, 114);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-2135938036), 83, (int) (byte) (-127));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      ArrayUtils.shift(floatArray0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = '!';
      charArray0[2] = '0';
      charArray0[3] = 'l';
      charArray0[4] = '\'';
      charArray0[5] = '*';
      charArray0[6] = '#';
      charArray0[7] = 'H';
      ArrayUtils.reverse(charArray0, (-701), (-2214));
      assertArrayEquals(new char[] {':', '!', '0', 'l', '\'', '*', '#', 'H'}, charArray0);
      assertEquals(8, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1276), (-128));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) ':';
      floatArray0[1] = (float) 'H';
      floatArray0[2] = (float) ':';
      floatArray0[3] = (float) (-701);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) '\'';
      floatArray0[6] = (float) '#';
      floatArray0[7] = (-4953.204F);
      ArrayUtils.shift(floatArray0, (-701));
      assertArrayEquals(new float[] {39.0F, 35.0F, (-4953.204F), 58.0F, 72.0F, 58.0F, (-701.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 2715, 2715);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "org.evosuite.runtime.mock.java.util.MockRandom";
      Object object1 = ArrayUtils.get(objectArray0, (-14), object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = object1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "org.evosuite.runtime.mock.java.util.MockRandom");
      assertNotNull(stringArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, stringArray0.length);
      
      Integer integer0 = new Integer(2715);
      assertNotNull(integer0);
      assertEquals(2715, (int)integer0);
      
      Integer integer1 = new Integer(2715);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2715, (int)integer1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {2715}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-14);
      longArray0[1] = 555L;
      longArray0[2] = (long) 2715;
      longArray0[3] = (long) (int)integerArray0[0];
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) (-797);
      ArrayUtils.shift(longArray0, (-1807));
      assertArrayEquals(new long[] {555L, 2715L, 2715L, 0L, 2L, (-797L), (-14L)}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      ArrayUtils.shift((long[]) null, 2122799927, 764, 56);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      ArrayUtils.reverse(byteArray0, (int) (byte)10, 1342);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)10, (byte)10}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)10;
      objectArray0[1] = (Object) (byte)10;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      
      Integer integer0 = new Integer(1092);
      assertNotNull(integer0);
      assertEquals(1092, (int)integer0);
      
      Integer integer1 = new Integer(1092);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1092, (int)integer1);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (byte)10);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1092, 1092, 1092}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      ArrayUtils.shift((long[]) null, (int) integerArray0[2]);
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      float[] floatArray0 = new float[5];
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1956);
      intArray0[1] = (int) (byte)59;
      intArray0[2] = (-1);
      intArray0[3] = (-1956);
      intArray0[4] = (-1956);
      intArray0[5] = (-1);
      intArray0[6] = (-2972);
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)59, (int) (byte)59);
      assertArrayEquals(new int[] {(-1956), 59, (-1), (-1956), (-1956), (-1), (-2972)}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2325);
      intArray0[1] = 2;
      intArray0[2] = 42;
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-79));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)44, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-79), (byte)0, (byte)0, (byte)0, (byte)0, (byte)44, (byte)0}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '&', (int) (byte)0);
      assertArrayEquals(new char[] {'0', '0', '0', '0'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(charArray0, 1193);
      assertArrayEquals(new char[] {'0', '0', '0', '0'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, 2, 0);
      assertArrayEquals(new int[] {(-2325), 2, 42, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray2 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)44, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)44, (byte)0}, byteArray0);
      assertEquals(6, byteArray2.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'0', '0', '0', '0'}, charArray1);
      assertArrayEquals(new char[] {'0', '0', '0', '0'}, charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      int int0 = 0;
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      ArrayUtils.swap(longArray0, 0, 0, 2);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '(';
      int int1 = ArrayUtils.indexOf(charArray0, '9', 0);
      assertArrayEquals(new char[] {'!', '('}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.reverse((int[]) null);
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0L);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)13461;
      shortArray0[3] = (short) (-543);
      shortArray0[2] = (short)13461;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-2312);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 6861, 6861);
      assertArrayEquals(new int[] {(-2312)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-6);
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-124));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)110;
      shortArray0[1] = (short)83;
      shortArray0[2] = (short) (-29128);
      shortArray0[3] = (short) (-606);
      shortArray0[4] = (short) (-1126);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)110, (short)83, (short) (-29128), (short) (-606), (short) (-1126)}, shortArray0);
      assertArrayEquals(new short[] {(short)110, (short)83, (short) (-29128), (short) (-606), (short) (-1126)}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = 'V';
      charArray0[2] = 'v';
      charArray0[3] = 'c';
      charArray0[4] = 'h';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'B');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'z', 'V', 'v', 'c', 'h'}, charArray0);
      assertArrayEquals(new char[] {'B', 'z', 'V', 'v', 'c', 'h'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 922;
      intArray0[1] = 1088;
      intArray0[2] = (int) 'v';
      intArray0[3] = (int) (short) (-606);
      intArray0[4] = (int) (short) (-606);
      intArray0[5] = (int) 'V';
      intArray0[6] = (int) (short) (-29128);
      intArray0[7] = (int) (short) (-606);
      intArray0[8] = (int) (short)83;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {83, (-606), (-29128), 86, (-606), (-606), 118, 1088, 922}, intArray0);
      assertEquals(9, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 108);
      assertArrayEquals(new int[] {83, (-606), (-29128), 86, (-606), (-606), 118, 1088, 922}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2515.4185343;
      doubleArray0[1] = (-702.604851604);
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'N');
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      ArrayUtils.reverse((Object[]) null);
      byte byte0 = (byte)57;
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-3627L), (-266));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      int int1 = bitSet0.previousClearBit(1761);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertFalse(int1 == int0);
      assertEquals(1761, int1);
      
      Object object2 = ArrayUtils.get((Object[]) null, (-1));
      assertNull(object2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(1761);
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null, (Random) mockRandom1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 4905.6);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1174.85));
      assertNotNull(double0);
      assertEquals((-1174.85), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1174.85)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      Double double0 = new Double((-11.3));
      assertNotNull(double0);
      assertEquals((-11.3), (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = (Double) 93.0;
      doubleArray1[4] = double0;
      doubleArray1[5] = (Double) 93.0;
      doubleArray1[6] = (Double) 93.0;
      doubleArray1[7] = double0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (-493.22212228651216));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-11.3), (-11.3), 93.0, (-493.22212228651216), (-11.3), 93.0, 93.0, (-11.3)}, doubleArray2, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int[] intArray0 = new int[5];
      intArray0[0] = (-612);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 16;
      ArrayUtils.reverse(intArray0, (-612), 0);
      assertArrayEquals(new int[] {(-612), 0, 0, 0, 16}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-612);
      longArray0[3] = 1L;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (-4024);
      ArrayUtils.swap(longArray0, 0, 16, Integer.MAX_VALUE);
      assertArrayEquals(new long[] {2L, 0L, (-612L), 1L, 0L, (-4024L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-4024L));
      assertNotNull(double0);
      assertEquals((-4024.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2L);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertNotNull(double3);
      assertEquals(7, doubleArray0.length);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1.0);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals(1.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-612));
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((-612.0), (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-1550.4300537109375));
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals((-1550.4300537109375), (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[4]);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-4024.0), 2.0, 0.0, 0.0, 1.0, (-612.0), (-1550.4300537109375)}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      ArrayUtils.reverse((Object[]) null);
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-80);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-77));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-80), (byte) (-77)}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shift((Object[]) null, 1814, 6, (int) (byte) (-80));
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 2.14748365E9F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, 308);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 308;
      floatArray0[2] = (float) (-1);
      floatArray0[4] = (float) (byte)97;
      Float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-750);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)996;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)996;
      doubleArray0[1] = (double) 156;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = 1872.992217432354;
      doubleArray0[4] = (double) (-1472);
      ArrayUtils.shift(doubleArray0, (int) (short)996, (-1), 485);
      assertArrayEquals(new double[] {996.0, 156.0, 0.0, 1872.992217432354, (-1472.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-88);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-88)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1600, 5);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {996.0, 156.0, 0.0, 1872.992217432354, (-1472.0)}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 485;
      ArrayUtils.shift(doubleArray0, 1210, (-1365), (int) (short)996);
      assertEquals(18, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)996, 5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(18, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 847L;
      longArray0[1] = 2651L;
      char[] charArray0 = new char[1];
      ArrayUtils.shift(charArray0, 140, 2, (-3141));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-3141);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3141, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-64)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-64)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-78);
      longArray0[1] = (long) (short) (-1301);
      longArray0[2] = (long) (short) (-1301);
      longArray0[4] = (long) (byte) (-64);
      longArray0[5] = (long) (byte) (-64);
      longArray0[7] = (long) (byte)71;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-78L), (-1301L), (-1301L), 0L, (-64L), (-64L), 0L, 71L}, longArray0);
      assertArrayEquals(new long[] {(-78L), (-1301L), (-1301L), 0L, (-64L), (-64L), 0L, 71L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray0, (-1L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-78L), (-1301L), (-1301L), 0L, (-64L), (-64L), 0L, 71L}, longArray0);
      assertArrayEquals(new long[] {(-78L), (-1301L), (-1301L), 0L, (-64L), (-64L), 0L, 71L}, longArray2);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.subarray(longArray0, (int) (byte) (-64), (-1813));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {(-78L), (-1301L), (-1301L), 0L, (-64L), (-64L), 0L, 71L}, longArray0);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray2, (Random) mockRandom0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (-3274L));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      ArrayUtils.reverse((Object[]) null);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1097;
      shortArray0[1] = (short) (-2318);
      shortArray0[2] = (short) (-14297);
      shortArray0[3] = (short) (-1);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1097, (short) (-2318), (short) (-14297), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)1097, (short) (-2318), (short) (-14297), (short) (-1), (short)1097, (short) (-2318), (short) (-14297), (short) (-1)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (-3274L));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)78;
      shortArray0[0] = (short)78;
      shortArray0[1] = (short) (-30477);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)78, (short) (-30477)}, shortArray0);
      assertArrayEquals(new short[] {(short)78, (short) (-30477), (short)78, (short) (-30477)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(345);
      assertNotNull(integer0);
      assertEquals(345, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte1));
      assertEquals((byte) (-14), object0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)16067, 0);
      assertEquals((-1), int0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)16067;
      doubleArray0[1] = 2667.1591796875;
      doubleArray0[2] = (double) 345;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte) (-14);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ArrayUtils.reverse(intArray0, (-1), (-611));
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray1, false);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertEquals(1, booleanArray2.length);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean2);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = 'Q';
      charArray0[2] = 'Z';
      charArray0[3] = '@';
      charArray0[4] = 'L';
      ArrayUtils.shift(charArray0, 1, (int) (short)16067, 34);
      assertArrayEquals(new char[] {'d', '@', 'L', 'Q', 'Z'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-635L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 17L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-635L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-635L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Boolean[] booleanArray2 = new Boolean[2];
      booleanArray2[0] = (Boolean) true;
      booleanArray2[1] = (Boolean) false;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2, false);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray3));
      assertEquals(2, booleanArray2.length);
      assertEquals(2, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = 'z';
      charArray0[2] = '\"';
      charArray0[3] = 'C';
      charArray0[4] = '%';
      charArray0[5] = 'a';
      charArray0[6] = 'L';
      char[] charArray1 = ArrayUtils.add(charArray0, 'z');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'!', 'z', '\"', 'C', '%', 'a', 'L', 'z'}, charArray1);
      assertArrayEquals(new char[] {'!', 'z', '\"', 'C', '%', 'a', 'L'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1301);
      shortArray0[1] = (short) (-640);
      shortArray0[2] = (short)2;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray2));
      assertEquals(6, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      boolean[] booleanArray3 = ArrayUtils.add(booleanArray1, false);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray1));
      assertEquals(4, booleanArray3.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-3356), (int) (short) (-3356));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      ArrayUtils.reverse((float[]) null, 4114, 4114);
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (-994);
      floatArray0[3] = (-592.6235F);
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (-994);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)8;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)8, (int) (byte)0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)8, (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)8, (byte)8}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = ',';
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) bitSet0;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (int) (byte)0, 4, (int) (byte)0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)104;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1), 1713);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte) (-1), (byte)104, (byte)104, (byte) (-1), (byte)104}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)104;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {104.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeElement(charArray1, '*');
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      int int1 = ArrayUtils.indexOf((long[]) null, 2674L, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byte byte0 = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byte byte1 = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      Short short0 = new Short((byte)97);
      assertNotNull(short0);
      assertEquals((short)97, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object0);
      assertEquals((short)97, object0);
      
      Byte byte2 = new Byte((byte)90);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)90, (byte)byte2);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte2);
      assertNotNull(object1);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(object1.equals((Object)byte0));
      assertFalse(object1.equals((Object)byte1));
      assertEquals((byte)90, object1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, (int) (byte)90, (double) (byte) (-123));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)94;
      doubleArray0[1] = (double) (byte)94;
      doubleArray0[2] = (double) (byte)94;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (byte)94;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3461.399824553978));
      assertArrayEquals(new double[] {94.0, 94.0, 94.0, (-1.0), 94.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, (int) 94);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.shift(doubleArray0, (-1), (int) (byte)94, 1406);
      assertArrayEquals(new double[] {94.0, 94.0, 94.0, 94.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 3439L;
      ArrayUtils.shift(longArray0, 2, (-474), 2);
      assertArrayEquals(new long[] {3439L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-4992.081F);
      floatArray0[1] = (float) 3439L;
      floatArray0[2] = (float) 6;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (-445.341F);
      floatArray0[5] = (float) 3439L;
      ArrayUtils.shift(floatArray0, (-1564), (-737), (-737));
      assertArrayEquals(new float[] {(-4992.081F), 3439.0F, 6.0F, 2.0F, (-445.341F), 3439.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.07035867344490586;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.07035867344490586;
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'R';
      charArray0[2] = ' ';
      charArray0[3] = 'A';
      ArrayUtils.shift(charArray0, (int) (short)537);
      assertArrayEquals(new char[] {'A', 'A', 'R', ' '}, charArray0);
      assertEquals(4, charArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2108945155;
      intArray0[1] = (int) 'A';
      intArray0[2] = (int) ' ';
      intArray0[3] = (int) 'A';
      intArray0[4] = (int) (short)537;
      intArray0[5] = (int) 'A';
      intArray0[6] = (int) (short)537;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-452), 45);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2108945155, 65, 32, 65, 537, 65, 537}, intArray1);
      assertArrayEquals(new int[] {2108945155, 65, 32, 65, 537, 65, 537}, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.07035867344490586);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.07035867344490586, 0.0, 0.07035867344490586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      doubleArray0[0] = 409.0924235051861;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 409.0924235051861);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {409.0924235051861, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)101;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {101.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-15));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-15)}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (byte)101);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {409.0924235051861, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {409.0924235051861, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[6];
      int int0 = 1;
      intArray0[0] = 1;
      intArray0[1] = 52;
      intArray0[2] = 3600;
      int int1 = 18688;
      intArray0[3] = 18688;
      int int2 = (-3725);
      intArray0[4] = (-3725);
      int int3 = 156;
      intArray0[5] = 156;
      int int4 = 6553;
      ArrayUtils.reverse(intArray0, 52, 6553);
      assertArrayEquals(new int[] {1, 52, 3600, 18688, (-3725), 156}, intArray0);
      assertEquals(6, intArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 3600;
      objectArray0[1] = (Object) 3600;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 3600;
      objectArray0[4] = (Object) 1;
      objectArray0[5] = (Object) 18688;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '3600', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '3';
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 1, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '\u0000';
      intArray0[1] = 1;
      intArray0[2] = (int) '\u0000';
      intArray0[3] = 1;
      ArrayUtils.swap((Object[]) classArray1, 0, 1);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) classArray1);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) 0);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      ArrayUtils.swap((double[]) null, (-881), (-263), 3164);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)59;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)59);
      assertArrayEquals(new short[] {(short)6, (short)59}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, '3');
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2743L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2743L);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte)91;
      shortArray0[2] = (short)1136;
      shortArray0[4] = (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)91, (short)1136, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
      
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)10;
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      ArrayUtils.shift(intArray0, (int) (short) (-1));
      assertArrayEquals(new int[] {(-1), 0, 0, 10}, intArray0);
      assertEquals(4, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) stringArray0, (Object) short0, 715);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, 2, 0, 8);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)121;
      Byte byte1 = new Byte((byte)121);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)121, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)121, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)121, (byte)byte3);
      
      byteArray0[2] = byte3;
      byte byte4 = (byte)85;
      Byte byte5 = new Byte((byte)85);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertEquals((byte)85, (byte)byte5);
      
      byteArray0[3] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte4);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)121, (byte)121, (byte)121, (byte)85}, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byte4 == byte0);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2713L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2713L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2713L);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte)91;
      shortArray0[2] = (short)1136;
      shortArray0[4] = (short) (-26);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)91, (short)1136, (short)0, (short) (-26)}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
      
      Short short0 = new Short((short)1136);
      assertNotNull(short0);
      assertEquals((short)1136, (short)short0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)10;
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (short) (-26);
      intArray0[3] = (int) (short) (-26);
      ArrayUtils.shift(intArray0, (int) (short) (-1));
      assertArrayEquals(new int[] {(-1), (-26), (-26), 10}, intArray0);
      assertEquals(4, intArray0.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, 2, (-26), 8);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte1 = (byte)121;
      Byte byte2 = new Byte((byte)121);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)121, (byte)byte2);
      
      byteArray0[0] = byte2;
      Byte byte3 = new Byte(byte1);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)121, (byte)byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte1);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertEquals((byte)121, (byte)byte4);
      
      byteArray0[2] = byte4;
      byte byte5 = (byte)85;
      Byte byte6 = new Byte((byte)85);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertEquals((byte)85, (byte)byte6);
      
      byteArray0[3] = byte6;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte5);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)121, (byte)121, (byte)121, (byte)85}, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byte5 == byte1);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 0);
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 3215, 1874);
      assertNull(charArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Character character0 = Character.valueOf('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      boolean boolean2 = ArrayUtils.isEmpty((char[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ArrayUtils.shift((double[]) null, 2, 1874, 1811);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, 432, 57);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int[] intArray0 = ArrayUtils.insert(6, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 2794L;
      longArray0[1] = (-1L);
      longArray0[2] = (long) 6;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 1811, (long) 1811);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1811, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      char char0 = 'R';
      Character character0 = new Character('R');
      assertNotNull(character0);
      assertTrue(character0.equals((Object)char0));
      assertEquals('R', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('E');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertEquals('E', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('R');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('R', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('R');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertEquals('R', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('B');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertEquals('B', (char)character4);
      
      characterArray0[4] = character1;
      Character character5 = new Character((char) character0);
      assertNotNull(character5);
      assertTrue(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character4));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)char0));
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)char0));
      assertTrue(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character0));
      assertEquals('R', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('6');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)char0));
      assertEquals('6', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character((char) character0);
      assertNotNull(character7);
      assertTrue(character7.equals((Object)character0));
      assertTrue(character7.equals((Object)character2));
      assertTrue(character7.equals((Object)char0));
      assertTrue(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character1));
      assertTrue(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character6));
      assertTrue(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character5));
      assertFalse(character0.equals((Object)character4));
      assertFalse(character0.equals((Object)character6));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)char0));
      assertEquals('R', (char)character7);
      
      characterArray0[7] = character7;
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(8, characterArray0.length);
      assertEquals(8, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (char)character1;
      longArray0[1] = (long) (char)character1;
      longArray0[2] = (long) (char)character7;
      longArray0[3] = (long) char0;
      longArray0[4] = (long) '6';
      longArray0[5] = 184L;
      longArray0[6] = (long) (char)character0;
      longArray0[7] = (long) (char)character7;
      ArrayUtils.shift(longArray0, (int) character1, 639, (int) character0);
      assertArrayEquals(new long[] {69L, 69L, 82L, 82L, 54L, 184L, 82L, 82L}, longArray0);
      assertEquals(8, longArray0.length);
      assertTrue(character0.equals((Object)character3));
      assertTrue(character0.equals((Object)character7));
      assertFalse(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character5));
      assertFalse(character0.equals((Object)character4));
      assertFalse(character0.equals((Object)character6));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)character4));
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)character6));
      assertFalse(character1.equals((Object)character3));
      assertFalse(character1.equals((Object)character7));
      assertFalse(character1.equals((Object)character5));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (char)character1;
      intArray0[1] = (int) (char)character1;
      intArray0[2] = (int) char0;
      intArray0[3] = 5;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (int) character7, (-2586));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 82, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      int int0 = 120;
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, 120, 120);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (int) (byte) (-14));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-14);
      doubleArray0[1] = (double) (byte) (-14);
      doubleArray0[2] = (double) (byte) (-14);
      doubleArray0[3] = (double) (byte) (-14);
      doubleArray0[4] = (double) (byte) (-14);
      doubleArray0[5] = (double) (byte) (-14);
      doubleArray0[6] = (double) (byte) (-14);
      doubleArray0[7] = (double) (byte) (-14);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-14.0), 2146319069);
      assertArrayEquals(new double[] {(-14.0), (-14.0), (-14.0), (-14.0), (-14.0), (-14.0), (-14.0), (-14.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      Long long0 = Long.getLong("Arguments cannot both be null");
      assertNull(long0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1320L;
      longArray0[1] = (-2743L);
      longArray0[2] = (-2147483648L);
      Byte byte0 = new Byte((byte)126);
      assertNotNull(byte0);
      assertEquals((byte)126, (byte)byte0);
      
      Byte byte1 = new Byte((byte)121);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)121, (byte)byte1);
      
      Byte byte2 = new Byte((byte)86);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)86, (byte)byte2);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 2724.39);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2724.39}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray2 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long((-1L));
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      
      Long[] longArray3 = ArrayUtils.removeAllOccurrences(longArray1, long1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray3.length);
      assertFalse(longArray0.equals((Object)longArray2));
      assertTrue(long1.equals((Object)long0));
      assertFalse(longArray3.equals((Object)longArray1));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (-1271.685F);
      floatArray0[2] = (float) (-1L);
      floatArray0[3] = (float) (-2952);
      floatArray0[4] = (float) (-1L);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1271.685F), (-2952));
      assertEquals(2, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1.0F), (-1271.685F), (-1.0F), (-2952.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.addAll((Character[]) null, (Character[]) null);
      assertNull(characterArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)555;
      shortArray0[1] = (short)3341;
      shortArray0[2] = (short)555;
      shortArray0[3] = (short)1040;
      shortArray0[4] = (short) (-1255);
      shortArray0[5] = (short) (-2350);
      shortArray0[6] = (short)2227;
      shortArray0[7] = (short) (-1274);
      shortArray0[8] = (short)99;
      ArrayUtils.reverse(shortArray0, (int) (short)2227, (int) (short)1040);
      assertArrayEquals(new short[] {(short)555, (short)3341, (short)555, (short)1040, (short) (-1255), (short) (-2350), (short)2227, (short) (-1274), (short)99}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-1255);
      floatArray0[1] = (float) (short)2227;
      floatArray0[2] = (float) (short)555;
      floatArray0[3] = (float) (short)2227;
      floatArray0[4] = (float) (short)555;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 3, (-3327.3916F));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1255.0F), 2227.0F, 555.0F, (-3327.3916F), 2227.0F, 555.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1255.0F), 2227.0F, 555.0F, 2227.0F, 555.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 105;
      intArray0[1] = 105;
      intArray0[2] = 105;
      intArray0[3] = 105;
      intArray0[4] = 105;
      intArray0[5] = 105;
      intArray0[6] = 105;
      intArray0[7] = 105;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {105, 105, 105, 105, 105, 105, 105, 105}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)4103;
      shortArray0[1] = (short)4103;
      shortArray0[2] = (short)4103;
      shortArray0[3] = (short)4103;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)4103;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)323);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)4103, (short)4103, (short)4103, (short)4103, (short) (-1), (short)4103, (short)323}, shortArray1);
      assertArrayEquals(new short[] {(short)4103, (short)4103, (short)4103, (short)4103, (short) (-1), (short)4103}, shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = ' ';
      charArray0[2] = 'E';
      charArray0[3] = ')';
      charArray0[4] = 'E';
      charArray0[5] = 'o';
      charArray0[6] = '!';
      charArray0[7] = 'L';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\"', ' ', 'E', ')', 'E', 'o', '!', 'L'}, charArray0);
      assertArrayEquals(new char[] {'\"', ' ', 'E', ')', 'E', 'o', '!', 'L'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0L;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = 'q';
      charArray0[2] = 'y';
      charArray0[3] = '#';
      charArray0[4] = '8';
      charArray0[5] = '#';
      charArray0[6] = '8';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'o');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'o', ')', 'q', 'y', '#', '8', '#', '8'}, charArray1);
      assertArrayEquals(new char[] {')', 'q', 'y', '#', '8', '#', '8'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      Integer integer0 = Integer.valueOf((int) (byte) (-14));
      assertNotNull(integer0);
      assertEquals((-14), (int)integer0);
      
      Byte byte0 = new Byte((byte)94);
      assertNotNull(byte0);
      assertEquals((byte)94, (byte)byte0);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 118L);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {118L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2179.022144);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[18];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2179.022144;
      doubleArray1[1] = 2179.022144;
      doubleArray1[2] = 2179.022144;
      doubleArray1[3] = 2179.022144;
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 2349.0, 274.085928576808);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(18, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'd';
      charArray0[2] = 'S';
      charArray0[3] = 'q';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeElement(charArray1, 'S');
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'q';
      longArray0[1] = (long) 184;
      longArray0[2] = (long) 'S';
      int int0 = ArrayUtils.indexOf(longArray0, (long) 184, 184);
      assertArrayEquals(new long[] {113L, 184L, 83L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      float[] floatArray0 = new float[5];
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[4] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, (int) (short)0, Integer.MAX_VALUE, 2720);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Double double0 = new Double(1723.8490215771612);
      assertNotNull(double0);
      assertEquals(1723.8490215771612, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertNotNull(object0);
      assertEquals(1723.8490215771612, object0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 2720;
      doubleArray0[3] = (double) 2720;
      doubleArray0[4] = (double) 2720;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1.0), 2720.0, 2720.0, 2720.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2720.0, 2720.0, 2720.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 73;
      intArray0[1] = (-1407);
      intArray0[2] = 3752;
      intArray0[3] = 752;
      intArray0[4] = 8;
      intArray0[5] = (-403);
      intArray0[6] = 3173;
      ArrayUtils.shift(intArray0, 662);
      assertArrayEquals(new int[] {752, 8, (-403), 3173, 73, (-1407), 3752}, intArray0);
      assertEquals(7, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-4935), 191);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 191;
      ArrayUtils.reverse(intArray0, 103, 103);
      assertArrayEquals(new int[] {1, 191}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray3.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {1, 191}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean1);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean[] booleanArray4 = ArrayUtils.toPrimitive(booleanArray1, (boolean) booleanArray1[0]);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotNull(booleanArray4);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray4));
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray4.length);
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)108, (-1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 191;
      doubleArray0[1] = (double) 103;
      doubleArray0[2] = (double) 191;
      doubleArray0[3] = 2.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {191.0, 103.0, 191.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 191.0, 103.0, 191.0, 2.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (byte)0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-3327.3916F), 3);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 3.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      char char0 = 'i';
      char char1 = '*';
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Character character0 = new Character('i');
      assertNotNull(character0);
      assertFalse(character0.equals((Object)char1));
      assertTrue(character0.equals((Object)char0));
      assertEquals('i', (char)character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)13457;
      shortArray0[1] = (short) (-543);
      shortArray0[2] = (short) (-2105);
      shortArray0[3] = (short) (-2312);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)13457, (short) (-543), (short) (-2105), (short) (-2312)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEquals((Object) null, "'E9u/V=z");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 93.0;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, ">\"");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      Double double0 = new Double(1.5);
      assertNotNull(double0);
      assertEquals(1.5, (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = double0;
      doubleArray1[1] = (Double) 93.0;
      Double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[4];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 65;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1446.0;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {1446.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3377), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3377, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (-5368L);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, (-5368L)}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, (-5368L)}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) (-5368L);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[2]);
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.reverse(booleanArray0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0;
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte) (-92);
      Byte byte1 = new Byte((byte) (-92));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-92), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-92), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-92));
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-92), (byte)byte3);
      
      byteArray0[2] = byte3;
      byte byte4 = (byte) (-2);
      Byte byte5 = new Byte((byte) (-2));
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertEquals((byte) (-2), (byte)byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte0);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte0 == byte4);
      assertEquals((byte) (-92), (byte)byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = Byte.valueOf(byte0);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte0 == byte4);
      assertEquals((byte) (-92), (byte)byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte)56);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte1));
      assertEquals((byte)56, (byte)byte8);
      
      byteArray0[6] = byte8;
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.reverse((double[]) null, (int) byte4, 0);
      assertFalse(byte4 == byte0);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 409.0924235051861;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 409.0924235051861);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {409.0924235051861, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[14];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte) (-15));
      assertEquals(14, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(14, booleanArray0.length);
      assertEquals(15, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 409.0924235051861}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)2;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)99);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)99, (byte)2}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      BitSet bitSet0 = new BitSet((byte)0);
      assertEquals(0, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)99, (byte)2}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)99, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)99, (byte)2}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[3];
      intArray0[0] = (int) (byte) (-1);
      longArray0[1] = (long) (byte)99;
      longArray0[2] = (long) (byte)2;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 99L, 2L}, longArray0);
      assertArrayEquals(new long[] {0L, 99L, 2L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)99;
      doubleArray0[1] = (double) (byte)0;
      ArrayUtils.reverse(doubleArray0, 13, (int) (byte)2);
      assertArrayEquals(new double[] {99.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 11;
      intArray0[1] = 2578;
      intArray0[2] = 2578;
      intArray0[3] = 11;
      intArray0[4] = 2578;
      intArray0[5] = 11;
      intArray0[7] = 2578;
      ArrayUtils.swap(intArray0, 1463, 2578);
      assertArrayEquals(new int[] {11, 2578, 2578, 11, 2578, 11, 0, 2578}, intArray0);
      assertEquals(8, intArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-25);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 2578);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2578, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = 0;
      ArrayUtils.reverse(booleanArray0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)58);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)84}, byteArray0);
      assertArrayEquals(new byte[] {(byte)84}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)84;
      byteArray2[1] = (byte)84;
      byte byte0 = (byte) (-45);
      byteArray2[2] = (byte) (-45);
      byteArray2[3] = (byte)58;
      byteArray2[4] = (byte)84;
      byteArray2[5] = (byte)58;
      byteArray2[6] = (byte)84;
      byteArray2[7] = (byte)58;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray2, (int) (byte)84);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 84, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-41);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)59;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-41), (byte)0, (byte)15, (byte)59}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2634.524611);
      doubleArray0[1] = (double) (byte)59;
      doubleArray0[2] = (double) (byte) (-41);
      doubleArray0[3] = (double) (byte) (-41);
      doubleArray0[4] = (double) (byte) (-41);
      doubleArray0[5] = (double) (byte) (-41);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-41.0), (double) (byte)59);
      assertArrayEquals(new double[] {(-2634.524611), 59.0, (-41.0), (-41.0), (-41.0), (-41.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)59);
      assertArrayEquals(new byte[] {(byte) (-41), (byte)0, (byte)15, (byte)59}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      Long long0 = new Long((byte)59);
      assertNotNull(long0);
      assertEquals(59L, (long)long0);
      
      Long long1 = new Long((-997L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-997L), (long)long1);
      
      ArrayUtils.swap((long[]) null, (int) (byte)59, 9, 1);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2634.524611), 59.0, (-41.0), (-41.0), (-41.0), (-41.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)59;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)15;
      shortArray0[3] = (short) (byte)15;
      shortArray0[4] = (short)2723;
      short[] shortArray1 = new short[6];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte) (-41);
      shortArray1[1] = (short) (byte)15;
      shortArray1[2] = (short) (byte) (-41);
      shortArray1[3] = (short)0;
      shortArray1[4] = (short) (byte) (-41);
      shortArray1[5] = (short) (byte)15;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)59, (short)2723}, shortArray2);
      assertArrayEquals(new short[] {(short)59, (short)0, (short)15, (short)15, (short)2723}, shortArray0);
      assertArrayEquals(new short[] {(short) (-41), (short)15, (short) (-41), (short)0, (short) (-41), (short)15}, shortArray1);
      assertEquals(2, shortArray2.length);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      short short0 = (short)97;
      Short short1 = new Short((short)97);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)97, (short)short1);
      
      Short[] shortArray0 = new Short[7];
      shortArray0[0] = short1;
      shortArray0[1] = short1;
      shortArray0[2] = short1;
      shortArray0[3] = short1;
      shortArray0[4] = short1;
      shortArray0[5] = short1;
      shortArray0[6] = short1;
      Short[] shortArray1 = ArrayUtils.add(shortArray0, (Short) null);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = new short[0];
      short[] shortArray3 = ArrayUtils.removeElements(shortArray2, shortArray2);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray3);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      assertFalse(shortArray3.equals((Object)shortArray2));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) short0;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-202.6F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {97.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {97.0F, (-202.6F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      Character character0 = new Character('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[1] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '+');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'+', 't', '+', 't', 't', '+', '+', '+'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)98, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)59;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-41), (byte)15, (byte)59}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2634.524611);
      doubleArray0[1] = (double) (byte)59;
      doubleArray0[2] = (double) (byte) (-41);
      doubleArray0[3] = (double) (byte) (-41);
      doubleArray0[4] = (double) (byte) (-41);
      doubleArray0[5] = (double) (byte) (-41);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-41.0), (double) (byte)59);
      assertArrayEquals(new double[] {(-2634.524611), 59.0, (-41.0), (-41.0), (-41.0), (-41.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)59);
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-41), (byte)15, (byte)59}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      Long long0 = Long.getLong("b");
      assertNull(long0);
      
      Long long1 = new Long((byte)59);
      assertNotNull(long1);
      assertEquals(59L, (long)long1);
      
      Long long2 = new Long((-997L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertEquals((-997L), (long)long2);
      
      ArrayUtils.swap((long[]) null, (int) (byte)59, 9, 1);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2634.524611), 59.0, (-41.0), (-41.0), (-41.0), (-41.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)59;
      shortArray0[1] = (short) (byte) (-41);
      shortArray0[2] = (short) (byte)15;
      shortArray0[3] = (short) (byte)15;
      shortArray0[4] = (short)2723;
      short[] shortArray1 = new short[6];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte) (-41);
      shortArray1[1] = (short) (byte)15;
      shortArray1[2] = (short) (byte) (-41);
      shortArray1[3] = (short)0;
      shortArray1[4] = (short) (byte) (-41);
      shortArray1[5] = (short) (byte)15;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)59, (short)2723}, shortArray2);
      assertArrayEquals(new short[] {(short)59, (short) (-41), (short)15, (short)15, (short)2723}, shortArray0);
      assertArrayEquals(new short[] {(short) (-41), (short)15, (short) (-41), (short)0, (short) (-41), (short)15}, shortArray1);
      assertEquals(2, shortArray2.length);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 2107.2996F;
      floatArray0[4] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-3422.464F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 2107.2996F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 2107.2996F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean boolean0 = new Boolean("org.apache.commons.lang3.mutable.MutableInt");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      ArrayUtils.reverse((Object[]) null);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-22214));
      assertEquals((-1), int0);
      
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-1592L));
      assertNotNull(long0);
      assertEquals((-1592L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(638L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(638L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((short) (-22214));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-22214L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[2]);
      assertNotNull(long3);
      assertEquals(9, longArray0.length);
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertEquals((-22214L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((long) longArray0[1]);
      assertNotNull(long4);
      assertEquals(9, longArray0.length);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertEquals(638L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((-1));
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long3));
      assertEquals((-1L), (long)long5);
      
      longArray0[5] = long5;
      Long long6 = new Long((-817L));
      assertNotNull(long6);
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long1));
      assertEquals((-817L), (long)long6);
      
      longArray0[6] = long6;
      Long long7 = new Long((long) longArray0[3]);
      assertNotNull(long7);
      assertEquals(9, longArray0.length);
      assertTrue(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long1));
      assertTrue(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long6));
      assertEquals((-22214L), (long)long7);
      
      longArray0[7] = long7;
      Long long8 = new Long(2147483647L);
      assertNotNull(long8);
      assertFalse(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long6));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long4));
      assertEquals(2147483647L, (long)long8);
      
      longArray0[8] = long8;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-899L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1592L), 638L, (-22214L), (-22214L), 638L, (-1L), (-817L), (-22214L), 2147483647L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) 0;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 86L);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      ArrayUtils.shift(floatArray0, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.5, (-2741));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1550.43F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-3484.12F);
      floatArray0[3] = (-4953.204F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-4953.204F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1550.43F), 0.0F, (-3484.12F), (-4953.204F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1550.43F), 0.0F, (-3484.12F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray1, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-1550.43F), 0.0F, (-3484.12F), (-4953.204F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1550.43F), 0.0F, (-3484.12F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1550.43F), 0.0F, (-3484.12F), (-1550.43F), 0.0F, (-3484.12F)}, floatArray2, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1550.43F);
      doubleArray0[1] = (double) (-3484.12F);
      doubleArray0[2] = (double) (-3484.12F);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-3484.12F);
      doubleArray0[5] = (double) (-1550.43F);
      doubleArray0[6] = (double) 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-1));
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      assertEquals("{3, 6}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1550.4300537109375), (-3484.1201171875), (-3484.1201171875), 0.0, (-3484.1201171875), (-1550.4300537109375), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.reverse(booleanArray0, (-1), (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      ArrayUtils.swap((long[]) null, (-2146820843), (-1246), 1);
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[3] = (float) (-1246);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, (-1246.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-2034));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2034, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 2058);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      ArrayUtils.shift((char[]) null, (-1));
      int int1 = ArrayUtils.lastIndexOf((int[]) null, (-1), (-4110));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Class<Long[]> class0 = Long[].class;
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null, class0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-119);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 93.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      ArrayUtils.reverse(doubleArray0, (-2547), (-2547));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.07035867344490586;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.07035867344490586;
      short[] shortArray0 = new short[6];
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character character1 = new Character('Q');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('Q', (char)character1);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[1] = (long) (short)1136;
      longArray0[2] = (-400L);
      ArrayUtils.shift(longArray0, (int) (short)537, (-1354), (-4712));
      assertArrayEquals(new long[] {0L, 1136L, (-400L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      ArrayUtils.swap(doubleArray0, (-4712), 815);
      assertArrayEquals(new double[] {0.07035867344490586, 0.0, 0.07035867344490586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) characterArray0, 815);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 48.0;
      doubleArray0[2] = 6906.467;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3825.880562313323;
      doubleArray0[5] = 1031.15035900397;
      doubleArray0[6] = (-773.0);
      doubleArray0[7] = 0.07035867344490586;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {1.5, 48.0, 6906.467, 0.0, 3825.880562313323, 1031.15035900397, (-773.0), 0.07035867344490586}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)28;
      shortArray0[1] = (short)1125;
      shortArray0[2] = (short) (-1850);
      shortArray0[3] = (short) (-1764);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1764));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)28, (short)1125, (short) (-1850), (short) (-1764)}, shortArray0);
      assertArrayEquals(new short[] {(short)28, (short)1125, (short) (-1850)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      char[] charArray0 = new char[2];
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[1] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[2] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[3] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '\u0000';
      intArray0[1] = 1;
      intArray0[2] = (int) '\u0000';
      intArray0[3] = 1;
      intArray0[4] = (int) '\u0000';
      ArrayUtils.reverse(intArray0, 1, 0);
      assertArrayEquals(new int[] {0, 1, 0, 1, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 0, 1224, 1224);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) 0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[2];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '&';
      charArray0[2] = 'r';
      charArray0[3] = '4';
      charArray0[4] = 'K';
      charArray0[5] = '&';
      charArray0[6] = '4';
      charArray0[7] = '6';
      charArray0[8] = '4';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'4', '6', '4', '&', 'K', '4', 'r', '&', 'K'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) '6';
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '&';
      intArray0[1] = (int) 'r';
      int[] intArray1 = ArrayUtils.insert((int) (short)0, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {38, 114}, intArray0);
      assertArrayEquals(new int[] {38, 114, 38, 114}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = ArrayUtils.indexOf(longArray0, (-3560L));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte) (-73);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-1), (byte) (-6), (byte) (-1), (byte) (-6), (byte) (-6), (byte) (-73), (byte) (-73)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int1 = ArrayUtils.indexOf(booleanArray0, false, (int) (byte)14);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BjL]_I.UzBd;'";
      stringArray0[1] = "";
      stringArray0[2] = "L({nAced?Fe~";
      stringArray0[3] = "Arguments cannot both be null";
      stringArray0[4] = "F =$*eD7lii+B9p";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 2313, (int) 14);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = 1L;
      longArray0[2] = (long) (byte)14;
      longArray0[3] = (long) (byte)14;
      longArray0[4] = (long) (byte)14;
      longArray0[5] = (long) (byte)14;
      longArray0[6] = (long) (byte)14;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 1L, 14L, 14L, 14L, 14L, 14L}, longArray1);
      assertArrayEquals(new long[] {(-1L), 1L, 14L, 14L, 14L, 14L, 14L}, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 48.0;
      doubleArray0[2] = 6906.467;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3825.880562313323;
      doubleArray0[5] = 1031.15035900397;
      doubleArray0[6] = (-773.0);
      Double double0 = new Double(3825.880562313323);
      assertNotNull(double0);
      assertEquals(3825.880562313323, (double)double0, 0.01);
      
      Double double1 = new Double(1031.15035900397);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1031.15035900397, (double)double1, 0.01);
      
      Double double2 = new Double(1031.15035900397);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(1031.15035900397, (double)double2, 0.01);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 3825.880562313323;
      doubleArray1[1] = double1;
      doubleArray1[2] = double1;
      doubleArray1[3] = (Double) 6906.467;
      doubleArray1[4] = (Double) 48.0;
      doubleArray1[5] = (Double) (-773.0);
      doubleArray1[6] = (Double) 1031.15035900397;
      doubleArray1[7] = (Double) 1.5;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 655, 655, 655);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, (long) 655);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {655L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 0, 52);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      Short[] shortArray0 = new Short[0];
      Short short0 = ArrayUtils.get(shortArray0, 0);
      assertNull(short0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.reverse((char[]) null);
      ArrayUtils.swap(booleanArray0, 52, 794, 794);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 93.0;
      objectArray0[2] = (Object) 93.0;
      objectArray0[3] = (Object) 93.0;
      objectArray0[4] = (Object) 93.0;
      objectArray0[5] = (Object) 93.0;
      ArrayUtils.reverse((long[]) null, 52, 3);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray0));
      assertEquals(12, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 0, 0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) 0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = 751L;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      ArrayUtils.reverse(longArray0, 64, 0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 751L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      Short[] shortArray0 = new Short[1];
      short short0 = (short)115;
      Short short1 = new Short((short)115);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)115, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = ArrayUtils.get(shortArray0, 0);
      assertNotNull(short2);
      assertEquals(1, shortArray0.length);
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)115, (short)short2);
      
      Integer integer1 = new Integer(short0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(115, (int)integer1);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) shortArray0, (Object) integer1);
      assertEquals(1, shortArray0.length);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(boolean0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 296L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 751L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 751L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = (int) (byte) (-1);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1156));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1156)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-1);
      objectArray0[1] = (Object) (short) (-1);
      objectArray0[2] = (Object) (-1);
      objectArray0[3] = (Object) (-1);
      objectArray0[4] = (Object) (-1);
      objectArray0[5] = (Object) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[2], (-1));
      assertEquals(5, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals("{0, 2, 3, 4, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(6, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.1, Double.NaN, (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (short)0;
      longArray0[4] = 1L;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (long) (byte)0;
      longArray0[8] = (long) (-1);
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Long[] longArray2 = new Long[5];
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray2[0] = long0;
      longArray2[1] = (Long) (-1L);
      longArray2[2] = (Long) (-1L);
      longArray2[3] = (Long) 0L;
      longArray2[4] = (Long) (-1L);
      Long long1 = new Long(2235L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(2235L, (long)long1);
      
      Long[] longArray3 = ArrayUtils.removeAllOccurrences(longArray2, long1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotNull(longArray3);
      assertEquals(5, longArray2.length);
      assertEquals(5, longArray3.length);
      assertFalse(long1.equals((Object)long0));
      assertFalse(longArray3.equals((Object)longArray2));
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 0, 52);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Short[] shortArray0 = new Short[0];
      Short short0 = ArrayUtils.get(shortArray0, 0);
      assertNull(short0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean0);
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long long0 = new Long(184);
      assertNotNull(long0);
      assertEquals(184L, (long)long0);
      
      Long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, long0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short)2104;
      shortArray0[2] = (short)2043;
      ArrayUtils.swap(shortArray0, 299, 2);
      assertArrayEquals(new short[] {(short)9, (short)2104, (short)2043}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (short)9);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {9}, intArray0);
      assertEquals(1, intArray0.length);
      
      Short[] shortArray1 = new Short[2];
      Short short0 = new Short((short)2104);
      assertNotNull(short0);
      assertEquals((short)2104, (short)short0);
      
      shortArray1[0] = short0;
      shortArray1[1] = (Short) (short)2043;
      Short[] shortArray2 = ArrayUtils.addAll(shortArray1, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)2043;
      doubleArray0[1] = (double) 299;
      doubleArray0[2] = (double) (short)2104;
      doubleArray0[3] = (double) 299;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) (short)2104;
      doubleArray0[6] = (double) 299;
      doubleArray0[7] = (double) (short)9;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 9.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {9.0, 2043.0, 299.0, 2104.0, 299.0, 2.0, 2104.0, 299.0, 9.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2043.0, 299.0, 2104.0, 299.0, 2.0, 2104.0, 299.0, 9.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)2104;
      longArray0[1] = (long) (short)9;
      longArray0[2] = 1L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (short)9);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2104L, 9L, 1L}, longArray0);
      assertArrayEquals(new long[] {2104L, 1L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Long[] longArray2 = new Long[8];
      longArray2[0] = (Long) 2104L;
      longArray2[1] = (Long) 9L;
      longArray2[2] = (Long) 9L;
      longArray2[3] = (Long) 2104L;
      longArray2[4] = (Long) 9L;
      longArray2[5] = (Long) 9L;
      longArray2[6] = (Long) 1L;
      longArray2[7] = (Long) 9L;
      Long[] longArray3 = ArrayUtils.removeAllOccurrences(longArray2, longArray2[4]);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray2, longArray3);
      assertNotNull(longArray3);
      assertEquals(3, longArray3.length);
      assertEquals(8, longArray2.length);
      assertFalse(longArray3.equals((Object)longArray2));
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      ArrayUtils.swap(longArray0, 0, (-4024), 2);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-750);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)996;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-29233));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-750), (short)0, (short)996, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-750), (short)0, (short)996, (short)0, (short) (-29233)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray((int[]) null, 59, (int) (short) (-29233));
      assertNull(intArray1);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((-441.0F));
      assertNotNull(float0);
      assertEquals((-441.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(3576.278F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3576.278F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-1.0F));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1992.522139032;
      doubleArray0[1] = (double) 2156;
      doubleArray0[2] = (-3461.399824553978);
      ArrayUtils.shift(doubleArray0, 2156);
      assertArrayEquals(new double[] {1992.522139032, 2156.0, (-3461.399824553978), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[3] = 'm';
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift((char[]) null, 3752);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'm';
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {109L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray2, 3752);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3752, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)13461;
      shortArray0[2] = (short)13461;
      shortArray0[3] = (short) (-2312);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)13461, (short)0, (short)13461, (short) (-2312)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEquals((Object) null, "'E9u/V=z");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((short) (-2312));
      assertNotNull(double0);
      assertEquals((-2312.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2312.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2515.4185343;
      Character character0 = new Character('^');
      assertNotNull(character0);
      assertEquals('^', (char)character0);
      
      char char0 = ')';
      Character character1 = Character.valueOf(')');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals(')', (char)character1);
      
      Character character2 = new Character('^');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertEquals('^', (char)character2);
      
      Character character3 = new Character('\u0088');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('\u0088', (char)character3);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character1;
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {')', ')'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) 2515.4185343;
      doubleArray1[1] = (Double) 2515.4185343;
      doubleArray1[2] = (Double) 2515.4185343;
      doubleArray1[3] = (Double) 2515.4185343;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2515.4185343, 2515.4185343, 2515.4185343, 2515.4185343}, doubleArray2, 0.01);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) ')';
      intArray0[1] = (int) char0;
      intArray0[2] = (int) '\u0088';
      intArray0[3] = (int) '\u0088';
      intArray0[4] = (int) char0;
      intArray0[5] = (int) '\u0088';
      intArray0[6] = (-1);
      intArray0[7] = (int) ')';
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {41, 41, 136, 136, 41, 136, (-1), 41}, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-339.68143F));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2312);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-2312)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      
      MutableInt mutableInt0 = new MutableInt((int) (short) (-2312));
      assertEquals((-2312), (int)mutableInt0.getValue());
      assertEquals((byte) (-8), mutableInt0.byteValue());
      assertEquals((-2312), (int)mutableInt0.toInteger());
      assertEquals("-2312", mutableInt0.toString());
      assertEquals((-2312.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2312L), mutableInt0.longValue());
      assertEquals((-2312.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2312), mutableInt0.intValue());
      assertEquals((short) (-2312), mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      boolean boolean1 = ArrayUtils.isEquals("'E9u/V=z", mutableInt0);
      assertEquals((-2312), (int)mutableInt0.getValue());
      assertEquals((byte) (-8), mutableInt0.byteValue());
      assertEquals((-2312), (int)mutableInt0.toInteger());
      assertEquals("-2312", mutableInt0.toString());
      assertEquals((-2312.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2312L), mutableInt0.longValue());
      assertEquals((-2312.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2312), mutableInt0.intValue());
      assertEquals((short) (-2312), mutableInt0.shortValue());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Double double0 = new Double((short) (-2312));
      assertNotNull(double0);
      assertEquals((-2312.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.contains(intArray0, 2171);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = 1.5;
      Double double0 = new Double((-1968.4047162149));
      assertNotNull(double0);
      assertEquals((-1968.4047162149), (double)double0, 0.01);
      
      Double double1 = new Double((-1674.4666434901198));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1674.4666434901198), (double)double1, 0.01);
      
      Double[] doubleArray1 = new Double[0];
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 2578;
      intArray0[2] = 2578;
      intArray0[4] = 2578;
      intArray0[7] = 2578;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'K';
      longArray0[1] = (long) 2578;
      longArray0[2] = (long) 2578;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 2578L, 2578L, 75L}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.swap((byte[]) null, 2578, 0);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 2578, 2578, 0, 2578, 0, 0, 2578}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.07035867344490586;
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[6] = (double) (byte) (-1);
      doubleArray0[7] = (double) (byte) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.07035867344490586, 0.0, 0.0, (-1.0), 0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2697;
      shortArray0[2] = (short)2697;
      shortArray0[3] = (short)1136;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)1136;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (short)1136;
      doubleArray0[3] = (double) (short)1136;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1.5;
      doubleArray0[2] = (double) 0;
      doubleArray0[7] = (double) 0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)1136, 658.0733975557);
      assertArrayEquals(new double[] {1136.0, 0.0, 0.0, 1136.0, 0.0, 1.5, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      String string0 = "'E9u/V=z";
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      int int1 = 83;
      intArray0[1] = 83;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (short) (-2312);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 83, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '&';
      charArray0[2] = 'r';
      charArray0[3] = '4';
      charArray0[4] = 'K';
      charArray0[5] = '&';
      charArray0[6] = '4';
      charArray0[7] = '6';
      charArray0[8] = '4';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'4', '6', '4', '&', 'K', '4', 'r', '&', 'K'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) '6';
      characterArray0[1] = (Character) 'r';
      characterArray0[2] = (Character) '&';
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '&';
      intArray0[1] = (int) 'r';
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 114, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2697;
      shortArray0[2] = (short)2697;
      shortArray0[3] = (short)1136;
      shortArray0[4] = (short) (-2807);
      shortArray0[5] = (short)11;
      shortArray0[6] = (short)2697;
      shortArray0[7] = (short)1136;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)2697, (short)0, (short)2697, (short)1136, (short) (-2807), (short)11, (short)2697, (short)1136}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Character character0 = new Character('N');
      assertNotNull(character0);
      assertEquals('N', (char)character0);
      
      ArrayUtils.hashCode((Object) character0);
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1136;
      ArrayUtils.swap(doubleArray0, 82, 5299, 2);
      assertArrayEquals(new double[] {1136.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (int) (byte)0, (short) (byte)0);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-2146879811), (-1.0F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146879811, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      ArrayUtils.swap(longArray0, 2, 0, 0);
      assertArrayEquals(new long[] {2L, 2L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[1] = 'g';
      charArray0[2] = 'a';
      charArray0[3] = 'V';
      charArray0[4] = 'A';
      charArray0[5] = '~';
      charArray0[6] = 'r';
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (short)0, (short) (-2359));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2359), (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.swap(floatArray0, 335, 1642);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-54);
      byteArray0[8] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)114, (byte) (-1), (byte)121, (byte)1, (byte) (-54), (byte)0, (byte)14}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)114;
      intArray0[1] = (int) (byte) (-104);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = 335;
      intArray0[4] = (int) (byte) (-54);
      intArray0[5] = (int) (byte)1;
      intArray0[6] = (int) (byte)121;
      intArray0[7] = (int) (byte)121;
      intArray0[8] = (int) (byte) (-1);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {114, (-104), (-1), 335, (-54), 1, 121, 121, (-1)}, intArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-73);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-513));
      assertArrayEquals(new short[] {(short) (-73)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.07035867344490586;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.07035867344490586;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1136;
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character character1 = new Character('Q');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('Q', (char)character1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-73);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)96, (byte)20, (byte)83, (byte) (-1), (byte)4, (byte) (-55), (byte)0, (byte) (-73)}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 99.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.07035867344490586, 0.0, 0.07035867344490586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {99.0, 0.07035867344490586, 0.0, 0.07035867344490586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MutableInt[] mutableIntArray0 = ArrayUtils.subarray((MutableInt[]) null, 70, 74);
      assertNull(mutableIntArray0);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      String[] stringArray0 = ArrayUtils.subarray((String[]) null, 2313, 2313);
      assertNull(stringArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BjL]_I.UzBd;'";
      stringArray0[3] = stringArray0[1];
      stringArray0[4] = "F =$*eD7lii+B9p";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 2313, (int) 0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray0 = new long[7];
      longArray0[2] = (long) (byte)0;
      longArray0[6] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1342.5839F);
      ArrayUtils.swap(floatArray0, 335, 1642);
      assertArrayEquals(new float[] {(-1342.5839F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte) (-104);
      byteArray0[8] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)114, (byte) (-1), (byte)121, (byte)1, (byte) (-54), (byte) (-104), (byte)14}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 118, (int)  (-104));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = 'I';
      charArray0[2] = 'f';
      charArray0[4] = ' ';
      charArray0[5] = '!';
      charArray0[6] = ' ';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '!', (-397));
      assertEquals("{0, 5}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'!', 'I', 'f', '\u0000', ' ', '!', ' '}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2515.4185343;
      doubleArray0[1] = 2515.4185343;
      doubleArray0[2] = 1073.584126350248;
      doubleArray0[3] = 48.0;
      doubleArray0[4] = (-1718.903);
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = new Boolean("The Array must not be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean2);
      assertNotNull(boolean3);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf((boolean) boolean3);
      assertNotNull(boolean4);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean2);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean5);
      
      booleanArray0[6] = boolean3;
      booleanArray0[7] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, false}, booleanArray1));
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray1, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, false, false}, booleanArray1));
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-4024);
      ArrayUtils.swap(longArray0, (-937), 0, (-1));
      assertArrayEquals(new long[] {(-4024L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = 't';
      charArray0[2] = 'J';
      charArray0[3] = 'v';
      int int0 = ArrayUtils.indexOf(charArray0, '=', (-499));
      assertArrayEquals(new char[] {'p', 't', 'J', 'v'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = 0.0F;
      short short0 = (short) (-492);
      Short short1 = new Short((short) (-492));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-492), (short)short1);
      
      Short[] shortArray0 = new Short[0];
      Short short2 = new Short((short) (-492));
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short) (-492), (short)short2);
      
      Short[] shortArray1 = ArrayUtils.add(shortArray0, short2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Long long0 = new Long((-4199L));
      assertNotNull(long0);
      assertEquals((-4199L), (long)long0);
      
      int int0 = ArrayUtils.indexOf((Object[]) shortArray1, (Object) long0, (int) (short) (-492));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals((-1), int0);
      
      short[] shortArray2 = new short[7];
      shortArray2[0] = (short) (-492);
      shortArray2[1] = (short) (-492);
      shortArray2[2] = (short) (-492);
      shortArray2[3] = (short) (-1);
      shortArray2[4] = (short) (-492);
      shortArray2[5] = (short) (-492);
      shortArray2[6] = (short) (-492);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-492);
      intArray0[1] = (int) (short) (-492);
      intArray0[2] = (int) (short) (-492);
      intArray0[3] = (int) (short) (-492);
      intArray0[4] = (int) (short) (-492);
      intArray0[5] = (int) (short) (-492);
      intArray0[6] = (int) (short) (-492);
      intArray0[7] = (int) (short) (-492);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -492, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      doubleArray0[1] = 409.0924235051861;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 409.0924235051861);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {93.0, 409.0924235051861}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, 14);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = false;
      booleanArray1[7] = false;
      ArrayUtils.shuffle(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)69;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)117;
      shortArray0[3] = (short)122;
      shortArray0[4] = (short)8;
      shortArray0[5] = (short) (-529);
      int[] intArray0 = new int[6];
      intArray0[0] = (-318);
      intArray0[1] = (int) (short)69;
      intArray0[2] = (int) (short)8;
      intArray0[3] = (int) (short) (-1);
      intArray0[4] = (int) (short)8;
      intArray0[5] = (int) (short)8;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 69, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2259;
      shortArray0[3] = (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      long[] longArray0 = new long[3];
      longArray0[0] = (-2704L);
      longArray0[1] = (long) (byte)59;
      longArray0[2] = (long) (byte)15;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1912L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2704L), 59L, 15L}, longArray0);
      assertArrayEquals(new long[] {(-1912L), (-2704L), 59L, 15L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-41);
      shortArray0[1] = (short) (byte)15;
      shortArray0[2] = (short) (byte)59;
      shortArray0[3] = (short) (-1129);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-41), (short)15, (short)59, (short) (-1129)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short) (-41);
      floatArray0[1] = (float) (byte)15;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 59L;
      floatArray0[4] = (float) 15L;
      floatArray0[5] = (float) (short)59;
      floatArray0[6] = (float) (byte)59;
      floatArray0[7] = (float) (byte)15;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {(-41.0F), 15.0F, 0.0F, 59.0F, 15.0F, 59.0F, 59.0F, 15.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1129), 1963);
      assertArrayEquals(new short[] {(short) (-41), (short)15, (short)59, (short) (-1129)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.addAll((Character[]) null, (Character[]) null);
      assertNull(characterArray0);
      
      Character character0 = Character.valueOf(',');
      assertNotNull(character0);
      assertEquals(',', (char)character0);
      
      Character character1 = new Character('w');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('w', (char)character1);
      
      Character character2 = Character.valueOf(',');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertEquals(',', (char)character2);
      
      Character character3 = new Character('w');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertEquals('w', (char)character3);
      
      Character[] characterArray1 = ArrayUtils.clone((Character[]) null);
      assertNull(characterArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'B';
      longArray0[1] = (long) '6';
      longArray0[2] = (long) 639;
      longArray0[3] = (long) 'w';
      longArray0[4] = (long) 'B';
      longArray0[5] = (long) ',';
      ArrayUtils.shift(longArray0, 1156, 1, (-1604));
      assertArrayEquals(new long[] {66L, 54L, 639L, 119L, 66L, 44L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      doubleArray0[1] = 409.0924235051861;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 409.0924235051861);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {93.0, 409.0924235051861}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-64);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-15), (byte) (-91), (byte) (-78), (byte)71, (byte)26, (byte) (-1), (byte) (-64)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-15), (byte) (-91), (byte) (-78), (byte)71, (byte)26, (byte) (-1), (byte) (-64)}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-91);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-91L)}, longArray0);
      assertArrayEquals(new long[] {(-91L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray0, (long) (byte) (-64));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-91L)}, longArray0);
      assertArrayEquals(new long[] {(-91L)}, longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.subarray(longArray0, (-1134), 0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {(-91L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(2142L);
      assertNotNull(long0);
      assertEquals(2142L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertNotNull(long1);
      assertEquals(6, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertEquals(2142L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[0]);
      assertNotNull(long2);
      assertEquals(6, longArray0.length);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals(2142L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[2]);
      assertNotNull(long3);
      assertEquals(6, longArray0.length);
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertEquals(2142L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((long) longArray0[2]);
      assertNotNull(long4);
      assertEquals(6, longArray0.length);
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long1));
      assertEquals(2142L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((long) longArray0[2]);
      assertNotNull(long5);
      assertEquals(6, longArray0.length);
      assertTrue(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long0));
      assertEquals(2142L, (long)long5);
      
      longArray0[5] = long5;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      int int0 = ArrayUtils.indexOf(charArray0, 'I');
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[14];
      booleanArray0[0] = true;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)59;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-41), (byte)15, (byte)59}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2634.524611);
      doubleArray0[1] = (double) (byte)59;
      doubleArray0[2] = (double) (byte) (-41);
      doubleArray0[3] = (double) (byte) (-41);
      ArrayUtils.reverse((short[]) null, (-1956), (int) (byte) (-41));
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = 1172.7928F;
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf("]I2ib]lT");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf((boolean) boolean0);
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = new Boolean("]I2ib]lT");
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("The Array must not be null");
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf((boolean) boolean0);
      assertNotNull(boolean6);
      assertFalse(boolean0.equals((Object)boolean3));
      assertTrue(boolean0.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertNotNull(boolean7);
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean6));
      assertTrue(boolean7);
      
      booleanArray0[7] = boolean7;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1172.7928F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 1391.0F;
      doubleArray0[3] = (double) 1391.0F;
      doubleArray0[4] = (double) 1172.7928F;
      doubleArray0[5] = (double) 1391.0F;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1172.7928466796875, 0.0, 1391.0, 1391.0, 1172.7928466796875, 1391.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1172.7928466796875, 0.0, 1391.0, 1391.0, 1172.7928466796875, 1391.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, (-1240));
      assertNull(intArray0);
      
      ArrayUtils.reverse((short[]) null, (-1240), (-1240));
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      Boolean boolean0 = new Boolean((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      
      Boolean boolean4 = Boolean.valueOf(false);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray1);
      
      ArrayUtils.shift((boolean[]) null, (-110));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-110);
      doubleArray0[1] = (double) 122;
      doubleArray0[2] = (double) (-110);
      doubleArray0[4] = (double) (-110);
      doubleArray0[5] = (double) 3009;
      doubleArray0[6] = (double) (-110);
      ArrayUtils.shift(doubleArray0, 3009, (-110), 3009);
      assertArrayEquals(new double[] {(-110.0), 122.0, (-110.0), 0.0, (-110.0), 3009.0, (-110.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      float[] floatArray0 = new float[5];
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, (int) (short)0, Integer.MAX_VALUE, 2720);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Double double0 = new Double(1724.6669262175);
      assertNotNull(double0);
      assertEquals(1724.6669262175, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertNotNull(object0);
      assertEquals(1724.6669262175, object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      ArrayUtils.swap(objectArray0, 1737, (-1037));
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2146863149), (int) (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Short short0 = new Short((byte)12);
      assertNotNull(short0);
      assertEquals((short)12, (short)short0);
      
      Short short1 = new Short((byte)72);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)72, (short)short1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte) (-74));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      Object object0 = ArrayUtils.toPrimitive((Object) "', has a length lesN than 2");
      assertNotNull(object0);
      assertEquals("', has a length lesN than 2", object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "', has a length lesN than 2";
      objectArray0[1] = (Object) "', has a length lesN than 2";
      Byte byte0 = new Byte((byte)47);
      assertNotNull(byte0);
      assertEquals((byte)47, (byte)byte0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-932), (Object) byte0);
      assertNotNull(object1);
      assertEquals(8, objectArray0.length);
      assertEquals((byte)47, object1);
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "', has a length lesN than 2";
      objectArray0[4] = (Object) "', has a length lesN than 2";
      objectArray0[5] = (Object) "', has a length lesN than 2";
      objectArray0[6] = (Object) "', has a length lesN than 2";
      objectArray0[7] = (Object) "', has a length lesN than 2";
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(8, objectArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)47;
      longArray0[1] = (long) (byte)47;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 47L);
      assertArrayEquals(new long[] {47L, 47L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(1, int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = (int) (byte)47;
      intArray0[2] = 1;
      intArray0[3] = (-932);
      intArray0[4] = (-932);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {1, 47, 1, (-932), (-932)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.swap(longArray0, (-1516), 386);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 1, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true, true}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 992;
      intArray0[1] = 386;
      intArray0[2] = (-1516);
      intArray0[3] = 386;
      intArray0[4] = 386;
      ArrayUtils.reverse(intArray0, (-3856), 386);
      assertArrayEquals(new int[] {386, 386, (-1516), 386, 992}, intArray0);
      assertEquals(5, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true);
      assertEquals("{1, 3, 5, 6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true, true}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)61;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 386, (byte)126);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 386, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.reverse(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)59;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-41), (byte)15, (byte)59}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2634.524611);
      doubleArray0[1] = (double) (byte)59;
      doubleArray0[2] = (double) (byte) (-41);
      doubleArray0[3] = (double) (byte) (-41);
      doubleArray0[4] = (double) (byte) (-41);
      doubleArray0[5] = (double) (byte) (-41);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-41.0), (double) (byte)59);
      assertArrayEquals(new double[] {(-2634.524611), 59.0, (-41.0), (-41.0), (-41.0), (-41.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)59);
      assertArrayEquals(new byte[] {(byte)59, (byte) (-41), (byte)15, (byte)59}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Long long0 = Long.getLong("b");
      assertNull(long0);
      
      Long long1 = new Long((byte)59);
      assertNotNull(long1);
      assertEquals(59L, (long)long1);
      
      Long long2 = new Long((byte) (-41));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertEquals((-41L), (long)long2);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '&';
      charArray0[2] = 'r';
      charArray0[3] = '4';
      charArray0[4] = 'K';
      charArray0[5] = '&';
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.contains(intArray0, 69);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, 40L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.indexOf(intArray0, 2140, 52);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), int0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      int int1 = ArrayUtils.indexOf(charArray0, 'O', 53);
      assertArrayEquals(new char[] {'K', '&', 'r', '4', 'K', '&', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "N!9qI@aq#TvptTM\"T)";
      stringArray0[1] = "=k~;Jvpfrn/?eba0RVO";
      stringArray0[2] = "wp$e<jcrQQBiH3";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      Character[] characterArray0 = new Character[4];
      Character character0 = Character.valueOf('?');
      assertNotNull(character0);
      assertEquals('?', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('?');
      assertNotNull(character1);
      assertEquals('?', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('?');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertEquals('?', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('c');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals('c', (char)character3);
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(4, characterArray0.length);
      assertEquals(4, characterArray1.length);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      String string0 = ArrayUtils.toString((Object) boolean0);
      assertNotNull(string0);
      assertEquals("false", string0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[3];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-1L), mutableInt1.longValue());
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertEquals("-1", mutableInt1.toString());
      assertEquals((-1), mutableInt1.intValue());
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(mutableInt1);
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-1L), mutableInt1.longValue());
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertEquals("-1", mutableInt1.toString());
      assertEquals((-1), mutableInt1.intValue());
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((-1), mutableInt2.intValue());
      assertEquals((-1L), mutableInt2.longValue());
      assertEquals("-1", mutableInt2.toString());
      assertEquals((-1), (int)mutableInt2.toInteger());
      assertEquals((byte) (-1), mutableInt2.byteValue());
      assertEquals((-1.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt2.getValue());
      assertEquals((short) (-1), mutableInt2.shortValue());
      assertEquals((-1.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt2);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = null;
      try {
        mutableInt3 = new MutableInt((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.mutable.MutableInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = ',';
      charArray0[2] = 'x';
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'n';
      charArray1[1] = 'n';
      charArray1[2] = 'e';
      charArray1[3] = 'H';
      charArray1[5] = 'x';
      charArray1[7] = 'x';
      ArrayUtils.shift(charArray1, (int) (byte)0, (int) (byte)0, 1475);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'n', 'n', 'e', 'H', '\u0000', 'x', '\u0000', 'x'}, charArray1);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = ArrayUtils.indexOf(charArray1, 'x', 2219);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'n', 'n', 'e', 'H', '\u0000', 'x', '\u0000', 'x'}, charArray1);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short)91;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short)91);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)91}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) 'n';
      characterArray0[1] = (Character) 'n';
      characterArray0[2] = (Character) 'e';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      
      Object[] objectArray0 = ArrayUtils.clone((Object[]) characterArray0);
      assertSame(characterArray0, characterArray1);
      assertNotSame(characterArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[5] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      Float float0 = new Float(100.0);
      assertNotNull(float0);
      assertEquals(100.0F, (float)float0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[1] = '/';
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-118), 2660);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '/';
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {47}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.07035867344490586;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.07035867344490586;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1136;
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character character1 = new Character('Q');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('Q', (char)character1);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)1136;
      longArray0[2] = (-400L);
      ArrayUtils.shift(longArray0, (int) (short)537, (-1354), (-4712));
      assertArrayEquals(new long[] {0L, 1136L, (-400L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      ArrayUtils.swap(doubleArray0, (-4712), 815);
      assertArrayEquals(new double[] {0.07035867344490586, 0.0, 0.07035867344490586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      Long long0 = Long.getLong("Y}F`{/X3-:.]gW7N");
      assertNull(long0);
      
      Long long1 = new Long(0);
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 0L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2791.048F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 2791.048F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 2791.048F, 0.0F, 2791.048F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-547);
      shortArray0[2] = (short) (-1821);
      shortArray0[3] = (short) (-1228);
      shortArray0[4] = (short)18949;
      shortArray0[5] = (short) (-971);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) (short) (-1228));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1228, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = ':';
      charArray0[2] = '-';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'U', ':', '-'}, charArray0);
      assertArrayEquals(new char[] {'U', ':', '-'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) ':';
      doubleArray0[1] = (double) '-';
      doubleArray0[2] = (double) ':';
      doubleArray0[3] = (double) '-';
      doubleArray0[4] = (double) 'U';
      doubleArray0[5] = (double) ':';
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 644.2859405826);
      assertArrayEquals(new double[] {58.0, 45.0, 58.0, 45.0, 85.0, 58.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-28);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)33, (byte) (-28)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)33, (byte) (-28)}, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      double[] doubleArray0 = new double[5];
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 'r';
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 114.0F, (int) (short)0, 97.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)0;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0);
      assertEquals(1, objectArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((int[]) null, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-226);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 42;
      doubleArray0[3] = (double) (-226);
      doubleArray0[4] = (double) (-226);
      doubleArray0[5] = (double) 42;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-226.0), (-3560.810589));
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-226.0), (-1.0), 42.0, (-226.0), (-226.0), 42.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1301);
      shortArray0[1] = (short) (-640);
      shortArray0[2] = (short)2;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short) (-1301);
      objectArray0[1] = (Object) (short)2;
      Object object0 = ArrayUtils.get(objectArray0, Integer.MAX_VALUE);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      Object object1 = ArrayUtils.get(objectArray0, (int) 2);
      assertNull(object1);
      assertEquals(2, objectArray0.length);
      
      Object[] objectArray1 = new Object[1];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = null;
      Object object2 = ArrayUtils.get(objectArray1, 1534, (Object) null);
      assertNotSame(objectArray1, objectArray0);
      assertNull(object2);
      assertEquals(1, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Integer integer0 = new Integer((short) (-1301));
      assertNotNull(integer0);
      assertEquals((-1301), (int)integer0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) integer0, (int) (short) (-640));
      assertNotSame(objectArray0, objectArray1);
      assertEquals(2, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = 'c';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'c', '9'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) "", 438);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-64), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-64), (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = (Boolean) true;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-64), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-64), (byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-1);
      ArrayUtils.shift(intArray0, 453);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) 453;
      floatArray0[3] = (float) (byte) (-1);
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte) (-1);
      floatArray0[6] = (-65.784F);
      floatArray0[7] = (float) (byte) (-1);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 2560.07F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 453.0F, (-1.0F), 0.0F, (-1.0F), (-65.784F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 453.0F, (-1.0F), 0.0F, (-1.0F), (-65.784F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2131);
      shortArray0[2] = (short) (-740);
      shortArray0[3] = (short)2697;
      shortArray0[4] = (short)0;
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-740);
      intArray0[1] = (int) (short)2697;
      ArrayUtils.shift(intArray0, 2697, (int) (short)0, (int) (short)0);
      assertArrayEquals(new int[] {(-740), 2697}, intArray0);
      assertEquals(2, intArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(2697, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2697;
      floatArray0[1] = (-2755.43F);
      floatArray0[2] = (float) (short) (-2131);
      floatArray0[3] = (float) (short) (-740);
      floatArray0[4] = (float) (-740);
      floatArray0[5] = (float) (short) (-740);
      floatArray0[6] = (float) (short)0;
      floatArray0[7] = (float) (short) (-2131);
      floatArray0[8] = (float) 2697;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2697.0F, (-2755.43F), (-2131.0F), (-740.0F), (-740.0F), (-740.0F), 0.0F, (-2131.0F), 2697.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(2020.286157773646);
      assertNotNull(double0);
      assertEquals(2020.286157773646, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-3415.46477682926));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-3415.46477682926), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertNotNull(double2);
      assertEquals(9, doubleArray0.length);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((-3415.46477682926), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(2697);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(2697.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1.0);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals(1.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = Double.valueOf((double) (-740.0F));
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((-740.0), (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-11.561749096755001));
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals((-11.561749096755001), (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(1140.2432994565);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertEquals(1140.2432994565, (double)double7, 0.01);
      
      doubleArray0[7] = double7;
      Double double8 = new Double((-1860.7825680278));
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertEquals((-1860.7825680278), (double)double8, 0.01);
      
      doubleArray0[8] = double8;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) ')';
      floatArray0[1] = (float) ')';
      floatArray0[2] = (float) ')';
      floatArray0[0] = (float) ')';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {41.0F, 41.0F, 41.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      ArrayUtils.swap((long[]) null, (-2146820843), (-1246), (-15));
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-15);
      floatArray0[1] = (float) (-15);
      floatArray0[2] = (float) (-1246);
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (-1246));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      ArrayUtils.swap((char[]) null, Integer.MAX_VALUE, (-2146820843), 4);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift((long[]) null, (-114), 273, 10);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)94;
      int int0 = new Integer((byte)94);
      assertEquals(94, int0);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 48.0;
      doubleArray0[1] = (-1718.903);
      doubleArray0[2] = (-1601.23952);
      doubleArray0[3] = (-2568.8679);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1718.903));
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {48.0, (-1718.903), (-1601.23952), (-2568.8679)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.shift((long[]) null, 100, 100, 100);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 100;
      floatArray0[1] = (float) 100;
      floatArray0[2] = (float) 100;
      floatArray0[3] = (float) 100;
      floatArray0[4] = (float) 100;
      floatArray0[5] = (float) 100;
      floatArray0[6] = (float) 100;
      floatArray0[7] = (float) 100;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {100.0F, 100.0F, 100.0F, 100.0F, 100.0F, 100.0F, 100.0F, 100.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {100.0F, 100.0F, 100.0F, 100.0F, 100.0F, 100.0F, 100.0F, 100.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet1 = ArrayUtils.indexesOf((long[]) null, 1086L);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = '!';
      charArray0[2] = 'h';
      charArray0[3] = 'q';
      charArray0[4] = ';';
      ArrayUtils.reverse(charArray0, 100, 69);
      assertArrayEquals(new char[] {'G', '!', 'h', 'q', ';'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      Long long0 = Long.getLong("Arguments cannot both be null");
      assertNull(long0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)18688;
      shortArray0[1] = (short)18688;
      shortArray0[2] = (short)18688;
      shortArray0[3] = (short) (-614);
      shortArray0[4] = (short)18688;
      shortArray0[5] = (short)18688;
      shortArray0[6] = (short)18688;
      shortArray0[7] = (short)18688;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)18688, 1073741824);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)18688, (short)18688, (short)18688, (short) (-614), (short)18688, (short)18688, (short)18688, (short)18688}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.reverse((Object[]) null, 156, (int) (short)18688);
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)18688;
      floatArray0[1] = (float) (short)18688;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {18688.0F, 18688.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {18688.0F, 18688.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 156, (-1714));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 0, 52);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2108945155, (int) (short)18688);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, 4, (-3616));
      assertEquals(0, objectArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[2];
      booleanArray1[0] = (Boolean) false;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[1] = boolean0;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertEquals(2, booleanArray2.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 4;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-3616);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 52;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-49.47656F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {4.0F, 0.0F, 0.0F, (-3616.0F), 0.0F, (-1.0F), 0.0F, 52.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {4.0F, 0.0F, 0.0F, (-3616.0F), 0.0F, (-1.0F), 0.0F, 52.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      Object object0 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)8;
      doubleArray0[1] = (double) (byte)8;
      doubleArray0[2] = (double) (byte)8;
      doubleArray0[3] = (double) (byte)8;
      doubleArray0[4] = (double) 2146630259;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2146630259, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146630259, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(2142L);
      assertNotNull(long0);
      assertEquals(2142L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertNotNull(long1);
      assertEquals(6, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertEquals(2142L, (long)long1);
      
      longArray0[1] = long1;
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = ':';
      charArray0[2] = 'A';
      charArray0[3] = 'n';
      charArray0[4] = 'X';
      ArrayUtils.shift(charArray0, (-1592));
      assertArrayEquals(new char[] {'A', 'n', 'X', '&', ':'}, charArray0);
      assertEquals(5, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)97;
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'c';
      charArray0[3] = '*';
      charArray0[3] = '0';
      ArrayUtils.shift(charArray0, (-123), 700, 299);
      assertArrayEquals(new char[] {'c', '\u0000', '0', 'Z'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2743L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2743L);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      Character character0 = new Character('8');
      assertNotNull(character0);
      assertEquals('8', (char)character0);
      
      Character character1 = new Character(')');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals(')', (char)character1);
      
      Character character2 = Character.valueOf('j');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('j', (char)character2);
      
      Character character3 = new Character('z');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('z', (char)character3);
      
      Character character4 = new Character('^');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertEquals('^', (char)character4);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character4;
      Character character5 = new Character('Y');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertEquals('Y', (char)character5);
      
      characterArray0[1] = character5;
      characterArray0[2] = character0;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'^', 'Y', '8'}, charArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((-2743L));
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      // Undeclared exception!
      try { 
        ArrayUtils.add((String[]) null, (-906), "+~*00N4#*");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -906, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      ArrayUtils.reverse((Object[]) null);
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '\u0000';
      doubleArray0[3] = (double) '\u0000';
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1130.303502585));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray1, (-1), (Double) 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2515.4185343;
      doubleArray0[1] = (-702.604851604);
      doubleArray0[2] = 1073.584126350248;
      doubleArray0[3] = 48.0;
      doubleArray0[4] = (-1718.903);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "The Array must not be null";
      stringArray0[1] = "The Array must not be null";
      stringArray0[2] = "z[dtVL]rnz";
      stringArray0[3] = "The Array must not be null";
      stringArray0[4] = "#";
      stringArray0[5] = "b[ys#k:4_";
      // Undeclared exception!
      try { 
        ArrayUtils.add(stringArray0, (-496), "b[ys#k:4_");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -496, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2743L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2743L);
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-2743L), (-2952));
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, ')');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'c';
      charArray0[2] = '*';
      charArray0[3] = '0';
      ArrayUtils.shift(charArray0, (-11));
      assertArrayEquals(new char[] {'0', 'Z', 'c', '*'}, charArray0);
      assertEquals(4, charArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'0', 'Z', 'c', '*'}, charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      ArrayUtils.reverse((Object[]) null);
      ArrayUtils.shift(intArray0, 2695, 2695, 2695);
      assertArrayEquals(new int[] {184, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-1518L));
      assertNotNull(mockRandom0);
      
      Character character0 = new Character('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, ')');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'D');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[7];
      intArray0[1] = 2;
      intArray0[3] = (int) 'D';
      intArray0[3] = 6;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-3571));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 2, 0, 6, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-3571), 0, 2, 0, 6, 0, 0, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '&';
      charArray0[2] = 'r';
      charArray0[3] = '4';
      charArray0[4] = 'K';
      charArray0[5] = '&';
      charArray0[6] = '4';
      charArray0[7] = '6';
      charArray0[8] = '4';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'4', '6', '4', '&', 'K', '4', 'r', '&', 'K'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = (Character) '6';
      characterArray0[1] = (Character) 'r';
      characterArray0[2] = (Character) '&';
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '&';
      intArray0[1] = (int) 'r';
      int[] intArray1 = ArrayUtils.insert((int) (short)0, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {38, 114}, intArray0);
      assertArrayEquals(new int[] {38, 114, 38, 114}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      Character character0 = new Character('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      Character character1 = new Character('a');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('a', (char)character1);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character0;
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      characterArray0[3] = character1;
      characterArray0[4] = character1;
      characterArray0[5] = character1;
      characterArray0[6] = character0;
      characterArray0[7] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '+');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'t', 'a', 't', 'a', 'a', 'a', 't', 't'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-2019);
      intArray0[1] = (-678);
      intArray0[2] = (int) (char)character0;
      intArray0[3] = (int) (char)character0;
      ArrayUtils.swap(intArray0, (-2019), (int) character0, (int) character1);
      assertArrayEquals(new int[] {(-2019), (-678), 116, 116}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(character0.equals((Object)character1));
      assertFalse(character1.equals((Object)character0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals("{1, 2, 6, 8}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(9, bitSet0.length());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, true, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      Character character0 = new Character('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      Character character1 = new Character('t');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('t', (char)character1);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character0;
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      characterArray0[3] = character1;
      characterArray0[4] = character1;
      characterArray0[5] = character1;
      characterArray0[6] = character0;
      characterArray0[7] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '+');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'t', 't', 't', 't', 't', 't', 't', 't'}, charArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, charArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-2019);
      intArray0[1] = (-678);
      intArray0[2] = (int) (char)character0;
      intArray0[3] = (int) (char)character0;
      ArrayUtils.swap(intArray0, (-2019), (int) character0, (int) character1);
      assertArrayEquals(new int[] {(-2019), (-678), 116, 116}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character1.equals((Object)character0));
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 116;
      longArray0[1] = (long) 116;
      longArray0[2] = (long) 't';
      longArray0[3] = (long) (short)98;
      longArray0[4] = (long) (char)character0;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {116L, 116L, 116L, 98L, 116L}, longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      byte byte0 = (byte)0;
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[0] = 1.0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = 1.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, (int) (byte)0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(13, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'K'}, charArray0);
      assertEquals(1, charArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short) (-1307);
      shortArray0[2] = (short)76;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)3653, 2);
      assertArrayEquals(new short[] {(short)7, (short) (-1307), (short)76}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      Character character0 = new Character('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      Character character1 = new Character('t');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('t', (char)character1);
      
      ArrayUtils.swap((double[]) null, (int) (short) (-2019), (int) (short)98, (-1));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)85, (byte)85}, byteArray0);
      assertArrayEquals(new byte[] {(byte)85, (byte)85}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      double[] doubleArray0 = new double[5];
      ArrayUtils.swap(doubleArray0, 15, 15);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 13;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      char char0 = 'R';
      Character character0 = new Character('R');
      assertNotNull(character0);
      assertTrue(character0.equals((Object)char0));
      assertEquals('R', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('E');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertEquals('E', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('R');
      assertNotNull(character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('R', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('R');
      assertNotNull(character3);
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertEquals('R', (char)character3);
      
      characterArray0[3] = character3;
      char char1 = 'B';
      Character character4 = Character.valueOf('B');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char0));
      assertEquals('B', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character((char) character0);
      assertNotNull(character5);
      assertTrue(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)char0));
      assertTrue(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)char1));
      assertFalse(character0.equals((Object)character4));
      assertFalse(character0.equals((Object)character1));
      assertTrue(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)char1));
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)char0));
      assertTrue(character5.equals((Object)character0));
      assertEquals('R', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('6');
      assertNotNull(character6);
      assertFalse(character6.equals((Object)char1));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character4));
      assertEquals('6', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character((char) character0);
      assertNotNull(character7);
      assertFalse(character7.equals((Object)character6));
      assertTrue(character7.equals((Object)character0));
      assertTrue(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)char1));
      assertTrue(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character4));
      assertTrue(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character1));
      assertTrue(character7.equals((Object)character3));
      assertTrue(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)char0));
      assertFalse(character0.equals((Object)character6));
      assertTrue(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)char1));
      assertFalse(character0.equals((Object)character4));
      assertTrue(character0.equals((Object)character5));
      assertFalse(character0.equals((Object)character1));
      assertEquals('R', (char)character7);
      
      characterArray0[7] = character7;
      Character[] characterArray1 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) char1;
      longArray0[1] = (long) char1;
      longArray0[2] = (long) (char)character7;
      longArray0[3] = (long) char0;
      longArray0[4] = (long) '6';
      longArray0[5] = 184L;
      longArray0[6] = (long) (char)character0;
      longArray0[7] = (long) (char)character7;
      ArrayUtils.shift(longArray0, (int) character1, 639, (int) character0);
      assertArrayEquals(new long[] {66L, 66L, 82L, 82L, 54L, 184L, 82L, 82L}, longArray0);
      assertEquals(8, longArray0.length);
      assertTrue(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)char0));
      assertFalse(character0.equals((Object)character6));
      assertTrue(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)char1));
      assertTrue(character0.equals((Object)character7));
      assertFalse(character0.equals((Object)character4));
      assertTrue(character0.equals((Object)character5));
      assertFalse(character0.equals((Object)character1));
      assertFalse(character1.equals((Object)char1));
      assertFalse(character1.equals((Object)character5));
      assertFalse(character1.equals((Object)character2));
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character6));
      assertFalse(character1.equals((Object)character7));
      assertFalse(character1.equals((Object)character3));
      assertFalse(character1.equals((Object)character4));
      assertFalse(character1.equals((Object)character0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 66L;
      doubleArray0[2] = 2667.1591796875;
      doubleArray0[3] = (double) 82L;
      ArrayUtils.swap(doubleArray0, 3858, 815);
      assertArrayEquals(new double[] {1.0, 66.0, 2667.1591796875, 82.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = 'R';
      MockRandom mockRandom0 = new MockRandom((-756L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'\u0000', 'R', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1331);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 18688, 945);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18688, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1992.522139032;
      doubleArray0[1] = (double) 2156;
      doubleArray0[2] = (-3461.399824553978);
      doubleArray0[3] = 1446.0;
      ArrayUtils.shift(doubleArray0, 2156);
      assertArrayEquals(new double[] {1992.522139032, 2156.0, (-3461.399824553978), 1446.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = 'E';
      charArray0[2] = ';';
      charArray0[3] = 'm';
      charArray0[4] = '{';
      charArray0[5] = 'q';
      charArray0[6] = 'b';
      charArray0[7] = '0';
      MockRandom mockRandom0 = new MockRandom(2156);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'4', ';', 'm', '{', 'q', 'b', '0', 'E'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2743L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2743L);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      Character character0 = new Character('8');
      assertNotNull(character0);
      assertEquals('8', (char)character0);
      
      Character character1 = new Character(')');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals(')', (char)character1);
      
      Character character2 = Character.valueOf('j');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('j', (char)character2);
      
      Character character3 = new Character('z');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals('z', (char)character3);
      
      Character character4 = new Character('^');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertEquals('^', (char)character4);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character4;
      Character character5 = new Character('Y');
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertEquals('Y', (char)character5);
      
      characterArray0[1] = character5;
      characterArray0[2] = character0;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'^', 'Y', '8'}, charArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray1.length);
      
      MockRandom mockRandom0 = new MockRandom((-2743L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle((Object[]) stringArray0, (Random) mockRandom0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) ')';
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-2388), 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2388, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 93.0;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)31, (double) (byte)31);
      assertArrayEquals(new double[] {93.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      Long long0 = Long.getLong((String) null);
      assertNull(long0);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-879L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray1, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-2154), 93.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2154, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      ArrayUtils.reverse((Object[]) null);
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = ':';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'-', ':'}, charArray0);
      assertArrayEquals(new char[] {'-', ':', '-', ':'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 9);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 9;
      floatArray0[2] = (float) 9;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      ArrayUtils.reverse((Object[]) null);
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-6);
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-123), (byte) (-6), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)97);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-123), (byte) (-6), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-6), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-2976.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean boolean1 = new Boolean("org.apache.commons.lang3.mutable.MutableInt");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4);
      
      Boolean boolean5 = Boolean.valueOf(true);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean6 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)43);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)43}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.shift(shortArray0, (int) (byte)43, (int) (short)0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double((-1.0F));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double1);
      assertNotNull(object0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(object0.equals((Object)double0));
      assertEquals((-1.0), object0);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-45));
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-45)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Double double0 = new Double(701.326924);
      assertNotNull(double0);
      assertEquals(701.326924, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertNotNull(object0);
      assertEquals(701.326924, object0);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      char[] charArray0 = new char[8];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      
      ArrayUtils.swap(charArray0, (-1976529457), (-1976529457));
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1136;
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)5;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)28);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)58, (byte)76, (byte)5}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)58, (byte)76, (byte)5}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)58;
      intArray0[1] = (int) (byte)58;
      intArray0[2] = (int) (byte)5;
      intArray0[3] = (int) (byte)28;
      intArray0[4] = (-2045);
      intArray0[5] = (int) (short)1136;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-2045));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {58, 58, 5, 28, 1136}, intArray1);
      assertArrayEquals(new int[] {58, 58, 5, 28, (-2045), 1136}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(6, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (-4024));
      assertNull(longArray0);
      
      ArrayUtils.shift((boolean[]) null, (-1651));
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray1 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 93.0;
      objectArray0[2] = (Object) 93.0;
      objectArray0[3] = (Object) 93.0;
      objectArray0[4] = (Object) 93.0;
      objectArray0[5] = (Object) 93.0;
      objectArray0[6] = (Object) 93.0;
      ArrayUtils.swap(objectArray0, (-1037), (-1385));
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) mockRandom0;
      objectArray0[3] = (Object) mockRandom0;
      objectArray0[4] = (Object) mockRandom0;
      objectArray0[5] = (Object) mockRandom0;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(objectArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'B', (-1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 9);
      Class<Double> class0 = Double.class;
      classArray0[0] = class0;
      Class<Double> class1 = Double.TYPE;
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals("double", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotSame(class1, class0);
      assertNotNull(class1);
      assertFalse(class1.equals((Object)class0));
      
      classArray0[2] = class1;
      classArray0[6] = class1;
      ArrayUtils.shift(charArray0, (int) (byte)0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)7);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BjL]_I.UzBd;'";
      stringArray0[3] = stringArray0[1];
      ArrayUtils.swap((Object[]) stringArray0, (-1385), 5);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)109;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-63));
      assertArrayEquals(new byte[] {(byte)37, (byte) (-63), (byte) (-41), (byte)109}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(1, int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)109;
      shortArray0[1] = (short) (byte) (-41);
      shortArray0[2] = (short)3550;
      shortArray0[3] = (short) (byte)109;
      shortArray0[4] = (short) (byte) (-41);
      shortArray0[5] = (short) (byte)37;
      shortArray0[6] = (short) (byte) (-41);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)109, (short) (-41), (short)3550, (short)109, (short) (-41), (short)37, (short) (-41)}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertFalse(boolean0);
      
      Float float0 = new Float(48.0);
      assertNotNull(float0);
      assertEquals(48.0F, (float)float0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom(64L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short) (-41), (short)3550, (short)109, (short) (-41), (short)37, (short) (-41), (short)109}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-93), (int) (short) (-41));
      assertArrayEquals(new byte[] {(byte)37, (byte) (-63), (byte) (-41), (byte)109}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)37);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)37, (byte) (-63), (byte) (-41), (byte)109}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-41), (byte)109}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte) (-17);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (int) (byte)72);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)110;
      shortArray0[1] = (short)83;
      shortArray0[2] = (short) (-29128);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte) (-64);
      longArray0[1] = (long) (short)83;
      longArray0[2] = (long) (short)83;
      longArray0[3] = (long) (short) (-29128);
      longArray0[4] = (long) (short)83;
      longArray0[5] = (long) (short)110;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-64L), 83L, 83L, (-29128L), 83L, 110L}, longArray0);
      assertArrayEquals(new long[] {(-64L), 83L, 83L, (-29128L), 83L, 110L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray0, (long) (byte) (-1));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-64L), 83L, 83L, (-29128L), 83L, 110L}, longArray0);
      assertArrayEquals(new long[] {(-64L), 83L, 83L, (-29128L), 83L, 110L}, longArray2);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.subarray(longArray1, 1232, (-40));
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {(-64L), 83L, 83L, (-29128L), 83L, 110L}, longArray0);
      assertArrayEquals(new long[] {(-64L), 83L, 83L, (-29128L), 83L, 110L}, longArray1);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 510);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 0, 52);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      Object[] objectArray0 = new Object[0];
      Short[] shortArray0 = new Short[1];
      Short short0 = ArrayUtils.get(shortArray0, 0);
      assertNull(short0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean0);
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-64)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-64)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      long[] longArray2 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      long[] longArray3 = ArrayUtils.removeAllOccurrences(longArray2, (long) (byte) (-64));
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      long[] longArray4 = ArrayUtils.subarray(longArray2, 0, (-2146700872));
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray4);
      assertNotSame(longArray2, longArray4);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray4, longArray3);
      assertSame(longArray4, longArray1);
      assertNotSame(longArray4, longArray2);
      assertNotSame(longArray4, longArray0);
      assertNotNull(longArray4);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray4);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray4.length);
      assertFalse(longArray0.equals((Object)longArray3));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray3));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null);
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1091, 1091);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      doubleArray0[1] = 409.0924235051861;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 409.0924235051861);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {93.0, 409.0924235051861}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, 14);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-64);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-15), (byte) (-91), (byte) (-78), (byte)71, (byte)26, (byte) (-1), (byte) (-64)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-15), (byte) (-91), (byte) (-78), (byte)71, (byte)26, (byte) (-1), (byte) (-64)}, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-91);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-91L)}, longArray0);
      assertArrayEquals(new long[] {(-91L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray0, (long) (byte) (-64));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-91L)}, longArray0);
      assertArrayEquals(new long[] {(-91L)}, longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      long[] longArray3 = ArrayUtils.subarray(longArray0, (-1134), (-113));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {(-91L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2131);
      shortArray0[2] = (short) (-740);
      shortArray0[3] = (short)2697;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)26;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)26, (byte)26}, byteArray0);
      assertArrayEquals(new byte[] {(byte)26, (byte)26}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)26;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {26L}, longArray0);
      assertArrayEquals(new long[] {26L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray1, (long) (byte)26);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {26L}, longArray0);
      assertArrayEquals(new long[] {26L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      long[] longArray3 = ArrayUtils.subarray(longArray2, 137, (int) (byte)26);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {26L}, longArray0);
      assertArrayEquals(new long[] {26L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5057.6227;
      doubleArray0[1] = (-1.0);
      long[] longArray0 = new long[2];
      longArray0[0] = 14L;
      longArray0[1] = 296L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {14L, 296L}, longArray0);
      assertArrayEquals(new long[] {14L, 296L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 3443);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 670.9995F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 670.9995F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(6, int0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      int[] intArray0 = new int[5];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 6;
      intArray0[4] = 6;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[1], intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 105;
      intArray0[2] = 105;
      intArray0[3] = 105;
      intArray0[4] = (int) (short)0;
      intArray0[5] = 105;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 105, 105, 105, 0, 105}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)4103);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)4103}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 105;
      floatArray0[2] = (float) 105;
      floatArray0[3] = 594.807F;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 105.0F, 105.0F, 594.807F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2515.4185343;
      doubleArray0[1] = (-702.604851604);
      doubleArray0[2] = 1073.584126350248;
      doubleArray0[3] = 48.0;
      doubleArray0[4] = (-1718.903);
      doubleArray0[5] = (-3461.399824553978);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 164.6276798;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 1.5);
      assertArrayEquals(new double[] {2515.4185343, (-702.604851604), 1073.584126350248, 48.0, (-1718.903), (-3461.399824553978), 0.0, 1.0, 164.6276798}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(6, int0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(6);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(6, (int)integer0);
      
      Integer integer1 = Integer.getInteger("H+{*v.]\"s\"a^AIP(", integer0);
      assertNotNull(integer1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(6, (int)integer1);
      
      integerArray0[0] = integer1;
      Integer integer2 = new Integer(6);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertEquals(6, (int)integer2);
      
      integerArray0[1] = integer2;
      Integer integer3 = new Integer(6);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertEquals(6, (int)integer3);
      
      integerArray0[2] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      assertNotNull(integer4);
      assertEquals(8, integerArray0.length);
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertEquals(6, (int)integer4);
      
      integerArray0[3] = integer4;
      Integer integer5 = new Integer(83);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertEquals(83, (int)integer5);
      
      integerArray0[4] = integer5;
      Integer integer6 = new Integer(6);
      assertNotNull(integer6);
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer3));
      assertEquals(6, (int)integer6);
      
      integerArray0[5] = integer6;
      Integer integer7 = new Integer((int) integerArray0[1]);
      assertNotNull(integer7);
      assertEquals(8, integerArray0.length);
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)int0));
      assertEquals(6, (int)integer7);
      
      integerArray0[6] = integer7;
      Integer integer8 = new Integer((int) integerArray0[0]);
      assertNotNull(integer8);
      assertEquals(8, integerArray0.length);
      assertTrue(integer8.equals((Object)integer3));
      assertTrue(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)integer2));
      assertTrue(integer8.equals((Object)integer4));
      assertTrue(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer5));
      assertTrue(integer8.equals((Object)int0));
      assertEquals(6, (int)integer8);
      
      integerArray0[7] = integer8;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {6, 6, 6, 6, 83, 6, 6, 6}, intArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      Class<Long[]> class0 = Long[].class;
      Long[] longArray0 = new Long[8];
      Long long0 = new Long(2352L);
      assertNotNull(long0);
      assertEquals(2352L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0, class0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = 'Z';
      ArrayUtils.shift(charArray0, 299, 700, 700);
      assertArrayEquals(new char[] {'Z', '*', '*', 'Z'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(2142L);
      assertNotNull(long0);
      assertEquals(2142L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertNotNull(long1);
      assertEquals(6, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertEquals(2142L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[0]);
      assertNotNull(long2);
      assertEquals(6, longArray0.length);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals(2142L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[2]);
      assertNotNull(long3);
      assertEquals(6, longArray0.length);
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertEquals(2142L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((long) longArray0[2]);
      assertNotNull(long4);
      assertEquals(6, longArray0.length);
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertEquals(2142L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((long) longArray0[2]);
      assertNotNull(long5);
      assertEquals(6, longArray0.length);
      assertTrue(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long1));
      assertEquals(2142L, (long)long5);
      
      longArray0[5] = long5;
      Class<Long[]> class0 = Long[].class;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0, class0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)16067;
      shortArray0[1] = (short)16067;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)16067, (int) (short)16067);
      assertArrayEquals(new short[] {(short)16067, (short)16067}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(1, int0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (int) (short)16067;
      intArray0[2] = (-611);
      ArrayUtils.reverse(intArray0, 1, (-54));
      assertArrayEquals(new int[] {1, 16067, (-611)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short)16067;
      intArray1[1] = (-54);
      intArray1[2] = (int) (short)16067;
      intArray1[3] = 1;
      intArray1[4] = 1;
      intArray1[5] = (int) (short)16067;
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, 16067, (-611)}, intArray0);
      assertArrayEquals(new int[] {16067, (-54), 16067, 1, 1, 16067}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean1);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)16067, (short)16067}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      ArrayUtils.shift((char[]) null, 1, (-3946), (-611));
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-3716.0F);
      floatArray0[1] = (-3716.0F);
      floatArray0[2] = (-3716.0F);
      floatArray0[3] = (-3716.0F);
      floatArray0[4] = (-3716.0F);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2720;
      shortArray0[1] = (short)2720;
      shortArray0[3] = (short) (-28);
      shortArray0[4] = (short)2720;
      shortArray0[5] = (short) (-28);
      shortArray0[6] = (short) (-28);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2720);
      assertArrayEquals(new short[] {(short)2720, (short)2720, (short)0, (short) (-28), (short)2720, (short) (-28), (short) (-28)}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(4, int0);
      
      Object[] objectArray0 = new Object[4];
      Float float0 = new Float((-3716.0F));
      assertNotNull(float0);
      assertEquals((-3716.0F), (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)2720;
      doubleArray0[1] = (double) (-3716.0F);
      doubleArray0[2] = (double) (short)2720;
      doubleArray0[3] = (double) (-3716.0F);
      doubleArray0[4] = (double) (-3716.0F);
      doubleArray0[5] = (double) (short)2720;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, (int) (short)2720);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {2720.0, (-3716.0), 2720.0, (-3716.0), (-3716.0), 2720.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) float0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2721;
      shortArray0[1] = (short)48;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)48;
      doubleArray0[1] = (double) (short)48;
      doubleArray0[2] = (double) (short)2721;
      doubleArray0[3] = (double) (short)48;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (short)48;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.5, (-1969.9047162149));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {48.0, 48.0, 2721.0, 48.0, 0.0, 0.0, 48.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (short)2721);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {2721}, intArray0);
      assertEquals(1, intArray0.length);
      
      Short[] shortArray1 = new Short[8];
      shortArray1[0] = (Short) (short)48;
      shortArray1[1] = (Short) (short)2721;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, (int) shortArray1[1], (-970.876505067167));
      assertArrayEquals(new double[] {48.0, 48.0, 2721.0, 48.0, 0.0, 0.0, 48.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals((-1), int0);
      
      shortArray1[2] = (Short) (short)48;
      Short short0 = new Short((short)2721);
      assertNotNull(short0);
      assertEquals((short)2721, (short)short0);
      
      shortArray1[3] = short0;
      shortArray1[4] = (Short) (short)2721;
      shortArray1[5] = (Short) (short)48;
      shortArray1[6] = (Short) (short)2721;
      shortArray1[7] = (Short) (short)2721;
      Short short1 = new Short((short)1645);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)1645, (short)short1);
      
      Short short2 = ArrayUtils.get(shortArray1, (int) shortArray1[3], short1);
      assertNotNull(short2);
      assertEquals(8, shortArray1.length);
      assertFalse(short1.equals((Object)short0));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)1645, (short)short2);
      
      ArrayUtils.shift((int[]) null, 1353, (int) (short)2721, 0);
      ArrayUtils.swap((boolean[]) null, 0, (-424), 8192);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-109));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)57, (byte)57}, byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte)57}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte) (-127), (int) (byte)57, (-3094));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0, 36);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short)2276);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      try { 
        Double.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = '#';
      ArrayUtils.shift(charArray0, (-1385));
      assertArrayEquals(new char[] {'#', '3'}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '3';
      longArray0[1] = (long) '3';
      longArray0[2] = (long) (-1385);
      longArray0[3] = (long) (-1385);
      longArray0[4] = (long) '3';
      longArray0[5] = (long) (-1385);
      longArray0[6] = (long) '3';
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 51L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {51L, 51L, (-1385L), (-1385L), 51L, (-1385L), 51L}, longArray0);
      assertArrayEquals(new long[] {51L, 51L, 51L, (-1385L), (-1385L), 51L, (-1385L), 51L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1129);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1129)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '#';
      floatArray0[1] = (float) '#';
      floatArray0[2] = (-40.6F);
      floatArray0[3] = (float) '3';
      floatArray0[4] = (float) (-1385L);
      floatArray0[5] = (float) '3';
      floatArray0[6] = (-232.0F);
      floatArray0[7] = (float) 51L;
      floatArray0[8] = (float) '#';
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {35.0F, 35.0F, (-40.6F), 51.0F, (-1385.0F), 51.0F, (-232.0F), 51.0F, 35.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)48, (-1385));
      assertArrayEquals(new short[] {(short) (-1129)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = ',';
      charArray0[2] = 'x';
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'n';
      charArray1[1] = 'n';
      charArray1[2] = 'R';
      charArray1[3] = 'H';
      charArray1[4] = '|';
      charArray1[5] = 'x';
      charArray1[6] = 'x';
      charArray1[7] = '|';
      ArrayUtils.shift(charArray1, (int) (byte)0, (int) (byte)0, 1475);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'n', 'n', 'R', 'H', '|', 'x', 'x', '|'}, charArray1);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      Float float0 = new Float(100.0);
      assertNotNull(float0);
      assertEquals(100.0F, (float)float0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-118), 2660);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Character character0 = new Character('M');
      assertNotNull(character0);
      assertEquals('M', (char)character0);
      
      int int1 = ArrayUtils.hashCode((Object) character0);
      assertFalse(int1 == int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1129);
      shortArray0[1] = (short) (-1129);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1129), (short) (-1129)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = ArrayUtils.indexOf(shortArray0, (short) (-1129), (int) (short) (-1129));
      assertArrayEquals(new short[] {(short) (-1129), (short) (-1129)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'J';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'S';
      charArray0[0] = 'S';
      charArray0[5] = 'S';
      charArray0[6] = 'S';
      charArray0[7] = 'S';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000', 121);
      assertArrayEquals(new char[] {'S', 'B', 'B', 'S', '\u0000', 'S', 'S', 'S'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(4, int0);
      
      ArrayUtils.shift(charArray0, 121);
      assertArrayEquals(new char[] {'S', 'S', 'B', 'B', 'S', '\u0000', 'S', 'S'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      Character character0 = new Character(';');
      assertNotNull(character0);
      assertEquals(';', (char)character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      Long long0 = Long.getLong((String) null);
      assertNull(long0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-159L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) ';';
      longArray2[1] = (long) (char)character0;
      longArray2[2] = (long) (char)character0;
      longArray2[3] = (-159L);
      longArray2[4] = (long) (short)98;
      longArray2[5] = (long) ';';
      longArray2[6] = (long) (short)98;
      longArray2[7] = (-879L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {59L, 59L, 59L, (-159L), 98L, 59L, 98L, (-879L)}, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray2.length);
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.07035867344490586;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.07035867344490586;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1136;
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = '0';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'B', 218);
      assertArrayEquals(new char[] {'B', 'B', 'B', 'B', 'B', '0'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(4, int0);
      
      ArrayUtils.shift(charArray0, 69);
      assertArrayEquals(new char[] {'B', 'B', '0', 'B', 'B', 'B'}, charArray0);
      assertEquals(6, charArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'B';
      longArray0[1] = (long) '0';
      longArray0[2] = 0L;
      longArray0[3] = (-2144L);
      longArray0[4] = (long) 'B';
      longArray0[5] = (long) 'B';
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {66L, 48L, 0L, (-2144L), 66L, 66L}, longArray0);
      assertEquals(6, longArray0.length);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-459L), 218);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {66L, 48L, 0L, (-2144L), 66L, 66L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1104.8986F);
      floatArray0[1] = (-4887.729F);
      floatArray0[2] = 2055.2F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-5488.557F);
      floatArray0[5] = 466.7F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-2038.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1104.8986F), (-4887.729F), 2055.2F, 0.0F, (-5488.557F), 466.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1104.8986F), (-4887.729F), 2055.2F, 0.0F, (-5488.557F), 466.7F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      String string0 = "jOT@MWuC3Iupf)u&|n";
      Boolean boolean1 = new Boolean("jOT@MWuC3Iupf)u&|n");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4);
      
      Boolean boolean5 = Boolean.valueOf(true);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.indexOf(doubleArray0, 2241.50958837, 1.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) boolean1;
      objectArray0[1] = (Object) boolean5;
      objectArray0[2] = (Object) boolean1;
      objectArray0[3] = (Object) boolean5;
      objectArray0[4] = (Object) boolean2;
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) (-1);
      floatArray2[1] = (float) (-1);
      floatArray2[2] = 101.0F;
      floatArray2[3] = (float) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray2, 3334.0F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 101.0F, (-1.0F)}, floatArray2, 0.01F);
      assertEquals(4, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean5, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2515.4185343;
      doubleArray0[1] = (-702.604851604);
      doubleArray0[2] = 1073.584126350248;
      doubleArray0[3] = 48.0;
      doubleArray0[4] = (-1718.903);
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = new Boolean("The Array must not be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean2);
      assertNotNull(boolean3);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf((boolean) boolean3);
      assertNotNull(boolean4);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean2);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      booleanArray0[6] = boolean3;
      Boolean boolean6 = Boolean.valueOf("}*EH03k(#H[\u0003:XI");
      assertNotNull(boolean6);
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6);
      
      booleanArray0[7] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray1));
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray1, (-1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      
      ArrayUtils.shift(doubleArray0, 3009, 2, 122);
      assertArrayEquals(new double[] {2515.4185343, (-702.604851604), 1073.584126350248, 48.0, (-1718.903), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.addAll((Character[]) null, (Character[]) null);
      assertNull(characterArray0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'y');
      assertNull(charArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = ',';
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(1, bitSet1.length());
      assertEquals("{0}", bitSet1.toString());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)1, 2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) ',';
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 'a';
      doubleArray0[6] = (double) ',';
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) 2;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 44.0, (-1.0), 97.0, 44.0, (-1.0), 2.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[5] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      Float float0 = new Float(100.0);
      assertNotNull(float0);
      assertEquals(100.0F, (float)float0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[1] = '_';
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-118), 2660);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = '|';
      charArray0[2] = 'A';
      charArray0[3] = '/';
      charArray0[4] = '*';
      ArrayUtils.shift(charArray0, (-1), (-209), 3361);
      assertArrayEquals(new char[] {'f', '|', 'A', '/', '*'}, charArray0);
      assertEquals(5, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)2, 3361);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Integer integer0 = new Integer(3361);
      assertNotNull(integer0);
      assertEquals(3361, (int)integer0);
      
      String string0 = ArrayUtils.toString((Object) integer0);
      assertNotNull(string0);
      assertEquals("3361", string0);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Integer integer0 = Integer.valueOf((int) (byte) (-14));
      assertNotNull(integer0);
      assertEquals((-14), (int)integer0);
      
      Byte byte0 = new Byte((byte)88);
      assertNotNull(byte0);
      assertEquals((byte)88, (byte)byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, (int)  (-14), (Object) byte0);
      assertNotNull(object0);
      assertEquals(0, objectArray0.length);
      assertEquals((byte)88, object0);
      
      Object object1 = ArrayUtils.get(objectArray0, (int)  (-14));
      assertNull(object1);
      assertEquals(0, objectArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-15243));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)2;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)99);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)99, (byte)2}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      BitSet bitSet0 = new BitSet((byte)0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)99, (byte)2}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)99, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)99, (byte)2}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte)99;
      longArray0[2] = (long) (byte)2;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 99L, 2L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 99L, 2L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-649L);
      longArray0[1] = (-649L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 3452L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-649L), (-649L)}, longArray0);
      assertArrayEquals(new long[] {(-649L), (-649L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray2.length);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean1 = ArrayUtils.contains(longArray1, (-91L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-649L), (-649L)}, longArray0);
      assertArrayEquals(new long[] {(-649L), (-649L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2743L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2743L);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      Character character0 = new Character('8');
      assertNotNull(character0);
      assertEquals('8', (char)character0);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, (-1952));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[21];
      doubleArray0[14] = (double) (-1952);
      doubleArray0[1] = (double) (byte) (-15);
      doubleArray0[2] = 1.0;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(21, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)59;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-41), (byte)15, (byte)59}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2634.524611);
      doubleArray0[1] = (double) (byte)59;
      doubleArray0[2] = (double) (byte) (-41);
      doubleArray0[3] = (double) (byte) (-41);
      doubleArray0[4] = (double) (byte) (-41);
      doubleArray0[5] = (double) (byte) (-41);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-41.0), (double) (byte)59);
      assertArrayEquals(new double[] {(-2634.524611), 59.0, (-41.0), (-41.0), (-41.0), (-41.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)59);
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-41), (byte)15, (byte)59}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      Long long0 = Long.getLong("b");
      assertNull(long0);
      
      Long long1 = new Long((byte)59);
      assertNotNull(long1);
      assertEquals(59L, (long)long1);
      
      Long long2 = new Long((-997L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertEquals((-997L), (long)long2);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 2514L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.shift(booleanArray0, (int) (byte)59);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('V');
      assertNotNull(character0);
      assertEquals('V', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('`');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('`', (char)character1);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'A');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'V', 'A'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift(charArray0, 3752);
      assertArrayEquals(new char[] {'V', 'A'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray1, (Random) mockRandom0);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int int0 = (-1516);
      int int1 = 386;
      ArrayUtils.swap(longArray0, (-1516), 386);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = new Object[9];
      short short0 = (short) (-339);
      Short short1 = new Short((short) (-339));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-339), (short)short1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1516);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) short1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = ',';
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 40, 83);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 40, 18);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)2;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)99);
      assertEquals(23, byteArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte) (-1);
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)99;
      floatArray0[7] = (float) (byte)99;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {99.0F, 99.0F, 0.0F, (-1.0F), (-1.0F), 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)99, (int) (byte)2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-3367.0F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-421);
      shortArray0[2] = (short)1690;
      shortArray0[3] = (short) (-4005);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-421), (short)1690, (short) (-4005)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-421), (short)1690, (short) (-4005)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = ArrayUtils.get(objectArray0, 785);
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) (short)1690;
      objectArray0[2] = (Object) (short)1690;
      objectArray0[3] = (Object) (short) (-4005);
      Object object1 = ArrayUtils.toPrimitive(objectArray0[2]);
      assertNotNull(object1);
      assertEquals(7, objectArray0.length);
      assertEquals((short)1690, object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) (short)1690;
      objectArray0[6] = (Object) (short) (-4005);
      Object object2 = new Object();
      assertNotNull(object2);
      
      Object[] objectArray1 = ArrayUtils.addFirst(objectArray0, object2);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      assertEquals(8, objectArray1.length);
      assertEquals(7, objectArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      ArrayUtils.reverse(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-4005), (short)1690, (short) (-421), (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((short)0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(196.25);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(196.25, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((short)1690);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(1690.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((short) (-4005));
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((-4005.0), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(645.83020338);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals(645.83020338, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = Double.valueOf((-1392.8774339792));
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertEquals((-1392.8774339792), (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((-1069.95641689));
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertEquals((-1069.95641689), (double)double7, 0.01);
      
      doubleArray0[7] = double7;
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-217), (int)(short)0, 2198).when(comparator0).compare(anyDouble() , anyDouble());
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0, comparator0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2131);
      byte byte0 = (byte)2;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)0;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)18);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte) (-1), (byte) (-36), (byte) (-36), (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (int) (byte)99;
      intArray0[3] = (int) (byte)99;
      intArray0[4] = 435;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 435, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-41);
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)31, 1.0);
      assertArrayEquals(new double[] {93.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)31);
      assertArrayEquals(new byte[] {(byte)31, (byte)31, (byte) (-41), (byte) (-41)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Long long0 = Long.getLong((String) null);
      assertNull(long0);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-879L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
      
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-68), 0);
      assertArrayEquals(new byte[] {(byte)31, (byte)31, (byte) (-41), (byte) (-41)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray0, (byte) (-41));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)31, (byte)31, (byte) (-41)}, byteArray2);
      assertArrayEquals(new byte[] {(byte)31, (byte)31, (byte) (-41), (byte) (-41)}, byteArray0);
      assertEquals(3, byteArray2.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      ArrayUtils.reverse((byte[]) null, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short) (-4642));
      assertNotNull(short0);
      assertEquals((short) (-4642), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-2351));
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-2351), (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-2351));
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short) (-2351), (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-4024));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short) (-4024), (short)short3);
      
      shortArray0[3] = short3;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-77);
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77), (byte) (-1), (byte)22, (byte)33, (byte) (-109), (byte) (-77), (byte) (-1), (byte)99, (byte)2}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-77);
      longArray0[1] = (long) (short)shortArray0[3];
      longArray0[2] = (long) (byte)33;
      longArray0[3] = (long) (short)shortArray0[2];
      longArray0[4] = (long) (byte)2;
      longArray0[5] = (long) (short)shortArray0[0];
      longArray0[6] = 326L;
      longArray0[7] = (long) (byte)33;
      longArray0[8] = (long) (short)shortArray0[2];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1091, (int) (byte) (-77));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-77L), (-4024L), 33L, (-2351L), 2L, (-4642L), 326L, 33L, (-2351L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      int[] intArray0 = new int[6];
      long[] longArray0 = new long[1];
      longArray0[0] = (-2147483648L);
      long[] longArray1 = ArrayUtils.add(longArray0, (long) 0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2147483648L)}, longArray0);
      assertArrayEquals(new long[] {(-2147483648L), 0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 184);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, (-1), 133, 3268);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {(-2147483648L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      
      int int1 = ArrayUtils.indexOf(intArray0, 0, (-1134));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.reverse(byteArray0, (-3387), (int) (byte) (-119));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 93.0;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)31, (double) (byte)31);
      assertArrayEquals(new double[] {93.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      Long long0 = Long.getLong((String) null);
      assertNull(long0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[0];
      ArrayUtils.shift(longArray1, (int) (byte)31);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (int) (byte)31);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 3439L;
      longArray0[1] = (-3088L);
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, 40, 40);
      assertArrayEquals(new long[] {3439L, (-3088L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String string0 = ArrayUtils.toString((Object) boolean0);
      assertNotNull(string0);
      assertEquals("true", string0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)100, 0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, (-1));
      assertNull(intArray0);
      
      ArrayUtils.shift(longArray0, 422, 40, 422);
      assertArrayEquals(new long[] {3439L, (-3088L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-99);
      ArrayUtils.reverse(byteArray0, (int) (byte) (-1), 1);
      assertArrayEquals(new byte[] {(byte)26, (byte) (-84), (byte) (-1), (byte) (-119), (byte) (-38), (byte)105, (byte) (-99)}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(345);
      assertNotNull(integer0);
      assertEquals(345, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte1));
      assertEquals((byte) (-14), object0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)16067, 0);
      assertEquals((-1), int0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)16067;
      doubleArray0[1] = 2667.1591796875;
      doubleArray0[2] = (double) 345;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte) (-14);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {16067.0, 2667.1591796875, 345.0, 0.0, (-14.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {16067.0, 2667.1591796875, 345.0, 0.0, (-14.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, 1599);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(345);
      assertNotNull(integer0);
      assertEquals(345, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte1));
      assertEquals((byte) (-14), object0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)16067, (-8));
      assertEquals((-1), int0);
      
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2743L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2743L);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      ArrayUtils.swap((char[]) null, (int) (byte) (-1), (-163));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short) (-1), (short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short) (-1)}, shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-1);
      ArrayUtils.shift(doubleArray0, (int) (byte) (-1), (int) (byte) (-1), 1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Character character0 = Character.valueOf('M');
      assertNotNull(character0);
      assertEquals('M', (char)character0);
      
      int int1 = ArrayUtils.hashCode((Object) character0);
      assertFalse(int1 == int0);
      
      float[] floatArray0 = new float[5];
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = ArrayUtils.indexOf(shortArray0, (short)0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 2147067421, (-3140), (-1));
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      ArrayUtils.swap((int[]) null, 467, 822);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)9;
      Character character0 = new Character('O');
      assertNotNull(character0);
      assertEquals('O', (char)character0);
      
      Character character1 = new Character('?');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('?', (char)character1);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character1;
      characterArray0[4] = character1;
      characterArray0[5] = character1;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'A');
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'O', 'O', 'O', '?', '?', '?'}, charArray1);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray1.length);
      
      ArrayUtils.swap((int[]) null, (-1155), (int) (short)2104, 1058);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2735.08);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-1);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1), (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte)91, (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, int0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte)91;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) (byte)104;
      longArray0[4] = (long) (byte)104;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 91L, 1L, 104L, 104L}, longArray1);
      assertArrayEquals(new long[] {(-1L), 91L, 1L, 104L, 104L}, longArray0);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-797), byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-797);
      doubleArray0[1] = (double) (-797);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-797.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-797.0), (-797.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-797.0), (-797.0), (-797.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Long long0 = new Long((-797));
      assertNotNull(long0);
      assertEquals((-797L), (long)long0);
      
      Long long1 = new Long((-1L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      
      Long[] longArray1 = new Long[3];
      longArray1[0] = long0;
      longArray1[1] = long0;
      Long long2 = new Long((-1L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals((-1L), (long)long2);
      
      Long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray1, long2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertFalse(longArray2.equals((Object)longArray1));
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, '9');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'9'}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(1, charArray1.length);
      assertEquals(0, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2743L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2743L);
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst((char[]) null, 'S');
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S'}, charArray1);
      assertEquals(1, charArray1.length);
      
      char[] charArray2 = ArrayUtils.removeElement(charArray1, 'q');
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'S'}, charArray1);
      assertArrayEquals(new char[] {'S'}, charArray2);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray1));
      
      int int0 = ArrayUtils.indexOf(longArray0, (-2743L), (-2952));
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      Double double0 = new Double(2101.213850670372);
      assertNotNull(double0);
      assertEquals(2101.213850670372, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) double0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)5;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.shift((int[]) null, 225, 0, 0);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-3367.0F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-421);
      shortArray0[2] = (short)1690;
      shortArray0[3] = (short) (-4005);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-421), (short)1690, (short) (-4005)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-421), (short)1690, (short) (-4005)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = ArrayUtils.get(objectArray0, 785);
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) (short)1690;
      objectArray0[2] = (Object) (short)1690;
      objectArray0[3] = (Object) (short) (-4005);
      Object object1 = ArrayUtils.toPrimitive(objectArray0[2]);
      assertNotNull(object1);
      assertEquals(7, objectArray0.length);
      assertEquals((short)1690, object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) (short)1690;
      objectArray0[6] = (Object) (short) (-4005);
      Object object2 = new Object();
      assertNotNull(object2);
      
      Object[] objectArray1 = ArrayUtils.addFirst(objectArray0, object2);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      assertEquals(8, objectArray1.length);
      assertEquals(7, objectArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      ArrayUtils.reverse(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-4005), (short)1690, (short) (-421), (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((short)0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(196.25);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(196.25, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((short)1690);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(1690.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((short) (-4005));
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((-4005.0), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(645.83020338);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals(645.83020338, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = Double.valueOf((-1392.8774339792));
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals((-1392.8774339792), (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((-1069.95641689));
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertEquals((-1069.95641689), (double)double7, 0.01);
      
      doubleArray0[7] = double7;
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((int)(short)0, 2152).when(comparator0).compare(anyDouble() , anyDouble());
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0, comparator0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 48.0;
      doubleArray0[1] = (-1718.903);
      doubleArray0[2] = (-1601.23952);
      doubleArray0[3] = (-2568.8679);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1718.903));
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {48.0, (-1718.903), (-1601.23952), (-2568.8679)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.shift((long[]) null, 100, 100, 100);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 100;
      floatArray0[1] = (float) 100;
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      long[] longArray1 = new long[4];
      longArray1[0] = (long) 100;
      longArray1[1] = (long) 100;
      longArray1[2] = (long) 100;
      longArray1[3] = (long) 100;
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray1, 100L);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {100L, 100L, 100L, 100L}, longArray1);
      assertEquals(0, longArray2.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.subarray(longArray2, (-1134), (-1134));
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray2);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertArrayEquals(new long[] {100L, 100L, 100L, 100L}, longArray1);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray2));
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)2;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)99);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)99, (byte)2}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2);
      assertEquals("{4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)99, (byte)2}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)99, (byte)2}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)99, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)99, (byte)2}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte)99;
      longArray0[2] = (long) (byte)2;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 99L, 2L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 99L, 2L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      char[] charArray0 = new char[8];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '8', (-1836));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(charArray0, 65536);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '8';
      longArray0[1] = (long) 65536;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {56L, 65536L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-2144L);
      longArray1[1] = (long) 218;
      longArray1[2] = (long) 69;
      longArray1[3] = (long) '8';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, 65536L, 65536);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotSame(longArray1, longArray0);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-2144L), 218L, 69L, 56L}, longArray1);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[5];
      int int1 = bitSet0.previousClearBit(218);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-2144L), 218L, 69L, 56L}, longArray1);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(int1 == int0);
      assertEquals(218, int1);
      
      objectArray0[0] = (Object) 56L;
      objectArray0[1] = (Object) 69L;
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = (Object) 69L;
      Object object0 = ArrayUtils.get(objectArray0, 69);
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[4] = null;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) false;
      ArrayUtils.shuffle(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.addAll((Character[]) null, (Character[]) null);
      assertNull(characterArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 5870.0592084);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'A';
      charArray0[2] = 'R';
      ArrayUtils.shift(charArray0, 175);
      assertArrayEquals(new char[] {'R', 'k', 'A'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Character character0 = Character.valueOf('k');
      assertNotNull(character0);
      assertEquals('k', (char)character0);
      
      Character[] characterArray1 = ArrayUtils.removeAllOccurences((Character[]) null, character0);
      assertNull(characterArray1);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'R', 'k', 'A'}, charArray0);
      assertArrayEquals(new char[] {'R', 'k', 'A', 'R', 'k', 'A'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2729);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0, 36);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short)2276);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      try { 
        Double.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2948;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)2948}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      
      Float float0 = new Float(100.0);
      assertNotNull(float0);
      assertEquals(100.0F, (float)float0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom((short)2948);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)2948}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)99;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)34, (int) (byte) (-118));
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-118), (byte) (-118), (byte) (-118), (byte)99}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-118));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-118), (byte) (-118), (byte) (-118), (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-118), (byte) (-118), (byte)99}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[0] = (double) (-1);
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (-1);
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (byte)0);
      assertNull(shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean boolean1 = new Boolean("jOT@MWuC3Iupf)u&|n");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4);
      
      Boolean boolean5 = Boolean.valueOf(true);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean4;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean4;
      booleanArray0[4] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean4);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean5));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      
      ArrayUtils.shift(booleanArray1, 0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean5));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2976.0F);
      doubleArray0[1] = (double) (-2976.0F);
      doubleArray0[2] = (double) (-2976.0F);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 122;
      doubleArray0[5] = (-868.0651998814569);
      ArrayUtils.shift(doubleArray0, 0, 0, 3009);
      assertArrayEquals(new double[] {(-2976.0), (-2976.0), (-2976.0), 0.0, 122.0, (-868.0651998814569)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ArrayUtils.swap(byteArray0, 2, 3859);
      assertArrayEquals(new byte[] {(byte)8}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((byte)8);
      assertNotNull(short0);
      assertEquals((short)8, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte)8);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)8, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)0);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)0, (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)0);
      assertNotNull(short3);
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short)0, (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)1455);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertEquals((short)1455, (short)short4);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean1;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('J');
      assertNotNull(character0);
      assertEquals('J', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('U');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('U', (char)character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.toArray(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte)0, 4976, (-1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short) (-2019);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)98, (short) (-2019), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)98, (short) (-2019), (short)0, (short)0, (short)98, (short) (-2019), (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst((double[]) null, (double) (short)0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Long long0 = new Long((short)0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((-1L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      
      Long[] longArray1 = new Long[6];
      longArray1[0] = long1;
      longArray1[1] = long1;
      longArray1[2] = long1;
      longArray1[3] = long0;
      longArray1[4] = long1;
      longArray1[5] = long0;
      Long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray1, long1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotNull(longArray2);
      assertEquals(2, longArray2.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(long1.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      assertTrue(integer0.equals((Object)int0));
      
      MutableInt mutableInt1 = new MutableInt(0);
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals("0", mutableInt1.toString());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte)5, (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'O';
      charArray0[2] = 'b';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'b', 'O', 'b'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray1, 'k');
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'b', 'O', 'b'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) (byte)88;
      doubleArray0[3] = (double) 'b';
      doubleArray0[4] = (double) 'O';
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 88.0, 98.0, 79.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 88.0, 98.0, 79.0, 2.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray2 = new boolean[9];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = false;
      booleanArray2[4] = true;
      booleanArray2[5] = false;
      booleanArray2[6] = true;
      booleanArray2[7] = false;
      booleanArray2[8] = false;
      ArrayUtils.shuffle(booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, true, false, false, true}, booleanArray2));
      assertEquals(9, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = '$';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) ']';
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '$';
      doubleArray0[1] = (double) '$';
      doubleArray0[2] = (double) 184;
      doubleArray0[3] = (double) 184;
      doubleArray0[5] = (double) ']';
      Short short0 = new Short((short) (-528));
      assertNotNull(short0);
      assertEquals((short) (-528), (short)short0);
      
      Short[] shortArray0 = new Short[6];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-528), (short) (-528), (short) (-528), (short) (-528), (short) (-528), (short) (-528)}, shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) ']';
      intArray1[1] = (int) ']';
      intArray1[2] = 184;
      intArray1[3] = (int) (short)shortArray0[3];
      intArray1[4] = (int) ']';
      intArray1[5] = (int) '$';
      intArray1[6] = (int) (short)shortArray0[5];
      boolean boolean0 = ArrayUtils.isSorted(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {93, 93, 184, (-528), 93, 36, (-528)}, intArray1);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean0);
      
      ArrayUtils.reverse(charArray0, (int) shortArray0[4], (int) shortArray0[3]);
      assertArrayEquals(new char[] {']', '$', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(6, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 184, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2, 304);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(boolean0);
      
      ArrayUtils.reverse((char[]) null, 125, 1969);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      Long long0 = Long.getLong((String) null);
      assertNull(long0);
      
      Long long1 = new Long((-1722L));
      assertNotNull(long1);
      assertEquals((-1722L), (long)long1);
      
      Long long2 = new Long((-52L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertEquals((-52L), (long)long2);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = null;
      longArray0[2] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1722L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1722L), (-1722L), (-1722L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      ArrayUtils.shift((boolean[]) null, (-942));
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null, (long) (-4024));
      assertNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "', has a length less than 2");
      assertNull(stringArray0);
      
      Long long0 = Long.getLong((String) null);
      assertNull(long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = null;
      longArray0[1] = null;
      longArray0[2] = null;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-3269L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-3269L), (-3269L), (-3269L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray1, longArray1);
      assertArrayEquals(new long[] {(-3269L), (-3269L), (-3269L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ArrayUtils.swap(byteArray0, 2, 3859);
      assertArrayEquals(new byte[] {(byte)8}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((byte)8);
      assertNotNull(short0);
      assertEquals((short)8, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte)8);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)8, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)0);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)0, (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)0);
      assertNotNull(short3);
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short)0, (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)1455);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertEquals((short)1455, (short)short4);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (byte)8;
      doubleArray0[5] = (double) 2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (double) (short)0);
      assertArrayEquals(new double[] {2.0, (-1.0), (-1.0), 0.0, 8.0, 2.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(3, int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)8}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray0 = new Long[4];
      Long long0 = Long.getLong((String) null);
      assertNull(long0);
      
      longArray0[0] = null;
      Long long1 = new Long((long) shortArray0[0]);
      assertNotNull(long1);
      assertEquals(6, shortArray0.length);
      assertEquals(8L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-997L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertEquals((-997L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-5368L));
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals((-5368L), (long)long3);
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1871L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1871L, 8L, (-997L), (-5368L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Character character0 = new Character('M');
      assertNotNull(character0);
      assertEquals('M', (char)character0);
      
      int int1 = ArrayUtils.hashCode((Object) character0);
      assertFalse(int1 == int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 'M';
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 77.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 77.0F, (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      ArrayUtils.swap(doubleArray0, (-3), 4, 2);
      assertArrayEquals(new double[] {2.0, (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)85}, byteArray0);
      assertArrayEquals(new byte[] {(byte)85}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[11];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 9);
      assertEquals(11, booleanArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "L({nAced?Fe~";
      stringArray0[1] = "BjL]_D.UdZ'";
      stringArray0[2] = "L({nAced?Fe~";
      stringArray0[3] = "L({nAced?Fe~";
      stringArray0[4] = "BjL]_D.UdZ'";
      stringArray0[5] = "BjL]_D.UdZ'";
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      ArrayUtils.swap(longArray0, 0, 608, 0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      ArrayUtils.swap(byteArray0, (int) (byte) (-89), 0, (int) (byte) (-89));
      assertArrayEquals(new byte[] {(byte)107}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1788L), 608);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 0, 52);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      Short[] shortArray0 = new Short[1];
      Short short0 = ArrayUtils.get(shortArray0, 0);
      assertNull(short0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1320L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray0 = new int[0];
      long[] longArray2 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      
      Long long0 = new Long((-611L));
      assertNotNull(long0);
      assertEquals((-611L), (long)long0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object0);
      assertEquals((-611L), object0);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) (-4024);
      longArray0[2] = 1L;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) (-4024);
      longArray0[5] = (long) 2;
      ArrayUtils.swap(longArray0, (-4024), 2210, (-4024));
      assertArrayEquals(new long[] {2L, (-4024L), 1L, 2L, (-4024L), 2L}, longArray0);
      assertEquals(6, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Float[] floatArray1 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray1);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-2147133299));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2147133299, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('V');
      assertNotNull(character0);
      assertEquals('V', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('`');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('`', (char)character1);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'A');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'V', 'A'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.shift(doubleArray0, 2156);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-797), byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-1246);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1246L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1301);
      shortArray0[1] = (short) (-640);
      shortArray0[2] = (short)2;
      shortArray0[4] = (short)32;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-797), byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte) (-1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)566;
      shortArray0[1] = (short)1164;
      shortArray0[2] = (short) (-781);
      shortArray0[3] = (short)1782;
      shortArray0[4] = (short)100;
      shortArray0[5] = (short) (-3119);
      shortArray0[6] = (short) (-10455);
      ArrayUtils.shift(shortArray0, (-1649));
      assertArrayEquals(new short[] {(short)100, (short) (-3119), (short) (-10455), (short)566, (short)1164, (short) (-781), (short)1782}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift((short[]) null, (-1835), (-1835), (-1835));
      Double double0 = new Double((-1835));
      assertNotNull(double0);
      assertEquals((-1835.0), (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertNotNull(object0);
      assertEquals((-1835.0), object0);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)94;
      shortArray0[1] = (short) (byte)94;
      shortArray0[2] = (short) (byte)94;
      shortArray0[3] = (short) (-2952);
      ArrayUtils.shift(shortArray0, 2, (-1193), 1463);
      assertArrayEquals(new short[] {(short)94, (short)94, (short)94, (short) (-2952)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Double double0 = new Double(402.3);
      assertNotNull(double0);
      assertEquals(402.3, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      doubleArray0[1] = 409.0924235051861;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 409.0924235051861);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {93.0, 409.0924235051861}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short)919;
      ArrayUtils.shift(shortArray0, 1642, 116, (int) (short)32);
      assertArrayEquals(new short[] {(short)32, (short)919}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Double double0 = new Double((short)32);
      assertNotNull(double0);
      assertEquals(32.0, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertNotNull(object0);
      assertEquals(32.0, object0);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-115);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)64);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)64, (byte) (-115)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)64, (byte) (-115)}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      ArrayUtils.reverse((Object[]) null);
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '\u0000';
      doubleArray0[3] = (double) '\u0000';
      int int0 = ArrayUtils.indexOf(doubleArray0, (-793.42));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(charArray1, (-1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(2, characterArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (byte) (-6), 0, 1.5);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = ':';
      charArray0[2] = 'J';
      charArray0[3] = '&';
      charArray0[4] = 'P';
      charArray0[5] = 'v';
      charArray0[6] = '[';
      charArray0[7] = '&';
      boolean boolean0 = ArrayUtils.contains(charArray0, '[');
      assertArrayEquals(new char[] {'', ':', 'J', '&', 'P', 'v', '[', '&'}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'y';
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'y';
      intArray0[1] = (int) 'N';
      intArray0[2] = (int) 'N';
      intArray0[3] = (int) 'N';
      intArray0[4] = (int) 'N';
      intArray0[5] = (int) 'N';
      intArray0[6] = (int) 'y';
      intArray0[7] = (int) 'N';
      intArray0[8] = (int) 'N';
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {78, 78, 78, 78, 78, 121, 78, 78, 121}, intArray0);
      assertEquals(9, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 121, (double) 78);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'N';
      longArray0[1] = (long) 78;
      longArray0[2] = (-997L);
      int int1 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertArrayEquals(new long[] {78L, 78L, (-997L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)321;
      shortArray0[1] = (short)1371;
      shortArray0[2] = (short)18688;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-494);
      shortArray0[6] = (short)1365;
      shortArray0[7] = (short)2063;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)18688, 18688);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)321, (short)1371, (short)18688, (short)2, (short)0, (short) (-494), (short)1365, (short)2063}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-110), (byte)15, (byte)59, (byte) (-1), (byte) (-73), (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)97);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-110), (byte)15, (byte)59, (byte) (-1), (byte) (-73), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)15, (byte)59, (byte) (-1), (byte) (-73), (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)15;
      longArray0[2] = 2147483647L;
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = 3452L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2147483647L);
      assertArrayEquals(new long[] {0L, 15L, 2147483647L, (-1L), 3452L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[11];
      String[] stringArray0 = new String[6];
      stringArray0[0] = "BjL]_DI.UdZ'";
      stringArray0[1] = "BjL]_DI.UdZ'";
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1267);
      shortArray0[1] = (short) (-1817);
      shortArray0[2] = (short)648;
      shortArray0[3] = (short)182;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 874, (int) (short)182);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1267), (short) (-1817), (short)648, (short)182}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray0, (short)115);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-1267), (short) (-1817), (short)648, (short)182}, shortArray0);
      assertArrayEquals(new short[] {(short)115, (short) (-1267), (short) (-1817), (short)648, (short)182}, shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      ArrayUtils.hashCode((Object) "BjL]_DI.UdZ'");
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      char[] charArray1 = ArrayUtils.subarray((char[]) null, 56, 1070);
      assertNull(charArray1);
      
      Character character0 = Character.valueOf('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      Character[] characterArray0 = ArrayUtils.add((Character[]) null, character0);
      assertNotNull(characterArray0);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (-1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Float[] floatArray2 = new Float[6];
      floatArray2[0] = (Float) (-1.0F);
      floatArray2[1] = (Float) (-1.0F);
      Float float0 = new Float((float) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray2[2] = float0;
      floatArray2[3] = (Float) (-1.0F);
      floatArray2[4] = (Float) (-1.0F);
      floatArray2[5] = (Float) (-1.0F);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray2, 1074);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1074, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 0, 52);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      Character character0 = new Character('Z');
      assertNotNull(character0);
      assertEquals('Z', (char)character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(984.664008915516);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(984.664008915516, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(4475.7727868504);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals(4475.7727868504, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      assertNotNull(double5);
      assertEquals(9, doubleArray0.length);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals(0.0, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(Double.NaN);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals(Double.NaN, (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(984.664008915516);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertEquals(984.664008915516, (double)double7, 0.01);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(1.0);
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertEquals(1.0, (double)double8, 0.01);
      
      doubleArray0[8] = double8;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 3702);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3702, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 409.0924235051861);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) bitSet0;
      BitSet bitSet1 = (BitSet)bitSet0.clone();
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.size());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = 'D';
      charArray0[2] = 'Z';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-2837), (-39), (-3329));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 1391);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 156;
      ArrayUtils.shift(doubleArray0, 2, (-901), 0);
      assertArrayEquals(new double[] {156.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-2976.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean boolean1 = new Boolean("org.apache.commons.lang3.mutable.MutableInt");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4);
      
      Boolean boolean5 = Boolean.valueOf(true);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.shift(booleanArray1, (int) (short)0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (short)0, 122, 3009);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.insert(1, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = 45L;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      longArray0[8] = (long) 1;
      long[] longArray1 = ArrayUtils.insert(1, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 1L, 45L, 1L, 1L, 1L, 1L, 1L, 1L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(18, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 45L;
      objectArray0[1] = (Object) 45L;
      objectArray0[2] = (Object) 1L;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[2]);
      assertEquals(3, objectArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3940, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3940, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      charArray0[1] = 'd';
      charArray0[2] = 'q';
      charArray0[2] = '#';
      charArray0[4] = 'y';
      charArray0[5] = 'z';
      charArray0[6] = ')';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '8');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'N', 'd', '#', '\u0000', 'y', 'z', ')'}, charArray0);
      assertArrayEquals(new char[] {'8', 'N', 'd', '#', '\u0000', 'y', 'z', ')'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) '#';
      longArray0[1] = (long) 'q';
      longArray0[2] = (-2996L);
      longArray0[3] = (long) 'N';
      longArray0[4] = (long) ')';
      longArray0[5] = (-2148L);
      longArray0[6] = (long) 'y';
      longArray0[7] = (long) 'N';
      longArray0[8] = (long) '8';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3009, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3009, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = 0;
      ArrayUtils.reverse(booleanArray0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-970.876505067167);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1515.6);
      doubleArray0[4] = (double) 0;
      double double0 = (-11.561749096755001);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-11.561749096755001));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-970.876505067167), 0.0, (-1515.6), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-970.876505067167), 0.0, (-1515.6), 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-970.876505067167);
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) (-1515.6);
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) (-1515.6);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[1], (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 0);
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 3215, 1874);
      assertNull(charArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      MutableInt mutableInt0 = new MutableInt(2359);
      assertEquals(2359, (int)mutableInt0.getValue());
      assertEquals((byte)55, mutableInt0.byteValue());
      assertEquals(2359, (int)mutableInt0.toInteger());
      assertEquals((short)2359, mutableInt0.shortValue());
      assertEquals("2359", mutableInt0.toString());
      assertEquals(2359.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2359, mutableInt0.intValue());
      assertEquals(2359L, mutableInt0.longValue());
      assertEquals(2359.0F, mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertEquals(2359, (int)mutableInt0.getValue());
      assertEquals((byte)55, mutableInt0.byteValue());
      assertEquals(2359, (int)mutableInt0.toInteger());
      assertEquals((short)2359, mutableInt0.shortValue());
      assertEquals("2359", mutableInt0.toString());
      assertEquals(2359.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2359, mutableInt0.intValue());
      assertEquals(2359L, mutableInt0.longValue());
      assertEquals(2359.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2359, mutableInt1.intValue());
      assertEquals("2359", mutableInt1.toString());
      assertEquals(2359L, mutableInt1.longValue());
      assertEquals((byte)55, mutableInt1.byteValue());
      assertEquals(2359, (int)mutableInt1.toInteger());
      assertEquals(2359.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(2359, (int)mutableInt1.getValue());
      assertEquals((short)2359, mutableInt1.shortValue());
      assertEquals(2359.0, mutableInt1.doubleValue(), 0.01);
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      int int0 = mutableInt0.compareTo(mutableInt1);
      assertEquals(2359, (int)mutableInt0.getValue());
      assertEquals((byte)55, mutableInt0.byteValue());
      assertEquals(2359, (int)mutableInt0.toInteger());
      assertEquals((short)2359, mutableInt0.shortValue());
      assertEquals("2359", mutableInt0.toString());
      assertEquals(2359.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2359, mutableInt0.intValue());
      assertEquals(2359L, mutableInt0.longValue());
      assertEquals(2359.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2359, mutableInt1.intValue());
      assertEquals("2359", mutableInt1.toString());
      assertEquals(2359L, mutableInt1.longValue());
      assertEquals((byte)55, mutableInt1.byteValue());
      assertEquals(2359, (int)mutableInt1.toInteger());
      assertEquals(2359.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(2359, (int)mutableInt1.getValue());
      assertEquals((short)2359, mutableInt1.shortValue());
      assertEquals(2359.0, mutableInt1.doubleValue(), 0.01);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertEquals(0, int0);
      
      Integer integer0 = mutableInt0.getValue();
      assertEquals(2359, (int)mutableInt0.getValue());
      assertEquals((byte)55, mutableInt0.byteValue());
      assertEquals(2359, (int)mutableInt0.toInteger());
      assertEquals((short)2359, mutableInt0.shortValue());
      assertEquals("2359", mutableInt0.toString());
      assertEquals(2359.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2359, mutableInt0.intValue());
      assertEquals(2359L, mutableInt0.longValue());
      assertEquals(2359.0F, mutableInt0.floatValue(), 0.01F);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotNull(integer0);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2359, (int)integer0);
      
      Integer integer1 = new Integer(2359);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2359, (int)integer1);
      
      mutableInt1.setValue((Number) mutableInt0);
      assertEquals(2359, (int)mutableInt0.getValue());
      assertEquals((byte)55, mutableInt0.byteValue());
      assertEquals(2359, (int)mutableInt0.toInteger());
      assertEquals((short)2359, mutableInt0.shortValue());
      assertEquals("2359", mutableInt0.toString());
      assertEquals(2359.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2359, mutableInt0.intValue());
      assertEquals(2359L, mutableInt0.longValue());
      assertEquals(2359.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2359, mutableInt1.intValue());
      assertEquals("2359", mutableInt1.toString());
      assertEquals(2359L, mutableInt1.longValue());
      assertEquals((byte)55, mutableInt1.byteValue());
      assertEquals(2359, (int)mutableInt1.toInteger());
      assertEquals(2359.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(2359, (int)mutableInt1.getValue());
      assertEquals((short)2359, mutableInt1.shortValue());
      assertEquals(2359.0, mutableInt1.doubleValue(), 0.01);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      ArrayUtils.swap((long[]) null, (-2146820843), (-1246), 1);
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)89, (byte)32, (byte)84, (byte)70, (byte) (-128), (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, 4);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)94;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1550.02F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean boolean0 = new Boolean("Index: ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      Boolean boolean3 = new Boolean(true);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      
      Boolean boolean4 = Boolean.valueOf(true);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'O';
      charArray0[4] = 'b';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'b', 'b', 'b', 'O', 'b'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray1, 'b');
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'b', 'b', 'b', 'O', 'b'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 93.0;
      doubleArray0[1] = (double) 'b';
      doubleArray0[2] = (double) 'b';
      doubleArray0[3] = (double) 'b';
      doubleArray0[4] = (double) 'b';
      doubleArray0[5] = (double) 'b';
      doubleArray0[6] = (double) 'b';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2146283264), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146283264, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)31, (byte)31, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[5] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      Float float0 = new Float(100.0);
      assertNotNull(float0);
      assertEquals(100.0F, (float)float0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      charArray0[1] = 'M';
      charArray0[2] = '|';
      charArray0[3] = 'n';
      charArray0[4] = 'z';
      charArray0[5] = 'R';
      charArray0[6] = '9';
      ArrayUtils.shift(charArray0, 36, (int) (short)0, (int) (short)0);
      assertArrayEquals(new char[] {'\\', 'M', '|', 'n', 'z', 'R', '9'}, charArray0);
      assertEquals(7, charArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '\\';
      intArray0[1] = (int) '|';
      int int1 = ArrayUtils.indexOf(intArray0, 2104959219);
      assertArrayEquals(new int[] {92, 124}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2743L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2743L);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)104;
      ArrayUtils.shift((char[]) null, (int) (byte)91, (int) (byte) (-1), (-1686));
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      ArrayUtils.shift((char[]) null, 100, (-745), 7);
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(7);
      assertNotNull(long0);
      assertEquals(7L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(100);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(100L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(820L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(820L, (long)long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {7L, 100L, 820L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, (-1));
      assertNull(object0);
      assertEquals(1, objectArray0.length);
      
      objectArray0[0] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)98;
      floatArray0[1] = 2667.1592F;
      floatArray0[2] = 2667.1592F;
      floatArray0[3] = (float) 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 243.3;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) 2667.1592F;
      doubleArray0[4] = (double) 2667.1592F;
      doubleArray0[5] = (double) 98.0F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3461.399824553978));
      assertArrayEquals(new double[] {243.3, 0.0, (-1.0), 2667.1591796875, 2667.1591796875, 98.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('y');
      assertNotNull(character0);
      assertEquals('y', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, (-2340));
      assertEquals(0, characterArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Character character1 = new Character('y');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('y', (char)character1);
      
      Character character2 = new Character('2');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('2', (char)character2);
      
      Character character3 = new Character('{');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertEquals('{', (char)character3);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ")5C@'c(&)AH-.rG";
      stringArray0[1] = ")5C@'c(&)AH-.rG";
      stringArray0[2] = ")5C@'c(&)AH-.rG";
      stringArray0[3] = ")5C@'c(&)AH-.rG";
      stringArray0[4] = ")5C@'c(&)AH-.rG";
      stringArray0[5] = ")5C@'c(&)AH-.rG";
      stringArray0[6] = ")5C@'c(&)AH-.rG";
      String[] stringArray1 = ArrayUtils.removeElements(stringArray0, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(7, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      MockRandom mockRandom0 = new MockRandom(78L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (int) (byte)0, (-1));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      short[] shortArray0 = new short[4];
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[0] = 105;
      intArray0[2] = 105;
      intArray0[3] = 105;
      intArray0[4] = (int) (short)0;
      intArray0[5] = 105;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {105, 0, 105, 105, 0, 105}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray1, (short)0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)23;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)18, (-543));
      assertArrayEquals(new byte[] {(byte)18, (byte)23}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "o\"\"?okrJd-!:|");
      assertNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      ArrayUtils.reverse(booleanArray0, (-2226), (-2226));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.insert(2146156424, (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      short[] shortArray0 = ArrayUtils.insert((int) (short) (-2019), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = '&';
      charArray0[3] = '6';
      charArray0[3] = '6';
      charArray0[5] = 'r';
      charArray0[6] = 'K';
      charArray0[7] = '4';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'4', 'K', 'r', '\u0000', '6', '&', 'r', 'r'}, charArray0);
      assertEquals(8, charArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '4';
      doubleArray0[1] = (double) '4';
      doubleArray0[2] = 99.0;
      doubleArray0[3] = (double) 'r';
      doubleArray0[4] = 3.0;
      doubleArray0[5] = (double) 'K';
      doubleArray0[6] = (double) '&';
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {52.0, 52.0, 99.0, 114.0, 3.0, 75.0, 38.0}, doubleArray0, 0.01);
      assertEquals(14, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {184, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-1.0F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (double) (short)1136;
      doubleArray0[4] = (-868.0651998814569);
      ArrayUtils.shift(doubleArray0, (-1472), 156, 69);
      assertArrayEquals(new double[] {0.0, 0.0, 1136.0, (-868.0651998814569), 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2721.0;
      doubleArray0[4] = 0.1;
      doubleArray0[2] = 1321.200659;
      doubleArray0[3] = 186.85571646608597;
      doubleArray0[4] = (-484.3);
      doubleArray0[5] = 1911.54573828;
      doubleArray0[6] = (-1718.903);
      ArrayUtils.shift(doubleArray0, (-1189));
      assertArrayEquals(new double[] {1911.54573828, (-1718.903), 0.0, 2721.0, 0.0, 1321.200659, 186.85571646608597, (-484.3)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[4] = 'b';
      char[] charArray1 = Character.toChars((int) '\"');
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\"'}, charArray1);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) (byte)94;
      doubleArray0[1] = (double) (byte)94;
      doubleArray0[2] = (double) (byte)94;
      doubleArray0[3] = (double) (-1);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3461.399824553978));
      assertArrayEquals(new double[] {0.0, 94.0, 94.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('9');
      assertNotNull(character0);
      assertEquals('9', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, (int) 94);
      assertEquals(0, characterArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.shift(doubleArray0, (-1), (int) (byte)94, (-1));
      assertArrayEquals(new double[] {94.0, 94.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 65, (-1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2743L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2743L);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte)91;
      shortArray0[2] = (short)1136;
      shortArray0[4] = (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)91, (short)1136, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-3356), (int) (short) (-3356));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.reverse((float[]) null, 4114, 4114);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 3439L;
      longArray0[1] = (-3088L);
      longArray0[2] = (-622L);
      ArrayUtils.swap(longArray0, 40, 40);
      assertArrayEquals(new long[] {3439L, (-3088L), (-622L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)110;
      shortArray0[1] = (short)83;
      shortArray0[2] = (short) (-29128);
      shortArray0[3] = (short) (-606);
      shortArray0[4] = (short) (-1117);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)110, (short)83, (short) (-29128), (short) (-606), (short) (-1117)}, shortArray0);
      assertArrayEquals(new short[] {(short)110, (short)83, (short) (-29128), (short) (-606), (short) (-1117)}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)83, (-1.5));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2451.70300183304), (int) (byte)0, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-3344), (int) (byte)0, (-443));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      int int1 = ArrayUtils.indexOf(doubleArray1, 51.0, (-579), (-2801.738));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (-1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '9');
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      ArrayUtils.reverse((Object[]) null);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '9';
      intArray0[1] = 2695;
      intArray0[2] = (int) '9';
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      ArrayUtils.shift(intArray0, (-1), (-1), 2695);
      assertArrayEquals(new int[] {57, 2695, 57, (-1), (-1), (-1)}, intArray0);
      assertEquals(6, intArray0.length);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)57;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte) (-109);
      byteArray1[3] = (byte)76;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte)1, (byte) (-109), (byte)76}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom((-3050L));
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) 2695, (-2498L), (long) (byte)76);
      assertNotNull(longStream0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 3);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3.0, 3.0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {3.0, 3.0, 3.0, 3.0, 3.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) 3, 3);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 3.0;
      objectArray0[1] = (Object) bitSet0;
      objectArray0[2] = (Object) 3.0;
      objectArray0[3] = (Object) 3.0;
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) 3.0;
      objectArray0[6] = (Object) 3.0;
      objectArray0[7] = (Object) 3.0;
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 0.0F);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.0, 3.0, 3.0, 3.0, 3.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0, 3.0, 3.0, 3.0, 3.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1053L;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 3;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 3;
      longArray0[6] = (long) 3;
      ArrayUtils.swap(longArray0, 3977, (-420), 1653);
      assertArrayEquals(new long[] {1053L, (-1L), 3L, (-1L), (-1L), 3L, 3L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      int[] intArray0 = new int[24];
      intArray0[0] = 8;
      intArray0[1] = 3173;
      intArray0[2] = 3752;
      intArray0[3] = 3173;
      intArray0[4] = (-403);
      intArray0[5] = 3752;
      intArray0[6] = 8;
      ArrayUtils.shift(intArray0, 0);
      assertEquals(24, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (-1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '(');
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      ArrayUtils.reverse((Object[]) null);
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '?');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-204.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2362.0F);
      floatArray0[3] = (-61.0F);
      floatArray0[4] = 971.0F;
      floatArray0[5] = 3052.0F;
      floatArray0[6] = 1243.0F;
      floatArray0[7] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-204.0F), 0.0F, (-2362.0F), (-61.0F), 971.0F, 3052.0F, 1243.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-204.0F), 0.0F, (-2362.0F), (-61.0F), 971.0F, 3052.0F, 1243.0F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '9');
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 3052.0F;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) 3052.0F;
      objectArray0[4] = (Object) 971.0F;
      objectArray0[5] = (Object) 1243.0F;
      objectArray0[6] = (Object) 3052.0F;
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (int) '9';
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (int) '9';
      ArrayUtils.shift(intArray0, (-1), (-2145301040), (-1));
      assertArrayEquals(new int[] {(-1), (-1), 57, (-1), (-1), (-1), 57}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(0);
      assertEquals(0L, mutableInt1.longValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt1.byteValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)88, (byte)5, (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'O';
      charArray0[2] = 'b';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'b', 'O', 'b'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray1, 'k');
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'b', 'O', 'b'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      Short short0 = new Short((short)4846);
      assertNotNull(short0);
      assertEquals((short)4846, (short)short0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-107);
      byte byte0 = (byte)1;
      byteArray0[4] = (byte)1;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)0, (byte) (-107), (byte)1}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(2881.43748890923);
      assertNotNull(float0);
      assertEquals(2881.4375F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(0.0);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1.0F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-988.6171F));
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((-988.6171F), (float)float4, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-4024);
      longArray0[1] = (long) (-4024);
      longArray0[2] = (long) (-4024);
      longArray0[3] = (long) 2;
      ArrayUtils.swap(longArray0, 50, (-1090), (-521));
      assertArrayEquals(new long[] {(-4024L), (-4024L), (-4024L), 2L}, longArray0);
      assertEquals(4, longArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-62);
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte) (-62);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)66, (byte) (-29), (byte)70, (byte)1, (byte) (-62)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)66, (byte)66, (byte)1, (byte) (-62)}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)1;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)1, (byte) (-1), (byte)1, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-1), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-750);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)996;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-29233));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-750), (short)0, (short)996, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-750), (short)0, (short)996, (short)0, (short) (-29233)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = 'D';
      charArray0[2] = '~';
      charArray0[3] = 'D';
      charArray0[4] = 'I';
      charArray0[5] = '&';
      charArray0[6] = '%';
      charArray0[7] = '_';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1032), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1032, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1794.0742F);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1794.0742F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = ' ';
      charArray0[2] = 'm';
      charArray0[3] = 'H';
      charArray0[4] = '=';
      charArray0[5] = 'D';
      charArray0[6] = 'f';
      charArray0[7] = 'k';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1136, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1136, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2743L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2743L);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      char[] charArray1 = ArrayUtils.insert((-1134), (char[]) null, (char[]) null);
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2735.08);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-3719.33478);
      doubleArray0[8] = 2975.45917627;
      ArrayUtils.shift(doubleArray0, 813);
      assertArrayEquals(new double[] {0.0, (-3719.33478), 2975.45917627, 0.0, 0.0, 0.0, 0.0, (-2735.08), 1.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = 'u';
      charArray0[2] = '[';
      charArray0[3] = '\"';
      charArray0[4] = 'G';
      charArray0[5] = 'b';
      charArray0[6] = 'E';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'G';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(930, charArray0, charArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 930, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2975.45917627;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      ArrayUtils.shift(doubleArray0, 2156);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 2975.45917627, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      ArrayUtils.reverse((int[]) null, 167, (-2106965087));
      ArrayUtils.swap((long[]) null, 0, (-1), 347);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-649L);
      longArray0[1] = 0L;
      longArray0[2] = (-649L);
      longArray0[3] = (-1L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-649L));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-1L)}, longArray1);
      assertArrayEquals(new long[] {(-649L), 0L, (-649L), (-1L)}, longArray0);
      assertEquals(2, longArray1.length);
      assertEquals(4, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)91;
      Byte byte1 = new Byte((byte)91);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)91, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)91, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)91, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)0);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte4);
      
      byteArray0[3] = byte4;
      byte byte5 = (byte) (-1);
      Byte byte6 = new Byte((byte) (-1));
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte5));
      assertEquals((byte) (-1), (byte)byte6);
      
      byteArray0[4] = byte6;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-1));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)0, (byte) (-1)}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1378.77364525));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)0, (byte) (-1), (byte)91, (byte)91, (byte)91, (byte)0, (byte) (-1)}, byteArray2);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)0, (byte) (-1)}, byteArray1);
      assertEquals(10, byteArray2.length);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte5;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(213, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 213, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.reverse(booleanArray0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (short)99;
      longArray0[2] = (long) (short)99;
      longArray0[3] = (long) (short)99;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 99L, 99L, 99L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)99;
      shortArray0[1] = (short)99;
      shortArray0[2] = (short)99;
      shortArray0[3] = (short)99;
      shortArray0[4] = (short)99;
      shortArray0[5] = (short)99;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)99, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.addAll((Character[]) null, (Character[]) null);
      assertNull(characterArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)3341;
      Character character0 = new Character('(');
      assertNotNull(character0);
      assertEquals('(', (char)character0);
      
      Character character1 = new Character('(');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('(', (char)character1);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'N');
      assertNull(charArray0);
      
      MockRandom mockRandom0 = new MockRandom(3452L);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      int int0 = mockRandom0.nextInt();
      assertNotSame(mockRandom0, mockRandom1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null, (Random) mockRandom1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(132L);
      assertNotNull(longStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2397.98;
      doubleArray0[1] = (double) (byte)59;
      doubleArray0[2] = (double) (byte)59;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = 1992.522139032;
      doubleArray0[5] = 2397.98;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {2397.98, 59.0, 0.0, 1992.522139032, 2397.98, 59.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Character[] characterArray0 = new Character[3];
      char char0 = '^';
      Character character0 = Character.valueOf('^');
      assertNotNull(character0);
      assertEquals('^', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('_');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertEquals('_', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      assertNotNull(character2);
      assertTrue(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertEquals('^', (char)character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'O');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'^', '_', '^'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('O');
      assertNotNull(character0);
      assertEquals('O', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('`');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('`', (char)character1);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'A');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'O', 'A'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (char)character0;
      intArray0[1] = (int) 'A';
      intArray0[2] = (int) '`';
      intArray0[3] = (int) '`';
      intArray0[4] = (int) 'A';
      intArray0[5] = (int) 'A';
      intArray0[6] = (int) 'O';
      intArray0[7] = 2487;
      ArrayUtils.swap(intArray0, 65, (-2120300309), (-678));
      assertArrayEquals(new int[] {79, 65, 96, 96, 65, 65, 79, 2487}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)91;
      Byte byte1 = new Byte((byte)91);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)91, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)91, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)91, (byte)byte3);
      
      byteArray0[2] = byte3;
      byte byte4 = (byte)0;
      Byte byte5 = new Byte((byte)0);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte5);
      
      byteArray0[3] = byte5;
      byte byte6 = (byte) (-1);
      Byte byte7 = new Byte((byte) (-1));
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertEquals((byte) (-1), (byte)byte7);
      
      byteArray0[4] = byte7;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-1));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)0, (byte) (-1)}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1378.77364525));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)0, (byte) (-1), (byte)91, (byte)91, (byte)91, (byte)0, (byte) (-1)}, byteArray2);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)0, (byte) (-1)}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray2.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte6;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)91;
      shortArray0[6] = (short) byte4;
      shortArray0[7] = (short) byte0;
      shortArray0[8] = (short) byte0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)91, (short) (-1), (short)91, (short) (-1), (short)0, (short)91, (short)0, (short)91, (short)91}, shortArray0);
      assertArrayEquals(new short[] {(short)91, (short) (-1), (short)91, (short) (-1), (short)0, (short)91, (short)0, (short)91, (short)91}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, (int) byte4, (long) (byte) (-1));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(byte4 == byte0);
      assertFalse(byte4 == byte6);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      byte byte0 = (byte) (-14);
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-14)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences((double[]) null, (double) (byte) (-14));
      assertNull(doubleArray1);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-14)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14), (byte) (-14)}, byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short)2657;
      shortArray0[2] = (short) byte0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-14), (short)2657, (short) (-14)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-14), (short)2657, (short) (-14)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2743L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2743L);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      ArrayUtils.swap((char[]) null, (int) (byte) (-1), (-163));
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1), (short) (-1)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2743L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2743L);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      ArrayUtils.swap((char[]) null, (int) (byte) (-1), (-163));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(3254, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.insert(3254, stringArray0, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, 3254, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3254, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 2, (-1), (-1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short) (-2019);
      shortArray0[2] = (short)0;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-2019);
      intArray0[2] = 0;
      intArray0[3] = (int) (short)0;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-2146567996));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-2019), 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, (-2019), 0, 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (int) (short)110;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 110, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {110}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)110;
      shortArray0[1] = (short)110;
      shortArray0[2] = (short)110;
      shortArray0[3] = (short)110;
      shortArray0[4] = (short)110;
      shortArray0[5] = (short)110;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)110);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)110, (short)110, (short)110, (short)110, (short)110, (short)110}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (-4024));
      assertNull(longArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-2355.1236618);
      doubleArray0[2] = (-161.56793491615852);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, (-2355.1236618), (-161.56793491615852)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-2355.1236618), (-161.56793491615852)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)116;
      byte byte0 = (byte) (-23);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-23));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-17), (byte)116, (byte)116}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-17), (byte)116, (byte)116}, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[3] = (short) (-543);
      shortArray0[2] = (short)0;
      byte[] byteArray0 = new byte[1];
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 290L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {290L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.5);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      Double double0 = new Double((-794.7207547787788));
      assertNotNull(double0);
      assertEquals((-794.7207547787788), (double)double0, 0.01);
      
      doubleArray2[0] = double0;
      Double double1 = new Double((-794.7207547787788));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-794.7207547787788), (double)double1, 0.01);
      
      doubleArray2[1] = double1;
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray2[2] = double2;
      Double double3 = new Double((-2025.9551559568067));
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((-2025.9551559568067), (double)double3, 0.01);
      
      doubleArray2[3] = double3;
      Double double4 = new Double((-794.7207547787788));
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((-794.7207547787788), (double)double4, 0.01);
      
      doubleArray2[4] = double4;
      Double double5 = new Double((double) doubleArray2[1]);
      assertNotNull(double5);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((-794.7207547787788), (double)double5, 0.01);
      
      doubleArray2[5] = double5;
      Double[] doubleArray3 = ArrayUtils.nullToEmpty(doubleArray2);
      assertSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1.0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(355.69224);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(355.69224, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(48.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(48.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.1);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals(0.1, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(1.0);
      assertNotNull(double5);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals(1.0, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(184.0);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals(184.0, (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(48.0);
      assertNotNull(double7);
      assertEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertEquals(48.0, (double)double7, 0.01);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(2480.106661785925);
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double0, 0.01);
      assertEquals(2480.106661785925, (double)double8, 0.01);
      
      doubleArray0[8] = double8;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[14];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(14, booleanArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)0);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, (int) (short)0, (int) (short)0, 2227);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Double double0 = new Double((-1347.6342393099));
      assertNotNull(double0);
      assertEquals((-1347.6342393099), (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertNotNull(object0);
      assertEquals((-1347.6342393099), object0);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      Character[] characterArray0 = new Character[8];
      Character character0 = new Character('R');
      assertNotNull(character0);
      assertEquals('R', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('E');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)character0));
      assertEquals('E', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('R');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertEquals('R', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('R');
      assertNotNull(character3);
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertEquals('R', (char)character3);
      
      characterArray0[3] = character3;
      char char0 = 'B';
      Character character4 = Character.valueOf('B');
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertEquals('B', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character((char) character0);
      assertNotNull(character5);
      assertFalse(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character4));
      assertFalse(character0.equals((Object)char0));
      assertTrue(character0.equals((Object)character3));
      assertFalse(character5.equals((Object)char0));
      assertTrue(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character3));
      assertEquals('R', (char)character5);
      
      characterArray0[5] = character5;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2956;
      shortArray0[1] = (short)288;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)2956, (short)288}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)288);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)288, (short)2956, (short)288}, shortArray1);
      assertArrayEquals(new short[] {(short)2956, (short)288}, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)288, (-2034458192));
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)2956, (short)288}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      ArrayUtils.reverse((float[]) null, (-946), (int) char0);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0;
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)84, 0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.07035867344490586;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.07035867344490586;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short)537;
      shortArray0[2] = (short) (-2131);
      shortArray0[3] = (short)1136;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)537;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)1136, (short)537, (short) (-2131), (short)1136, (short)0, (short)537}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-2131));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1136, (short)537, (short) (-2131), (short)1136, (short)0, (short)537}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2131), (short)1136, (short)537, (short) (-2131), (short)1136, (short)0, (short)537}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-3356), (int) (short)537);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)1136, (short)537, (short) (-2131), (short)1136, (short)0, (short)537}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      ArrayUtils.reverse((float[]) null, 4114, 2);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-3356), (int) (short) (-3356));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      ArrayUtils.reverse((float[]) null, 4114, 4114);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2131);
      shortArray0[2] = (short) (-740);
      shortArray0[3] = (short)2697;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)537;
      shortArray0[6] = (short)930;
      shortArray0[7] = (short)1136;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-2131), (short) (-740), (short)2697, (short)0, (short)537, (short)930, (short)1136}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)537;
      floatArray0[1] = (float) (short)1136;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)1136;
      floatArray0[4] = (float) (short)0;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {537.0F, 1136.0F, 0.0F, 1136.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray1 = new short[8];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)1136;
      shortArray1[1] = (short)1136;
      shortArray1[2] = (short) (-740);
      shortArray1[3] = (short)0;
      shortArray1[4] = (short)0;
      shortArray1[5] = (short)930;
      shortArray1[6] = (short)2697;
      shortArray1[7] = (short)930;
      short[] shortArray2 = ArrayUtils.addFirst(shortArray1, (short) (-740));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)1136, (short)1136, (short) (-740), (short)0, (short)0, (short)930, (short)2697, (short)930}, shortArray1);
      assertArrayEquals(new short[] {(short) (-740), (short)1136, (short)1136, (short) (-740), (short)0, (short)0, (short)930, (short)2697, (short)930}, shortArray2);
      assertEquals(8, shortArray1.length);
      assertEquals(9, shortArray2.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      short[] shortArray3 = new short[1];
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      
      shortArray3[0] = (short)1136;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray3, (short)22543, (int) (short)930);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)1136}, shortArray3);
      assertEquals(1, shortArray3.length);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      
      ArrayUtils.reverse(floatArray0, (-1630), (int) (short)1136);
      assertArrayEquals(new float[] {0.0F, 1136.0F, 0.0F, 1136.0F, 537.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 3439L;
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, 40, 40);
      assertArrayEquals(new long[] {3439L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String string0 = ArrayUtils.toString((Object) boolean0);
      assertNotNull(string0);
      assertEquals("true", string0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) integer0);
      assertNotNull(object0);
      assertEquals(0, object0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)100, 0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = new Boolean(true);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 0, 1874);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(2881.43748890923);
      assertNotNull(float0);
      assertEquals(2881.4375F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(0.0);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1.0F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-988.6171F));
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((-988.6171F), (float)float4, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'c';
      charArray0[2] = 'v';
      charArray0[3] = 'X';
      charArray0[4] = '(';
      charArray0[5] = '&';
      charArray0[6] = '4';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '4');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Y', 'c', 'v', 'X', '(', '&'}, charArray1);
      assertArrayEquals(new char[] {'Y', 'c', 'v', 'X', '(', '&', '4'}, charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'Y';
      doubleArray0[1] = (double) 'c';
      doubleArray0[2] = (double) 'c';
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 'Y';
      doubleArray0[5] = (double) '(';
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {89.0, 99.0, 99.0, 0.0, 89.0, 40.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {89.0, 99.0, 99.0, 0.0, 89.0, 40.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 32.71686F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 32.71686F);
      assertArrayEquals(new float[] {32.71686F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1639;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1639, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1639, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 184;
      longArray0[1] = (long) 184;
      longArray0[2] = (long) 184;
      longArray0[3] = (-53L);
      longArray0[4] = (long) 184;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {184L, 184L, 184L, (-53L), 184L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {184L, 184L, 184L, (-53L), 184L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray0, (-53L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {184L, 184L, 184L, (-53L), 184L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {184L, 184L, 184L, 184L, 0L, 0L, 0L, 0L}, longArray2);
      assertEquals(9, longArray0.length);
      assertEquals(8, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      long[] longArray3 = ArrayUtils.subarray(longArray2, Integer.MAX_VALUE, 68);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {184L, 184L, 184L, (-53L), 184L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {184L, 184L, 184L, 184L, 0L, 0L, 0L, 0L}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(9, longArray0.length);
      assertEquals(8, longArray2.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 0, 52);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Short[] shortArray0 = new Short[0];
      Short short0 = ArrayUtils.get(shortArray0, 0);
      assertNull(short0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1320L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 855.597F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-5380.0F);
      floatArray0[4] = (-1798.0F);
      floatArray0[5] = (-2841.6323F);
      floatArray0[6] = 2667.1592F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 2667.1592F, 97);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {855.597F, (-1.0F), (-1.0F), (-5380.0F), (-1798.0F), (-2841.6323F), 2667.1592F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-149.33974852023);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1922.3227514), (-2262.77818295));
      assertArrayEquals(new double[] {0.0, 0.0, (-149.33974852023), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, 87);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {87}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      char[] charArray0 = new char[0];
      char char0 = 'R';
      char[] charArray1 = ArrayUtils.add(charArray0, 'R');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'R'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Long[] longArray0 = new Long[2];
      long long0 = 15L;
      Long long1 = new Long(15L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(15L, (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long(15L);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertEquals(15L, (long)long2);
      
      longArray0[1] = long2;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      float[] floatArray0 = new float[5];
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1956);
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = (-20L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertArrayEquals(new long[] {0L, (-20L)}, longArray1);
      assertEquals(2, longArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)59;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-41), (byte)15, (byte)59}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2634.524611);
      doubleArray0[1] = (double) (byte)59;
      doubleArray0[2] = (double) (byte) (-41);
      doubleArray0[3] = (double) (byte) (-41);
      doubleArray0[4] = (double) (byte) (-41);
      doubleArray0[5] = (double) (byte) (-41);
      doubleArray0[6] = 2397.98;
      doubleArray0[7] = (double) (byte) (-41);
      doubleArray0[8] = (double) (byte) (-41);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {(-2634.524611), (-41.0), (-41.0), (-41.0), (-41.0), 2397.98, (-41.0), (-41.0), 59.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)15;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-41), (byte) (-92), (byte)59, (byte)15}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3521.9915F;
      floatArray0[1] = (float) (byte) (-92);
      floatArray0[2] = (float) (byte) (-41);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte) (-92);
      floatArray0[6] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3521.9915F, (-92.0F), (-41.0F), 0.0F, 0.0F, (-92.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3521.9915F, (-92.0F), (-41.0F), 0.0F, 0.0F, (-92.0F), 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '3';
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-4400), floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), (-1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'B', (-1));
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 9);
      Class<Double> class0 = Double.class;
      classArray0[0] = class0;
      Class<Double> class1 = Double.class;
      classArray0[1] = class1;
      Class<Double> class2 = Double.class;
      classArray0[2] = class2;
      Class<Double> class3 = Double.class;
      classArray0[3] = class3;
      ArrayUtils.shift(charArray0, (int) (byte)0);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 1, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '3';
      intArray0[1] = 1;
      intArray0[2] = (int) '3';
      intArray0[3] = 1;
      intArray0[4] = (int) '3';
      ArrayUtils.reverse(intArray0, 51, 1);
      assertArrayEquals(new int[] {51, 1, 51, 1, 51}, intArray0);
      assertEquals(5, intArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 51, 0, (-2313));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      ArrayUtils.reverse(intArray0, (-1), (-1));
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1614.52237040981);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1614.52237040981);
      int[] intArray0 = new int[4];
      intArray0[1] = (-96);
      intArray0[2] = (-75);
      ArrayUtils.reverse(intArray0, (-2147080731), 1279);
      assertArrayEquals(new int[] {0, (-75), (-96), 0}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(2881.43748890923);
      assertNotNull(float0);
      assertEquals(2881.4375F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(0.0);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1.0F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-988.6171F));
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((-988.6171F), (float)float4, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      float float1 = mockRandom0.nextFloat();
      assertEquals(0.0F, float1, 0.01F);
      
      LongStream longStream0 = mockRandom0.longs((-1L), (long) (byte)0);
      assertNotNull(longStream0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      int int0 = mockRandom0.nextInt();
      assertEquals(1, int0);
      
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      ArrayUtils.shift(charArray0, (int) (short)0, (int) (short)0, (-1));
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)110;
      double[] doubleArray2 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      ArrayUtils.swap(shortArray0, (-2069), (int) (short)110);
      assertArrayEquals(new short[] {(short)110}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      ArrayUtils.shift(charArray0, (int) (short)0, (int) (short)0, (-1));
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)110;
      ArrayUtils.swap(shortArray0, 2, (-400));
      assertArrayEquals(new short[] {(short)110}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      Float float0 = new Float(100.0);
      assertNotNull(float0);
      assertEquals(100.0F, (float)float0, 0.01F);
      
      Float float1 = ArrayUtils.get((Float[]) null, (int) 0);
      assertNull(float1);
      
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      charArray0[1] = 'M';
      charArray0[2] = '|';
      charArray0[3] = 'n';
      charArray0[4] = 'z';
      charArray0[5] = 'R';
      charArray0[6] = '9';
      ArrayUtils.shift(charArray0, 36, (int) (short)0, (int) (short)0);
      assertArrayEquals(new char[] {'\\', 'M', '|', 'n', 'z', 'R', '9'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-797), byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-797);
      floatArray0[1] = (float) (short) (-1246);
      floatArray0[2] = (float) (short) (-1246);
      floatArray0[3] = (float) (-797);
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = 14.0F;
      floatArray0[6] = 791.5F;
      floatArray0[7] = (float) (-797);
      floatArray0[8] = (float) (byte) (-1);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-797.0F), 791.5F, 14.0F, (-1.0F), (-797.0F), (-1246.0F), (-1246.0F), (-797.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 3439L;
      longArray0[1] = (-3088L);
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, 40, 40);
      assertArrayEquals(new long[] {3439L, (-3088L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'P';
      charArray0[2] = 'u';
      charArray0[3] = '#';
      charArray0[4] = 'Q';
      charArray0[5] = '8';
      charArray0[6] = 'u';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'u', '8', 'Q', '#', 'u', 'P', 'U'}, charArray0);
      assertEquals(7, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      assertEquals(6, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("', has a length less than 2");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean("p@nyu/;A");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(false);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean("");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.07035867344490586;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.07035867344490586;
      Boolean boolean0 = Boolean.valueOf("wsQDpzZR]1");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean("p@nyu/;A");
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(false);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      
      Boolean boolean4 = new Boolean("wsQDpzZR]1");
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-649L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-649L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-649L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) 0L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.contains(longArray0, 2674L);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-52);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)11;
      doubleArray0[4] = (double) (byte) (-52);
      doubleArray0[5] = (double) 2237;
      doubleArray0[6] = (double) (byte) (-52);
      doubleArray0[7] = (double) 2674L;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)11;
      doubleArray1[1] = (double) (byte)0;
      doubleArray1[2] = 1578.1533994;
      doubleArray1[3] = (double) 2237;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (double) (byte)11;
      doubleArray1[6] = (double) (byte)11;
      double[] doubleArray2 = ArrayUtils.insert((int) (byte)0, doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-52.0), 0.0, 0.0, 11.0, (-52.0), 2237.0, (-52.0), 2674.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {11.0, 0.0, 1578.1533994, 2237.0, 1.0, 11.0, 11.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)1;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)1, (byte) (-1), (byte)1, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-52);
      double[] doubleArray1 = ArrayUtils.insert((int) (byte)1, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-52.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-52.0), (-52.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)117, (int) (byte)117);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)0, (byte)1, (byte) (-1), (byte)1, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'E';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, ' ');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'b', 'E'}, charArray0);
      assertArrayEquals(new char[] {'b', 'E'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte) (-1);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)0, (short) (-1)}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int int0 = new Short((short)78);
      assertEquals((short)78, int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)78;
      longArray0[1] = (-320L);
      longArray0[3] = (long) (short)78;
      longArray0[5] = (long) (short)78;
      longArray0[7] = (long) (short)78;
      longArray0[8] = (long) (short)78;
      boolean boolean1 = ArrayUtils.contains(longArray0, (-1286L));
      assertArrayEquals(new long[] {78L, (-320L), 0L, 78L, 0L, 78L, 0L, 78L, 78L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (-1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean boolean0 = new Boolean("org.apache.commons.lang3.mutable.MutableInt");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      
      Boolean boolean3 = new Boolean(false);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      
      Boolean boolean4 = Boolean.valueOf(false);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      boolean boolean0 = false;
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1798);
      floatArray0[1] = (float) (-1798);
      floatArray0[2] = (float) (-1798);
      floatArray0[3] = (float) (-1798);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1798.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1798.0F), (-1798.0F), (-1798.0F), (-1798.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1798.0F), (-1798.0F), (-1798.0F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Boolean boolean1 = new Boolean("org.apache.commons.lang3.mutable.MutableInt");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4);
      
      Boolean boolean5 = Boolean.valueOf(true);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5);
      
      Boolean[] booleanArray1 = new Boolean[7];
      booleanArray1[0] = boolean2;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = boolean2;
      booleanArray1[3] = boolean2;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, boolean0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, true, false}, booleanArray2));
      assertEquals(7, booleanArray2.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = '1';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'X');
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'a', '1'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      Character character0 = new Character(';');
      assertNotNull(character0);
      assertEquals(';', (char)character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      Character character0 = new Character('@');
      assertNotNull(character0);
      assertEquals('@', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      Byte byte0 = new Byte((byte)15);
      assertNotNull(byte0);
      assertEquals((byte)15, (byte)byte0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-113));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2179.022144);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      Character[] characterArray0 = new Character[1];
      char char0 = 'y';
      Character character0 = Character.valueOf('y');
      assertNotNull(character0);
      assertEquals('y', (char)character0);
      
      characterArray0[0] = character0;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, (int) char0);
      assertEquals(1, characterArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Character character1 = new Character('a');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertEquals('a', (char)character1);
      
      Character character2 = new Character('2');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('2', (char)character2);
      
      Character[] characterArray1 = new Character[6];
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      characterArray1[0] = character2;
      characterArray1[1] = character2;
      characterArray1[2] = character0;
      characterArray1[3] = character1;
      Character character3 = new Character('{');
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)char0));
      assertEquals('{', (char)character3);
      
      characterArray1[5] = character3;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = 'x';
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      int int0 = new Character('a');
      assertEquals('a', int0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte)0, 4976, (-1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      Long long0 = new Long((short)98);
      assertNotNull(long0);
      assertEquals(98L, (long)long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 5511L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {98L, 98L, 98L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      Double double0 = new Double(3332.362284992);
      assertNotNull(double0);
      assertEquals(3332.362284992, (double)double0, 0.01);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      ArrayUtils.shift(longArray1, 1835);
      assertArrayEquals(new long[] {98L, 98L, 98L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 1);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      ArrayUtils.swap(longArray0, 2, 0, 0);
      assertArrayEquals(new long[] {2L, 2L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[1] = 'g';
      charArray0[2] = 'a';
      charArray0[3] = 'V';
      charArray0[4] = 'A';
      charArray0[5] = '~';
      charArray0[6] = 'r';
      charArray0[7] = '+';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'A');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Z', 'g', 'a', 'V', '~', 'r', '+'}, charArray1);
      assertArrayEquals(new char[] {'Z', 'g', 'a', 'V', 'A', '~', 'r', '+'}, charArray0);
      assertEquals(7, charArray1.length);
      assertEquals(8, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5057.6227;
      byte byte0 = (byte) (-26);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-26);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-26));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-26)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-26), (byte) (-26)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte[] byteArray2 = new Byte[8];
      byteArray2[0] = (Byte) (byte) (-26);
      byteArray2[1] = (Byte) (byte) (-26);
      byteArray2[2] = (Byte) (byte) (-26);
      byteArray2[3] = (Byte) (byte) (-26);
      int int0 = new Byte(byte0);
      assertEquals((byte) (-26), int0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[2] = (double) (byte) (-26);
      doubleArray1[1] = (double) byte0;
      doubleArray1[2] = (double) byte0;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-26.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {5057.6227, 0.0, (-26.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-26.0), (-26.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)104, 50);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-997L);
      longArray0[1] = (long) 50;
      longArray0[2] = (long) 50;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-997L), 50L, 50L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-997L), 50L, 50L, 0L, 0L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1541.02933);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1541.02933)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-77);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-18));
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0, (byte)126, (byte) (-77)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2743L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((char[]) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2743L);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)104;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)91, (int) (byte)91);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)91, (byte)104}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte)104;
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 104.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray2);
      assertSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertArrayEquals(new long[] {(-2743L)}, longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = 'i';
      charArray0[3] = '*';
      charArray0[4] = 'i';
      charArray0[5] = '*';
      charArray0[6] = 'i';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '*', 4);
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{5}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'*', '*', 'i', '*', 'i', '*', 'i'}, charArray0);
      assertEquals(7, charArray0.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      ArrayUtils.swap(byteArray0, (-2146856179), 2562);
      assertArrayEquals(new byte[] {(byte) (-46)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-6);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 93.0, 0, (-119.0));
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 93.0;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)31, (double) (byte)31);
      assertArrayEquals(new double[] {93.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      Long long0 = Long.getLong((String) null);
      assertNull(long0);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-879L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = '$';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) ']';
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {93}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '$';
      doubleArray0[1] = (double) '$';
      doubleArray0[2] = (double) 184;
      doubleArray0[3] = (double) 184;
      doubleArray0[4] = (double) 93;
      doubleArray0[5] = (double) ']';
      doubleArray0[6] = (double) 93;
      doubleArray0[7] = (double) '$';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 0.0);
      assertArrayEquals(new double[] {36.0, 36.0, 184.0, 184.0, 93.0, 93.0, 93.0, 36.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)9;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)13);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)65, (byte)2, (byte) (-11), (byte) (-126), (byte)13, (byte)101, (byte)9}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-41);
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)15, 1.0);
      assertArrayEquals(new double[] {93.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)15);
      assertArrayEquals(new byte[] {(byte)15, (byte)31, (byte) (-41), (byte) (-41)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Long long0 = Long.getLong((String) null);
      assertNull(long0);
      
      Long long1 = new Long((byte)15);
      assertNotNull(long1);
      assertEquals(15L, (long)long1);
      
      Long long2 = new Long((-52L));
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertEquals((-52L), (long)long2);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-879L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte) (-41));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.swap(longArray0, (-990), (-990), (-559));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)0;
      ArrayUtils.swap(byteArray0, 1, (int) (byte) (-89), (-559));
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 97L, (int) (byte) (-89));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 48.0;
      doubleArray0[1] = (-1718.903);
      int[] intArray0 = new int[2];
      intArray0[0] = 667;
      intArray0[1] = (-1);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-1), 667}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1), (double) 667);
      assertArrayEquals(new double[] {48.0, (-1718.903), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 667;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (-1));
      assertArrayEquals(new long[] {667L}, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (int) (short)18688, (-3073));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      intArray0[1] = (-1);
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.shuffle(intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (double) 184);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-997L);
      longArray0[1] = (long) 184;
      longArray0[2] = (long) 184;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 184;
      longArray0[6] = (long) 184;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-5368L));
      assertArrayEquals(new long[] {(-997L), 184L, 184L, (-1L), (-1L), 184L, 184L}, longArray0);
      assertEquals(7, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, true, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 302L;
      longArray0[2] = (-2538L);
      longArray0[3] = (-1L);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 2621;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2621, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-4024);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4024, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 184;
      longArray0[1] = (long) 184;
      longArray0[2] = (long) 184;
      longArray0[3] = (-53L);
      longArray0[4] = (long) 184;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 184, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      int[] intArray0 = new int[8];
      intArray0[0] = 98;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-1);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 0, 52);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      Object[] objectArray0 = new Object[0];
      Short[] shortArray0 = new Short[0];
      Short short0 = ArrayUtils.get(shortArray0, 0);
      assertNull(short0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1320L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray0 = new int[0];
      long[] longArray2 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) null);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = '<';
      charArray0[2] = 'N';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'o', '<', 'N'}, charArray0);
      assertArrayEquals(new char[] {'o', '<', 'N'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      ArrayUtils.swap(charArray0, 1504, (-841));
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'o', '<', 'N'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.07035867344490586;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.07035867344490586;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1136;
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'B', 'B', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'B', 'B', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      
      ArrayUtils.swap(charArray1, (-2388), (int) (short)1136);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'B', 'B', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'B', 'B', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      Character character0 = new Character('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      Character character1 = new Character('t');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('t', (char)character1);
      
      ArrayUtils.swap((double[]) null, (int) (short) (-2019), (int) (short)98, (-1));
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-1), (int) (short)98, 235.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      ArrayUtils.swap(longArray0, 608, 0, (-681));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)69;
      ArrayUtils.swap(byteArray0, (-2820), (int) (byte) (-89), (int) (byte)69);
      assertArrayEquals(new byte[] {(byte)111, (byte) (-8), (byte)69, (byte)69, (byte) (-8), (byte)69}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)69, 608);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 0, 1224, 1224);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) 0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[2];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = '';
      charArray0[2] = '=';
      charArray0[3] = 'v';
      charArray0[4] = '2';
      charArray0[5] = 'a';
      charArray0[6] = 'n';
      charArray0[7] = 'v';
      charArray0[8] = '^';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, Integer.MAX_VALUE, 'B');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 0, 0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)7);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)7}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Object[] objectArray0 = new Object[0];
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BjL]_I.UzBd;'";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-149.33974852023);
      doubleArray0[2] = (-149.33974852023);
      doubleArray0[3] = (-149.33974852023);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2262.77818295), (-149.33974852023));
      assertArrayEquals(new double[] {0.0, (-149.33974852023), (-149.33974852023), (-149.33974852023)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2721;
      shortArray0[1] = (short)48;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)48;
      doubleArray0[1] = (double) (short)48;
      doubleArray0[2] = (double) (short)2721;
      doubleArray0[3] = (double) (short)48;
      doubleArray0[4] = (double) (short)48;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (short)48;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.5, (-1969.9047162149));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {48.0, 48.0, 2721.0, 48.0, 48.0, 0.0, 48.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (short)2721);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {2721}, intArray0);
      assertEquals(1, intArray0.length);
      
      Float float0 = new Float((float) (short)48);
      assertNotNull(float0);
      assertEquals(48.0F, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) float0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      double[] doubleArray0 = new double[22];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 184;
      doubleArray0[3] = (double) 184;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 295.83634, (-843.476682));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(22, doubleArray0.length);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, 2112);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2112}, intArray1);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1187);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1187}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-18.3536223147524), 757, 1779.74491);
      assertEquals(22, doubleArray0.length);
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-1992.522139032));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) true;
      try { 
        Long.valueOf("BqqF-I-q", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 4905.6);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-89));
      assertNotNull(byte0);
      assertEquals((byte) (-89), (byte)byte0);
      
      ArrayUtils.swap((byte[]) null, 110, (int) (byte) (-89), 0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2, 2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'B');
      assertEquals("{1, 2, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'L', 'B', 'B', 'B'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 409.0924235051861;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 57, 57);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2, 304);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 304;
      doubleArray0[5] = (double) 304;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 304.0, 304.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) 304.0;
      objectArray0[2] = (Object) 2.0;
      objectArray0[3] = (Object) 2.0;
      objectArray0[4] = (Object) false;
      int[] intArray0 = new int[6];
      intArray0[0] = 304;
      intArray0[1] = 2;
      intArray0[2] = 304;
      intArray0[3] = 304;
      intArray0[4] = 2;
      intArray0[5] = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[4], intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-11.561749096755001);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 767.66713665;
      doubleArray0[3] = 409.0924235051861;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-11.561749096755001), 1.5, 767.66713665, 409.0924235051861}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-11.561749096755001', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      byteArray0[4] = (byte) (-41);
      byteArray0[6] = (byte) (-41);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)99, (byte) (-41), (byte) (-41), (byte)0, (byte) (-41), (byte)0, (byte) (-41)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      Character character0 = new Character('8');
      assertNotNull(character0);
      assertEquals('8', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '8';
      charArray1[1] = '8';
      char[] charArray2 = ArrayUtils.subarray(charArray0, 2, 2);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 104;
      floatArray0[1] = (float) '8';
      floatArray0[2] = (float) '8';
      floatArray0[3] = (float) '8';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {104.0F, 56.0F, 56.0F, 56.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      Integer integer0 = new Integer(88);
      assertNotNull(integer0);
      assertEquals(88, (int)integer0);
      
      Integer integer1 = new Integer(104);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(104, (int)integer1);
      
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-1), (int)integer2);
      
      MutableInt mutableInt0 = new MutableInt((Number) integer2);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals("-1", mutableInt0.toString());
      assertNotNull(mutableInt0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = mutableInt0.toInteger();
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals("-1", mutableInt0.toString());
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-1), (int)integer3);
      
      Integer integer4 = new Integer((-1));
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals((-1), (int)integer4);
      
      MutableInt mutableInt1 = new MutableInt((Number) integer4);
      assertEquals((-1), mutableInt1.intValue());
      assertEquals((-1L), mutableInt1.longValue());
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals("-1", mutableInt1.toString());
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertNotNull(mutableInt1);
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      Integer integer5 = mutableInt1.getValue();
      assertEquals((-1), mutableInt1.intValue());
      assertEquals((-1L), mutableInt1.longValue());
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals("-1", mutableInt1.toString());
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertNotSame(mutableInt1, mutableInt0);
      assertNotNull(integer5);
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer4));
      assertEquals((-1), (int)integer5);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer5;
      Integer integer6 = new Integer(104);
      assertNotNull(integer6);
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertEquals(104, (int)integer6);
      
      integerArray0[1] = integer6;
      integerArray0[2] = integer0;
      Integer[] integerArray1 = ArrayUtils.insert(2, integerArray0, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)13457;
      char[] charArray0 = new char[2];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '\u0000';
      Object object0 = ArrayUtils.get(objectArray0, 1, objectArray0[0]);
      assertNotNull(object0);
      assertEquals(1, objectArray0.length);
      assertEquals('\u0000', object0);
      
      int[] intArray0 = new int[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2090));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNull(object1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object[] objectArray1 = ArrayUtils.addFirst(objectArray0, (Object) null);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertEquals(1, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)57);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2179.022144);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      Character[] characterArray0 = new Character[1];
      char char0 = 'y';
      Character character0 = Character.valueOf('y');
      assertNotNull(character0);
      assertEquals('y', (char)character0);
      
      characterArray0[0] = character0;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, (int) char0);
      assertEquals(1, characterArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Character character1 = new Character('a');
      assertNotNull(character1);
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertEquals('a', (char)character1);
      
      Character character2 = new Character('2');
      assertNotNull(character2);
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('2', (char)character2);
      
      Double double0 = new Double((-1069.95641689));
      assertNotNull(double0);
      assertEquals((-1069.95641689), (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyDouble() , anyDouble());
      boolean boolean3 = ArrayUtils.isSorted(doubleArray1, comparator0);
      assertEquals(2, doubleArray1.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      ArrayUtils.reverse(shortArray0, (-3349), (-3349));
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long((-3349));
      assertNotNull(long0);
      assertEquals((-3349L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short)2);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(2L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[0]);
      assertNotNull(long2);
      assertEquals(7, longArray0.length);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-3349L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-3349));
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertEquals((-3349L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((long) longArray0[2]);
      assertNotNull(long4);
      assertEquals(7, longArray0.length);
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertEquals((-3349L), (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((-2147483648L));
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertEquals((-2147483648L), (long)long5);
      
      longArray0[5] = long5;
      Long long6 = new Long((long) longArray0[2]);
      assertNotNull(long6);
      assertEquals(7, longArray0.length);
      assertTrue(long6.equals((Object)long3));
      assertTrue(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long5));
      assertTrue(long6.equals((Object)long0));
      assertTrue(long6.equals((Object)long2));
      assertEquals((-3349L), (long)long6);
      
      longArray0[6] = long6;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(7, longArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'o';
      charArray0[2] = '[';
      charArray0[3] = 'y';
      charArray0[4] = '3';
      charArray0[5] = '';
      charArray0[6] = 'J';
      charArray0[7] = 's';
      char[] charArray1 = ArrayUtils.add(charArray0, (int) (short)2, 'J');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'N', 'o', '[', 'y', '3', '', 'J', 's'}, charArray0);
      assertArrayEquals(new char[] {'N', 'o', 'J', '[', 'y', '3', '', 'J', 's'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-724L);
      longArray0[1] = 2067L;
      longArray0[2] = (-3860L);
      longArray0[3] = 66L;
      longArray0[4] = (-1788L);
      longArray0[5] = (-156L);
      longArray0[6] = 185L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 2067L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-724L), 2067L, (-3860L), 66L, (-1788L), (-156L), 185L}, longArray0);
      assertArrayEquals(new long[] {2067L, (-724L), 2067L, (-3860L), 66L, (-1788L), (-156L), 185L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-510));
      assertNotNull(integer0);
      assertEquals((-510), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3019));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-3019), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3019));
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-3019), (int)integer2);
      
      integerArray0[2] = integer2;
      MutableInt mutableInt0 = new MutableInt(185L);
      assertEquals(185.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(185L, mutableInt0.longValue());
      assertEquals("185", mutableInt0.toString());
      assertEquals(185.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(185, (int)mutableInt0.toInteger());
      assertEquals(185, (int)mutableInt0.getValue());
      assertEquals((byte) (-71), mutableInt0.byteValue());
      assertEquals(185, mutableInt0.intValue());
      assertEquals((short)185, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      Integer integer3 = mutableInt0.toInteger();
      assertEquals(185.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(185L, mutableInt0.longValue());
      assertEquals("185", mutableInt0.toString());
      assertEquals(185.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(185, (int)mutableInt0.toInteger());
      assertEquals(185, (int)mutableInt0.getValue());
      assertEquals((byte) (-71), mutableInt0.byteValue());
      assertEquals(185, mutableInt0.intValue());
      assertEquals((short)185, mutableInt0.shortValue());
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(185, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals((-1), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(1814);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals(1814, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-3019));
      assertNotNull(integer6);
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertEquals((-3019), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = mutableInt0.getValue();
      assertEquals(185.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(185L, mutableInt0.longValue());
      assertEquals("185", mutableInt0.toString());
      assertEquals(185.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(185, (int)mutableInt0.toInteger());
      assertEquals(185, (int)mutableInt0.getValue());
      assertEquals((byte) (-71), mutableInt0.byteValue());
      assertEquals(185, mutableInt0.intValue());
      assertEquals((short)185, mutableInt0.shortValue());
      assertNotNull(integer7);
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertEquals(185, (int)integer7);
      
      integerArray0[7] = integer7;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-40));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-510), (-3019), (-3019), 185, (-1), 1814, (-3019), 185}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      Short short0 = new Short((short) (-802));
      assertNotNull(short0);
      assertEquals((short) (-802), (short)short0);
      
      Short short1 = new Short((short) (-802));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-802), (short)short1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-802);
      floatArray0[1] = 4.0F;
      floatArray0[2] = (float) (short) (-802);
      floatArray0[3] = (float) (short) (-802);
      floatArray0[4] = (float) (short) (-802);
      floatArray0[5] = (float) (short) (-802);
      floatArray0[6] = (float) (short) (-802);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-802.0F));
      assertArrayEquals(new float[] {(-802.0F), 4.0F, (-802.0F), (-802.0F), (-802.0F), (-802.0F), (-802.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2721;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)2721;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (short)2721;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.5, (-1969.9047162149));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 2721.0, 0.0, 0.0, 0.0, 2721.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Short[] shortArray1 = new Short[8];
      shortArray1[0] = (Short) (short)0;
      shortArray1[1] = (Short) (short)2721;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5, (int) shortArray1[1], (-970.876505067167));
      assertArrayEquals(new double[] {0.0, 0.0, 2721.0, 0.0, 0.0, 0.0, 2721.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals((-1), int0);
      
      shortArray1[2] = (Short) (short)0;
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double(994.67);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(994.67, (double)double1, 0.01);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[0] = (Double) 0.0;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      ArrayUtils.swap((int[]) null, (int) (short)2721, (int) (short)2721, 24);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-88)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      boolean boolean1 = ArrayUtils.isSorted(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3774;
      shortArray0[2] = (short)3774;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)3774, (short)0, (short)3774}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Integer integer0 = Integer.getInteger((String) null);
      assertNull(integer0);
      
      ArrayUtils.hashCode((Object) null);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3774);
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)3774, (short)0, (short)3774}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 0, 52);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Double double0 = Double.valueOf(2515.4185343);
      assertNotNull(double0);
      assertEquals(2515.4185343, (double)double0, 0.01);
      
      Double double1 = new Double(0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0, comparator0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      float[] floatArray0 = new float[11];
      floatArray0[1] = 0.0F;
      Short[] shortArray0 = new Short[0];
      Short short0 = new Short((short)6);
      assertNotNull(short0);
      assertEquals((short)6, (short)short0);
      
      Short[] shortArray1 = ArrayUtils.addFirst(shortArray0, short0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.swap((byte[]) null, 0, 0, 110);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-3367.0F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-421);
      shortArray0[2] = (short)1690;
      shortArray0[3] = (short) (-4005);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-421), (short)1690, (short) (-4005)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-421), (short)1690, (short) (-4005)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = ArrayUtils.get(objectArray0, 785);
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) (short)1690;
      objectArray0[2] = (Object) (short)1690;
      objectArray0[3] = (Object) (short) (-4005);
      Object object1 = ArrayUtils.toPrimitive(objectArray0[2]);
      assertNotNull(object1);
      assertEquals(7, objectArray0.length);
      assertEquals((short)1690, object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) (short)1690;
      objectArray0[6] = (Object) (short) (-4005);
      Object object2 = new Object();
      assertNotNull(object2);
      
      Object[] objectArray1 = ArrayUtils.addFirst(objectArray0, object2);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      assertEquals(8, objectArray1.length);
      assertEquals(7, objectArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      ArrayUtils.reverse(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-4005), (short)1690, (short) (-421), (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((short)0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(196.25);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(196.25, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((short)1690);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(1690.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((short) (-4005));
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals((-4005.0), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(645.83020338);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals(645.83020338, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = Double.valueOf((-1392.8774339792));
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals((-1392.8774339792), (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((-1069.95641689));
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertEquals((-1069.95641689), (double)double7, 0.01);
      
      doubleArray0[7] = double7;
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyDouble() , anyDouble());
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0, comparator0);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.addAll((Character[]) null, (Character[]) null);
      assertNull(characterArray0);
      
      short[] shortArray0 = new short[9];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)115);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 5870.0592084);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'A';
      charArray0[2] = 'R';
      ArrayUtils.shift(charArray0, 175);
      assertArrayEquals(new char[] {'R', 'k', 'A'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      int[] intArray0 = new int[2];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "o\"\"?okrJd-!:|");
      assertNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      char[] charArray0 = new char[6];
      charArray0[2] = '=';
      charArray0[3] = '+';
      charArray0[4] = 'K';
      charArray0[5] = 'N';
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 'N';
      longArray0[3] = (long) 'N';
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {78L, 0L, 78L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.swap((byte[]) null, 8, 0);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "o\"\"?okrJd-!:|");
      assertNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      char[] charArray0 = new char[6];
      charArray0[2] = '=';
      charArray0[3] = '+';
      charArray0[4] = 'K';
      charArray0[5] = 'N';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '~', 184);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '=', '+', 'K', 'N'}, charArray0);
      assertEquals(6, charArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 'N';
      longArray0[3] = (long) 'N';
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {78L, 0L, 78L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.swap((byte[]) null, 8, 184);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {184, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 3439L;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 512.66F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {512.66F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {512.66F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, 1086L);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotSame(longArray1, longArray0);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = '~';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'Q', (-104));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      assertArrayEquals(new char[] {'~', '~'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      ArrayUtils.swap((byte[]) null, 3458, (-104));
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(charArray0, '{', (-923));
      assertArrayEquals(new char[] {'~', '~'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2325);
      intArray0[1] = 2;
      intArray0[2] = 42;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)91;
      byteArray1[2] = (byte)91;
      byteArray1[3] = (byte)91;
      ArrayUtils.swap(byteArray1, 2760, 517);
      assertArrayEquals(new byte[] {(byte)91, (byte)91, (byte)91, (byte)91}, byteArray1);
      assertEquals(4, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {(-2325), 2, 42, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 11;
      intArray0[1] = 2578;
      intArray0[2] = 2578;
      intArray0[3] = 11;
      intArray0[4] = 2578;
      intArray0[5] = 11;
      ArrayUtils.reverse((long[]) null);
      ArrayUtils.swap((byte[]) null, 2578, 8);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {11, 2578, 2578, 11, 2578, 11, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte) (-1), (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      ArrayUtils.swap(byteArray0, 2, 3859);
      assertArrayEquals(new byte[] {(byte)8}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((byte)8);
      assertNotNull(short0);
      assertEquals((short)8, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte)8);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)8, (short)short1);
      
      shortArray0[1] = short1;
      short short2 = (short)0;
      Short short3 = new Short((short)0);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertEquals((short)0, (short)short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short((short)0);
      assertNotNull(short4);
      assertTrue(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertEquals((short)0, (short)short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short((short)1455);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertEquals((short)1455, (short)short5);
      
      shortArray0[4] = short5;
      Short short6 = new Short((short) (-528));
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short3));
      assertEquals((short) (-528), (short)short6);
      
      shortArray0[5] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)8, (short)8, (short)0, (short)0, (short)1455, (short) (-528)}, shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)shortArray0[1];
      intArray0[2] = (int) (byte)8;
      intArray0[3] = (int) short2;
      intArray0[4] = (int) (short)1455;
      intArray0[5] = (int) (byte)8;
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (byte)8;
      intArray0[8] = (int) (short)shortArray0[5];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 8, 8, 0, 1455, 8, 0, 8, (-528)}, intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)555;
      long[] longArray0 = new long[4];
      shortArray0[0] = (short)555;
      longArray0[2] = (long) (short)555;
      longArray0[3] = (long) (short)555;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 555L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 555L, 555L}, longArray0);
      assertArrayEquals(new long[] {555L, 0L, 0L, 555L, 555L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.swap((double[]) null, (int) (short)555, (-263), 2140253063);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)555);
      assertArrayEquals(new short[] {(short)555, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2140253063;
      intArray0[1] = 2140253063;
      intArray0[2] = 2140253063;
      intArray0[3] = (int) (short)3341;
      intArray0[4] = (int) (short)555;
      intArray0[5] = (int) (short)555;
      boolean boolean1 = ArrayUtils.contains(intArray0, 2140253063);
      assertArrayEquals(new int[] {2140253063, 2140253063, 2140253063, 3341, 555, 555}, intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 93.0;
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-73);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-73));
      assertArrayEquals(new short[] {(short) (-1), (short) (-73)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 2147L;
      longArray0[1] = (-712L);
      longArray0[2] = 2147L;
      longArray0[3] = (long) (short) (-1);
      longArray0[4] = 2147L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, (-2146856179));
      assertArrayEquals(new long[] {2147L, (-712L), 2147L, (-1L), 2147L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      int int0 = 2;
      int int1 = ArrayUtils.lastIndexOf((long[]) null, 0L, 2);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      int int2 = 2171;
      boolean boolean0 = ArrayUtils.contains(intArray0, 2171);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      byteArray0[0] = byte1;
      String string0 = "j^*E(^Ci_bKL=(B/Y!Z";
      try { 
        Byte.decode("j^*E(^Ci_bKL=(B/Y!Z");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j^*E(^Ci_bKL=(B/Y!Z\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      ArrayUtils.swap((boolean[]) null, 8, 3, 8);
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-80));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-80), (byte)byte2);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-31));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      Short short0 = new Short((short) (-802));
      assertNotNull(short0);
      assertEquals((short) (-802), (short)short0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 13L, 2);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (-1);
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-28));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, (byte[]) null);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)8;
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 13, (-967));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)8}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(3, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      Byte[] byteArray1 = new Byte[1];
      Byte byte0 = new Byte((byte) (-69));
      assertNotNull(byte0);
      assertEquals((byte) (-69), (byte)byte0);
      
      byteArray1[0] = byte0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-12));
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-69)}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte) (-69)}, byteArray3);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      byte byte0 = (byte) (-11);
      Byte byte1 = new Byte((byte) (-11));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-11), (byte)byte1);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-11), (byte) (-11)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences((double[]) null, (double) (byte) (-11));
      assertNull(doubleArray1);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-11), (byte) (-11)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-11), (byte) (-11), (byte) (-11), (byte) (-11), (byte) (-11)}, byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      ArrayUtils.shift(doubleArray0, (int) byte0, (-2108945155), (-2108945155));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.swap(floatArray0, 335, 1642);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 'D';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'D');
      assertArrayEquals(new char[] {'W', 'D'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'W');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'W', 'D'}, charArray0);
      assertArrayEquals(new char[] {'D'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (int) (short) (-543);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, (-543)}, intArray0);
      assertArrayEquals(new int[] {0, 0, (-543), 0, 0, (-543)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 65;
      intArray0[1] = (-683);
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = 127;
      intArray0[5] = (-1599);
      intArray0[6] = 0;
      intArray0[7] = (-877);
      intArray0[8] = 105;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {65, (-683), (-1), 0, 127, (-1599), 0, (-877), 105}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(18, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-320);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-750);
      shortArray0[5] = (short)4103;
      shortArray0[6] = (short) (-4059);
      shortArray0[7] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)996);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-320), (short) (-1), (short) (-750), (short)4103, (short) (-4059), (short)0, (short)996}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-320), (short) (-1), (short) (-750), (short)4103, (short) (-4059), (short)0}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals("0", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[0] = integer1;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      MutableInt mutableInt0 = new MutableInt((Number) integer0);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertNotNull(mutableInt0);
      assertTrue(integer0.equals((Object)int0));
      
      MutableInt mutableInt1 = new MutableInt(0);
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0, mutableInt1.intValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      int int1 = mutableInt0.compareTo(mutableInt1);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0, mutableInt1.intValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Integer integer1 = mutableInt0.getValue();
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertNotSame(mutableInt0, mutableInt1);
      assertNotNull(integer1);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      
      mutableInt0.setValue((Number) int0);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertNotSame(mutableInt0, mutableInt1);
      assertTrue(int0 == int1);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      int[] intArray0 = new int[2];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray1);
      assertEquals(2, intArray0.length);
      assertEquals(6, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1737);
      intArray1[1] = (int) (short) (-1);
      intArray1[2] = (-1737);
      intArray1[3] = (int) (short) (-1);
      intArray1[4] = (int) (short) (-1);
      intArray1[5] = (int) (short) (-1);
      intArray1[6] = (int) (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1737), intArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1737, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(578, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 578, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)91;
      byteArray0[3] = (byte)91;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)91;
      intArray0[1] = (-865);
      ArrayUtils.reverse(intArray0, (int) (byte)91, (-3459));
      assertArrayEquals(new int[] {91, (-865)}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)91, 89);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {91, (-865)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)91;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 89;
      longArray0[3] = (long) (-865);
      longArray0[4] = (long) (-3459);
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-4289), (-3459));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {91L, (-1L), 89L, (-865L), (-3459L), 0L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(floatArray0, 1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 32.71686F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 32.71686F);
      assertArrayEquals(new float[] {32.71686F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)28;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-112));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-100), (byte)28, (byte)0, (byte) (-52), (byte)8, (byte)125, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-100), (byte)28, (byte)0, (byte) (-52), (byte)8, (byte)125, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, ')');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'D');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) ')';
      intArray0[1] = 2;
      intArray0[2] = (int) 'D';
      intArray0[3] = 6;
      intArray0[4] = 6;
      intArray0[5] = (int) 'D';
      intArray0[6] = 6;
      int[] intArray1 = ArrayUtils.insert(6, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {41, 2, 68, 6, 6, 68, 6}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      try { 
        Short.valueOf("", 6);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) 0);
      assertNotNull(doubleStream0);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 32.71686F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 32.71686F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {32.71686F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {32.71686F, 32.71686F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, 32.71686F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {32.71686F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {32.71686F, 32.71686F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(1, int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 1;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1639;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1639, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1639, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 0, 0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) 0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[2];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (double) 0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1L;
      boolean boolean1 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 2237;
      doubleArray0[3] = (double) 2237;
      doubleArray0[4] = (double) 2237;
      doubleArray0[5] = (double) 1L;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2237, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2237, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Boolean boolean0 = new Boolean("XWpLW@<91d%<");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (-3274L));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2743L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-2743L);
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-2743L), (-2952));
      assertArrayEquals(new long[] {(-2743L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(0, int0);
      
      Double double0 = new Double(2101.213850670372);
      assertNotNull(double0);
      assertEquals(2101.213850670372, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) double0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Float float0 = new Float(1.0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt1.intValue());
      assertEquals(1L, mutableInt1.longValue());
      assertEquals((short)1, mutableInt1.shortValue());
      assertEquals(1.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(1.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt1.toInteger());
      assertEquals("1", mutableInt1.toString());
      assertEquals(1, (int)mutableInt1.getValue());
      assertEquals((byte)1, mutableInt1.byteValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-4009);
      intArray0[1] = 1625;
      intArray0[2] = (-1);
      intArray0[3] = 4928;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) mutableInt1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1));
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNull(object0);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      ArrayUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1, Integer.MAX_VALUE);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.shift(floatArray0, 8);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (byte)0;
      Short[] shortArray1 = new Short[0];
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      short[] shortArray3 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray3, shortArray0);
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray3);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray3.length);
      assertFalse(shortArray3.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      String string0 = "'Xut9al?fwuG>$";
      int int0 = 1703;
      try { 
        Short.valueOf("'Xut9al?fwuG>$", 1703);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1703 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      int int1 = mutableInt0.getAndDecrement();
      assertEquals((-2), mutableInt0.intValue());
      assertEquals((-2L), mutableInt0.longValue());
      assertEquals((-2.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-2", mutableInt0.toString());
      assertEquals((short) (-2), mutableInt0.shortValue());
      assertEquals((-2), (int)mutableInt0.toInteger());
      assertEquals((byte) (-2), mutableInt0.byteValue());
      assertEquals((-2.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2), (int)mutableInt0.getValue());
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.hashCode((Object) mutableInt0);
      assertEquals((-2), mutableInt0.intValue());
      assertEquals((-2L), mutableInt0.longValue());
      assertEquals((-2.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-2", mutableInt0.toString());
      assertEquals((short) (-2), mutableInt0.shortValue());
      assertEquals((-2), (int)mutableInt0.toInteger());
      assertEquals((byte) (-2), mutableInt0.byteValue());
      assertEquals((-2.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2), (int)mutableInt0.getValue());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)2;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)99);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)99, (byte)2}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      ArrayUtils.hashCode((Object) byte0);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-55)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte) (-55)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-55);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-55)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)4049;
      shortArray0[1] = (short)940;
      shortArray0[2] = (short)0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)4049, (short)940, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (-994);
      floatArray0[3] = (-592.6235F);
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (-994);
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-994.0F), (-592.6235F), 0.0F, 0.0F, (-994.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-994.0F), (-592.6235F), 0.0F, 0.0F, (-994.0F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 1;
      intArray0[2] = (-994);
      intArray0[3] = 1;
      intArray0[4] = 116;
      intArray0[5] = (-994);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 116);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 1, (-994), 1, (-994)}, intArray1);
      assertArrayEquals(new int[] {0, 1, (-994), 1, 116, (-994)}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(6, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 313.477F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {313.477F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Double double0 = new Double(313.477F);
      assertNotNull(double0);
      assertEquals(313.47698974609375, (double)double0, 0.01);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)7;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-71);
      longArray0[1] = (long) (byte)7;
      longArray0[2] = (long) (byte) (-71);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-71L), 7L, (-71L)}, longArray0);
      assertArrayEquals(new long[] {(-71L), 7L, (-71L), (-71L), 7L, (-71L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-71);
      intArray0[1] = (int) (byte)7;
      intArray0[2] = (int) (byte)7;
      intArray0[3] = (int) (byte)7;
      intArray0[4] = (int) (byte) (-71);
      intArray0[5] = (int) (byte) (-71);
      intArray0[6] = (int) (byte) (-71);
      intArray0[7] = (int) (byte) (-71);
      intArray0[8] = (int) (byte)7;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte) (-71), 2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-71), 7}, intArray1);
      assertArrayEquals(new int[] {(-71), 7, 7, 7, (-71), (-71), (-71), (-71), 7}, intArray0);
      assertEquals(2, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 5870.0592084);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      Character character0 = Character.valueOf('~');
      assertNotNull(character0);
      assertEquals('~', (char)character0);
      
      Character character1 = new Character('~');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('~', (char)character1);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      long[] longArray0 = new long[0];
      int int0 = (-3894);
      ArrayUtils.shift(longArray0, (-1354), (-3894), (-4712));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      ArrayUtils.swap(doubleArray0, (-1354), (-3894));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      ArrayUtils.shift((Object[]) null, (-4712));
      String string0 = ArrayUtils.toString((Object) character1);
      assertNotNull(string0);
      assertTrue(character1.equals((Object)character0));
      assertEquals("~", string0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-4712);
      intArray0[1] = (int) '~';
      intArray0[2] = (int) 'k';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 126, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3090.618F;
      floatArray0[2] = 2918.0F;
      floatArray0[3] = (-591.87555F);
      floatArray0[4] = (-101.13F);
      floatArray0[5] = 2090.031F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 32.71686F;
      floatArray0[8] = 0.0F;
      ArrayUtils.swap(floatArray0, (-222), 118);
      assertArrayEquals(new float[] {0.0F, 3090.618F, 2918.0F, (-591.87555F), (-101.13F), 2090.031F, 0.0F, 32.71686F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-750);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)996;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-29233));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-750), (short)0, (short)996, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-750), (short)0, (short)996, (short)0, (short) (-29233)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray((int[]) null, 59, 79);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 93.0;
      ArrayUtils.swap(doubleArray0, 57, (-2792));
      assertArrayEquals(new double[] {93.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 93.0;
      objectArray0[1] = (Object) 93.0;
      objectArray0[2] = (Object) 93.0;
      objectArray0[3] = (Object) 93.0;
      objectArray0[4] = (Object) 93.0;
      objectArray0[5] = (Object) 93.0;
      ArrayUtils.shift(objectArray0, 57);
      assertEquals(6, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (-2792));
      assertEquals((-1), int0);
      
      ArrayUtils.shift((long[]) null, 119, 65, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      ArrayUtils.swap(floatArray0, 1, (int) (byte)0, 1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-2147483648L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-2147483648L), 1L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      MutableInt[] mutableIntArray0 = new MutableInt[3];
      MutableInt mutableInt0 = new MutableInt(1);
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      mutableIntArray0[1] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1", mutableInt0.toString());
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals(1, mutableInt1.intValue());
      assertEquals((byte)1, mutableInt1.byteValue());
      assertEquals(1, (int)mutableInt1.getValue());
      assertEquals(1, (int)mutableInt1.toInteger());
      assertEquals(1.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(1.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)1, mutableInt1.shortValue());
      assertEquals("1", mutableInt1.toString());
      assertEquals(1L, mutableInt1.longValue());
      assertNotNull(mutableInt1);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[2] = mutableInt1;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotNull(mutableIntArray1);
      assertEquals(0, mutableIntArray1.length);
      assertEquals(3, mutableIntArray0.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-2715.935F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 13L, 2);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (-1);
      boolean boolean0 = ArrayUtils.contains(intArray0, 2171);
      assertArrayEquals(new int[] {0, (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, 1686L);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short) (-1);
      objectArray0[1] = (Object) (short) (-1);
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) (short) (-1);
      objectArray0[4] = (Object) (short) (-1);
      ArrayUtils.shift(objectArray0, 1891, (-1), 18688);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "o\"\"?okrJd-!:|");
      assertNull(stringArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 184;
      doubleArray0[0] = (double) 184;
      doubleArray0[2] = (-3719.33478);
      doubleArray0[3] = (-3719.33478);
      ArrayUtils.shift(doubleArray0, 184);
      assertArrayEquals(new double[] {184.0, 0.0, (-3719.33478), (-3719.33478)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = '[';
      charArray0[2] = 'b';
      charArray0[3] = ']';
      charArray0[4] = '[';
      charArray0[5] = 'G';
      charArray0[6] = ']';
      charArray0[7] = '[';
      int[] intArray1 = ArrayUtils.subarray(intArray0, 184, 83);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {184, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = '$';
      charArray0[2] = 'i';
      charArray0[3] = 'n';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '*', 4);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {']', '$', 'i', 'n'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-119);
      floatArray0[2] = (float) (byte) (-117);
      ArrayUtils.swap(floatArray0, 1, (int) (byte) (-117), 1);
      assertArrayEquals(new float[] {0.0F, (-119.0F), (-117.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (byte) (-117);
      longArray0[3] = (long) (byte) (-119);
      longArray0[4] = (long) (byte) (-117);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-2147483648L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 1L, (-117L), (-119L), (-117L)}, longArray0);
      assertArrayEquals(new long[] {(-2147483648L), 1L, 1L, (-117L), (-119L), (-117L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      
      MutableInt[] mutableIntArray0 = new MutableInt[3];
      MutableInt mutableInt0 = new MutableInt(1);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1, mutableInt0.intValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt((Number) (byte) (-117));
      assertEquals((-117L), mutableInt1.longValue());
      assertEquals((-117), (int)mutableInt1.getValue());
      assertEquals((-117), (int)mutableInt1.toInteger());
      assertEquals((byte) (-117), mutableInt1.byteValue());
      assertEquals((-117.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals("-117", mutableInt1.toString());
      assertEquals((-117), mutableInt1.intValue());
      assertEquals((-117.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((short) (-117), mutableInt1.shortValue());
      assertNotNull(mutableInt1);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(mutableInt1);
      assertEquals((-117L), mutableInt1.longValue());
      assertEquals((-117), (int)mutableInt1.getValue());
      assertEquals((-117), (int)mutableInt1.toInteger());
      assertEquals((byte) (-117), mutableInt1.byteValue());
      assertEquals((-117.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals("-117", mutableInt1.toString());
      assertEquals((-117), mutableInt1.intValue());
      assertEquals((-117.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((short) (-117), mutableInt1.shortValue());
      assertEquals((-117), mutableInt2.intValue());
      assertEquals("-117", mutableInt2.toString());
      assertEquals((-117L), mutableInt2.longValue());
      assertEquals((-117), (int)mutableInt2.getValue());
      assertEquals((short) (-117), mutableInt2.shortValue());
      assertEquals((-117.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-117), (int)mutableInt2.toInteger());
      assertEquals((byte) (-117), mutableInt2.byteValue());
      assertEquals((-117.0), mutableInt2.doubleValue(), 0.01);
      assertNotNull(mutableInt2);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      
      mutableIntArray0[2] = mutableInt2;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeElements(mutableIntArray0, mutableIntArray0);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotNull(mutableIntArray1);
      assertEquals(0, mutableIntArray1.length);
      assertEquals(3, mutableIntArray0.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 0, 52);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[1] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[2] = class1;
      classArray0[3] = class0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((char[]) null, (-298), (-298), 2162);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2162;
      floatArray0[1] = (float) 2162;
      floatArray0[2] = (float) (-298);
      ArrayUtils.shift(floatArray0, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {(-298.0F), 2162.0F, 2162.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (byte)0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)0;
      floatArray0[2] = (float) 3;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {0.0F, 3.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-2044));
      assertNotNull(integer0);
      assertEquals((-2044), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1172.7928F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1391.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2635.857F);
      floatArray0[5] = 708.0F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (-810.5F);
      floatArray0[8] = 2563.2988F;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 1391.0F, 0.0F, (-2635.857F), 708.0F, 1.0F, (-810.5F), 2563.2988F, 1172.7928F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 36;
      intArray0[1] = (-1);
      ArrayUtils.swap(intArray0, 1216, 1216, 54);
      assertArrayEquals(new int[] {36, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1636));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1636)}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 176;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 176}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      doubleArray0[1] = (double) 0;
      Integer integer0 = new Integer(176);
      assertNotNull(integer0);
      assertEquals(176, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 184;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 184}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      doubleArray0[1] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (double) 184);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      intArray0[1] = (-1);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-1), 184}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 184;
      doubleArray0[1] = (double) 184;
      doubleArray0[2] = (double) 184;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (double) 184);
      assertArrayEquals(new double[] {184.0, 184.0, 184.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      ArrayUtils.reverse(shortArray1, (int) (short)0, (int) (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      int int0 = 0;
      ArrayUtils.reverse((int[]) null, 0, 0);
      double[] doubleArray0 = null;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short)5;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3051), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3051, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 93.0;
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = '';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'', ';'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      short[] shortArray0 = new short[3];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1739), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1739, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short) (-2019);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)98, (short) (-2019), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)98, (short) (-2019), (short)0, (short)0, (short)98, (short) (-2019), (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = '&';
      charArray0[2] = '6';
      charArray0[3] = '4';
      charArray0[4] = 'K';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'K', '4', '6', '&', 'r'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 1209);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1209, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      Float float0 = new Float(1648.2F);
      assertNotNull(float0);
      assertEquals(1648.2F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1648.2F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)78;
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      float[] floatArray0 = new float[5];
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)59);
      assertNotNull(short0);
      assertEquals((short)59, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertNotNull(short1);
      assertEquals(3, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)59, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)42);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)42, (short)short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)59, (short)59, (short)42}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.reverse(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 409.0924235051861;
      Byte byte0 = new Byte((byte)120);
      assertNotNull(byte0);
      assertEquals((byte)120, (byte)byte0);
      
      Byte byte1 = new Byte((byte)15);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)15, (byte)byte1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)15;
      doubleArray0[0] = (double) (byte) (-98);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)72, 56);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)72, (byte)72, (byte)1, (byte)120, (byte)15, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Short short0 = new Short((short)1347);
      assertNotNull(short0);
      assertEquals((short)1347, (short)short0);
      
      Short short1 = new Short((byte)120);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)120, (short)short1);
      
      Short short2 = new Short((short)6);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)6, (short)short2);
      
      Short short3 = new Short((short)6);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short)6, (short)short3);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 2);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'P');
      assertNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, 2998, 'P');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2998, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = ',';
      charArray0[2] = 'x';
      charArray0[3] = '4';
      charArray0[4] = '!';
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, (boolean[]) null);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)70);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short)54);
      assertNotNull(short0);
      assertEquals((short)54, (short)short0);
      
      shortArray0[4] = short0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = 'p';
      charArray0[2] = 'D';
      charArray0[3] = 'z';
      charArray0[4] = '?';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'p');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'p', 'k', 'p', 'D', 'z', '?'}, charArray1);
      assertArrayEquals(new char[] {'k', 'p', 'D', 'z', '?'}, charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-2981));
      assertNotNull(short0);
      assertEquals((short) (-2981), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertNotNull(short1);
      assertEquals(7, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-2981), (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1861));
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short) (-1861), (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-220));
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short) (-220), (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-220));
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short3));
      assertEquals((short) (-220), (short)short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) shortArray0[4]);
      assertNotNull(short5);
      assertEquals(7, shortArray0.length);
      assertTrue(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short3));
      assertEquals((short) (-220), (short)short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short) shortArray0[5]);
      assertNotNull(short6);
      assertEquals(7, shortArray0.length);
      assertTrue(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertTrue(short6.equals((Object)short5));
      assertTrue(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short2));
      assertEquals((short) (-220), (short)short6);
      
      shortArray0[6] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2981), (short) (-2981), (short) (-1861), (short) (-220), (short) (-220), (short) (-220), (short) (-220)}, shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.reverse(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2721;
      short short0 = (short)48;
      shortArray0[1] = (short)48;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) (short)2721);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2721, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = ',';
      charArray0[2] = 'x';
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'o';
      charArray0[1] = '+';
      charArray0[2] = 'D';
      charArray0[3] = '1';
      charArray0[4] = 'B';
      charArray0[5] = ']';
      charArray0[6] = 'a';
      charArray0[7] = 'L';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'a');
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'o', '+', 'D', '1', 'B', ']', 'a', 'L'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-73);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-513));
      assertArrayEquals(new short[] {(short) (-73)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      byte[] byteArray0 = new byte[1];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'd';
      charArray0[2] = 'S';
      charArray0[3] = 'q';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'S');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'q', 'd', 'S', 'q'}, charArray0);
      assertArrayEquals(new char[] {'S', 'q', 'd', 'S', 'q'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeElement(charArray1, 'S');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'q', 'd', 'S', 'q'}, charArray0);
      assertArrayEquals(new char[] {'S', 'q', 'd', 'S', 'q'}, charArray1);
      assertArrayEquals(new char[] {'q', 'd', 'S', 'q'}, charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertEquals(4, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'q';
      longArray0[1] = (long) 184;
      longArray0[2] = (long) 'S';
      int int0 = ArrayUtils.indexOf(longArray0, (long) 184, 184);
      assertArrayEquals(new long[] {113L, 184L, 83L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Character character0 = Character.valueOf('\u0085');
      assertNotNull(character0);
      assertEquals('\u0085', (char)character0);
      
      Character character1 = new Character('\u0085');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('\u0085', (char)character1);
      
      byte[] byteArray0 = new byte[2];
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'd');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3521.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1248.4F);
      floatArray0[5] = 2015.0F;
      floatArray0[6] = (-82.96711F);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-82.96711F), 2015.0F, (-1248.4F), (-1.0F), 3521.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-110));
      assertNull(byteArray0);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = 'j';
      charArray0[2] = 'y';
      charArray0[3] = 'b';
      ArrayUtils.shift(charArray0, (int) (byte) (-110));
      assertArrayEquals(new char[] {'y', 'b', 'a', 'j'}, charArray0);
      assertEquals(4, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'e');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'y', 'b', 'a', 'j'}, charArray1);
      assertArrayEquals(new char[] {'y', 'b', 'a', 'j'}, charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'a';
      longArray0[1] = (long) 'e';
      longArray0[2] = (long) 'y';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (int) (byte) (-110));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -110, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)98;
      long[] longArray0 = new long[6];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 321);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 321, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (-1);
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (byte)0);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-557), 91);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 36;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = Integer.MAX_VALUE;
      ArrayUtils.swap(intArray0, 321, (-557), 91);
      assertArrayEquals(new int[] {36, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-2155.56507648);
      doubleArray0[5] = 0.0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-2155.56507648), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2155.56507648), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      byte[] byteArray0 = new byte[7];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)27;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-2155.56507648), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2155.56507648), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[11];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 9);
      assertEquals(11, booleanArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "L({nAced?Fe~";
      stringArray0[1] = "BjL]_DI.UdZ'";
      stringArray0[2] = "L({nAced?Fe~";
      stringArray0[3] = "L({nAced?Fe~";
      stringArray0[4] = "BjL]_DI.UdZ'";
      stringArray0[5] = "BjL]_DI.UdZ'";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (-1), (-2313));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      Long[] longArray1 = new Long[3];
      Long long0 = Long.valueOf((long) (-2313));
      assertNotNull(long0);
      assertEquals((-2313L), (long)long0);
      
      longArray1[0] = long0;
      Long long1 = new Long((-1));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      
      longArray1[1] = long1;
      Long long2 = new Long(9);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals(9L, (long)long2);
      
      longArray1[2] = long2;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-2313L), (-1L), 9L}, longArray2);
      assertEquals(3, longArray2.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray0));
      
      boolean[] booleanArray1 = new boolean[5];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[2] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      ArrayUtils.reverse((byte[]) null, 85, 85);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 5057.6227;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-2155.56507648);
      doubleArray0[3] = 2796.742;
      doubleArray0[4] = (-3718.175673);
      doubleArray0[5] = 0.0;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {5057.6227, (-1.0), (-2155.56507648), 2796.742, (-3718.175673), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-2155.56507648), 2796.742, (-3718.175673), 0.0, 5057.6227}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)72;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)14, (int) (byte)0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)27, (byte)6, (byte)12, (byte)0, (byte)0, (byte)14, (byte)72}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-54);
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)120;
      byteArray0[8] = (byte) (-40);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-40));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)98, (byte) (-102), (byte)23, (byte) (-54), (byte)0, (byte)120, (byte)120, (byte) (-40)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)98, (byte) (-102), (byte)23, (byte) (-54), (byte)0, (byte)120, (byte)120}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Short short0 = new Short((byte)120);
      assertNotNull(short0);
      assertEquals((short)120, (short)short0);
      
      Short short1 = new Short((byte)120);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)120, (short)short1);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      Short[] shortArray1 = ArrayUtils.add(shortArray0, shortArray0[0]);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = ',';
      charArray0[2] = 'x';
      charArray0[3] = '4';
      charArray0[4] = '!';
      charArray0[5] = 'x';
      ArrayUtils.swap(charArray0, 0, 1504);
      assertArrayEquals(new char[] {'a', ',', 'x', '4', '!', 'x'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[6];
      ArrayUtils.shift(charArray0, 369, (-123), 700);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short) (byte)0);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1819.1966138);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 982.309997;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1819.1966138), 1.0, 0.0, 982.309997}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1819.1966138), 1.0, 0.0, 982.309997}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (-455L));
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-455L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-48);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)80, (byte) (-1), (byte)114, (byte) (-48)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)80, (byte)0, (byte) (-1), (byte)114, (byte)0, (byte)0, (byte) (-48)}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (int) (byte)8, (-2830));
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2720;
      shortArray0[1] = (short) (byte)8;
      shortArray0[2] = (short) (byte)8;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-28));
      assertArrayEquals(new short[] {(short)2720, (short)8, (short)8}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (byte)0;
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-286);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      ArrayUtils.reverse(intArray0, 0, (-286));
      assertArrayEquals(new int[] {0, 0, 0, 0, (-286), 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      ArrayUtils.swap((long[]) null, 0, 0, (-4));
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2720;
      shortArray0[1] = (short) (byte)8;
      shortArray0[2] = (short) (byte)8;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-28));
      assertArrayEquals(new short[] {(short)2720, (short)8, (short)8}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)98;
      shortArray0[1] = (short) (-2019);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)98, (short) (-2019), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)98, (short) (-2019), (short)0, (short)0, (short)98, (short) (-2019), (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = '&';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = 'K';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'K', '6', '6', '&', 'r'}, charArray0);
      assertEquals(5, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)98, (short) (-2019), (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2348);
      shortArray0[1] = (short) (-1866);
      shortArray0[2] = (short)34;
      shortArray0[3] = (short)3061;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2348), (short) (-1866), (short)34, (short)3061}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (-2348));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-2348), (short) (-1866), (short)34, (short)3061}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2348), (short) (-1866), (short)34, (short)3061}, shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-14));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertNotNull(string0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals("-14", string0);
      
      Integer integer0 = new Integer(345);
      assertNotNull(integer0);
      assertEquals(345, (int)integer0);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      Class<Integer> class0 = Integer.class;
      classArray0[1] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[2] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[3] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, 1599);
      assertNull(intArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1, "_y0D#iL;BRbW&dr1");
      assertNotNull(stringArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 1771, 3445, 3445);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 3439L;
      longArray0[1] = (-3088L);
      longArray0[2] = 0L;
      ArrayUtils.swap(longArray0, 40, 40);
      assertArrayEquals(new long[] {3439L, (-3088L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-866), (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -866, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = new boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1798), booleanArray0, booleanArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1798, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      MutableInt[] mutableIntArray0 = ArrayUtils.toArray((MutableInt[]) null);
      assertNull(mutableIntArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3009, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3009, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.insert((-2632), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, (-2632));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2632, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ArrayUtils.reverse(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 6L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {6L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = '<';
      charArray0[2] = 'N';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'o', '<', 'N'}, charArray0);
      assertArrayEquals(new char[] {'o', '<', 'N'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(116, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 116, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[1] = 'Q';
      charArray0[3] = 'A';
      charArray0[4] = 'Q';
      charArray0[5] = '@';
      charArray0[6] = 'A';
      charArray0[8] = 'A';
      ArrayUtils.shift(charArray0, 1, 1861, (-1385));
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'A', 'Q', '@', 'A', '\u0000', 'A', 'Q'}, charArray0);
      assertEquals(9, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) 1874, (-1.0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2179.022144);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      Character[] characterArray0 = new Character[1];
      char char0 = 'y';
      Character character0 = Character.valueOf('y');
      assertNotNull(character0);
      assertEquals('y', (char)character0);
      
      characterArray0[0] = character0;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, (int) char0);
      assertEquals(1, characterArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[0];
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Short[] shortArray0 = new Short[4];
      try { 
        Short.decode("double");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"double\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(2881.43748890923);
      assertNotNull(float0);
      assertEquals(2881.4375F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(0.0);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1.0F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(1.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-988.6171F));
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((-988.6171F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float(246.28892);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals(246.28893F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = ArrayUtils.get(floatArray0, 2);
      assertNotNull(float6);
      assertEquals(6, floatArray0.length);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float6, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      ArrayUtils.shift(charArray0, (int) '3');
      assertArrayEquals(new char[] {'\u0000', '3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1301);
      shortArray0[1] = (short) (-640);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2995;
      shortArray0[4] = (short)32;
      shortArray0[5] = (short) (-244);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)32;
      floatArray0[1] = (float) 3;
      floatArray0[3] = (float) (short) (-244);
      floatArray0[4] = (float) (short) (-640);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (float) (short)2995;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-244.0F), (int) (short) (-1301));
      assertEquals("{3}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      float[] floatArray0 = new float[5];
      ArrayUtils.indexOf(floatArray0, 1.0F);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      int[] intArray0 = new int[0];
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      ArrayUtils.shift(charArray0, (int) (byte)0);
      Short short0 = new Short((byte)0);
      Short short1 = new Short((byte)0);
      Short short2 = new Short((short)778);
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short)778, (short) (-1)}, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = (-3716.0F);
      floatArray0[3] = (-3716.0F);
      floatArray0[4] = (-3716.0F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3716.0F);
      doubleArray0[1] = (double) (-3716.0F);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 7, 7);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short) (-3312));
      shortArray0[0] = short0;
      Short short1 = new Short((byte)94);
      shortArray0[1] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3312), (short)94}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-3716.0F);
      floatArray0[1] = (-3716.0F);
      floatArray0[2] = (-3716.0F);
      floatArray0[3] = (-3716.0F);
      floatArray0[4] = (-3716.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-3716.0F), 3);
      assertEquals(2, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[8] = (-1342.5839F);
      ArrayUtils.swap(floatArray0, 335, 1642);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1342.5839F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1614.52237040981);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2247.7154611039805);
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 1034);
      assertArrayEquals(new double[] {0.0, (-1614.52237040981), (-1.0), (-2247.7154611039805), 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1034;
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, 0);
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[7];
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      shortArray0[0] = short1;
      Short short2 = new Short((short) (-1518));
      shortArray0[1] = short2;
      Short short3 = new Short((short)0);
      shortArray0[2] = short3;
      Short short4 = new Short((short)5);
      shortArray0[3] = short4;
      Short short5 = new Short(short0);
      shortArray0[4] = short5;
      Short short6 = new Short(short0);
      shortArray0[5] = short6;
      Short short7 = new Short((short)0);
      shortArray0[6] = short7;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-1518), (short)0, (short)5, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      ArrayUtils.swap((int[]) null, (-2120300309), (-3651), (-2120300309));
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      long[] longArray0 = new long[8];
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 1, 122);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      ArrayUtils.swap(longArray0, 0, (-4024), 2);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      charArray0[5] = 'b';
      charArray0[6] = 'b';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertEquals(14, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      charArray0[1] = 'c';
      charArray0[2] = 'h';
      charArray0[3] = 'v';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'B');
      assertArrayEquals(new char[] {'B', 'B', 'c', 'h', 'v'}, charArray1);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'y';
      charArray0[2] = 'q';
      charArray0[3] = '#';
      charArray0[4] = '\"';
      charArray0[5] = 'd';
      charArray0[6] = 'S';
      charArray0[7] = 'I';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, ')');
      assertNotNull(charArray1);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {')', 'N', 'y', 'q', '#', '\"', 'd', 'S', 'I'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-2355.1236618);
      doubleArray0[2] = (-161.56793491615852);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertEquals(3, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 1, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 184;
      ArrayUtils.toStringArray((Object[]) null, "o\"\"?okrJd-!:|");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte) (-1);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1), (-1353));
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte) (-61);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)116);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)11, (byte) (-52), (byte)17, (byte)4, (byte)87, (byte) (-61)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1614.52237040981);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2247.7154611039805);
      doubleArray0[4] = 0.0;
      ArrayUtils.subarray(doubleArray0, 0, 1034);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) "', has a length less than 2";
      objectArray0[2] = (Object) (-1.0);
      objectArray0[3] = (Object) (-1614.52237040981);
      ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'B', (-1));
      assertEquals((-1), int0);
      
      ArrayUtils.shift(byteArray0, (int) (byte)0);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-38));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)94);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[1] = '_';
      charArray0[2] = 'v';
      charArray0[3] = '0';
      charArray0[4] = 'e';
      charArray0[5] = '[';
      charArray0[6] = 'd';
      charArray0[7] = '(';
      charArray0[8] = '6';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '&', 329);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 23);
      Class<Integer> class0 = Integer.class;
      classArray0[2] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[3] = class1;
      ArrayUtils.nullToEmpty(classArray0);
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, 1599);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[7] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (int) (byte)17, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.lastIndexOf(charArray0, '0', 218);
      ArrayUtils.shift(charArray0, 0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(32.71686F);
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'B', (-1));
      assertTrue(int1 == int0);
      
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 9);
      Class<Double> class0 = Double.class;
      classArray0[0] = class0;
      Class<Double> class1 = Double.class;
      classArray0[1] = class1;
      Class<Double> class2 = Double.class;
      classArray0[2] = class2;
      Class<Double> class3 = Double.class;
      classArray0[3] = class3;
      Class<Double> class4 = Double.class;
      classArray0[4] = class4;
      Class<Double> class5 = Double.class;
      classArray0[5] = class5;
      Class<Double> class6 = Double.class;
      classArray0[6] = class6;
      Class<Double> class7 = Double.class;
      classArray0[7] = class7;
      Class<Double> class8 = Double.class;
      classArray0[8] = class8;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(9, classArray1.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, (int) (byte)0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true, false, true, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-2355.1236618);
      doubleArray0[2] = (-161.56793491615852);
      ArrayUtils.removeElement(doubleArray0, 0.0);
      char[] charArray0 = new char[0];
      int int0 = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0);
      assertEquals(1, bitSet0.length());
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-209.626537868716));
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(2, byteArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('B');
      characterArray0[0] = character0;
      Character character1 = new Character('k');
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'k');
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'k');
      assertArrayEquals(new char[] {'B'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      ArrayUtils.clone((char[]) null);
      ArrayUtils.reverse((char[]) null);
      Object[] objectArray0 = new Object[1];
      ArrayUtils.toStringArray(objectArray0, "', has a length less than 2");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (-2743L);
      floatArray0[4] = (-494.5417F);
      floatArray0[6] = (float) (-2743L);
      floatArray0[8] = (float) (byte) (-1);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-2743.0F), 0.0F, (-494.5417F), (-2743.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray1));
      
      ArrayUtils.reverse(booleanArray0, (int) (byte) (-1), Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = ArrayUtils.contains((float[]) null, 8.0F);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1035.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      ArrayUtils.indexOf(doubleArray1, (double) 0, 0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) integer0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = 0;
      ArrayUtils.reverse(booleanArray0, 0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-970.876505067167);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1515.6);
      doubleArray0[4] = (double) 0;
      double double0 = 0.0;
      ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (-970.876505067167);
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) (-1515.6);
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) (-1515.6);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[1], (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, ')');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'D');
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = (double) 'D';
      doubleArray0[2] = (double) 'D';
      doubleArray0[3] = (double) 'D';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 8.0, 4722.554);
      assertEquals(4, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ArrayUtils.get(objectArray0, 0);
      objectArray0[1] = null;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.toObject((int[]) null);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      Double double0 = new Double(128);
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertEquals(128.0, object0);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      ArrayUtils.get((Double[]) null, 1);
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1172.7928F;
      floatArray0[1] = (-1.0F);
      Long.getLong("?");
      Long long0 = new Long(1251L);
      Short short0 = new Short((short) (-1));
      ArrayUtils.toPrimitive((Object) null);
      ArrayUtils.toPrimitive((Object) null);
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-919.67), 53, (double) (short) (-1));
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ArrayUtils.get(objectArray0, 0);
      objectArray0[0] = null;
      Short short0 = new Short((short)5);
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      objectArray0[1] = object0;
      Object object1 = ArrayUtils.toPrimitive(objectArray0[1]);
      objectArray0[2] = object1;
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 0, (double) 0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[1], bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-1));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)94;
      doubleArray0[1] = (double) (byte)94;
      doubleArray0[2] = (double) (byte)94;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (byte)94;
      Character.valueOf('9');
      Character[] characterArray0 = new Character[0];
      ArrayUtils.isArrayIndexValid(characterArray0, (int) 94);
      ArrayUtils.shift(doubleArray0, (-1), (int) (byte)94, 1406);
      assertArrayEquals(new double[] {94.0, 94.0, 94.0, 94.0, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (short)1136;
      doubleArray0[4] = (-868.0651998814569);
      ArrayUtils.shift(doubleArray0, (-1472), 156, 69);
      assertArrayEquals(new double[] {0.0, 0.0, 1136.0, (-868.0651998814569), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.0;
      doubleArray0[0] = 409.0924235051861;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 409.0924235051861);
      assertEquals(1, bitSet0.length());
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = '$';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) ']';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '$';
      floatArray0[2] = (float) '$';
      floatArray0[3] = (float) 184;
      floatArray0[4] = (float) 93;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      ArrayUtils.reverse((int[]) null, 0, 0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (short) (-740);
      floatArray0[2] = (float) (short)2697;
      floatArray0[3] = (float) (short)1136;
      floatArray0[4] = (float) (short)1136;
      floatArray0[5] = (float) (short)930;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      float[] floatArray0 = new float[7];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(4, shortArray1.length);
  }
}
