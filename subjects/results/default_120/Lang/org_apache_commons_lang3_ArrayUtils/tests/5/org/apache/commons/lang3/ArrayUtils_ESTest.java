/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:17:27 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      Character character0 = Character.valueOf('\u0017');
      assertNotNull(character0);
      assertEquals('\u0017', (char)character0);
      
      Character character1 = Character.valueOf('*');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('*', (char)character1);
      
      Character character2 = new Character('R');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('R', (char)character2);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) '*';
      longArray0[1] = (long) 'R';
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 'R';
      longArray0[6] = (long) '\u0017';
      longArray0[7] = (long) (-1);
      longArray0[8] = (long) '*';
      ArrayUtils.reverse(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {42L, (-1L), 23L, 82L, (-1L), (-1L), (-1L), 82L, 42L}, longArray0);
      
      Long long0 = Long.getLong((String) null, 2147483647L);
      assertNotNull(long0);
      assertEquals(2147483647L, (long)long0);
      
      Long long1 = new Long(23L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(23L, (long)long1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = '*';
      charArray0[2] = '\'';
      charArray0[3] = 'R';
      charArray0[4] = '*';
      charArray0[5] = '\'';
      charArray0[6] = '\u0017';
      ArrayUtils.swap(charArray0, (-2304), (-102), 766);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'R', '*', '\'', 'R', '*', '\'', '\u0017'}, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-102);
      intArray0[1] = 766;
      intArray0[2] = (int) '\'';
      intArray0[3] = (-1);
      intArray0[4] = (int) '\'';
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-1), (-102));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '}', 1);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'E'}, charArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'T';
      floatArray0[1] = (float) 'E';
      floatArray0[2] = (float) 'E';
      floatArray0[3] = (float) (short) (-6287);
      floatArray0[4] = (float) '0';
      floatArray0[5] = (float) 'E';
      ArrayUtils.shift(floatArray0, 1);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {69.0F, 84.0F, 69.0F, 69.0F, (-6287.0F), 48.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)3;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)85, (byte)7, (byte)3, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {3, 0, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)3}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (-1119));
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1119)}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(3, booleanArray0, booleanArray0);
      assertEquals(6, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1.5);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1827.3981289417716;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1583.0F;
      Double double0 = new Double(1827.3981289417716);
      assertNotNull(double0);
      assertEquals(1827.3981289417716, (double)double0, 0.01);
      
      Double double1 = new Double(1827.3981289417716);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1827.3981289417716, (double)double1, 0.01);
      
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1827.3981289417716}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1827.3981289417716, 1827.3981289417716}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 651, 604);
      assertEquals(4, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
      assertSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 1164L);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {1164L}, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = (double) 1164L;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1164L, (-1452));
      assertEquals(2, doubleArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {3.0, 1164.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      MutableInt mutableInt0 = new MutableInt((-546));
      assertNotNull(mutableInt0);
      assertEquals((-546), (int)mutableInt0.toInteger());
      assertEquals((-546), (int)mutableInt0.getValue());
      assertEquals((-546.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-34), mutableInt0.byteValue());
      assertEquals((-546L), mutableInt0.longValue());
      assertEquals("-546", mutableInt0.toString());
      assertEquals((-546.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-546), mutableInt0.shortValue());
      assertEquals((-546), mutableInt0.intValue());
      
      MutableInt mutableInt1 = new MutableInt((-637));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals((-637), (int)mutableInt1.toInteger());
      assertEquals((-637), (int)mutableInt1.getValue());
      assertEquals((-637.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-637L), mutableInt1.longValue());
      assertEquals((byte) (-125), mutableInt1.byteValue());
      assertEquals("-637", mutableInt1.toString());
      assertEquals((short) (-637), mutableInt1.shortValue());
      assertEquals((-637), mutableInt1.intValue());
      assertEquals((-637.0), mutableInt1.doubleValue(), 0.01);
      
      boolean boolean0 = ArrayUtils.isSameType(mutableInt0, mutableInt1);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertTrue(boolean0);
      assertEquals((-546), (int)mutableInt0.toInteger());
      assertEquals((-546), (int)mutableInt0.getValue());
      assertEquals((-546.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-34), mutableInt0.byteValue());
      assertEquals((-546L), mutableInt0.longValue());
      assertEquals("-546", mutableInt0.toString());
      assertEquals((-546.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-546), mutableInt0.shortValue());
      assertEquals((-546), mutableInt0.intValue());
      assertEquals((-637), (int)mutableInt1.toInteger());
      assertEquals((-637), (int)mutableInt1.getValue());
      assertEquals((-637.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-637L), mutableInt1.longValue());
      assertEquals((byte) (-125), mutableInt1.byteValue());
      assertEquals("-637", mutableInt1.toString());
      assertEquals((short) (-637), mutableInt1.shortValue());
      assertEquals((-637), mutableInt1.intValue());
      assertEquals((-637.0), mutableInt1.doubleValue(), 0.01);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 1, (-2661), 185);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = 'Y';
      charArray0[2] = ']';
      charArray0[3] = '4';
      charArray0[4] = 'H';
      charArray0[5] = ')';
      charArray0[6] = 'Q';
      charArray0[7] = '4';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'Y');
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'}', 'Y', ']', '4', 'H', ')', 'Q', '4'}, charArray0);
      assertArrayEquals(new char[] {'Y', '}', 'Y', ']', '4', 'H', ')', 'Q', '4'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)6);
      assertEquals(0, shortArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(charArray0, '}');
      assertEquals(8, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'}', 'Y', ']', '4', 'H', ')', 'Q', '4'}, charArray0);
      assertNotSame(charArray0, charArray1);
      
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float(130.591508658);
      assertNotNull(float0);
      assertEquals(130.5915F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-2823.7F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2823.7F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-53.0));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-53.0F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(0.0F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(0.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) 0);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals(0.0F, (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((double) 185);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotNull(float5);
      assertEquals(185.0F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float(1112.3F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotNull(float6);
      assertEquals(1112.3F, (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float((-1.0));
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotNull(float7);
      assertEquals((-1.0F), (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1.0F));
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {130.5915F, (-2823.7F), (-53.0F), 0.0F, 0.0F, 185.0F, 1112.3F, (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (int) (byte)6;
      intArray0[2] = (int) (byte)6;
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = '}';
      charArray0[2] = ':';
      charArray0[3] = '1';
      charArray0[4] = ':';
      charArray0[5] = '1';
      charArray0[6] = ':';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '1');
      assertEquals(7, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {':', '}', ':', '1', ':', '1', ':'}, charArray0);
      assertArrayEquals(new char[] {':', '}', ':', ':', '1', ':'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 2, 2);
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)6;
      ArrayUtils.swap(byteArray0, (-1), 6, (int) (byte)6);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6, (byte)6}, byteArray0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.insert((int) 6, integerArray0, integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = new long[8];
      longArray2[0] = (long) (byte) (-1);
      longArray2[1] = (long) (byte) (-1);
      longArray2[2] = (long) (byte) (-1);
      longArray2[3] = (long) (byte) (-1);
      longArray2[4] = (long) (byte) (-1);
      longArray2[5] = (long) (byte) (-1);
      longArray2[6] = (long) (byte) (-1);
      longArray2[7] = (long) (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(longArray2);
      assertEquals(8, longArray2.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray2);
      
      long[] longArray3 = ArrayUtils.toPrimitive(longArray0, (-1L));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray3, longArray2);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1));
      assertEquals(2, shortArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray0);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)50, (int) (short)50);
      assertEquals(2, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[3] = false;
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, (-1660), 3);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) ' ';
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) ' ';
      floatArray0[3] = (float) 3;
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertEquals(8, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {32.0F, 3.0F, 32.0F, 3.0F, 32.0F, 3.0F, 32.0F, 3.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {32.0F, 3.0F, 32.0F, 3.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-4412.965F);
      floatArray0[2] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-4412.965F));
      assertEquals(3, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {0.0F, (-4412.965F), 0.0F}, floatArray0, 0.01F);
      
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)18, object0);
      
      Float[] floatArray1 = new Float[6];
      floatArray1[0] = (Float) 0.0F;
      floatArray1[1] = (Float) 0.0F;
      floatArray1[2] = (Float) 0.0F;
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = (-4924);
      intArray0[2] = 1;
      intArray0[4] = (int) (byte)18;
      intArray0[5] = 1;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, 1);
      assertEquals(0, intArray1.length);
      assertEquals(6, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0, 1, 0, 18, 1}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (byte)18);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (int) (short)0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.insert(0, intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = '2';
      charArray0[2] = '.';
      charArray0[3] = 'h';
      charArray0[4] = '>';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'z', 0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'1', '2', '.', 'h', '>'}, charArray0);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, '2', 1192);
      assertEquals(5, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new char[] {'1', '2', '.', 'h', '>'}, charArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 3253.21728612094);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)324;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)0);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)324, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)324, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ' ');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 29.86601489192;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 3764.090232940246;
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = 3764.090232940246;
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = (-1.0);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray2);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {29.86601489192, (-1.0), 3764.090232940246, (-1.0), 3764.090232940246, (-1.0), (-1.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (Random) mockRandom0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)113;
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = '3';
      charArray0[2] = '&';
      charArray0[3] = '&';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'P', 16);
      assertEquals(4, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'&', '3', '&', '&'}, charArray0);
      
      Double double0 = new Double(2421.64507);
      assertNotNull(double0);
      assertEquals(2421.64507, (double)double0, 0.01);
      
      Double double1 = new Double((byte)0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Short[] shortArray1 = new Short[0];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (byte)114);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray2);
      assertSame(shortArray2, shortArray0);
      
      ArrayUtils.swap(charArray0, (int) (byte)0, (-1398), (int) (byte)0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'&', '3', '&', '&'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2713.5F);
      floatArray0[2] = (-1.0F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-2713.5F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-2713.5F), (-1.0F), 0.0F, (-2713.5F), (-1.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-2713.5F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-2713.5F);
      doubleArray0[4] = (double) (-2713.5F);
      doubleArray0[5] = 779.0606638;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-45.654823696858));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-2713.5), 0.0, (-2713.5), (-2713.5), 779.0606638}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2713.5), 0.0, (-2713.5), (-2713.5), 779.0606638}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'C';
      charArray0[2] = '';
      charArray0[3] = '!';
      charArray0[4] = 'z';
      int int0 = ArrayUtils.indexOf(charArray0, 'z');
      assertEquals(5, charArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'1', 'C', '', '!', 'z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (double) 0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Float[] floatArray2 = new Float[4];
      Float float0 = new Float((double) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray2[0] = float0;
      Float float1 = new Float((-1.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      floatArray2[1] = float1;
      Float float2 = new Float((float) floatArray2[1]);
      assertEquals(4, floatArray2.length);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals((-1.0F), (float)float2, 0.01F);
      
      floatArray2[2] = float2;
      Float float3 = new Float((float) floatArray2[1]);
      assertEquals(4, floatArray2.length);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals((-1.0F), (float)float3, 0.01F);
      
      floatArray2[3] = float3;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertEquals(3, intArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1897);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1897}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = 's';
      charArray0[2] = '>';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 's');
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'/', 's', '>'}, charArray0);
      assertArrayEquals(new char[] {'/', '>'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      char[] charArray0 = new char[9];
      charArray0[0] = 'Y';
      charArray0[1] = ',';
      charArray0[2] = 'A';
      long[] longArray0 = new long[8];
      longArray0[0] = 9L;
      longArray0[1] = (long) ',';
      longArray0[2] = (long) 'Y';
      longArray0[3] = 111L;
      longArray0[4] = 2696L;
      longArray0[5] = (long) 'A';
      longArray0[6] = (long) ',';
      longArray0[7] = (long) 'A';
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {9L, 44L, 89L, 111L, 2696L, 65L, 44L, 65L}, longArray1);
      assertArrayEquals(new long[] {9L, 44L, 89L, 111L, 2696L, 65L, 44L, 65L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-12)}, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 44L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 44.0, (int) (byte) (-12), 2239.994993491194);
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {44.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'p';
      intArray0[1] = (int) '[';
      intArray0[2] = (int) '[';
      intArray0[3] = (int) '[';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 91, 84);
      assertEquals(4, intArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new int[] {112, 91, 91, 91}, intArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-25);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-85), (byte) (-1), (byte)84, (byte)0, (byte) (-25)}, byteArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-85);
      longArray0[1] = (long) (byte)84;
      longArray0[2] = (long) 'p';
      longArray0[3] = (-1621L);
      longArray0[4] = (long) (byte) (-25);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-85L), 84L, 112L, (-1621L), (-25L)}, longArray0);
      assertArrayEquals(new long[] {(-85L), 84L, 112L, (-1621L), (-25L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 6;
      intArray0[2] = 8192;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 6;
      objectArray0[1] = (Object) 6;
      objectArray0[2] = (Object) "byt4";
      objectArray0[3] = (Object) 6;
      objectArray0[4] = (Object) 8192;
      objectArray0[5] = (Object) "byt4";
      objectArray0[6] = (Object) "byt4";
      objectArray0[7] = (Object) 8192;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "java.lang.Object");
      assertEquals(8, objectArray0.length);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(17, booleanArray1.length);
      assertEquals(16, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean("java.lang.Double");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      MutableInt mutableInt0 = new MutableInt((Number) 6);
      assertNotNull(mutableInt0);
      assertEquals(6, (int)mutableInt0.getValue());
      assertEquals((byte)6, mutableInt0.byteValue());
      assertEquals(6, (int)mutableInt0.toInteger());
      assertEquals(6.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(6L, mutableInt0.longValue());
      assertEquals("6", mutableInt0.toString());
      assertEquals(6.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)6, mutableInt0.shortValue());
      assertEquals(6, mutableInt0.intValue());
      
      int int0 = mutableInt0.incrementAndGet();
      assertEquals(7, int0);
      assertEquals(7, (int)mutableInt0.toInteger());
      assertEquals((byte)7, mutableInt0.byteValue());
      assertEquals(7, (int)mutableInt0.getValue());
      assertEquals(7.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(7.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(7L, mutableInt0.longValue());
      assertEquals("7", mutableInt0.toString());
      assertEquals((short)7, mutableInt0.shortValue());
      assertEquals(7, mutableInt0.intValue());
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) boolean1, (Object) mutableInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Double double0 = new Double(3634.2973);
      assertNotNull(double0);
      assertEquals(3634.2973, (double)double0, 0.01);
      
      Double double1 = new Double((-993.0984195));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-993.0984195), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[10];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray0, "byt4");
      assertEquals(10, doubleArray0.length);
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) doubleArray0[0], (Object) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = ',';
      charArray0[2] = 'A';
      charArray0[3] = 'T';
      charArray0[4] = 'i';
      charArray0[5] = 'E';
      charArray0[0] = 'T';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '0', 6);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'T', ',', 'A', 'T', 'i', 'E', '\u0000'}, charArray0);
      
      double[] doubleArray0 = new double[6];
      int int1 = ArrayUtils.lastIndexOf(charArray0, '<', 6);
      assertEquals(7, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'T', ',', 'A', 'T', 'i', 'E', '\u0000'}, charArray0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.reverse((long[]) null);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'A';
      longArray0[1] = (long) 'T';
      longArray0[2] = (long) 6;
      longArray0[3] = (long) 'E';
      longArray0[4] = (long) 'E';
      longArray0[5] = (long) 'T';
      longArray0[6] = (long) 'T';
      longArray0[7] = (long) 6;
      longArray0[8] = (long) 'i';
      long[] longArray1 = ArrayUtils.insert(6, (long[]) null, longArray0);
      assertEquals(9, longArray0.length);
      assertNull(longArray1);
      assertArrayEquals(new long[] {65L, 84L, 6L, 69L, 69L, 84L, 84L, 6L, 105L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "The Array must not be null";
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      Double double1 = new Double(0.7);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.7, (double)double1, 0.01);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)6);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Float float0 = new Float((-1532.4F));
      assertNotNull(float0);
      assertEquals((-1532.4F), (float)float0, 0.01F);
      
      Float float1 = new Float((float) (byte)6);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(6.0F, (float)float1, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) stringArray0, (Object) float1);
      assertEquals(6, stringArray0.length);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(boolean0);
      
      MutableInt mutableInt0 = new MutableInt((int) (byte)6);
      assertNotNull(mutableInt0);
      assertEquals("6", mutableInt0.toString());
      assertEquals(6.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(6L, mutableInt0.longValue());
      assertEquals((short)6, mutableInt0.shortValue());
      assertEquals(6, mutableInt0.intValue());
      assertEquals(6, (int)mutableInt0.toInteger());
      assertEquals((byte)6, mutableInt0.byteValue());
      assertEquals(6.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(6, (int)mutableInt0.getValue());
      
      MutableInt mutableInt1 = new MutableInt(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals((-1532), mutableInt1.intValue());
      assertEquals("-1532", mutableInt1.toString());
      assertEquals((byte)4, mutableInt1.byteValue());
      assertEquals((-1532L), mutableInt1.longValue());
      assertEquals((-1532), (int)mutableInt1.getValue());
      assertEquals((-1532), (int)mutableInt1.toInteger());
      assertEquals((short) (-1532), mutableInt1.shortValue());
      assertEquals((-1532.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1532.0F), mutableInt1.floatValue(), 0.01F);
      
      MutableInt mutableInt2 = new MutableInt(mutableInt0);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertNotNull(mutableInt2);
      assertEquals("6", mutableInt0.toString());
      assertEquals(6.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(6L, mutableInt0.longValue());
      assertEquals((short)6, mutableInt0.shortValue());
      assertEquals(6, mutableInt0.intValue());
      assertEquals(6, (int)mutableInt0.toInteger());
      assertEquals((byte)6, mutableInt0.byteValue());
      assertEquals(6.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(6, (int)mutableInt0.getValue());
      assertEquals(6, mutableInt2.intValue());
      assertEquals(6L, mutableInt2.longValue());
      assertEquals(6.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(6.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)6, mutableInt2.shortValue());
      assertEquals("6", mutableInt2.toString());
      assertEquals(6, (int)mutableInt2.getValue());
      assertEquals((byte)6, mutableInt2.byteValue());
      assertEquals(6, (int)mutableInt2.toInteger());
      
      MutableInt[] mutableIntArray0 = new MutableInt[9];
      mutableIntArray0[0] = mutableInt0;
      mutableIntArray0[1] = mutableInt1;
      mutableIntArray0[2] = mutableInt0;
      mutableIntArray0[4] = mutableInt2;
      mutableIntArray0[5] = mutableInt1;
      mutableIntArray0[6] = mutableInt0;
      mutableIntArray0[7] = mutableInt1;
      mutableIntArray0[8] = mutableInt1;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeAllOccurrences(mutableIntArray0, mutableInt1);
      assertEquals(5, mutableIntArray1.length);
      assertEquals(9, mutableIntArray0.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableIntArray1);
      assertEquals((-1532), mutableInt1.intValue());
      assertEquals("-1532", mutableInt1.toString());
      assertEquals((byte)4, mutableInt1.byteValue());
      assertEquals((-1532L), mutableInt1.longValue());
      assertEquals((-1532), (int)mutableInt1.getValue());
      assertEquals((-1532), (int)mutableInt1.toInteger());
      assertEquals((short) (-1532), mutableInt1.shortValue());
      assertEquals((-1532.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1532.0F), mutableInt1.floatValue(), 0.01F);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableInt1, mutableInt2);
      assertNotSame(mutableInt1, mutableInt0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (-1532.4F), (int) (byte)6);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)6;
      intArray1[1] = (int) (byte)6;
      intArray1[2] = (int) (byte)6;
      intArray1[3] = 64;
      intArray1[4] = (int) (byte)6;
      intArray1[5] = (int) (byte)6;
      intArray1[6] = (int) (byte)6;
      intArray1[7] = (int) (byte)6;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {6, 6, 6, 64, 6, 6, 6, 6}, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (-1640.477F);
      floatArray0[2] = (-1.0F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1640.477F);
      doubleArray0[1] = (double) Float.NaN;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) Float.NaN);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1640.47705078125), Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1640.47705078125)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-1.0F);
      doubleArray2[1] = (double) (-1640.477F);
      doubleArray2[2] = (double) Float.NaN;
      doubleArray2[3] = (double) Float.NaN;
      double[] doubleArray3 = ArrayUtils.addAll(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-1640.47705078125), Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1640.47705078125), Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1640.47705078125), Double.NaN, Double.NaN, (-1640.47705078125), Double.NaN}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = '\'';
      charArray0[2] = 'y';
      charArray0[3] = 'v';
      charArray0[4] = '$';
      charArray0[5] = 'S';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'v', 55);
      assertEquals(6, charArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'2', '\'', 'y', 'v', '$', 'S'}, charArray0);
      
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) '2';
      doubleArray4[1] = (double) (-1640.477F);
      doubleArray4[2] = (double) 'S';
      doubleArray4[3] = (double) 'v';
      double[] doubleArray5 = ArrayUtils.removeElements(doubleArray4, doubleArray2);
      assertEquals(4, doubleArray4.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(3, doubleArray5.length);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertNotNull(doubleArray5);
      assertArrayEquals(new double[] {50.0, (-1640.47705078125), 83.0, 118.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1640.47705078125), Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {50.0, 83.0, 118.0}, doubleArray5, 0.01);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)114;
      Double double0 = new Double(3634.2973);
      assertNotNull(double0);
      assertEquals(3634.2973, (double)double0, 0.01);
      
      Double double1 = new Double(3634.2973);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(3634.2973, (double)double1, 0.01);
      
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-38);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-38L)}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)0, (-2146257915));
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {(-38L)}, longArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)114;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)114, (short)0, (short)0}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)114, (short)0, (short)0}, shortArray0);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)114;
      byteArray1[1] = (byte) (-38);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-38);
      byteArray1[5] = (byte)0;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)114, (byte) (-38), (byte)114}, byteArray0);
      assertArrayEquals(new byte[] {(byte)114, (byte) (-38), (byte)0, (byte)0, (byte) (-38), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)114}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2174.0);
      doubleArray0[1] = (double) (byte)114;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte) (-38);
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 308.1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2174.0), 114.0, 1.0, 0.0, 0.0, 0.0, (-38.0), 0.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2174.0), 114.0, 1.0, 0.0, 0.0, 0.0, (-38.0), 0.0, 1.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-6287);
      doubleArray0[1] = (double) (-1570);
      doubleArray0[2] = (double) (-1570);
      doubleArray0[3] = (double) (short) (-6287);
      doubleArray0[4] = 0.0;
      int[] intArray0 = new int[0];
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-6287.0), (-1570.0), (-1570.0), (-6287.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {(-6287.0), (-1570.0), (-1570.0), (-6287.0), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-6287.0), (-1570.0), (-1570.0), (-6287.0), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '0', (-1366));
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'i';
      floatArray0[1] = (float) 6;
      floatArray0[2] = (float) '0';
      floatArray0[3] = (float) 'R';
      floatArray0[4] = (float) (-1366);
      floatArray0[5] = (float) 'i';
      floatArray0[6] = (float) 6;
      floatArray0[7] = (float) (short) (-6287);
      floatArray0[8] = (float) '0';
      ArrayUtils.shift(floatArray0, (-2147483645));
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {48.0F, 105.0F, 6.0F, 48.0F, 82.0F, (-1366.0F), 105.0F, 6.0F, (-6287.0F)}, floatArray0, 0.01F);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (-1908874352);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 1.0F, (-1.90887437E9F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('Y', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '^');
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (char)character0;
      longArray0[2] = (long) (char)character1;
      longArray0[3] = (long) (-1908874352);
      longArray0[4] = (long) (char)character1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) '^';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2488L);
      assertEquals(7, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {0L, 89L, 89L, (-1908874352L), 89L, 1L, 94L}, longArray0);
      
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new char[] {'Y'}, charArray1);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, '^', (int) (short)0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(bitSet1);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray0);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[2] = true;
      Double double0 = new Double(3634.2973);
      assertNotNull(double0);
      assertEquals(3634.2973, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[10];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      Double double1 = new Double((-107.19945453803));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-107.19945453803), (double)double1, 0.01);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[9];
      booleanArray1[0] = boolean0;
      booleanArray1[1] = boolean0;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = boolean0;
      booleanArray1[4] = boolean0;
      booleanArray1[5] = (Boolean) true;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[7] = (Boolean) false;
      booleanArray1[8] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertEquals(9, booleanArray2.length);
      assertEquals(9, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, false, false, true}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray0);
      
      boolean boolean2 = ArrayUtils.contains((Object[]) booleanArray1, (Object) null);
      assertEquals(9, booleanArray1.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)3;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (int) (byte)7, (int) (byte)0);
      assertNull(doubleArray0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) 0);
      assertNull(floatArray0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)71;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)85;
      byteArray1[5] = (byte)7;
      byteArray1[6] = (byte)85;
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)0, (-72));
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)7, (byte)71, (byte)0, (byte)0, (byte)85, (byte)7, (byte)85}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte byte0 = new Byte((byte)7);
      assertNotNull(byte0);
      assertEquals((byte)7, (byte)byte0);
      
      Byte[] byteArray2 = new Byte[0];
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)6);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Character character0 = new Character('F');
      assertNotNull(character0);
      assertEquals('F', (char)character0);
      
      Character character1 = new Character('F');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('F', (char)character1);
      
      Character character2 = Character.valueOf('+');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('+', (char)character2);
      
      Character character3 = new Character('F');
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('F', (char)character3);
      
      Character character4 = new Character('5');
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('5', (char)character4);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = character3;
      characterArray0[2] = character3;
      Character character5 = new Character('*');
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertNotNull(character5);
      assertEquals('*', (char)character5);
      
      characterArray0[5] = character5;
      characterArray0[6] = character2;
      characterArray0[7] = character0;
      characterArray0[8] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(9, characterArray1.length);
      assertEquals(9, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (int) character3);
      assertEquals(3, booleanArray0.length);
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character5));
      assertFalse(character3.equals((Object)character4));
      assertTrue(character3.equals((Object)character1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) character0);
      assertTrue(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character5));
      assertFalse(character0.equals((Object)character4));
      assertTrue(character0.equals((Object)character1));
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      ArrayUtils.reverse((double[]) null);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'Y';
      intArray0[1] = (int) 'Y';
      ArrayUtils.shift(intArray0, 2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {89, 89}, intArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2503, 512);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Y', 'Y', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.swap(floatArray0, (int) (byte)1, 89);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)1, (int) (byte)1);
      assertEquals(6, byteArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (-1640.477F);
      floatArray0[2] = (-1640.477F);
      ArrayUtils.shift(floatArray0, 425, (-397), (-909));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {Float.NaN, (-1640.477F), (-1640.477F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-909);
      longArray0[1] = (long) (-909);
      longArray0[2] = (long) (-397);
      longArray0[3] = (long) (-909);
      longArray0[4] = (long) (-909);
      longArray0[5] = (long) 425;
      longArray0[6] = (long) (-909);
      longArray0[8] = (long) 425;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)89;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-38));
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-38), (byte) (-38), (byte)89}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-38));
      assertNull(byteArray1);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.shift(intArray0, (-2505), (int) (byte)89, (int) (byte)89);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (-1640.477F);
      floatArray0[2] = (-1.0F);
      ArrayUtils.shift(floatArray0, 425, (-397), (-909));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {Float.NaN, (-1640.477F), (-1.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-909);
      longArray0[1] = (long) (-909);
      longArray0[2] = (long) (-397);
      longArray0[3] = (long) (-909);
      longArray0[4] = (long) (-909);
      longArray0[5] = (long) 425;
      longArray0[6] = (long) (-909);
      longArray0[7] = (long) 425;
      longArray0[8] = (long) 425;
      ArrayUtils.swap(longArray0, (-1), (-2869), 128);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-909L), (-909L), (-397L), (-909L), (-909L), 425L, (-909L), 425L, 425L}, longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)17;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 45, 8192);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)33, (byte)86, (byte)26, (byte) (-1), (byte)46, (byte)17}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[2] = (byte)1;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)1, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {1, 0, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (-1119));
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1119)}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)85;
      shortArray0[4] = (short) (byte)7;
      shortArray0[5] = (short) (byte)85;
      shortArray0[6] = (short) (byte)85;
      shortArray0[7] = (short) (byte)85;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (int) (short)7);
      assertEquals(7, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1, (short)85, (short)7, (short)85, (short)85}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1, (short)85, (short)7, (short)85, (short)85, (short)85}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, (-2566.9214F));
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)6);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char char0 = 'F';
      Character character0 = new Character('F');
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      assertEquals('F', (char)character0);
      
      Character character1 = new Character('F');
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals('F', (char)character1);
      
      Character character2 = Character.valueOf('+');
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('+', (char)character2);
      
      Character character3 = Character.valueOf('F');
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('F', (char)character3);
      
      Character character4 = new Character('5');
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      assertEquals('5', (char)character4);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = character3;
      characterArray0[2] = character3;
      Character character5 = new Character(';');
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertNotNull(character5);
      assertEquals(';', (char)character5);
      
      characterArray0[5] = character5;
      characterArray0[6] = character2;
      characterArray0[7] = character0;
      characterArray0[8] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(9, characterArray1.length);
      assertEquals(9, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      ArrayUtils.swap(byteArray0, (-3579), (-1338), 919);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) (char)character0;
      floatArray0[2] = (float) (char)character0;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) char0);
      assertEquals(3, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {Float.NaN, 70.0F, 70.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)6;
      shortArray0[1] = (short) (byte)6;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-2844));
      assertEquals(2, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)6, (short)6}, shortArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = char0;
      charArray0[4] = 'o';
      charArray0[5] = 'F';
      charArray0[6] = '+';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'|', '+', '+', 'F', 'o', 'F', '+'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      Short short0 = new Short((short) (-982));
      assertNotNull(short0);
      assertEquals((short) (-982), (short)short0);
      
      Short short1 = new Short((short) (-982));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-982), (short)short1);
      
      Short short2 = new Short((short) (-1));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-1), (short)short2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2558;
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-982);
      shortArray0[2] = (short) (-982);
      shortArray0[3] = (short) (-982);
      shortArray0[4] = (short) (-982);
      shortArray0[5] = (short) (-1);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(6, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-982), (short) (-982), (short) (-982), (short) (-982), (short) (-1)}, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)56;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-24));
      assertEquals(4, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-51), (byte) (-51), (byte)56}, byteArray1);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-51), (byte) (-24), (byte) (-51), (byte) (-24), (byte) (-24), (byte)56}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {}, intArray0);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character(',');
      assertNotNull(character0);
      assertEquals(',', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals(',', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {',', ','}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)5, object0);
      
      Float[] floatArray0 = new Float[18];
      floatArray0[0] = (Float) (float)0;
      floatArray0[2] = (Float) (float)0;
      floatArray0[3] = (Float) (float)0;
      floatArray0[5] = (Float) (float)0;
      Float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(18, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray2);
      assertEquals(0, floatArray2.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'q';
      charArray0[1] = '$';
      charArray0[2] = 'N';
      charArray0[3] = '{';
      charArray0[4] = '>';
      charArray0[5] = 'o';
      charArray0[6] = 'o';
      charArray0[7] = 'V';
      charArray0[8] = 'y';
      char[] charArray1 = ArrayUtils.removeElements((char[]) null, charArray0);
      assertEquals(9, charArray0.length);
      assertNull(charArray1);
      assertArrayEquals(new char[] {'q', '$', 'N', '{', '>', 'o', 'o', 'V', 'y'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertEquals(8, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, false);
      assertEquals(8, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1072;
      shortArray0[1] = (short) (-1750);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)417, (int) (short) (-1750));
      assertEquals(2, shortArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)1072, (short) (-1750)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, (-1433L), (-1));
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)8;
      byteArray0[8] = (byte)1;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2399), (int) (byte)7);
      assertEquals(9, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)32, (byte)7, (byte)98, (byte)8, (byte) (-7), (byte)8, (byte)0, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)32, (byte)7, (byte)98, (byte)8, (byte) (-7), (byte)8}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      charArray0[1] = '|';
      charArray0[2] = '-';
      charArray0[3] = 'M';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '=');
      assertEquals(4, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'B', '|', '-', 'M'}, charArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte)32;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 32.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      ArrayUtils.swap((Object[]) null, 1724, 1724, (-286));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1724;
      doubleArray0[2] = (double) (-286);
      doubleArray0[4] = 1826.6935823640163;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 1.0F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 29.86601489192);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, 1724.0, (-286.0), 0.0, 1826.6935823640163, 2.0, 1.0}, doubleArray0, 0.01);
      
      Character character0 = Character.valueOf('R');
      assertNotNull(character0);
      assertEquals('R', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1826.6935823640163, 2);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.0, 1724.0, (-286.0), 0.0, 1826.6935823640163, 2.0, 1.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      ArrayUtils.shift(byteArray0, (-1943), (int) (byte)0, 1724);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)4}, byteArray0);
      
      Class<Object[]> class0 = Object[].class;
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null, class0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0, (-53), 5);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = new long[3];
      longArray2[2] = (long) 89;
      longArray2[1] = 1L;
      longArray2[2] = (long) 89;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 89);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 89;
      intArray0[2] = (int) (short)0;
      intArray0[3] = 89;
      intArray0[4] = 88;
      intArray0[5] = 88;
      intArray0[6] = 89;
      intArray0[7] = 89;
      int[] intArray1 = ArrayUtils.add(intArray0, (-2499));
      assertEquals(9, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 89, 0, 89, 88, 88, 89, 89, (-2499)}, intArray1);
      assertArrayEquals(new int[] {0, 89, 0, 89, 88, 88, 89, 89}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      Object[] objectArray0 = new Object[0];
      Object object0 = ArrayUtils.get(objectArray0, 2);
      assertEquals(0, objectArray0.length);
      assertNull(object0);
      
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray1[0] = object1;
      objectArray1[1] = (Object) 1L;
      ArrayUtils.reverse(objectArray1, (int) (short)0, 88);
      assertEquals(2, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1023.292);
      doubleArray0[1] = (-1023.292);
      Character character0 = new Character('5');
      assertNotNull(character0);
      assertEquals('5', (char)character0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (-1908874352);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 1.0F, (-1.90887437E9F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('Y', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '^');
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (char)character0;
      longArray0[2] = (long) (char)character1;
      longArray0[3] = (long) (-1908874352);
      longArray0[4] = (long) (char)character1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) '^';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2488L);
      assertEquals(7, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {0L, 89L, 89L, (-1908874352L), 89L, 1L, 94L}, longArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 1.0F, (-1.90887437E9F), 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray1, (-1.90887437E9F));
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, 1.0F, (-1.90887437E9F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Integer integer1 = new Integer((-2070));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2070), (int)integer1);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      ArrayUtils.swap(doubleArray0, (-557), (-557), 6);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = ',';
      charArray0[2] = ',';
      doubleArray0[1] = (double) '\\';
      charArray0[4] = '\\';
      charArray0[5] = ',';
      charArray0[6] = ',';
      charArray0[7] = '9';
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ',';
      charArray1[1] = '~';
      charArray1[2] = '9';
      charArray1[3] = '9';
      charArray1[4] = '9';
      charArray1[5] = ',';
      charArray1[6] = '\\';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2070), charArray0, charArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2070, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 3764.090232940246;
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) 29.86601489192;
      objectArray0[3] = (Object) (-1.0);
      objectArray0[4] = (Object) 29.86601489192;
      Object[] objectArray1 = new Object[6];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 3764.090232940246;
      objectArray1[1] = (Object) 29.86601489192;
      objectArray1[2] = (Object) 3764.090232940246;
      objectArray1[3] = (Object) (-1.0);
      objectArray1[4] = (Object) 29.86601489192;
      objectArray1[5] = (Object) 29.86601489192;
      Object object0 = ArrayUtils.get(objectArray1, 68);
      assertEquals(6, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNull(object0);
      assertNotSame(objectArray1, objectArray0);
      
      objectArray0[5] = null;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 3764.090232940246;
      doubleArray1[2] = 3764.090232940246;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 3764.090232940246;
      doubleArray1[7] = (double) 68;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1.0));
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(bitSet0);
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertEquals("{0, 3, 4, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 3764.090232940246, (-1.0), (-1.0), (-1.0), 3764.090232940246, 68.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object object1 = ArrayUtils.removeAll(object0, bitSet0);
      assertEquals(8, doubleArray1.length);
      assertEquals(6, objectArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNull(object1);
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertEquals("{0, 3, 4, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 3764.090232940246, (-1.0), (-1.0), (-1.0), 3764.090232940246, 68.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(objectArray1, objectArray0);
      
      objectArray0[6] = null;
      objectArray0[7] = (Object) 3764.090232940246;
      boolean boolean1 = ArrayUtils.contains(objectArray0, objectArray0[2]);
      assertEquals(8, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertTrue(boolean1);
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 3764.090232940246;
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) 29.86601489192;
      objectArray0[3] = (Object) (-1.0);
      objectArray0[4] = (Object) 29.86601489192;
      Object[] objectArray1 = new Object[6];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 3764.090232940246;
      objectArray1[1] = (Object) 29.86601489192;
      objectArray1[2] = (Object) 3764.090232940246;
      objectArray1[3] = (Object) (-1.0);
      objectArray1[5] = (Object) 29.86601489192;
      Object object0 = ArrayUtils.get(objectArray1, 68);
      assertEquals(6, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNull(object0);
      assertNotSame(objectArray1, objectArray0);
      
      objectArray0[5] = null;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 3764.090232940246;
      doubleArray1[2] = 3764.090232940246;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 3764.090232940246;
      doubleArray1[7] = (double) 68;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1.0));
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(bitSet0);
      assertEquals(4, bitSet0.cardinality());
      assertEquals("{0, 3, 4, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 3764.090232940246, (-1.0), (-1.0), (-1.0), 3764.090232940246, 68.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object object1 = ArrayUtils.removeAll(object0, bitSet0);
      assertEquals(8, doubleArray1.length);
      assertEquals(6, objectArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNull(object1);
      assertEquals(4, bitSet0.cardinality());
      assertEquals("{0, 3, 4, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 3764.090232940246, (-1.0), (-1.0), (-1.0), 3764.090232940246, 68.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(objectArray1, objectArray0);
      
      objectArray0[6] = null;
      objectArray0[7] = (Object) 3764.090232940246;
      boolean boolean1 = ArrayUtils.contains(objectArray0, objectArray0[2]);
      assertEquals(8, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertTrue(boolean1);
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(4, doubleArray0.length);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[3] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-4115.49), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) doubleArray0[0];
      objectArray0[1] = (Object) double1;
      objectArray0[2] = (Object) double1;
      objectArray0[3] = (Object) doubleArray0[1];
      objectArray0[4] = (Object) doubleArray0[1];
      objectArray0[5] = (Object) doubleArray0[3];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[2] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte)2}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Double double3 = new Double((-4115.49));
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals((-4115.49), (double)double3, 0.01);
      
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[1] = (Object) double3;
      objectArray1[2] = (Object) (byte)0;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray1, (Object) null, 0);
      assertEquals(3, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, int0);
      assertNotSame(objectArray1, objectArray0);
      
      Byte byte0 = Byte.valueOf((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertNotNull(string0);
      assertEquals("2", string0);
      
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)2, 0);
      assertEquals(0, floatArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-1), (int) (byte)2);
      assertEquals(0, floatArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      byte[] byteArray2 = new byte[7];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)9;
      byteArray2[1] = (byte)2;
      byteArray2[2] = (byte)9;
      byteArray2[3] = (byte)2;
      byteArray2[4] = (byte)2;
      byteArray2[5] = (byte)2;
      byteArray2[6] = (byte)2;
      int int2 = ArrayUtils.lastIndexOf(byteArray2, (byte) (-91), (-557));
      assertEquals(7, byteArray2.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals((-1), int2);
      assertArrayEquals(new byte[] {(byte)9, (byte)2, (byte)9, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)6);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char char0 = 'F';
      Character character0 = new Character('F');
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      assertEquals('F', (char)character0);
      
      Character character1 = new Character('F');
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals('F', (char)character1);
      
      Character character2 = Character.valueOf('+');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('+', (char)character2);
      
      Character character3 = Character.valueOf('F');
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('F', (char)character3);
      
      Character character4 = new Character('5');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('5', (char)character4);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = character3;
      characterArray0[2] = character3;
      Character character5 = new Character(';');
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertNotNull(character5);
      assertEquals(';', (char)character5);
      
      characterArray0[5] = character5;
      characterArray0[6] = character2;
      characterArray0[7] = character0;
      characterArray0[8] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(9, characterArray1.length);
      assertEquals(9, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      ArrayUtils.swap(byteArray0, (-3579), (-1338), 919);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) char0;
      floatArray0[1] = (float) 919;
      floatArray0[2] = (float) (-3579);
      floatArray0[3] = (float) char0;
      floatArray0[4] = (float) (char)character5;
      floatArray0[5] = (float) char0;
      floatArray0[6] = (float) 919;
      floatArray0[7] = (float) (-1338);
      floatArray0[8] = (float) (-3579);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {70.0F, 919.0F, (-3579.0F), 70.0F, 59.0F, 70.0F, 919.0F, (-1338.0F), (-3579.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {70.0F, 919.0F, (-3579.0F), 70.0F, 59.0F, 70.0F, 919.0F, (-1338.0F), (-3579.0F)}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (byte)0;
      byteArray0[15] = (byte)0;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (int) (byte)7);
      assertEquals((-1), int0);
      
      Double double0 = new Double((byte)7);
      assertNotNull(double0);
      assertEquals(7.0, (double)double0, 0.01);
      
      Double double1 = new Double((-2333.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2333.0), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2333.0), 7.0, 7.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.reverse(doubleArray1, (int) (byte)7, 16);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-2333.0), 7.0, 7.0}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-125));
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int1 = new Integer((byte)7);
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      long[] longArray0 = new long[9];
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (short) (-612));
      assertEquals(9, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)93;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-102));
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)93, (byte) (-1), (byte) (-102), (byte) (-1), (byte)93}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)93, (byte) (-1), (byte) (-102), (byte) (-1), (byte)93}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)93, (byte) (-1), (byte) (-102), (byte) (-1), (byte)93}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)93, (byte) (-1), (byte) (-102), (byte) (-1), (byte)93}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.shift(byteArray1, (int) (byte) (-102));
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)93, (byte) (-1), (byte) (-102), (byte) (-1), (byte)93}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)93, (byte) (-1), (byte) (-102), (byte) (-1), (byte)93}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "java.lang.Boolean";
      stringArray0[1] = "7WzPEwfU=";
      stringArray0[2] = "";
      stringArray0[3] = "java.lang.Boolean";
      stringArray0[4] = "java.lang.Boolean";
      stringArray0[5] = "QbMY+@KD(QjW";
      stringArray0[6] = "org.apache.commons.lang3.mutable.MutableInt";
      stringArray0[7] = "LH5o_%]g_|T(fX5";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 97, 97);
      assertEquals(8, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2569;
      shortArray0[1] = (short) (-1201);
      shortArray0[2] = (short)49;
      shortArray0[3] = (short)14;
      shortArray0[4] = (short) (-1062);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)36);
      assertEquals(6, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)36, (short)2569, (short) (-1201), (short)49, (short)14, (short) (-1062)}, shortArray1);
      assertArrayEquals(new short[] {(short)2569, (short) (-1201), (short)49, (short)14, (short) (-1062)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2961);
      shortArray0[1] = (short) (-563);
      shortArray0[2] = (short)8;
      shortArray0[3] = (short) (-3048);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)127;
      shortArray0[7] = (short)1877;
      shortArray0[8] = (short)527;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2961), (short) (-563), (short)8, (short) (-3048), (short)0, (short)0, (short)127, (short)1877, (short)527}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)46);
      assertNotNull(byte0);
      assertEquals((byte)46, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)46);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)46, (byte)byte1);
      
      byteArray0[1] = byte1;
      Byte[] byteArray1 = ArrayUtils.insert((int) 0, byteArray0, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '~', 5);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {';'}, charArray0);
      
      short[] shortArray2 = ArrayUtils.removeElement((short[]) null, (short) (-110));
      assertNull(shortArray2);
      
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte)46, (byte)46}, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[1];
      ArrayUtils.swap(longArray0, (-1167), 46);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1646);
      assertEquals(5, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 3764.090232940246, 29.86601489192);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Boolean[] booleanArray1 = new Boolean[2];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      Boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-1167), (-1167));
      assertEquals(2, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertSame(charArray1, charArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)1038;
      shortArray0[3] = (short)1193;
      shortArray0[4] = (short) (-277);
      shortArray0[5] = (short)58;
      shortArray0[6] = (short) (-3187);
      ArrayUtils.swap(shortArray0, 0, 1, (int) (short) (-3187));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1117, (short)2, (short)1038, (short)1193, (short) (-277), (short)58, (short) (-3187)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[18];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1.0F;
      ArrayUtils.swap(doubleArray0, (-5277), 46, 301);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = ',';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {',', ','}, charArray0);
      assertArrayEquals(new char[] {',', ',', ',', ','}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, 1739, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1739, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-116);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)99);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116)}, byteArray0);
      
      Byte[] byteArray1 = new Byte[4];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-116));
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116)}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-116);
      floatArray0[1] = 3654.03F;
      floatArray0[2] = (float) (byte) (-116);
      floatArray0[3] = (float) (byte) (-116);
      floatArray0[4] = (float) (byte) (-116);
      floatArray0[5] = (float) (byte) (-116);
      floatArray0[6] = (float) (byte) (-116);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte) (-116));
      assertEquals(7, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-116.0F), 3654.03F, (-116.0F), (-116.0F), (-116.0F), (-116.0F), (-116.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((byte) (-116));
      assertNotNull(short0);
      assertEquals((short) (-116), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-638));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-638), (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((byte) (-116));
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-116), (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((byte) (-116));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short) (-116), (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) shortArray0[0]);
      assertEquals(5, shortArray0.length);
      assertTrue(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertNotNull(short4);
      assertEquals((short) (-116), (short)short4);
      
      shortArray0[4] = short4;
      Short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)53;
      shortArray0[3] = (short) (-2156);
      shortArray0[4] = (short)84;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)37);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)7, (short)53, (short) (-2156), (short)84}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)7, (short)53, (short) (-2156), (short)84}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1477L);
      longArray0[1] = (long) (short)7;
      longArray0[2] = (long) (short)7;
      longArray0[3] = (long) (short)53;
      longArray0[4] = (long) (short)2;
      longArray0[5] = (long) (short)37;
      longArray0[6] = (-2304L);
      longArray0[7] = (long) (short)37;
      longArray0[8] = (long) (short)7;
      int int0 = ArrayUtils.indexOf(longArray0, (long) (short)84, 619);
      assertEquals(9, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-1477L), 7L, 7L, 53L, 2L, 37L, (-2304L), 37L, 7L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      int int0 = ArrayUtils.indexOf(charArray0, '+', (int) '+');
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'!'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals(0, booleanArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '!';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-2709L));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {33L}, longArray0);
      assertArrayEquals(new long[] {33L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int2 = ArrayUtils.INDEX_NOT_FOUND;
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1425.356F;
      floatArray0[2] = 1624.6F;
      floatArray0[3] = 550.3413F;
      floatArray0[4] = 78.9578F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), 1);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {1425.356F, 0.0F, 1624.6F, 550.3413F, 78.9578F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1425.356F, 0.0F, 1624.6F, 550.3413F, 78.9578F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 550.3413F;
      ArrayUtils.shift(objectArray0, 558, 56, 1);
      assertEquals(1, objectArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      String[] stringArray1 = ArrayUtils.addFirst(stringArray0, (String) null);
      assertEquals(5, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)86;
      ArrayUtils.reverse(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)86, (byte)113, (byte) (-19), (byte) (-1), (byte)55, (byte)112, (byte)101}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2054), (int) (byte)8);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '%');
      assertNull(charArray0);
      
      short[] shortArray0 = new short[16];
      shortArray0[0] = (short) (byte) (-7);
      shortArray0[1] = (short) (byte)8;
      shortArray0[2] = (short) (byte) (-102);
      shortArray0[3] = (short)508;
      shortArray0[4] = (short) (byte) (-7);
      shortArray0[5] = (short) (byte)7;
      shortArray0[6] = (short) (-274);
      shortArray0[7] = (short) (byte)7;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(16, shortArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.swap(shortArray0, (int) (short)7, 1, (int) (short) (-274));
      assertEquals(16, shortArray0.length);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray1);
      
      char[] charArray2 = ArrayUtils.removeAllOccurrences((char[]) null, '6');
      assertNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1583.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 1583.0F);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Character character0 = Character.valueOf('A');
      assertNotNull(character0);
      assertEquals('A', (char)character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 'A';
      doubleArray1[1] = (double) 1583.0F;
      doubleArray1[2] = (double) 'A';
      doubleArray1[3] = (double) (-2012);
      doubleArray1[4] = (double) (-2012);
      doubleArray1[5] = (double) 1583.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (-689.36876982), (-2012));
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {65.0, 1583.0, 65.0, (-2012.0), (-2012.0), 1583.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.shift(byteArray0, 729, (-2), 1);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0}, byteArray0);
      
      Class<Object[]> class0 = Object[].class;
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null, class0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      ArrayUtils.swap((Object[]) null, 1724, 1724, (-286));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1724;
      doubleArray0[2] = (double) (-286);
      doubleArray0[3] = 1339.72634548271;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Double double0 = new Double(3634.2973);
      assertNotNull(double0);
      assertEquals(3634.2973, (double)double0, 0.01);
      
      Double double1 = new Double((-993.0984195));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-993.0984195), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[10];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      Byte byte0 = new Byte((byte) (-53));
      assertNotNull(byte0);
      assertEquals((byte) (-53), (byte)byte0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-53);
      longArray0[1] = (long) (byte) (-53);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-53L), (-53L)}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1973L, (int) (byte) (-53));
      assertEquals(2, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new long[] {(-53L), (-53L)}, longArray0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "byt4");
      assertEquals(8, objectArray0.length);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 100.0;
      ArrayUtils.reverse(objectArray0, (-3367), 49);
      assertEquals(8, objectArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 49;
      intArray0[1] = (-3367);
      intArray0[2] = 49;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3367), (-3367));
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {49, (-3367), 49}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      ArrayUtils.reverse((double[]) null);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)74;
      intArray0[1] = 2;
      intArray0[2] = (int) '@';
      intArray0[3] = (int) '@';
      intArray0[4] = (int) (byte)74;
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.subarray((double[]) null, (-5029), (int) (byte)74);
      assertNull(doubleArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      Integer integer0 = new Integer(64);
      assertNotNull(integer0);
      assertEquals(64, (int)integer0);
      
      short[] shortArray1 = ArrayUtils.insert((int) (byte)74, shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2417.0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)89;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-99));
      assertEquals(2, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)89, (byte)89}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null, (byte)89);
      assertNull(byteArray1);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.shift(intArray1, 385, 256, 285);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1668L;
      Float float0 = new Float((float) 1668L);
      assertNotNull(float0);
      assertEquals(1668.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)2, (byte)2, (byte)2}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double((short) (-22065));
      assertNotNull(double0);
      assertEquals((-22065.0), (double)double0, 0.01);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1668.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift(byteArray1, (-2144967258));
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)9, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)9, (byte)2}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1668L;
      doubleArray0[0] = (double) 1668L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1668.0, 0.0}, doubleArray0, 0.01);
      
      Float float0 = new Float((float) 1668L);
      assertNotNull(float0);
      assertEquals(1668.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      Short[] shortArray0 = new Short[2];
      short short0 = (short)2;
      Short short1 = new Short((short)2);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)2, (short)short1);
      
      shortArray0[1] = short1;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-353.0304));
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1668.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'D';
      charArray0[2] = '#';
      charArray0[3] = 'x';
      charArray0[4] = 's';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ':');
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'1', 'D', '#', 'x', 's'}, charArray1);
      assertArrayEquals(new char[] {'1', 'D', '#', 'x', 's'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      ArrayUtils.swap((Object[]) shortArray0, (-2146853925), (int) short0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      ArrayUtils.shift(booleanArray0, 79, 373, 373);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      ArrayUtils.swap((double[]) null, 2585, Integer.MAX_VALUE, 373);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1032;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)99);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)99, (byte)0}, byteArray0);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = (Byte) (byte)0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) byteArray1[0]);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      
      ArrayUtils.swap((byte[]) null, 2515, (int) byteArray1[0], (int) byteArray1[0]);
      assertEquals(1, byteArray1.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = new long[3];
      longArray2[0] = (long) 89;
      longArray2[1] = 1L;
      longArray2[2] = (long) 89;
      long[] longArray3 = ArrayUtils.subarray(longArray2, 0, 830);
      assertEquals(3, longArray2.length);
      assertEquals(3, longArray3.length);
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {89L, 1L, 89L}, longArray2);
      assertArrayEquals(new long[] {89L, 1L, 89L}, longArray3);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray2);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)18, object0);
      
      Float[] floatArray0 = new Float[18];
      floatArray0[0] = (Float) (float)0;
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = ':';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ':');
      assertEquals(7, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {':', ':', ':', ':', ':', ':', ':'}, charArray0);
      assertArrayEquals(new char[] {':', ':', ':', ':', ':', ':'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1668L;
      doubleArray0[0] = (double) 1668L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1668.0, 0.0}, doubleArray0, 0.01);
      
      Float float0 = new Float((float) 1668L);
      assertNotNull(float0);
      assertEquals(1668.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)2);
      assertNotNull(short0);
      assertEquals((short)2, (short)short0);
      
      shortArray0[1] = short0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-353.0304));
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1668.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'D';
      charArray0[2] = '#';
      charArray0[3] = 'x';
      charArray0[4] = 's';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ':');
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'1', 'D', '#', 'x', 's'}, charArray1);
      assertArrayEquals(new char[] {'1', 'D', '#', 'x', 's'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1283L;
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-1660), 126);
      assertEquals((-1), int0);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((double) 1283L);
      assertNotNull(float0);
      assertEquals(1283.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (-1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(567.7F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(567.7F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[0]);
      assertEquals(9, floatArray0.length);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(1283.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(567.7F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotNull(float4);
      assertEquals(567.7F, (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float(1355.5325775224);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotNull(float5);
      assertEquals(1355.5326F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = Float.valueOf((float) floatArray0[4]);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotNull(float6);
      assertEquals(567.7F, (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float((double) 1283L);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertEquals((float)float7, (float)float3, 0.01F);
      assertNotNull(float7);
      assertEquals(1283.0F, (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      Float float8 = new Float((double) floatArray0[2]);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertEquals((float)float8, (float)float4, 0.01F);
      assertNotNull(float8);
      assertEquals(567.7F, (float)float8, 0.01F);
      
      floatArray0[8] = float8;
      Float[] floatArray1 = ArrayUtils.addFirst(floatArray0, float6);
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float8, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float7, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'u';
      charArray0[2] = 'K';
      charArray0[3] = ',';
      charArray0[4] = ' ';
      charArray0[5] = '@';
      charArray0[6] = '?';
      charArray0[7] = ']';
      charArray0[8] = ':';
      ArrayUtils.reverse(charArray0, (-698), 80);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {':', ']', '?', '@', ' ', ',', 'K', 'u', 'G'}, charArray0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {':', ']', '?', '@', ' ', ',', 'K', 'u', 'G'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      Short short0 = new Short((short)583);
      assertNotNull(short0);
      assertEquals((short)583, (short)short0);
      
      Character character0 = Character.valueOf('y');
      assertNotNull(character0);
      assertEquals('y', (char)character0);
      
      Character character1 = new Character('i');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('i', (char)character1);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'O');
      assertNull(charArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'y';
      longArray0[1] = (long) 'y';
      longArray0[2] = 2488L;
      longArray0[3] = (long) 'y';
      longArray0[0] = (long) 'O';
      longArray0[5] = (long) (short)583;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L));
      assertEquals(6, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new long[] {79L, 121L, 2488L, 121L, 0L, 583L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)583, 2617);
      assertEquals(0, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 56);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Double double0 = new Double(2043.2108314);
      assertNotNull(double0);
      assertEquals(2043.2108314, (double)double0, 0.01);
      
      Byte byte0 = new Byte((byte) (-72));
      assertNotNull(byte0);
      assertEquals((byte) (-72), (byte)byte0);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 56;
      doubleArray1[1] = (-2952.824427431735);
      doubleArray1[2] = (double) 56;
      doubleArray1[3] = 2043.2108314;
      doubleArray1[4] = (double) 1545;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 2043.2108314, (int) (byte) (-72));
      assertEquals(5, doubleArray1.length);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{3}", bitSet0.toString());
      assertArrayEquals(new double[] {56.0, (-2952.824427431735), 56.0, 2043.2108314, 1545.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (byte) (-72);
      shortArray0[2] = (short) (byte) (-72);
      shortArray0[3] = (short) (byte) (-53);
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short) (-1), (int) (byte) (-72));
      assertEquals(4, shortArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(1, bitSet1.length());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertArrayEquals(new short[] {(short) (-1), (short) (-72), (short) (-72), (short) (-53)}, shortArray0);
      assertNotSame(bitSet1, bitSet0);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-72), (short) (-72), (short) (-53)}, shortArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray1, (Random) mockRandom0);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-2952.824427431735), 56.0, 2043.2108314, 1545.0, 56.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (short) (-53);
      intArray0[2] = (int) (short) (-53);
      intArray0[3] = (int) (short) (-1);
      intArray0[4] = (-2892);
      intArray0[5] = (int) (byte) (-53);
      intArray0[6] = 1545;
      intArray0[7] = (int) (short) (-1);
      int int0 = ArrayUtils.indexOf(intArray0, 677, 88);
      assertEquals(8, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1), (-53), (-53), (-1), (-2892), (-53), 1545, (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-6287);
      doubleArray0[1] = (double) (-1570);
      doubleArray0[2] = (double) (-1570);
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, stringArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(stringArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      Short short0 = new Short((short) (-982));
      assertNotNull(short0);
      assertEquals((short) (-982), (short)short0);
      
      Short short1 = new Short((short) (-982));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-982), (short)short1);
      
      Short short2 = new Short((short) (-1));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-1), (short)short2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2558;
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-53);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-982);
      shortArray0[1] = (short) (byte)14;
      shortArray0[2] = (short) (byte) (-9);
      shortArray0[3] = (short) (-982);
      shortArray0[4] = (short) (byte) (-53);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (byte)14;
      shortArray0[7] = (short) (byte) (-53);
      shortArray0[8] = (short) (-1);
      ArrayUtils.swap(shortArray0, (int) (short) (-982), 1, (-708));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-982), (short)14, (short) (-9), (short) (-982), (short) (-53), (short) (-1), (short)14, (short) (-53), (short) (-1)}, shortArray0);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 2558, (-1164.9120245884471));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-116);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)99);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116)}, byteArray0);
      
      Byte[] byteArray1 = new Byte[4];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-116));
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116)}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-116);
      intArray0[1] = (int) (byte) (-116);
      intArray0[2] = (int) (byte) (-116);
      intArray0[3] = (int) (byte) (-116);
      intArray0[4] = (int) (byte) (-116);
      intArray0[5] = (int) (byte) (-116);
      intArray0[6] = (int) (byte) (-116);
      intArray0[7] = (int) (byte) (-116);
      intArray0[8] = (int) (byte)99;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(18, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-116), (-116), (-116), (-116), (-116), (-116), (-116), (-116), 99}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      ArrayUtils.shift(intArray1, 97, (int) (byte) (-116), (int) (byte) (-116));
      assertEquals(18, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-116), (-116), (-116), (-116), (-116), (-116), (-116), (-116), 99}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      Short short0 = new Short((short) (-982));
      assertNotNull(short0);
      assertEquals((short) (-982), (short)short0);
      
      Short short1 = new Short((short) (-982));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-982), (short)short1);
      
      Short short2 = new Short((short) (-982));
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-982), (short)short2);
      
      long[] longArray0 = new long[1];
      ArrayUtils.reverse(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = '{';
      charArray0[4] = '{';
      charArray0[5] = '{';
      charArray0[6] = '{';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'z');
      assertEquals(7, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'{', '{', '{', '{', '{', '{', '{'}, charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-982);
      doubleArray0[1] = (double) (short) (-982);
      doubleArray0[2] = (double) (short) (-982);
      doubleArray0[3] = (-38.0);
      doubleArray0[4] = (double) '{';
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-982.0), (-982.0), (-982.0), (-38.0), 123.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-3036));
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(245);
      assertNotNull(integer0);
      assertEquals(245, (int)integer0);
      
      Integer integer1 = new Integer(6);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(6, (int)integer1);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (short) (-3036));
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(integerArray0);
      assertEquals(0, integerArray0.length);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Float float0 = new Float((float) (short) (-3036));
      assertNotNull(float0);
      assertEquals((-3036.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) (-2070));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2070.0F), (float)float1, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) float1, 245);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'f');
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'f'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2070);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 245, 2);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2070.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)4350;
      shortArray0[1] = (short)2957;
      shortArray0[2] = (short) (-1796);
      shortArray0[3] = (short)116;
      shortArray0[4] = (short)2257;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1796), (int) (short)116);
      assertEquals(5, shortArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new short[] {(short)4350, (short)2957, (short) (-1796), (short)116, (short)2257}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short)116);
      assertEquals(5, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertArrayEquals(new short[] {(short)4350, (short)2957, (short) (-1796), (short)116, (short)2257}, shortArray0);
      
      int[] intArray0 = new int[0];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)4350, (short)2957, (short) (-1796), (short)116, (short)2257}, shortArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short)4350, (short)2957, (short) (-1796), (short)116, (short)2257}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)115;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-1));
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)83, (byte)6, (byte)22, (byte)115}, byteArray0);
      assertArrayEquals(new byte[] {(byte)83, (byte)6, (byte)22, (byte)115, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)83;
      doubleArray0[1] = 68.0;
      doubleArray0[2] = (double) (short) (-1796);
      doubleArray0[3] = (double) (byte)22;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(0, intArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {83.0, 68.0, (-1796.0), 22.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {83.0, 68.0, (-1796.0), 22.0}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)83, (byte)6, (byte)22, (byte)115}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurences(shortArray0, (short) (byte) (-1));
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)4350, (short)2957, (short) (-1796), (short)116, (short)2257}, shortArray0);
      assertArrayEquals(new short[] {(short)4350, (short)2957, (short) (-1796), (short)116, (short)2257}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      ArrayUtils.shift((Object[]) null, (int) (byte)6, 671, 2145841708);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      int[] intArray0 = new int[3];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)8;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)8;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (byte)8;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (byte)8;
      longArray0[6] = (long) (byte)67;
      longArray0[7] = (long) 0;
      ArrayUtils.swap(longArray0, (int) (byte) (-95), 0, 0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {8L, 0L, 8L, 0L, 0L, 8L, 67L, 0L}, longArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, (-715));
      assertEquals(0, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte) (-95), (byte)8, (byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-234));
      assertEquals(1, booleanArray0.length);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-234);
      longArray0[1] = 42L;
      longArray0[2] = (long) (-234);
      longArray0[3] = (long) (-234);
      longArray0[4] = (long) (-234);
      ArrayUtils.swap(longArray0, (-2023), (-234), (-2023));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-234L), 42L, (-234L), (-234L), (-234L)}, longArray0);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = Float.valueOf((float) (-2023));
      assertNotNull(float0);
      assertEquals((-2023.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (-234L));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-234.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) floatArray0[0]);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-2023.0F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) (-234L));
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals((-234.0F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) floatArray0[1]);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals((-234.0F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      try { 
        Float.valueOf("!.fG<<");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "lr9bdpiI=Z]g7wq$.";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "lr9bdpiI=Z]g7wq$.";
      stringArray0[5] = "w<gm";
      stringArray0[6] = "lr9bdpiI=Z]g7wq$.";
      stringArray0[7] = "T>f&7=mg7X@.D;}r@}";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1710L;
      longArray0[1] = (-2147483648L);
      longArray0[2] = (-2147483648L);
      longArray0[3] = (-312L);
      ArrayUtils.swap(longArray0, 679, (int) (byte)99, (-2212));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {1710L, (-2147483648L), (-2147483648L), (-312L)}, longArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'z';
      charArray0[2] = 'D';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'W', 'z', 'D'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)6);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Float float0 = new Float((float) (byte)6);
      assertNotNull(float0);
      assertEquals(6.0F, (float)float0, 0.01F);
      
      ArrayUtils.swap(byteArray0, 53, (int) (short)0, (-53));
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 53;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {53.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = '@';
      charArray0[2] = 'c';
      charArray0[3] = '4';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'a', '@', 'c', '4'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-3036));
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)8740, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) (short) (-3036);
      ArrayUtils.reverse((short[]) null);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      ArrayUtils.swap((short[]) null, (int) (short) (-3036), 59, (-1));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-3036);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (byte) (-9);
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) 0L, 0.0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-3036.0), 0.0, (-9.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1842.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1, 1545);
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {0.0, (-1842.0), 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[3];
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-982), 1545);
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      
      long[] longArray0 = ArrayUtils.insert((-1421), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Character[] characterArray0 = new Character[3];
      Character character0 = new Character('2');
      assertNotNull(character0);
      assertEquals('2', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('2');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('2', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character0);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('2', (char)character2);
      
      characterArray0[2] = character2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(126, characterArray0, characterArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 126, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, (-868), 2145154515);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)2;
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt mutableInt0 = new MutableInt(59);
      assertNotNull(mutableInt0);
      assertEquals(59, mutableInt0.intValue());
      assertEquals(59L, mutableInt0.longValue());
      assertEquals(59.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)59, mutableInt0.shortValue());
      assertEquals("59", mutableInt0.toString());
      assertEquals(59, (int)mutableInt0.getValue());
      assertEquals(59, (int)mutableInt0.toInteger());
      assertEquals((byte)59, mutableInt0.byteValue());
      assertEquals(59.0, mutableInt0.doubleValue(), 0.01);
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals(59, mutableInt0.intValue());
      assertEquals(59L, mutableInt0.longValue());
      assertEquals(59.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)59, mutableInt0.shortValue());
      assertEquals("59", mutableInt0.toString());
      assertEquals(59, (int)mutableInt0.getValue());
      assertEquals(59, (int)mutableInt0.toInteger());
      assertEquals((byte)59, mutableInt0.byteValue());
      assertEquals(59.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(59L, mutableInt1.longValue());
      assertEquals(59.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("59", mutableInt1.toString());
      assertEquals(59, (int)mutableInt1.getValue());
      assertEquals((byte)59, mutableInt1.byteValue());
      assertEquals(59.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(59, (int)mutableInt1.toInteger());
      assertEquals(59, mutableInt1.intValue());
      assertEquals((short)59, mutableInt1.shortValue());
      
      int int1 = mutableInt1.getAndDecrement();
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(int1 == int0);
      assertEquals(59, int1);
      assertEquals(59, mutableInt0.intValue());
      assertEquals(59L, mutableInt0.longValue());
      assertEquals(59.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)59, mutableInt0.shortValue());
      assertEquals("59", mutableInt0.toString());
      assertEquals(59, (int)mutableInt0.getValue());
      assertEquals(59, (int)mutableInt0.toInteger());
      assertEquals((byte)59, mutableInt0.byteValue());
      assertEquals(59.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(58L, mutableInt1.longValue());
      assertEquals(58.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(58, (int)mutableInt1.toInteger());
      assertEquals("58", mutableInt1.toString());
      assertEquals(58, (int)mutableInt1.getValue());
      assertEquals(58.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((byte)58, mutableInt1.byteValue());
      assertEquals((short)58, mutableInt1.shortValue());
      assertEquals(58, mutableInt1.intValue());
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeAllOccurrences(mutableIntArray0, mutableInt1);
      assertEquals(2, mutableIntArray0.length);
      assertEquals(1, mutableIntArray1.length);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertEquals(59, mutableInt0.intValue());
      assertEquals(59L, mutableInt0.longValue());
      assertEquals(59.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)59, mutableInt0.shortValue());
      assertEquals("59", mutableInt0.toString());
      assertEquals(59, (int)mutableInt0.getValue());
      assertEquals(59, (int)mutableInt0.toInteger());
      assertEquals((byte)59, mutableInt0.byteValue());
      assertEquals(59.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(58L, mutableInt1.longValue());
      assertEquals(58.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(58, (int)mutableInt1.toInteger());
      assertEquals("58", mutableInt1.toString());
      assertEquals(58, (int)mutableInt1.getValue());
      assertEquals(58.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((byte)58, mutableInt1.byteValue());
      assertEquals((short)58, mutableInt1.shortValue());
      assertEquals(58, mutableInt1.intValue());
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt1, mutableInt0);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (float) 59;
      floatArray0[2] = (float) (short)2;
      floatArray0[3] = (float) (short)2;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F, 59.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new float[] {59.0F, 2.0F, 2.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte) (-72);
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (-1908874352);
      floatArray0[3] = (float) (byte) (-72);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-72.0F), 1.0F, (-1.90887437E9F), (-72.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('Y', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '^');
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (char)character0;
      longArray0[2] = (long) (char)character1;
      longArray0[3] = (long) (-1908874352);
      longArray0[4] = (long) (char)character1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) '^';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2488L);
      assertEquals(7, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new long[] {0L, 89L, 89L, (-1908874352L), 89L, 1L, 94L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)0;
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (-1908874352);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 1.0F, (-1.90887437E9F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Character[] characterArray0 = new Character[17];
      Character character0 = new Character('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('Y', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '^');
      assertEquals(17, characterArray0.length);
      assertEquals(17, charArray0.length);
      assertNotNull(charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (char)character0;
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertSame(shortArray0, shortArray2);
      assertSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      Short[] shortArray3 = new Short[2];
      Short short1 = new Short((short)0);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      
      shortArray3[0] = short1;
      Short short2 = new Short(short0);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short)0, (short)short2);
      
      shortArray3[1] = short2;
      short[] shortArray4 = ArrayUtils.toPrimitive(shortArray3, (short)716);
      assertEquals(2, shortArray3.length);
      assertEquals(2, shortArray4.length);
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray2));
      assertFalse(shortArray4.equals((Object)shortArray0));
      assertNotNull(shortArray4);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray4);
      assertNotSame(shortArray4, shortArray1);
      assertNotSame(shortArray4, shortArray2);
      assertNotSame(shortArray4, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-767);
      intArray0[1] = (-767);
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      longArray0[1] = (-3471L);
      longArray0[2] = 0L;
      longArray0[3] = 3198L;
      longArray0[4] = 2417L;
      longArray0[5] = 2507L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(6, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {1L, (-3471L), 0L, 3198L, 2417L, 2507L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(99);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(99, (int)integer1);
      
      Integer integer2 = new Integer(13);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(13, (int)integer2);
      
      integerArray0[2] = integer2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[2] = (-1660);
      intArray0[3] = 11;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1660), 7);
      assertEquals(14, intArray0.length);
      assertEquals(2, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'V';
      charArray0[2] = 'v';
      charArray0[3] = 'Z';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'k', 'V', 'v', 'Z'}, charArray0);
      assertArrayEquals(new char[] {'k', 'V', 'v', 'Z'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Object[] objectArray0 = new Object[4];
      charArray0[3] = 'V';
      objectArray0[1] = (Object) 11;
      objectArray0[2] = (Object) 'v';
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, objectArray1.length);
      assertNotNull(objectArray1);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = (-63);
      intArray0[2] = (-63);
      intArray0[3] = 3;
      intArray0[4] = 567;
      intArray0[5] = (-2585);
      intArray0[6] = (-63);
      intArray0[7] = (-63);
      ArrayUtils.swap(intArray0, 4401, 1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {3, (-63), (-63), 3, 567, (-2585), (-63), (-63)}, intArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 2120.9918169, 2589.36460201);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-2536), (-1), (-2536));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      
      float[] floatArray3 = new float[5];
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (float) (-63);
      floatArray3[1] = (float) 567;
      floatArray3[2] = (float) 1;
      floatArray3[3] = (float) (-63);
      floatArray3[4] = (float) 1;
      float[] floatArray4 = ArrayUtils.subarray(floatArray3, (-3034), 4401);
      assertEquals(5, floatArray4.length);
      assertEquals(5, floatArray3.length);
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertNotNull(floatArray4);
      assertArrayEquals(new float[] {(-63.0F), 567.0F, 1.0F, (-63.0F), 1.0F}, floatArray4, 0.01F);
      assertArrayEquals(new float[] {(-63.0F), 567.0F, 1.0F, (-63.0F), 1.0F}, floatArray3, 0.01F);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray4);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, 1702, 1);
      assertEquals(8, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {3, (-63), (-63), 3, 567, (-2585), (-63), (-63)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      String[] stringArray0 = new String[6];
      ArrayUtils.swap((Object[]) stringArray0, (-1818), (-1818), (-1818));
      assertEquals(6, stringArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)8;
      Double double0 = new Double((-53.0));
      assertNotNull(double0);
      assertEquals((-53.0), (double)double0, 0.01);
      
      Byte byte0 = new Byte((byte)11);
      assertNotNull(byte0);
      assertEquals((byte)11, (byte)byte0);
      
      Double[] doubleArray0 = new Double[0];
      Long long0 = new Long((-1818));
      assertNotNull(long0);
      assertEquals((-1818L), (long)long0);
      
      Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) long0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1016);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)8, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)8, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) (short)8;
      doubleArray2[1] = (double) (short)8;
      doubleArray2[2] = (double) (short)8;
      doubleArray2[3] = (double) (byte)11;
      doubleArray2[4] = (-993.0984195);
      doubleArray2[5] = (double) (short)8;
      doubleArray2[6] = (double) (-1660);
      doubleArray2[7] = (double) (short)1016;
      ArrayUtils.shift(doubleArray2, 1133);
      assertEquals(8, doubleArray2.length);
      assertArrayEquals(new double[] {11.0, (-993.0984195), 8.0, (-1660.0), 1016.0, 8.0, 8.0, 8.0}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1818);
      longArray0[1] = (long) (byte)11;
      longArray0[2] = (long) (byte)11;
      longArray0[3] = (long) (-1818);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1818L), 11L, 11L, (-1818L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2486.4));
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-63);
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) 3;
      floatArray0[4] = 68.0F;
      floatArray0[5] = (float) 3;
      floatArray0[6] = (float) (-63);
      floatArray0[7] = (float) (-63);
      boolean boolean1 = ArrayUtils.contains(floatArray0, 946.51F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-63.0F), 3.0F, 3.0F, 3.0F, 68.0F, 3.0F, (-63.0F), (-63.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = 'v';
      charArray0[2] = '(';
      charArray0[3] = '\\';
      charArray0[4] = 'i';
      charArray0[5] = ';';
      charArray0[6] = 'V';
      charArray0[7] = 'p';
      charArray0[8] = 'H';
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertEquals(9, charArray1.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'u', 'v', '(', '\\', 'i', ';', 'V', 'p', 'H'}, charArray1);
      assertArrayEquals(new char[] {'u', 'v', '(', '\\', 'i', ';', 'V', 'p', 'H'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      Short short0 = new Short((short) (-982));
      assertNotNull(short0);
      assertEquals((short) (-982), (short)short0);
      
      Short short1 = new Short((short) (-982));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-982), (short)short1);
      
      Short short2 = new Short((short) (-5));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-5), (short)short2);
      
      long[] longArray0 = new long[1];
      ArrayUtils.reverse(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      Long[] longArray1 = new Long[5];
      Long long0 = Long.getLong((String) null, (long) (short) (-5));
      assertNotNull(long0);
      assertEquals((-5L), (long)long0);
      
      longArray1[0] = long0;
      longArray1[1] = (Long) 0L;
      Long long1 = new Long((-3471L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-3471L), (long)long1);
      
      longArray1[0] = long1;
      longArray1[3] = (Long) 0L;
      longArray1[4] = (Long) 0L;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0L;
      objectArray0[2] = (Object) longArray1[1];
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      ArrayUtils.swap(charArray0, (-102), (-102), (int) (short) (-5));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\''}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 2565.56F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-269.63596F);
      floatArray0[4] = (-1750.3F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1.0F, 2565.56F, 1.0F, (-269.63596F), (-1750.3F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 646;
      intArray0[1] = 8;
      intArray0[2] = 12;
      intArray0[3] = 1508;
      intArray0[4] = 322;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {646, 8, 12, 1508, 322}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte)56;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 2);
      assertEquals(7, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-25), (byte) (-54), (byte) (-1), (byte)30, (byte)99, (byte)56}, byteArray1);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-25), (byte)13, (byte) (-54), (byte) (-1), (byte)30, (byte)99, (byte)56}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2486.4));
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-63);
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) 3;
      floatArray0[4] = 68.0F;
      floatArray0[5] = (float) 3;
      floatArray0[6] = (float) (-63);
      floatArray0[7] = (float) (-63);
      boolean boolean1 = ArrayUtils.contains(floatArray0, 946.51F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-63.0F), 3.0F, 3.0F, 3.0F, 68.0F, 3.0F, (-63.0F), (-63.0F)}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 3;
      ArrayUtils.shift(longArray0, 3);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {3L}, longArray0);
      
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)118, (-1888));
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)36, (byte)102, (byte)118, (byte) (-40), (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      Double double0 = new Double((-1822.0));
      assertNotNull(double0);
      assertEquals((-1822.0), (double)double0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      Double double1 = new Double((-1822.0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1822.0), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      Double double2 = new Double((-1029.80090973));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-1029.80090973), (double)double2, 0.01);
      
      doubleArray0[0] = double2;
      Double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, double1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)30;
      ArrayUtils.shift(floatArray0, (int) (byte)64);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {30.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)64;
      longArray0[1] = (long) (byte)64;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {64L, 64L}, longArray0);
      assertArrayEquals(new long[] {64L, 64L, 64L, 64L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (int) (byte)30, (-1L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = (long) (short)55;
      longArray0[2] = (long) (short)55;
      longArray0[2] = (long) (short)55;
      longArray0[4] = (long) (short)55;
      longArray0[5] = (-2799L);
      ArrayUtils.shift(longArray0, (int) (short)55);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-2799L), 0L, 55L, 55L, 0L, 55L}, longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      longArray0[5] = (long) (byte)24;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)84, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)0, (byte)84, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1573;
      doubleArray0[1] = (double) (short)1231;
      doubleArray0[2] = (double) 0L;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1573.0, (-457), 0.7);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {1573.0, 1231.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'H';
      charArray0[3] = 'w';
      ArrayUtils.shift(charArray0, 0, 595, (-457));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'w', 'H', 'w', 'w'}, charArray0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, (double) (short)55, (-1), 644.1051615879676);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      
      long[] longArray0 = new long[26];
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = 0L;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(25, longArray1.length);
      assertEquals(26, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int1 = ArrayUtils.indexOf((int[]) null, 9);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.indexOf((double[]) null, 1917.9057443755332, 1573, 79.0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'w');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 0, (-556));
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-556)}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-1), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = 0L;
      longArray0[4] = (long) 0;
      longArray0[5] = (-1882L);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1882L));
      assertEquals(8, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), 0L, 0L, 0L, 0L, (-1L)}, longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), 0L, 0L, (-1882L), 0L, 0L, (-1L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int1 = ArrayUtils.indexOf((int[]) null, 9);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.indexOf((double[]) null, 1917.9057443755332, 1573, 79.0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'w');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 0, (-556));
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-556)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int[] intArray0 = new int[1];
      intArray0[0] = 58;
      int[] intArray1 = ArrayUtils.add(intArray0, 58);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {58}, intArray0);
      assertArrayEquals(new int[] {58, 58}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 58);
      assertEquals(1, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertArrayEquals(new int[] {58}, intArray0);
      assertNotSame(intArray0, intArray1);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-1435));
      assertNull(shortArray0);
      
      char[] charArray0 = Character.toChars(58);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'P');
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.shift(charArray1, 1225);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1225;
      floatArray0[1] = (float) 1225;
      floatArray0[2] = (float) 'K';
      floatArray0[3] = (float) 1225;
      floatArray0[4] = (float) (byte) (-22);
      floatArray0[5] = (float) 'P';
      floatArray0[1] = (float) 58;
      floatArray0[7] = 1.0F;
      floatArray0[8] = (float) (short) (-1435);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1225.0F, 58.0F, 75.0F, 1225.0F, (-22.0F), 80.0F, 0.0F, 1.0F, (-1435.0F)}, floatArray0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray0, (-3121), 58);
      assertEquals(9, floatArray2.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1225.0F, 58.0F, 75.0F, 1225.0F, (-22.0F), 80.0F, 0.0F, 1.0F, (-1435.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {1225.0F, 58.0F, 75.0F, 1225.0F, (-22.0F), 80.0F, 0.0F, 1.0F, (-1435.0F)}, floatArray0, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray1, '+');
      assertEquals(2, charArray2.length);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'+', ':'}, charArray2);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertArrayEquals(new char[] {':'}, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.swap((short[]) null, (int) (short) (-272), 1225);
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Byte byte0 = Byte.valueOf((byte) (-79));
      assertNotNull(byte0);
      assertEquals((byte) (-79), (byte)byte0);
      
      Double double0 = new Double(1317.4);
      assertNotNull(double0);
      assertEquals(1317.4, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-6287), 462);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'i');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-3409);
      shortArray0[2] = (short) (-3686);
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-3409);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)2, (short) (-3409), (short) (-3686)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3409)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte) (-102);
      byteArray0[8] = (byte)1;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2399), (int) (byte)7);
      assertEquals(9, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)32, (byte)7, (byte)98, (byte)8, (byte) (-7), (byte) (-12), (byte) (-102), (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)32, (byte)7, (byte)98, (byte)8, (byte) (-7), (byte) (-12)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 't');
      assertNull(charArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)7;
      shortArray0[1] = (short) (byte)98;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)7, (short)98}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2417.0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 285;
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      ArrayUtils.swap(charArray0, 1, (-1660), 1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'y'}, charArray0);
      
      byte byte0 = (byte) (-4);
      Byte byte1 = new Byte((byte) (-4));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-4), (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-2));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-2), (byte)byte2);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-4), (byte) (-4), (byte) (-4)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'K';
      objectArray0[1] = (Object) 'K';
      ArrayUtils.swap(objectArray0, (-2623), (-17), Integer.MAX_VALUE);
      assertEquals(2, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 834.849831;
      doubleArray0[2] = (double) 'K';
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 56;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2417.0);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {834.849831, 0.0, 75.0, (-1.0), 56.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'K';
      longArray0[1] = (long) 101;
      longArray0[2] = (long) (-2623);
      longArray0[3] = (long) (-17);
      longArray0[2] = (long) 101;
      boolean boolean2 = ArrayUtils.contains(doubleArray0, 712.41698);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {834.849831, 0.0, 75.0, (-1.0), 56.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(byteArray0, 51, 9);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)24;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)2299;
      shortArray0[3] = (short) (-2015);
      shortArray0[4] = (short) (-540);
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)18688;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-154));
      assertEquals(8, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-154), (short)24, (short)1, (short)2299, (short) (-2015), (short) (-540), (short)2, (short)18688}, shortArray1);
      assertArrayEquals(new short[] {(short)24, (short)1, (short)2299, (short) (-2015), (short) (-540), (short)2, (short)18688}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      byte byte0 = (byte)9;
      byte byte1 = (byte)54;
      Byte byte2 = Byte.valueOf((byte)54);
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)54, (byte)byte2);
      
      Double double0 = new Double((-2469.9027490383));
      assertNotNull(double0);
      assertEquals((-2469.9027490383), (double)double0, 0.01);
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      floatArray0[4] = (float) (byte)9;
      ArrayUtils.shift(floatArray0, 0, (int) (byte)9, 0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 9.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)9;
      intArray0[2] = 0;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'i');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[2] = (short) (-3409);
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-3409);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)2, (short)0, (short) (-3409)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3409)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) characterArray0);
      assertEquals(0, characterArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1842.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1, 1545);
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {0.0, (-1842.0), 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[3];
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2, (int) (short)1231);
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (short)120, 1);
      assertEquals(0, longArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {}, longArray0);
      
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-982);
      shortArray1[1] = (short)2;
      shortArray1[2] = (short)2;
      ArrayUtils.reverse(shortArray1);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short)2, (short) (-982)}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-982);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (int) (short) (-982);
      intArray0[4] = 1545;
      intArray0[5] = 0;
      intArray0[6] = (int) (short) (-982);
      intArray0[7] = 1;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-982), (-1), (-1), (-982), 1545, 0, (-982), 1}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      short[] shortArray2 = new short[5];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)5;
      shortArray2[1] = (short)1231;
      shortArray2[2] = (short)120;
      shortArray2[3] = (short)2;
      shortArray2[4] = (short)120;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(5, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)5, (short)1231, (short)120, (short)2, (short)120}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(5, booleanArray0.length);
      assertEquals(4, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 4;
      floatArray0[1] = (float) 4;
      floatArray0[2] = (float) 4;
      floatArray0[3] = (float) 4;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (float) 4;
      floatArray0[6] = (float) 4;
      floatArray0[7] = 1091.1462F;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 4.0F, 4);
      assertEquals(8, floatArray0.length);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertArrayEquals(new float[] {4.0F, 4.0F, 4.0F, 4.0F, Float.NaN, 4.0F, 4.0F, 1091.1462F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)101;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1665));
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)101}, shortArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-47);
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)0;
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-20), (-2128970857));
      assertEquals(8, byteArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)71, (byte)94, (byte)122, (byte)117, (byte) (-47), (byte) (-20), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte1 = new Byte((byte) (-1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-1), (byte)byte1);
      
      byteArray0[1] = byte0;
      ArrayUtils.swap(shortArray0, (int) (byte) (-53), (int) (short) (-525), (-3194));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((byte) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((byte)2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("java.lang.Object", (-1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-1), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(158);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(158, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((byte) (-53));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      assertEquals((-53), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[5]);
      assertEquals(7, integerArray0.length);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      assertEquals((-53), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(7, integerArray1.length);
      assertEquals(7, integerArray0.length);
      assertNotNull(integerArray1);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)17787;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)5;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)20);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)17787, (short)5, (short)5}, shortArray0);
      assertArrayEquals(new short[] {(short)17787, (short)5, (short)5}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.shift((double[]) null, 684);
      long[] longArray2 = new long[7];
      longArray2[0] = (long) (short)17787;
      longArray2[1] = (long) 1;
      longArray2[4] = (long) (short)5;
      longArray2[3] = 810L;
      longArray2[4] = (long) (short)5;
      longArray2[5] = (long) (short)5;
      longArray2[6] = (long) (short)5;
      Long[] longArray3 = ArrayUtils.toObject(longArray2);
      assertEquals(7, longArray3.length);
      assertEquals(7, longArray2.length);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {17787L, 1L, 0L, 810L, 5L, 5L, 5L}, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-2027L);
      longArray0[1] = (long) (-63);
      Integer integer0 = Integer.getInteger("#/(Um}reI$N!v7g!s", (-63));
      assertNotNull(integer0);
      assertEquals((-63), (int)integer0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "#/(Um}reI$N!v7g!s";
      objectArray0[1] = (Object) "java.lang.Object";
      objectArray0[2] = (Object) (-63L);
      objectArray0[3] = (Object) "java.lang.Object";
      Object object0 = ArrayUtils.get(objectArray0, 1374);
      assertEquals(7, objectArray0.length);
      assertNull(object0);
      
      objectArray0[4] = null;
      Double double0 = new Double((-2027L));
      assertNotNull(double0);
      assertEquals((-2027.0), (double)double0, 0.01);
      
      Object object1 = ArrayUtils.get(objectArray0, (-63), (Object) double0);
      assertEquals(7, objectArray0.length);
      assertNotNull(object1);
      assertEquals((-2027.0), object1);
      
      objectArray0[5] = object1;
      objectArray0[6] = (Object) (-63L);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0, 1652);
      assertEquals(7, objectArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.shift((double[]) null, 1652);
      ArrayUtils.hashCode(object0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      Short short0 = new Short((short) (-982));
      assertNotNull(short0);
      assertEquals((short) (-982), (short)short0);
      
      Short short1 = new Short((short) (-982));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-982), (short)short1);
      
      Short short2 = new Short((short) (-5));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-5), (short)short2);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-982);
      ArrayUtils.reverse(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-982L)}, longArray0);
      
      Long[] longArray1 = new Long[5];
      Long long0 = Long.getLong((String) null, (long) (short) (-5));
      assertNotNull(long0);
      assertEquals((-5L), (long)long0);
      
      longArray1[0] = long0;
      longArray1[1] = (Long) (-982L);
      Long long1 = new Long((-3471L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-3471L), (long)long1);
      
      longArray1[2] = long1;
      longArray1[3] = (Long) (-982L);
      longArray1[4] = (Long) (-982L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-5L), (-982L), (-3471L), (-982L), (-982L)}, longArray2);
      assertNotSame(longArray2, longArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-982L);
      objectArray0[1] = (Object) longArray1[2];
      objectArray0[2] = (Object) longArray1[1];
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) long1;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-5);
      intArray0[1] = (int) (short) (-982);
      intArray0[2] = (int) (short) (-982);
      intArray0[3] = (int) (short) (-982);
      intArray0[4] = (int) (short) (-982);
      intArray0[5] = (int) (short) (-5);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1425.356F;
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 1425.356F, (double) 1425.356F);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      charArray0[1] = 'D';
      charArray0[2] = 'g';
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (double) 1425.356F);
      assertEquals(0, doubleArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'A';
      intArray0[1] = 1;
      intArray0[2] = (-1908874352);
      intArray0[3] = (-1);
      intArray0[4] = (int) 'D';
      intArray0[5] = (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {65, 1, (-1908874352), (-1), 68, (-1)}, intArray0);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1425.356F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1908874352);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 'A';
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1908874352);
      longArray0[5] = (long) 1;
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1908874352);
      longArray0[8] = (long) 'A';
      int int2 = ArrayUtils.indexOf(longArray0, (-783L));
      assertEquals(9, longArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertArrayEquals(new long[] {(-1908874352L), (-1L), 65L, (-1L), (-1908874352L), 1L, (-1L), (-1908874352L), 65L}, longArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-1);
      int int3 = ArrayUtils.lastIndexOf(byteArray0, (byte)20);
      assertEquals(5, byteArray0.length);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      assertArrayEquals(new byte[] {(byte)20, (byte)109, (byte)83, (byte)24, (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (byte)99;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 920.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 99.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 99.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[1];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)99;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)13;
      shortArray0[1] = (short) (byte)99;
      shortArray0[2] = (short) (byte)99;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (byte)99;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (byte)99;
      shortArray0[7] = (short) (byte)13;
      shortArray0[8] = (short) (byte)99;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)13, (short)99, (short)99, (short)0, (short)99, (short)0, (short)99, (short)13, (short)99}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = new Boolean("^`dR/B9?}A'S");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean("yof");
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[3] = boolean3;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (int) 99);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      int int0 = ArrayUtils.indexOf((int[]) null, (-25));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-25);
      longArray0[1] = (long) (-25);
      longArray0[2] = 0L;
      longArray0[3] = (long) (-25);
      longArray0[4] = (long) 485;
      longArray0[5] = (-25L);
      longArray0[6] = (long) (-25);
      longArray0[7] = (long) 485;
      longArray0[8] = (long) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-25L), (-25));
      assertEquals(9, longArray0.length);
      assertNotNull(bitSet0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertEquals("{0, 1, 3, 5, 6}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new long[] {(-25L), (-25L), 0L, (-25L), 485L, (-25L), (-25L), 485L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)1032);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) (short)0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(1454);
      assertNotNull(long0);
      assertEquals(1454L, (long)long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1669L));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1454L}, longArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1454;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1454, (-2654));
      assertEquals(3, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {1454, 0, 0}, intArray0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean2 = Boolean.valueOf(false);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = Boolean.valueOf(false);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[1] = boolean3;
      Boolean boolean4 = new Boolean("Z.ou");
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[2] = boolean4;
      Boolean boolean5 = new Boolean((boolean) boolean2);
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean4));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      Boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, boolean5);
      assertEquals(4, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean5));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean4));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 1352119334);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)616;
      shortArray0[1] = (short) (-42);
      shortArray0[2] = (short)4143;
      shortArray0[3] = (short) (-3254);
      shortArray0[4] = (short) (-937);
      shortArray0[5] = (short)99;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)616, 52);
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new short[] {(short)616, (short) (-42), (short)4143, (short) (-3254), (short) (-937), (short)99}, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)99;
      longArray0[1] = (long) (short)616;
      longArray0[2] = (long) (short)99;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 1352119334;
      longArray0[5] = (long) (short) (-3254);
      longArray0[6] = (long) 1352119334;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {99L, 616L, 99L, 0L, 1352119334L, (-3254L), 1352119334L}, longArray1);
      assertArrayEquals(new long[] {99L, 616L, 99L, 0L, 1352119334L, (-3254L), 1352119334L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, true, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      ArrayUtils.swap((Object[]) null, 1724, 1724, (-286));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1724;
      doubleArray0[2] = (double) (-286);
      doubleArray0[3] = 1339.72634548271;
      doubleArray0[4] = 1826.6935823640163;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 1.0F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 29.86601489192);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, 1724.0, (-286.0), 1339.72634548271, 1826.6935823640163, 2.0, 1.0}, doubleArray0, 0.01);
      
      Character character0 = Character.valueOf('R');
      assertNotNull(character0);
      assertEquals('R', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1826.6935823640163, 2);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.0, 1724.0, (-286.0), 1339.72634548271, 1826.6935823640163, 2.0, 1.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      ArrayUtils.shift(byteArray0, (-1943), (int) (byte)0, 1724);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)4}, byteArray0);
      
      Class<Object[]> class0 = Object[].class;
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null, class0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1.0F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1660);
      intArray0[1] = 1423;
      intArray0[2] = 0;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = 2144890068;
      intArray0[5] = 999;
      intArray0[6] = (-525);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 2515);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1660), 1423, 0, Integer.MAX_VALUE, 2144890068, 999, (-525)}, intArray0);
      assertArrayEquals(new int[] {(-1660), 1423, 0, Integer.MAX_VALUE, 2144890068, 999, (-525)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      char[] charArray0 = null;
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      byte byte0 = (byte) (-119);
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-119));
      assertNull(byteArray0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-119);
      intArray0[1] = (int) (byte) (-119);
      intArray0[2] = (int) (byte) (-119);
      intArray0[3] = (int) (byte) (-119);
      intArray0[4] = (int) (byte) (-119);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'K';
      objectArray0[1] = (Object) 'K';
      ArrayUtils.swap(objectArray0, (-2623), (-17), Integer.MAX_VALUE);
      assertEquals(2, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 834.849831;
      doubleArray0[2] = (double) 'K';
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 56;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2417.0);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {834.849831, 0.0, 75.0, (-1.0), 56.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'K';
      longArray0[1] = (long) 101;
      longArray0[2] = (long) (-2623);
      longArray0[3] = (long) (-17);
      longArray0[2] = (long) 101;
      boolean boolean2 = ArrayUtils.contains(doubleArray0, 712.41698);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {834.849831, 0.0, 75.0, (-1.0), 56.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, 56, 17, (-17));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte) (-75);
      byteArray0[8] = (byte)12;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, (int) (byte)2);
      assertEquals(9, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte) (-75), (byte)71, (byte) (-75), (byte) (-75), (byte)12}, byteArray0);
      
      ArrayUtils.swap((short[]) null, (int) (byte)12, 1, 9);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((byte)85);
      assertNotNull(double0);
      assertEquals(85.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-145.74740131491404));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-145.74740131491404), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.7);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(0.7, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-2969.555759));
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals((-2969.555759), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(0.7);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals(0.7, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(3103.896021);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      assertEquals(3103.896021, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[1]);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotNull(double6);
      assertEquals((-145.74740131491404), (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, false);
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(4, bitSet0.cardinality());
      assertEquals("{1, 5, 7, 11}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(12, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)85;
      floatArray0[1] = (float) (byte)85;
      floatArray0[2] = (float) (byte)85;
      floatArray0[3] = (float) (byte)85;
      floatArray0[4] = (float) (byte)85;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 384.0F, (-1351));
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {85.0F, 85.0F, 85.0F, 85.0F, 85.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      Long[] longArray0 = ArrayUtils.subarray((Long[]) null, (int) 6, (int) 6);
      assertNull(longArray0);
      
      ArrayUtils.swap((Object[]) null, (-1), (-1423), (-1423));
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 1668L);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(1668L);
      assertNotNull(long0);
      assertEquals(1668L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(1L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(1668L);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1668L, (long)long2);
      
      longArray0[2] = long2;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), (-1));
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.swap((Object[]) floatArray0, (-1), (-1), (-1));
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 97, 97);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (short)36);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[1];
      ArrayUtils.swap(longArray0, (-1167), 46);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1646);
      assertEquals(5, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 3764.090232940246, 29.86601489192);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Boolean[] booleanArray1 = new Boolean[2];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      Boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-1167), (-1167));
      assertEquals(2, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = '{';
      charArray0[2] = 'O';
      charArray0[3] = 'E';
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'E';
      intArray0[1] = (int) '{';
      intArray0[2] = (int) 'c';
      intArray0[3] = (int) 'O';
      intArray0[4] = (int) 'E';
      intArray0[5] = (int) '{';
      intArray0[6] = (int) '{';
      intArray0[7] = (int) 'c';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {123, 99, 79, 69, 123, 123, 99, 69}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'c', '{', 'O', 'E', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 69;
      doubleArray0[1] = 92.0;
      doubleArray0[2] = (double) 'E';
      int int0 = mockRandom0.nextInt(123);
      assertEquals(0, int0);
      
      doubleArray0[3] = (double) 123;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) 'O';
      doubleArray0[6] = (double) 1.0F;
      doubleArray0[7] = (double) 79;
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {92.0, 69.0, 123.0, 1.0, 79.0, 1.0, 79.0, 69.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'D';
      charArray0[2] = 'Q';
      ArrayUtils.shift(charArray0, 2);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'D', 'Q', 'J'}, charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'D';
      floatArray0[1] = (float) (byte) (-22);
      floatArray0[2] = (float) (short) (-23319);
      floatArray0[3] = 2.14748365E9F;
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) (byte) (-22);
      floatArray0[6] = (float) 1225;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {68.0F, (-22.0F), (-23319.0F), 2.14748365E9F, 2.0F, (-22.0F), 1225.0F}, floatArray0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray0, 2, (int) (short)2);
      assertEquals(0, floatArray2.length);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {68.0F, (-22.0F), (-23319.0F), 2.14748365E9F, 2.0F, (-22.0F), 1225.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 2, true);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, true, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Double double0 = new Double((-993.0984195));
      assertNotNull(double0);
      assertEquals((-993.0984195), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[15];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-750);
      shortArray0[1] = (short)2439;
      shortArray0[3] = (short) (-750);
      shortArray0[4] = (short) (-750);
      shortArray0[5] = (short) (-750);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-750), (short)2439, (short)0, (short) (-750), (short) (-750), (short) (-750)}, shortArray0);
      
      ArrayUtils.shift(booleanArray0, (int) (short) (-750));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false}, booleanArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)2439;
      intArray0[1] = (int) (short) (-750);
      intArray0[2] = (int) (short) (-750);
      intArray0[3] = (int) (short)2439;
      int[] intArray1 = ArrayUtils.add(intArray0, 2439);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2439, (-750), (-750), 2439}, intArray0);
      assertArrayEquals(new int[] {2439, (-750), (-750), 2439, 2439}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.reverse((Object[]) doubleArray0, (int) (short) (-750), (int) (short) (-750));
      assertEquals(15, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = '@';
      charArray0[2] = 'A';
      charArray0[3] = 'T';
      charArray0[4] = 'i';
      charArray0[5] = 'E';
      charArray0[6] = ';';
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'T';
      longArray0[1] = (long) ';';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {84L, 59L}, longArray0);
      assertArrayEquals(new long[] {84L, 59L, 84L, 59L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'A';
      doubleArray0[1] = (double) 'i';
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) ';';
      doubleArray0[4] = (double) 'i';
      doubleArray0[5] = (double) '@';
      doubleArray0[6] = (double) 'E';
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-1.0F), 2, 105.0);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {65.0, 105.0, (-1.0), 59.0, 105.0, 64.0, 69.0}, doubleArray0, 0.01);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 99);
      assertEquals(4, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte) (-1));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = 'T';
      charArray0[2] = 'p';
      charArray0[3] = '+';
      charArray0[4] = 'a';
      charArray0[5] = 'P';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(556, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 556, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)54;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)43, (byte)6, (byte) (-1), (byte)54}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte)54);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)54, (byte)43, (byte)6}, byteArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.addAll(characterArray0, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      int[] intArray0 = new int[7];
      intArray0[0] = (-2585);
      intArray0[1] = (-2174);
      intArray0[2] = (-2585);
      intArray0[3] = (-2174);
      intArray0[4] = 1;
      intArray0[5] = (-2174);
      intArray0[6] = (-2585);
      ArrayUtils.swap(intArray0, (-2174), (-2585));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-2585), (-2174), (-2585), (-2174), 1, (-2174), (-2585)}, intArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-2174), 100.0);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((float[]) null, (-2585), 52, 575);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2174, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-11);
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)0;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short) (-11);
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-11), (short)5, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-11), (short)5, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[7];
      ArrayUtils.shift(longArray0, (-2212));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      char[] charArray0 = new char[1];
      Character character0 = Character.valueOf('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      Character character1 = new Character('*');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('*', (char)character1);
      
      ArrayUtils.shift(charArray0, (int) (short)0, (int) (short) (-11), 0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray1 = ArrayUtils.add(longArray0, (-1876L));
      assertEquals(8, longArray1.length);
      assertEquals(7, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, (-1876L)}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.shuffle(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-3036));
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)8740, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) (short) (-3036);
      ArrayUtils.reverse((short[]) null);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (int) (short)1231;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), 1231, Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-1), 1231, Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      Byte byte0 = new Byte((byte) (-48));
      assertNotNull(byte0);
      assertEquals((byte) (-48), (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "");
      assertNotNull(string0);
      assertEquals("-48", string0);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1842.0);
      doubleArray0[1] = (-1842.0);
      doubleArray0[2] = (-1842.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1, 1545);
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {(-1842.0), (-1842.0), (-1842.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-982);
      shortArray0[1] = (short) (-982);
      shortArray0[2] = (short) (-982);
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short) (-982), (int) (short) (-982));
      assertEquals(3, shortArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(3, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(3, bitSet1.cardinality());
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertArrayEquals(new short[] {(short) (-982), (short) (-982), (short) (-982)}, shortArray0);
      assertNotSame(bitSet1, bitSet0);
      
      ArrayUtils.shift((long[]) null, 1);
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)84;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)84, (byte)84, (byte)84, (byte)84, (byte)84, (byte)84, (byte)84, (byte)84}, byteArray1);
      assertArrayEquals(new byte[] {(byte)84, (byte)84, (byte)84, (byte)84}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)120;
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)1231, (int) (short) (-982));
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)120}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, (-5263L), 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(3, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-982), (short) (-982), (short) (-982)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)120;
      intArray0[1] = (-2294);
      intArray0[2] = 52;
      intArray0[3] = (int) (byte)84;
      intArray0[4] = 1;
      intArray0[5] = (int) (short) (-982);
      intArray0[6] = 1;
      intArray0[7] = (int) (short) (-982);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {120, (-2294), 52, 84, 1, (-982), 1, (-982)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)18, object0);
      
      char[] charArray0 = new char[20];
      charArray0[0] = '\"';
      int int0 = (-1988410785);
      ArrayUtils.shift(charArray0, (-1988410785), 2128136948, (-1988410785));
      assertEquals(20, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      
      Float[] floatArray0 = new Float[5];
      try { 
        Float.valueOf("The array must not contain any null elements");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      int[] intArray0 = new int[9];
      char char0 = '\u0017';
      Character character0 = Character.valueOf('\u0017');
      assertNotNull(character0);
      assertEquals('\u0017', (char)character0);
      
      Character character1 = Character.valueOf('*');
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals('*', (char)character1);
      
      Character character2 = new Character('R');
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('R', (char)character2);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character2;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character2;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      ArrayUtils.shift((Object[]) characterArray0, 0);
      assertEquals(4, characterArray0.length);
      assertSame(characterArray0, characterArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) '\u0017';
      intArray0[0] = (int) char0;
      doubleArray0[3] = (double) 'R';
      doubleArray0[4] = 2963.600399632686;
      doubleArray0[1] = (double) 2;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 82.0);
      assertEquals(7, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 82.0, 2963.600399632686, 0.0, 82.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 82.0, 2963.600399632686, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) char0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {23L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double((short) (-982));
      assertNotNull(double0);
      assertEquals((-982.0), (double)double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-982);
      doubleArray0[1] = (double) (short) (-982);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-982.0), (-982.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-46);
      ArrayUtils.shift(byteArray0, (-1843));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-46), (byte)61, (byte) (-99), (byte) (-66)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte) (-122);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)97, (byte)79, (byte)97, (byte)14, (byte)107, (byte) (-10), (byte) (-122)}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte)97);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)79, (byte)97, (byte)14, (byte)107, (byte) (-10), (byte) (-122), (byte)97}, byteArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = '@';
      ArrayUtils.reverse((double[]) null);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'Y';
      intArray0[1] = (int) 'Y';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-17);
      ArrayUtils.shift(byteArray0, 1922);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-34), (byte) (-73), (byte) (-17), (byte) (-1), (byte) (-1), (byte)122}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "byt4");
      assertEquals(8, objectArray0.length);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 100.0;
      doubleArray0[3] = 100.0;
      char[] charArray0 = new char[8];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      charArray0[3] = 'F';
      charArray0[4] = 'F';
      charArray0[5] = 'F';
      charArray0[6] = 'F';
      charArray0[7] = 'F';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'b');
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F'}, charArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 100.0, (-652));
      assertEquals(6, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new double[] {100.0, 100.0, 100.0, 100.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((-119));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals((-119), (int)integer0);
      
      MutableInt mutableInt0 = new MutableInt(16);
      assertNotNull(mutableInt0);
      assertEquals(16L, mutableInt0.longValue());
      assertEquals(16, mutableInt0.intValue());
      assertEquals((short)16, mutableInt0.shortValue());
      assertEquals(16.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("16", mutableInt0.toString());
      assertEquals((byte)16, mutableInt0.byteValue());
      assertEquals(16, (int)mutableInt0.getValue());
      assertEquals(16.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(16, (int)mutableInt0.toInteger());
      
      boolean boolean0 = ArrayUtils.isSameType("byt4", "byt4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[5];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-6287), (-1570));
      assertEquals(5, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      ArrayUtils.shift((int[]) null, 1672, 1773, 46);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[5];
      ArrayUtils.shift((int[]) null, 1672, 1773, 46);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "The Array must not be null";
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-182);
      floatArray0[1] = (float) (-182);
      floatArray0[2] = (float) (-182);
      floatArray0[3] = (float) (-182);
      floatArray0[4] = (float) (-182);
      floatArray0[5] = (float) (-182);
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-182), 318.66F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -182, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 56);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '_';
      longArray0[1] = (-1L);
      longArray0[2] = (long) 101;
      longArray0[3] = (long) '_';
      longArray0[4] = (long) (byte)7;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 95L, 0);
      assertEquals(5, longArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {95L, (-1L), 101L, 95L, 7L}, longArray0);
      
      Integer integer0 = new Integer((byte)7);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      Integer integer1 = new Integer(2237);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2237, (int)integer1);
      
      Integer integer2 = new Integer(101);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(101, (int)integer2);
      
      byte byte0 = (byte) (-57);
      Byte byte1 = new Byte((byte) (-57));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-57), (byte)byte1);
      
      try { 
        Byte.valueOf("3v@feb`#Vn?zt9,Lo");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3v@feb`#Vn?zt9,Lo\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 48;
      intArray0[1] = 6;
      intArray0[2] = (-2681);
      intArray0[3] = 5325;
      intArray0[4] = 3840;
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = '`';
      charArray0[2] = 'F';
      charArray0[3] = 'F';
      charArray0[4] = 'F';
      charArray0[5] = 'F';
      charArray0[6] = 'F';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'S');
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'F', '`', 'F', 'F', 'F', 'F', 'F'}, charArray0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 4067.05756, 48);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Integer integer0 = new Integer((-1656));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals((-1656), (int)integer0);
      
      MutableInt mutableInt0 = new MutableInt(1044);
      assertNotNull(mutableInt0);
      assertEquals(1044, (int)mutableInt0.toInteger());
      assertEquals((byte)20, mutableInt0.byteValue());
      assertEquals(1044.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("1044", mutableInt0.toString());
      assertEquals(1044, (int)mutableInt0.getValue());
      assertEquals(1044.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1044L, mutableInt0.longValue());
      assertEquals((short)1044, mutableInt0.shortValue());
      assertEquals(1044, mutableInt0.intValue());
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 48;
      longArray0[1] = (long) 5325;
      longArray0[2] = (long) 'F';
      longArray0[3] = (long) 'F';
      longArray0[4] = (long) 3840;
      longArray0[5] = (long) 1044;
      longArray0[6] = (long) 'S';
      longArray0[7] = (long) 'F';
      int int2 = ArrayUtils.lastIndexOf(longArray0, 48L, 114);
      assertEquals(8, longArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertArrayEquals(new long[] {48L, 5325L, 70L, 70L, 3840L, 1044L, 83L, 70L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '/';
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)0, object0);
      
      Object[] objectArray0 = new Object[0];
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      assertNotNull(mutableInt0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      
      mutableInt0.setValue(2953);
      assertEquals((short)2953, mutableInt0.shortValue());
      assertEquals(2953, (int)mutableInt0.toInteger());
      assertEquals(2953, (int)mutableInt0.getValue());
      assertEquals(2953.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2953L, mutableInt0.longValue());
      assertEquals(2953, mutableInt0.intValue());
      assertEquals("2953", mutableInt0.toString());
      assertEquals(2953.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-119), mutableInt0.byteValue());
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) mutableInt0, (int) (byte)0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      assertEquals((short)2953, mutableInt0.shortValue());
      assertEquals(2953, (int)mutableInt0.toInteger());
      assertEquals(2953, (int)mutableInt0.getValue());
      assertEquals(2953.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2953L, mutableInt0.longValue());
      assertEquals(2953, mutableInt0.intValue());
      assertEquals("2953", mutableInt0.toString());
      assertEquals(2953.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-119), mutableInt0.byteValue());
      
      Byte byte1 = Byte.valueOf((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)object0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-113));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)object0));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-113), (byte)byte2);
      
      String string0 = ArrayUtils.toString((Object) byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)object0));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(string0);
      assertEquals("-113", string0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-113);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (float) 'K';
      floatArray0[5] = 601.051F;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-3161.1863F), (-2323));
      assertEquals(6, floatArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {(-113.0F), 0.0F, 0.0F, Float.NaN, 75.0F, 601.051F}, floatArray0, 0.01F);
      
      int int2 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-113));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = 0L;
      longArray0[4] = (long) 0;
      longArray0[5] = (-1882L);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1882L));
      assertEquals(8, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), 0L, 0L, 0L, 0L, (-1L)}, longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), 0L, 0L, (-1882L), 0L, 0L, (-1L)}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int1 = ArrayUtils.indexOf((int[]) null, 9);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.indexOf((double[]) null, 1178.035178324, 1573, 79.0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'w');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Double double0 = new Double((-993.0984195));
      assertNotNull(double0);
      assertEquals((-993.0984195), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[15];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1836);
      shortArray0[1] = (short)2439;
      shortArray0[3] = (short) (-750);
      shortArray0[4] = (short) (-750);
      shortArray0[5] = (short) (-1836);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1836), (short)2439, (short)0, (short) (-750), (short) (-750), (short) (-1836)}, shortArray0);
      
      ArrayUtils.shift(booleanArray0, (int) (short) (-1836));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Double double0 = new Double(3634.2973);
      assertNotNull(double0);
      assertEquals(3634.2973, (double)double0, 0.01);
      
      Double double1 = new Double((-993.0984195));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-993.0984195), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[10];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1836);
      shortArray0[1] = (short)2439;
      shortArray0[2] = (short) (-750);
      shortArray0[3] = (short) (-750);
      shortArray0[4] = (short) (-750);
      shortArray0[5] = (short) (-1836);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1836), (short)2439, (short) (-750), (short) (-750), (short) (-750), (short) (-1836)}, shortArray0);
      
      ArrayUtils.shift(booleanArray0, (int) (short) (-1836));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      charArray0[1] = '9';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (int) (byte) (-72));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -72, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte) (-66);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-41), 1026);
      assertEquals(9, byteArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-55), (byte) (-66), (byte)2, (byte) (-66), (byte)48, (byte) (-66), (byte) (-55), (byte) (-66)}, byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-41);
      floatArray0[1] = (float) (byte) (-66);
      floatArray0[2] = (-1.0F);
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte) (-55);
      floatArray1[1] = (float) (byte)2;
      floatArray1[2] = (-1.0F);
      floatArray1[3] = 1.0F;
      floatArray1[4] = (float) (byte) (-55);
      floatArray1[5] = (float) (byte)2;
      floatArray1[6] = (float) (byte)2;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-41.0F), (-66.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-55.0F), 2.0F, (-1.0F), 1.0F, (-55.0F), 2.0F, 2.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-66);
      intArray0[1] = (int) (byte) (-55);
      intArray0[2] = (int) (byte) (-66);
      intArray0[3] = (int) (byte) (-66);
      ArrayUtils.reverse(intArray0, (int) (byte)2, (-66));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-66), (-55), (-66), (-66)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)76;
      shortArray0[3] = (short) (byte)76;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)76;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)76, (short)76, (short)0, (short)76}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)76, (short)76, (short)0, (short)76}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      MockRandom mockRandom0 = new MockRandom((short)0);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) (short)76, 1364L);
      assertNotNull(longStream0);
      
      mockRandom0.nextBytes(byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray1, (short)138);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)76, (short)76, (short)0, (short)76}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)76, (short)76, (short)0, (short)76}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)76, (short)76, (short)0, (short)76}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = '<';
      charArray0[2] = 'B';
      charArray0[3] = ']';
      charArray0[4] = '*';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)0, 2291);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'e', '<', 'B', ']', '*'}, charArray1);
      assertArrayEquals(new char[] {'e', '<', 'B', ']', '*'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 's');
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray2.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'e', '<', 'B', ']', '*'}, charArray1);
      assertArrayEquals(new char[] {'e', '<', 'B', ']', '*'}, charArray2);
      assertArrayEquals(new char[] {'e', '<', 'B', ']', '*'}, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      
      ArrayUtils.shift(charArray2, (-380));
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray2.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertArrayEquals(new char[] {'e', '<', 'B', ']', '*'}, charArray1);
      assertArrayEquals(new char[] {'e', '<', 'B', ']', '*'}, charArray2);
      assertArrayEquals(new char[] {'e', '<', 'B', ']', '*'}, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      
      short[] shortArray3 = new short[5];
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      
      shortArray3[0] = (short) (byte)0;
      shortArray3[1] = (short) (byte)0;
      shortArray3[2] = (short) (byte)0;
      shortArray3[3] = (short) (byte)0;
      shortArray3[4] = (short)138;
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(shortArray3, (Random) mockRandom1);
      assertEquals(5, shortArray3.length);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)138, (short)0}, shortArray3);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(mockRandom1, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 56);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Double double0 = new Double(2043.2108314);
      assertNotNull(double0);
      assertEquals(2043.2108314, (double)double0, 0.01);
      
      Double double1 = new Double((double) double0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2043.2108314, (double)double1, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-53);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) double0;
      doubleArray0[1] = (double) (byte) (-53);
      ArrayUtils.shift(doubleArray0, (int) (short)1734);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-53.0), 0.0, 0.0, 0.0, 2043.2108314}, doubleArray0, 0.01);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-72)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 56);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Double double0 = new Double(2043.2108314);
      assertNotNull(double0);
      assertEquals(2043.2108314, (double)double0, 0.01);
      
      Double double1 = new Double(2043.2108314);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2043.2108314, (double)double1, 0.01);
      
      Byte byte0 = new Byte((byte) (-72));
      assertNotNull(byte0);
      assertEquals((byte) (-72), (byte)byte0);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(2043.2108314, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double1;
      doubleArray0[6] = double0;
      doubleArray0[7] = double1;
      Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) doubleArray0[2]);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-53);
      shortArray0[1] = (short) (byte) (-53);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1734);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-53), (short) (-53)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-53), (short) (-53)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) doubleArray0[5];
      doubleArray2[1] = (double) (byte) (-53);
      ArrayUtils.shift(doubleArray2, (int) (short)1734);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {2043.2108314, (-53.0)}, doubleArray2, 0.01);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      ArrayUtils.shift(shortArray0, (-1), 1, 536);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-53), (short) (-53)}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte) (-53);
      intArray0[2] = (int) (short)1734;
      intArray0[3] = (-1);
      intArray0[4] = 2;
      intArray0[5] = (int) (short) (-53);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1734);
      assertEquals(6, intArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2}", bitSet0.toString());
      assertArrayEquals(new int[] {(-1), (-53), 1734, (-1), 2, (-53)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)6);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Float float0 = new Float((float) (byte)6);
      assertNotNull(float0);
      assertEquals(6.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) (byte)6);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(6.0F, (float)float1, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray0, (Object) float1);
      assertEquals(4, doubleArray0.length);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertFalse(boolean0);
      
      MutableInt mutableInt0 = new MutableInt(104);
      assertNotNull(mutableInt0);
      assertEquals("104", mutableInt0.toString());
      assertEquals(104, mutableInt0.intValue());
      assertEquals(104.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(104, (int)mutableInt0.toInteger());
      assertEquals((byte)104, mutableInt0.byteValue());
      assertEquals(104.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)104, mutableInt0.shortValue());
      assertEquals(104, (int)mutableInt0.getValue());
      assertEquals(104L, mutableInt0.longValue());
      
      MutableInt mutableInt1 = new MutableInt(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals(6.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(6, (int)mutableInt1.toInteger());
      assertEquals((byte)6, mutableInt1.byteValue());
      assertEquals(6, (int)mutableInt1.getValue());
      assertEquals(6L, mutableInt1.longValue());
      assertEquals("6", mutableInt1.toString());
      assertEquals(6.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)6, mutableInt1.shortValue());
      assertEquals(6, mutableInt1.intValue());
      
      MutableInt mutableInt2 = new MutableInt(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertNotNull(mutableInt2);
      assertEquals("6", mutableInt2.toString());
      assertEquals(6.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(6L, mutableInt2.longValue());
      assertEquals((short)6, mutableInt2.shortValue());
      assertEquals(6, mutableInt2.intValue());
      assertEquals(6, (int)mutableInt2.toInteger());
      assertEquals((byte)6, mutableInt2.byteValue());
      assertEquals(6.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(6, (int)mutableInt2.getValue());
      
      MutableInt[] mutableIntArray0 = new MutableInt[5];
      mutableIntArray0[0] = mutableInt0;
      mutableIntArray0[1] = mutableInt1;
      mutableIntArray0[2] = mutableInt0;
      mutableInt2.decrement();
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertEquals(5L, mutableInt2.longValue());
      assertEquals("5", mutableInt2.toString());
      assertEquals(5.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)5, mutableInt2.shortValue());
      assertEquals(5, mutableInt2.intValue());
      assertEquals(5, (int)mutableInt2.getValue());
      assertEquals((byte)5, mutableInt2.byteValue());
      assertEquals(5.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(5, (int)mutableInt2.toInteger());
      assertNotSame(mutableInt2, mutableInt1);
      assertNotSame(mutableInt2, mutableInt0);
      
      mutableIntArray0[4] = mutableInt2;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeAllOccurrences(mutableIntArray0, mutableInt2);
      assertEquals(4, mutableIntArray1.length);
      assertEquals(5, mutableIntArray0.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertNotNull(mutableIntArray1);
      assertEquals(5L, mutableInt2.longValue());
      assertEquals("5", mutableInt2.toString());
      assertEquals(5.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)5, mutableInt2.shortValue());
      assertEquals(5, mutableInt2.intValue());
      assertEquals(5, (int)mutableInt2.getValue());
      assertEquals((byte)5, mutableInt2.byteValue());
      assertEquals(5.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(5, (int)mutableInt2.toInteger());
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableInt2, mutableInt1);
      assertNotSame(mutableInt2, mutableInt0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)6);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Character character0 = new Character('F');
      assertNotNull(character0);
      assertEquals('F', (char)character0);
      
      Character character1 = new Character('F');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('F', (char)character1);
      
      Character character2 = Character.valueOf('+');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('+', (char)character2);
      
      Character character3 = Character.valueOf('F');
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('F', (char)character3);
      
      Character character4 = new Character('5');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('5', (char)character4);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = character3;
      characterArray0[2] = character3;
      Character character5 = new Character(';');
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      assertEquals(';', (char)character5);
      
      characterArray0[5] = character5;
      characterArray0[6] = character2;
      characterArray0[7] = character0;
      characterArray0[8] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(9, characterArray1.length);
      assertEquals(9, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      ArrayUtils.swap(byteArray0, (-3579), (-1338), 919);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = '{';
      charArray0[2] = 'O';
      charArray0[3] = 'E';
      charArray0[4] = 'l';
      charArray0[5] = 'v';
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (int) (byte)7);
      assertEquals((-1), int0);
      
      Double double0 = new Double((byte)7);
      assertNotNull(double0);
      assertEquals(7.0, (double)double0, 0.01);
      
      Double double1 = new Double((-2333.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2333.0), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2333.0), 7.0, 7.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.reverse(doubleArray1, (int) (byte)7, 16);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-2333.0), 7.0, 7.0}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      byte byte0 = (byte) (-125);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-125));
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((byte)85);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(85, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(3, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertEquals(3, integerArray0.length);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(85, (int)integer2);
      
      integerArray0[2] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (byte)85);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {85, 3, 85}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-2333.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = (byte)18;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'java.lang.Object@7ccf49c4', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-102);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-102));
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)98, (byte)3, (byte)93, (byte) (-93), (byte) (-1), (byte) (-102)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)98, (byte)3, (byte)93, (byte) (-93), (byte) (-1), (byte) (-102)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (-653);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)98, (byte)3, (byte)93, (byte) (-93), (byte) (-1), (byte) (-102)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      ArrayUtils.shift(byteArray1, 1722);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)98, (byte)3, (byte)93, (byte) (-93), (byte) (-1), (byte) (-102)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)98, (byte)3, (byte)93, (byte) (-93), (byte) (-1), (byte) (-102)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(3, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[1];
      ArrayUtils.swap(longArray0, (-1167), 46);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1631);
      assertEquals(5, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ArrayUtils.swap(booleanArray0, (-1), (-724), 69);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.shift((Object[]) characterArray0, 46, (-2146232928), (-1167));
      assertEquals(0, characterArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1167), 46);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 56;
      floatArray0[1] = (float) 56;
      floatArray0[2] = (float) 56;
      floatArray0[3] = (float) 56;
      floatArray0[4] = (float) 56;
      ArrayUtils.swap(floatArray0, (-1054), 160);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {56.0F, 56.0F, 56.0F, 56.0F, 56.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = (long) (short)55;
      longArray0[2] = (long) (short)55;
      longArray0[2] = (long) (short)55;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 55L;
      floatArray0[1] = (float) 55L;
      floatArray0[2] = (float) 55L;
      floatArray0[3] = (float) (short)55;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {55.0F, 55.0F, 55.0F, 55.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {55.0F, 55.0F, 55.0F, 55.0F, 55.0F, 55.0F, 55.0F, 55.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(6, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 1032L;
      longArray1[1] = (long) (-1);
      longArray1[2] = (-1055L);
      longArray1[3] = (-1606L);
      longArray1[4] = 75L;
      longArray1[5] = 1032L;
      longArray1[6] = 75L;
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(7, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {1032L, (-1L), (-1055L), (-1606L), 75L, 1032L, 75L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)710;
      shortArray0[1] = (short) (-1604);
      shortArray0[2] = (short) (-1604);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (-1604);
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)69;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)710, (short) (-1604), (short) (-1604), (short)1, (short) (-1604), (short)1, (short)69}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double(2127.77412);
      assertNotNull(double0);
      assertEquals(2127.77412, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) 56;
      doubleArray0[2] = 2127.77412;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (-106.0);
      doubleArray0[5] = 2127.77412;
      doubleArray0[6] = (double) 56;
      doubleArray0[7] = 2127.77412;
      doubleArray0[8] = (-53.128722793141);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-53.128722793141), 2127.77412, 56.0, 2127.77412, (-106.0), 2.0, 2127.77412, 56.0, 2.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift((byte[]) null, 101);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[6] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, 3, 3, 0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-63);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3;
      intArray1[1] = (-63);
      intArray1[2] = 3;
      int int0 = ArrayUtils.lastIndexOf(intArray1, (-63));
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, int0);
      assertArrayEquals(new int[] {3, (-63), 3}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true, true}, booleanArray0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 0, (int) (byte) (-1), (double) 0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      ArrayUtils.shift(shortArray0, 34);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(1, objectArray0.length);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray2 = ArrayUtils.clone(longArray0);
      assertEquals(1, longArray2.length);
      assertEquals(1, longArray0.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)113;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)114, (byte) (-38), (byte)113, (byte) (-1)}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      Double double0 = new Double((byte) (-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '&';
      floatArray0[1] = (float) '3';
      floatArray0[2] = (float) (byte) (-38);
      floatArray0[3] = (float) (byte)114;
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) '&';
      floatArray0[7] = (float) '3';
      ArrayUtils.shift(floatArray0, (int) (byte)113);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {51.0F, 38.0F, 51.0F, (-38.0F), 114.0F, (-1.0F), 38.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (byte)0);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)18, object0);
      
      ArrayUtils.reverse((double[]) null);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'Y';
      intArray0[1] = (int) (byte)18;
      intArray0[2] = (int) (byte)18;
      intArray0[3] = 0;
      intArray0[4] = (int) '@';
      ArrayUtils.shift(intArray0, 1);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {64, 89, 18, 18, 0}, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2241, (-1479));
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'@'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte byte1 = new Byte((byte)1);
      assertFalse(byte1.equals((Object)object0));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)1, (byte)byte1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, 12, 1, (-2572));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'@'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte)18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-1);
      byteArray0[5] = (byte) (-69);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)0;
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) (byte)2);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (byte) (-1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      ArrayUtils.shift((Object[]) floatArray1, (-1069));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-1.0F), 2.0F}, floatArray2, 0.01F);
      assertSame(floatArray0, floatArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-69);
      doubleArray0[1] = (double) (float)floatArray0[1];
      doubleArray0[2] = 0.1;
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (-1822);
      ArrayUtils.swap(doubleArray0, (-167), (int) (byte) (-69));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-69.0), 2.0, 0.1, (-1.0), (-1822.0)}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 347.6515288);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-69.0), 2.0, 0.1, (-1.0), (-1822.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEquals(floatArray0[0], "org.apache.commons.lang3.builder.ToStringStyle$JsonToStringStyle");
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      assertSame(floatArray0, floatArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)9;
      longArray0[1] = (long) (-1069);
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) (byte)9;
      longArray0[4] = (long) (byte) (-69);
      longArray0[5] = (long) (-1069);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (byte) (-57);
      int int1 = ArrayUtils.indexOf(longArray0, (-1069L), (-941));
      assertEquals(8, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new long[] {9L, (-1069L), 2L, 9L, (-69L), (-1069L), (-1L), (-57L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) short0);
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Character character0 = new Character('M');
      assertNotNull(character0);
      assertEquals('M', (char)character0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-1030), (Object) character0);
      assertEquals(8, objectArray0.length);
      assertNotNull(object1);
      assertEquals('M', object1);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object2);
      assertEquals((short)0, object2);
      
      objectArray0[2] = object2;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1030);
      longArray0[1] = (long) 'M';
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) 'M';
      longArray0[6] = (long) 'M';
      longArray0[7] = (long) (short)0;
      longArray0[8] = (long) (short)0;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-750);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-750), (short)0, (short)0}, shortArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-383.179786946583), (-1030));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      charArray0[7] = 'M';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'V');
      assertEquals(8, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      Double double0 = new Double((-1899.65161));
      assertNotNull(double0);
      assertEquals((-1899.65161), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      Double double1 = new Double((-1899.65161));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1899.65161), (double)double1, 0.01);
      
      doubleArray0[6] = double1;
      Double double2 = new Double((-286.0));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-286.0), (double)double2, 0.01);
      
      doubleArray0[7] = double2;
      doubleArray0[8] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[5]);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1899.65161), (-1899.65161), (-1899.65161), (-1899.65161), (-1899.65161), (-1899.65161), (-1899.65161), (-286.0), (-1899.65161)}, doubleArray1, 0.01);
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {(-1899.65161), (-286.0), (-1899.65161), (-1899.65161), (-1899.65161), (-1899.65161), (-1899.65161), (-1899.65161), (-1899.65161)}, doubleArray1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) doubleArray0, (Object) double0, 2);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotNull(bitSet0);
      assertEquals(9, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2, 3, 4, 5, 6, 8}", bitSet0.toString());
      
      ArrayUtils.shift(doubleArray1, (-1));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {(-286.0), (-1899.65161), (-1899.65161), (-1899.65161), (-1899.65161), (-1899.65161), (-1899.65161), (-1899.65161), (-1899.65161)}, doubleArray1, 0.01);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)12);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)12, (byte)byte1);
      
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)99, (byte)12}, byteArray1);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (float) (-1), (int) (byte)99);
      assertEquals((-1), int0);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((byte)12);
      assertNotNull(long0);
      assertEquals(12L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(2);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((byte)99);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(99L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(777);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(777L, (long)long3);
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {12L, 2L, 99L, 777L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      byte byte0 = (byte) (-119);
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-119));
      assertNull(byteArray0);
      
      Object[] objectArray0 = new Object[3];
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      String string0 = null;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      objectArray1[0] = null;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-119);
      intArray0[1] = (int) (byte) (-119);
      intArray0[2] = (int) (byte) (-119);
      intArray0[3] = (int) (byte) (-119);
      intArray0[4] = (int) (byte) (-119);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -119, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      ArrayUtils.swap((boolean[]) null, 0, 0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (short)0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) (short)0;
      doubleArray1[2] = (double) (short)0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) (short)0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = 4717.0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-1.0), 0.0, 4717.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals(4, intArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) (-737);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 0.79471326F, 0);
      assertEquals(4, floatArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 3.0F, (-737.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)1032);
      assertFalse(boolean0);
      
      double[] doubleArray0 = null;
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) (short)0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1032;
      shortArray0[1] = (short)0;
      boolean boolean2 = ArrayUtils.contains(shortArray0, (short)1017);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new short[] {(short)1032, (short)0}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 5712.5068822029, (-770.1599829434637));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1454;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1454, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1454, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2146450209), intArray1, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146450209, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1182.0F);
      floatArray0[2] = 1415.648F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 3870);
      assertEquals(3, floatArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {0.0F, (-1182.0F), 1415.648F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      float[] floatArray0 = new float[11];
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = 551.03455F;
      floatArray1[2] = (float) 0;
      float[] floatArray2 = ArrayUtils.insert(2, floatArray0, floatArray1);
      assertEquals(11, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(14, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, 551.03455F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(5, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[3] = (Object) 551.03455F;
      objectArray0[4] = (Object) 0.0F;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-110);
      ArrayUtils.reverse(byteArray0, 2, (-868));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-110)}, byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-110);
      doubleArray0[1] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 93.0);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-110.0), 0.0, 93.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-110.0), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)113;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)114, (byte) (-38), (byte)113, (byte) (-1)}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      Double double0 = new Double((byte) (-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '&';
      floatArray0[1] = (float) '3';
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)113;
      intArray0[1] = (int) (byte) (-38);
      intArray0[2] = (int) (byte)114;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) '&';
      intArray0[5] = (int) (byte) (-38);
      intArray0[6] = (int) (byte)113;
      intArray0[7] = (int) (byte)0;
      ArrayUtils.reverse(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 113, (-38), 38, 0, 114, (-38), 113}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-38);
      doubleArray0[2] = (double) (byte) (-38);
      ArrayUtils.swap(doubleArray0, 113, (-38), (int) (byte)114);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-38.0), (-38.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertEquals(3, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      int[] intArray0 = new int[9];
      char char0 = '\u0017';
      Character character0 = Character.valueOf('\u0017');
      assertNotNull(character0);
      assertEquals('\u0017', (char)character0);
      
      Character character1 = new Character('\u0017');
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('\u0017', (char)character1);
      
      Character character2 = new Character('R');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertNotNull(character2);
      assertEquals('R', (char)character2);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character2;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character2;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      ArrayUtils.shift((Object[]) characterArray0, 0);
      assertEquals(4, characterArray0.length);
      assertSame(characterArray0, characterArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) '\u0017';
      intArray0[1] = (int) char0;
      doubleArray0[3] = (double) 'R';
      doubleArray0[4] = 2963.600399632686;
      doubleArray0[1] = (double) 2;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 82.0);
      assertEquals(7, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 82.0, 2963.600399632686, 0.0, 82.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 82.0, 2963.600399632686, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = (char) character2;
      charArray0[2] = '\u0017';
      charArray0[3] = '*';
      charArray0[4] = char0;
      charArray0[5] = 'R';
      charArray0[6] = (char) character2;
      charArray0[7] = char0;
      ArrayUtils.reverse(charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0017', 'R', 'R', '\u0017', '*', '\u0017', 'R', '*'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      int[] intArray0 = new int[9];
      char char0 = '\u0017';
      Character character0 = Character.valueOf('\u0017');
      assertNotNull(character0);
      assertEquals('\u0017', (char)character0);
      
      Character character1 = Character.valueOf('*');
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals('*', (char)character1);
      
      Character character2 = new Character('R');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('R', (char)character2);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character2;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character2;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      ArrayUtils.shift((Object[]) characterArray0, 0);
      assertEquals(4, characterArray0.length);
      assertSame(characterArray0, characterArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) '\u0017';
      intArray0[0] = (int) char0;
      doubleArray0[3] = (double) 'R';
      doubleArray0[4] = 2963.600399632686;
      doubleArray0[1] = (double) 2;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 82.0);
      assertEquals(7, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 82.0, 2963.600399632686, 0.0, 82.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 82.0, 2963.600399632686, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) char0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {23L}, longArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = (char) character2;
      charArray0[2] = '\u0017';
      charArray0[3] = '*';
      charArray0[4] = char0;
      charArray0[5] = 'U';
      charArray0[6] = (char) character2;
      charArray0[7] = char0;
      ArrayUtils.reverse(charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0017', 'R', 'U', '\u0017', '*', '\u0017', 'R', '*'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      int int0 = 0;
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      ArrayUtils.shuffle(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'>'}, charArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(99);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(99, (int)integer1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (double) int0;
      int int1 = ArrayUtils.indexOf(doubleArray0, 100.0, 85);
      assertEquals(2, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {100.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer2 = new Integer(513);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(513, (int)integer2);
      
      Long long0 = new Long(85);
      assertNotNull(long0);
      assertEquals(85L, (long)long0);
      
      boolean boolean0 = ArrayUtils.isSameType(long0, long0);
      assertTrue(boolean0);
      
      MutableInt mutableInt0 = new MutableInt(1831);
      assertNotNull(mutableInt0);
      assertEquals(1831, mutableInt0.intValue());
      assertEquals((short)1831, mutableInt0.shortValue());
      assertEquals(1831.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)39, mutableInt0.byteValue());
      assertEquals(1831, (int)mutableInt0.toInteger());
      assertEquals("1831", mutableInt0.toString());
      assertEquals(1831, (int)mutableInt0.getValue());
      assertEquals(1831L, mutableInt0.longValue());
      assertEquals(1831.0, mutableInt0.doubleValue(), 0.01);
      
      mutableInt0.setValue((Number) short0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(mutableInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      int int0 = ArrayUtils.indexOf(charArray0, '+', 1);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'!'}, charArray0);
      
      Double double0 = Double.valueOf(3764.090232940246);
      assertNotNull(double0);
      assertEquals(3764.090232940246, (double)double0, 0.01);
      
      Double double1 = new Double((-1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      
      int int1 = ArrayUtils.indexOf(charArray0, '+', (-2146141469));
      assertEquals(1, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'!'}, charArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-2146141469);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) ' ';
      longArray0[3] = 113L;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) '+';
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(6, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-2146141469L), (-1L), 32L, 113L, (-1L), 43L}, longArray0);
      
      ArrayUtils.shift(longArray0, (-1), (-2146141469), 11);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-2146141469L), (-1L), 32L, 113L, (-1L), 43L}, longArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)4971;
      shortArray0[1] = (short)1714;
      shortArray0[2] = (short) (-3095);
      shortArray0[3] = (short)88;
      shortArray0[4] = (short) (-631);
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)2515;
      shortArray0[7] = (short) (-290);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)4971, (short)1714, (short) (-3095), (short)88, (short) (-631), (short)2, (short)2515, (short) (-290)}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)4971, (short)1714, (short) (-3095), (short)88, (short) (-631), (short)2, (short)2515, (short) (-290)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      int int0 = ArrayUtils.indexOf(charArray0, '+', 1);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'!'}, charArray0);
      
      Double double0 = Double.valueOf(3764.090232940246);
      assertNotNull(double0);
      assertEquals(3764.090232940246, (double)double0, 0.01);
      
      Double double1 = new Double((-1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      
      int int1 = ArrayUtils.indexOf(charArray0, '+', (-2146141469));
      assertEquals(1, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'!'}, charArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-2146141469);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) ' ';
      longArray0[3] = 113L;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) '+';
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(6, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-2146141469L), (-1L), 32L, 113L, (-1L), 43L}, longArray0);
      
      ArrayUtils.shift(longArray0, (-1), (-2146141469), 11);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-2146141469L), (-1L), 32L, 113L, (-1L), 43L}, longArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)1714;
      shortArray0[2] = (short) (-3095);
      shortArray0[3] = (short)88;
      shortArray0[4] = (short) (-631);
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)2515;
      shortArray0[7] = (short) (-290);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)1714, (short) (-3095), (short)88, (short) (-631), (short)2, (short)2515, (short) (-290)}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)1714, (short) (-3095), (short)88, (short) (-631), (short)2, (short)2515, (short) (-290)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = '~';
      charArray0[2] = ' ';
      charArray0[3] = '>';
      char[] charArray1 = ArrayUtils.add(charArray0, '\'');
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'R', '~', ' ', '>'}, charArray0);
      assertArrayEquals(new char[] {'R', '~', ' ', '>', '\''}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) ' ';
      longArray0[1] = (long) 'R';
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {32L, 82L}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '~';
      doubleArray0[1] = 3513.445505818416;
      doubleArray0[2] = (double) 'R';
      doubleArray0[3] = (double) ' ';
      doubleArray0[4] = (double) 82L;
      doubleArray0[5] = (double) '>';
      doubleArray0[6] = (double) 'R';
      doubleArray0[7] = (double) ' ';
      doubleArray0[8] = (double) ' ';
      ArrayUtils.swap(doubleArray0, 2237, 2237, 2237);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {126.0, 3513.445505818416, 82.0, 32.0, 82.0, 62.0, 82.0, 32.0, 32.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2515;
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertArrayEquals(new char[] {'R'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'R';
      floatArray0[1] = (float) 7;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 2515;
      floatArray0[4] = (float) 'R';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {82.0F, 7.0F, 0.0F, 2515.0F, 82.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = null;
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 2515, (double) 0.0F);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {2515, 0, 0, 0}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2515;
      longArray0[1] = (long) 2515;
      longArray0[2] = (long) 'R';
      longArray0[3] = (long) 2515;
      longArray0[4] = (long) 2515;
      longArray0[5] = (long) 'R';
      longArray0[6] = (long) (-1);
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {2515L, 2515L, 82L, 2515L, 2515L, 82L, (-1L)}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 2515, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2515, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "byt4");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-55), 2577);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = 's';
      charArray0[2] = 'r';
      charArray0[3] = '-';
      charArray0[4] = 'Y';
      charArray0[5] = 'g';
      charArray0[6] = 'Z';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'X');
      assertEquals(7, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'X', 's', 'r', '-', 'Y', 'g', 'Z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object1);
      assertEquals(0L, object1);
      
      objectArray0[1] = object1;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(2, objectArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1023.292), (-1));
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1));
      assertEquals(5, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      charArray0[1] = '|';
      charArray0[2] = 'I';
      charArray0[3] = '=';
      charArray0[4] = 'u';
      charArray0[5] = '8';
      charArray0[6] = 'U';
      charArray0[7] = '\'';
      charArray0[8] = 'W';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'I', (-1));
      assertEquals(9, charArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{2}", bitSet1.toString());
      assertEquals(3, bitSet1.length());
      assertArrayEquals(new char[] {'', '|', 'I', '=', 'u', '8', 'U', '\'', 'W'}, charArray0);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      Short short0 = new Short((short) (-982));
      assertNotNull(short0);
      assertEquals((short) (-982), (short)short0);
      
      Short short1 = new Short((short) (-982));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-982), (short)short1);
      
      Short short2 = new Short((short) (-1));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-1), (short)short2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2558;
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-53);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-75), 0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)14, (byte) (-9), (byte)6, (byte)76, (byte) (-53)}, byteArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-982);
      shortArray0[1] = (short) (byte)14;
      shortArray0[2] = (short) (byte) (-9);
      shortArray0[3] = (short) (-982);
      shortArray0[4] = (short) (byte) (-53);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (byte)14;
      shortArray0[7] = (short) (byte) (-53);
      shortArray0[8] = (short) (-1);
      ArrayUtils.swap(shortArray0, (int) (short) (-982), 1, (-708));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-982), (short)14, (short) (-9), (short) (-982), (short) (-53), (short) (-1), (short)14, (short) (-53), (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'O';
      intArray0[1] = (int) 'O';
      intArray0[2] = (int) 'O';
      intArray0[3] = (int) 'O';
      intArray0[4] = (int) 'O';
      intArray0[5] = (int) 'O';
      intArray0[6] = (int) 'O';
      intArray0[7] = (int) 'O';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 79, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      long[] longArray0 = new long[1];
      ArrayUtils.swap(longArray0, (-1167), 46);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1646);
      assertEquals(8, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 3764.090232940246, 29.86601489192);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      Float[] floatArray1 = new Float[3];
      floatArray1[0] = (Float) 0.0F;
      Float float0 = new Float((-869.86601489192));
      assertNotNull(float0);
      assertEquals((-869.866F), (float)float0, 0.01F);
      
      floatArray1[1] = float0;
      floatArray1[2] = (Float) 0.0F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, 104.85219F);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, (-869.866F), 0.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[1];
      ArrayUtils.swap(longArray0, (-1167), 46);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)1);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Byte[] byteArray1 = new Byte[1];
      Byte byte0 = new Byte((byte)74);
      assertNotNull(byte0);
      assertEquals((byte)74, (byte)byte0);
      
      byteArray1[0] = byte0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-1));
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)74}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      
      byte[] byteArray3 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-95));
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-3471);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (-3471);
      longArray0[3] = (long) (-3471);
      longArray0[4] = (long) 2;
      longArray0[5] = (long) (-3471);
      longArray0[6] = (long) (-3471);
      longArray0[7] = (long) 2;
      ArrayUtils.shift(longArray0, (-236));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {2L, (-3471L), (-3471L), 2L, (-3471L), 2L, (-3471L), (-3471L)}, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3471L);
      doubleArray0[1] = (double) (-3471L);
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-3471.0), (-3471.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3471);
      intArray0[1] = (-236);
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertEquals(3, intArray1.length);
      assertEquals(3, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-3471), (-236), 2}, intArray1);
      assertArrayEquals(new int[] {(-3471), (-236), 2}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertEquals(3, intArray1.length);
      assertEquals(3, intArray2.length);
      assertEquals(3, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-3471), (-236), 2}, intArray1);
      assertArrayEquals(new int[] {(-3471), (-236), 2}, intArray2);
      assertArrayEquals(new int[] {(-3471), (-236), 2}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.shift(booleanArray0, 2612, 2612, (-63));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false, true, true}, booleanArray0));
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.reverse((byte[]) null, 254, 7);
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-2818), 2075579724);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) null, 3);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(bitSet1, bitSet0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (-4412.965F);
      floatArray0[2] = (float) (-63);
      floatArray0[3] = (float) (-2818);
      floatArray0[4] = 2.14748365E9F;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-4412.965F), (-63.0F), (-2818.0F), 2.14748365E9F, 2.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.14748365E9F, (-2818.0F), (-63.0F), (-4412.965F)}, floatArray0, 0.01F);
      
      BitSet bitSet2 = ArrayUtils.indexesOf((int[]) null, Integer.MAX_VALUE);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertNotNull(bitSet2);
      assertEquals(0, bitSet2.length());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.cardinality());
      assertTrue(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 103.0F;
      floatArray0[3] = (float) (-236);
      floatArray0[4] = (float) (-236);
      ArrayUtils.swap(floatArray0, (-4924), (-236));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {103.0F, 0.0F, 0.0F, (-236.0F), (-236.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.insert((-422), (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 103.0F;
      floatArray0[1] = (float) (-2108L);
      floatArray0[2] = (float) (-2108L);
      floatArray0[3] = (float) (-236);
      floatArray0[4] = (float) (-236);
      ArrayUtils.swap(floatArray0, (-4924), (-236));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {103.0F, (-2108.0F), (-2108.0F), (-236.0F), (-236.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.insert((-422), (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      String[] stringArray0 = new String[6];
      ArrayUtils.swap((Object[]) stringArray0, (-1818), (-1818), (-1818));
      assertEquals(6, stringArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short) (-2079);
      shortArray0[2] = (short)2405;
      shortArray0[3] = (short)1510;
      shortArray0[4] = (short) (-2738);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)1963;
      shortArray0[2] = (short)618;
      ArrayUtils.shift(shortArray0, (int) (short)0, 5, (int) (short) (-2738));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)1510, (short) (-2738), (short)8, (short) (-2079), (short)618, (short)0, (short)1963, (short)0}, shortArray0);
      
      Float float0 = new Float(207.03175F);
      assertNotNull(float0);
      assertEquals(207.03175F, (float)float0, 0.01F);
      
      Byte byte0 = new Byte((byte)69);
      assertNotNull(byte0);
      assertEquals((byte)69, (byte)byte0);
      
      Byte byte1 = new Byte((byte)69);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)69, (byte)byte1);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) stringArray0, (Object[]) stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short)0, (int) (short)5, 9);
      assertEquals(13, shortArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)5;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short)0;
      objectArray0[5] = (Object) (short)5;
      objectArray0[6] = (Object) (short)5;
      Float float0 = new Float(910.8481F);
      assertNotNull(float0);
      assertEquals(910.8481F, (float)float0, 0.01F);
      
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertNotNull(object0);
      assertEquals(910.8481F, object0);
      
      objectArray0[7] = object0;
      objectArray0[6] = (Object) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(9, objectArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)5;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) 9;
      doubleArray0[6] = (double) 910.8481F;
      MockRandom mockRandom0 = new MockRandom(9);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.doubles((long) (short)0, 9.0, (-1412.52257935755));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'p';
      intArray0[1] = (int) '[';
      intArray0[2] = (int) '[';
      intArray0[3] = (int) '[';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 91, 84);
      assertEquals(4, intArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new int[] {112, 91, 91, 91}, intArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-25);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-85), (byte) (-1), (byte)84, (byte)2, (byte) (-25)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2515;
      intArray0[1] = 7;
      intArray0[2] = (-1660);
      intArray0[3] = 11;
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      int int0 = ArrayUtils.indexOf(charArray0, ' ', (-2146141469));
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {' ', ' ', ' '}, charArray0);
      
      Double double0 = Double.valueOf(3.0);
      assertNotNull(double0);
      assertEquals(3.0, (double)double0, 0.01);
      
      Double double1 = new Double(1.5);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.5, (double)double1, 0.01);
      
      int int1 = ArrayUtils.indexOf(charArray0, ' ', (-1460));
      assertEquals(3, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {' ', ' ', ' '}, charArray0);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      ArrayUtils.shift(longArray0, 69, 2515, 2515);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      Long long0 = new Long((-840L));
      assertNotNull(long0);
      assertEquals((-840L), (long)long0);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-840L);
      doubleArray0[1] = (double) (long)longArray0[0];
      doubleArray0[3] = (double) (long)longArray0[0];
      doubleArray0[4] = (double) (long)longArray0[0];
      doubleArray0[5] = (-840.0);
      doubleArray0[6] = (double) (long)longArray0[0];
      doubleArray0[8] = (double) (long)longArray0[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-840.0), 56);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, int0);
      assertArrayEquals(new double[] {(-840.0), (-840.0), 0.0, (-840.0), (-840.0), (-840.0), (-840.0), 0.0, (-840.0)}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf((Object[]) longArray0, (Object) longArray0[0]);
      assertEquals(5, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-45);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)1;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)2);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-45), (byte)0, (byte)0, (byte) (-87), (byte) (-87), (byte)0, (byte)2, (byte)1}, byteArray0);
      
      Byte[] byteArray1 = new Byte[3];
      byteArray1[0] = (Byte) (byte) (-87);
      byteArray1[1] = (Byte) (byte) (-87);
      byteArray1[2] = (Byte) (byte) (-87);
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)88);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-87), (byte) (-87)}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      
      byte[] byteArray3 = ArrayUtils.removeAllOccurrences(byteArray2, (byte)0);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray3.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-87), (byte) (-87)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-87), (byte) (-87)}, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-767);
      intArray0[1] = (-767);
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) (-924));
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-924L)}, longArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-767);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, 'D');
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)3093;
      shortArray0[1] = (short)1268;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-539);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (-1225);
      shortArray0[6] = (short)59;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1268);
      assertEquals(7, shortArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)3093, (short)1268, (short)1, (short) (-539), (short)1, (short) (-1225), (short)59}, shortArray0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double((-1681.23846039));
      assertNotNull(double0);
      assertEquals((-1681.23846039), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1829.224817484);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1829.224817484, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(2985.110854427787);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(2985.110854427787, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1889.4481031731405);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(1889.4481031731405, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 722.4394604);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1681.23846039), 1829.224817484, 2985.110854427787, 1889.4481031731405}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)18, object0);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = (Float) (float)0;
      floatArray0[1] = (Float) (float)0;
      floatArray0[2] = (Float) (float)0;
      floatArray0[3] = (Float) (float)0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1244.6134929497);
      doubleArray0[1] = (double) (float)floatArray0[0];
      doubleArray0[2] = (-2237.093);
      doubleArray0[3] = (double) (float)floatArray0[2];
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (float)floatArray0[1];
      doubleArray0[7] = 510.052184276;
      ArrayUtils.swap(doubleArray0, 0, 0, 0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1244.6134929497), 0.0, (-2237.093), 0.0, 0.0, 0.0, 0.0, 510.052184276}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = ',';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\\', ','}, charArray0);
      assertArrayEquals(new char[] {'\\', ',', '\\', ','}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, (-2900), 0, (-543));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)18, object0);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = (Float) (float)0;
      floatArray0[1] = (Float) (float)0;
      floatArray0[2] = (Float) (float)0;
      floatArray0[3] = (Float) (float)0;
      Double double0 = new Double(510.052184276);
      assertNotNull(double0);
      assertEquals(510.052184276, (double)double0, 0.01);
      
      Double double1 = new Double((double) floatArray0[0]);
      assertEquals(6, floatArray0.length);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      Double double2 = new Double(0.0);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      Double double3 = new Double((double) floatArray0[2]);
      assertEquals(6, floatArray0.length);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double2;
      doubleArray0[1] = double2;
      doubleArray0[2] = double0;
      doubleArray0[3] = double3;
      doubleArray0[4] = double0;
      Double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, doubleArray0[1]);
      assertEquals(2, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      float[] floatArray1 = new float[2];
      floatArray1[0] = (float) floatArray0[3];
      floatArray1[1] = (float) 0;
      ArrayUtils.shift(floatArray1, 0);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, (-2791), (-1698), 0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-6287);
      shortArray0[1] = (short) (-6287);
      shortArray0[2] = (short) (-6287);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-6287), (int) (short) (-6287));
      assertEquals(3, shortArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short) (-6287), (short) (-6287), (short) (-6287)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Character[] characterArray0 = new Character[2];
      char char0 = 'X';
      Character character0 = Character.valueOf('X');
      assertNotNull(character0);
      assertEquals('X', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('X');
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('X', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'X', 'X'}, charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) char0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, (int) character1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {88.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {88.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(1, int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 46;
      intArray0[1] = (int) 'X';
      intArray0[2] = (-1167);
      intArray0[3] = (-1660);
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = (int) char0;
      intArray0[7] = 46;
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {88, 46, (-1660), 1, 1, 88, 46, (-1167)}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'X', 'X'}, charArray0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {88.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Character[] characterArray0 = new Character[2];
      char char0 = 'X';
      Character character0 = Character.valueOf('X');
      assertNotNull(character0);
      assertEquals('X', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('X');
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals('X', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'X', 'X'}, charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) char0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, (int) character1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {88.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {88.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(1, int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 46;
      intArray0[1] = 3;
      intArray0[2] = (-1167);
      intArray0[3] = (-1660);
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = (int) char0;
      intArray0[7] = 46;
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {3, 46, (-1660), 1, 1, 88, 46, (-1167)}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'X', 'X'}, charArray0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {88.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Double double0 = new Double(3634.2973);
      assertNotNull(double0);
      assertEquals(3634.2973, (double)double0, 0.01);
      
      Double double1 = new Double((-993.0984195));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-993.0984195), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[10];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      Byte byte0 = new Byte((byte) (-53));
      assertNotNull(byte0);
      assertEquals((byte) (-53), (byte)byte0);
      
      Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) byte0);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1734);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) doubleArray0[2];
      doubleArray2[1] = (double) doubleArray0[2];
      doubleArray2[2] = (double) doubleArray0[1];
      doubleArray2[3] = (double) doubleArray0[3];
      ArrayUtils.shift(doubleArray2, (-1660));
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {3634.2973, 3634.2973, (-993.0984195), (-993.0984195)}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-53);
      longArray0[1] = (long) (short)1734;
      longArray0[2] = (long) (-1660);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-53L), 1734L, (-1660L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      Double double0 = new Double((-1822.0));
      assertNotNull(double0);
      assertEquals((-1822.0), (double)double0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)30;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)64;
      shortArray0[1] = (short) (byte)64;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)64, (short)64}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)64;
      longArray0[1] = (long) 56;
      longArray0[2] = (long) (short)64;
      longArray0[3] = (long) 56;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)64, 89);
      assertEquals(0, longArray1.length);
      assertEquals(4, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {64L, 56L, 64L, 56L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false, true, false, true}, booleanArray0));
      
      Double[] doubleArray0 = new Double[0];
      boolean boolean1 = ArrayUtils.isArrayIndexValid(doubleArray0, (-1678));
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.reverse((byte[]) null, (-1678), (-1678));
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = Float.valueOf((-1.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-1167.852F));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-1167.852F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-362.1F));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals((-362.1F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-1.0F));
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals((-1.0F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-1.0));
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotNull(float5);
      assertEquals((-1.0F), (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float(490.349970989);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotNull(float6);
      assertEquals(490.34998F, (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float((double) 0.0F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotNull(float7);
      assertEquals(0.0F, (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.add(shortArray1, (int) (short)0, (short)0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertEquals(11, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (-3942.9932F);
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) (short)0;
      floatArray0[8] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-3942.9932F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray0, (int) (short)0, 0);
      assertEquals(0, floatArray2.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-3942.9932F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '+';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '$');
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'$', '+', '+', '+'}, charArray0);
      assertArrayEquals(new char[] {'$', '$', '+', '+', '+'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.swap(shortArray1, 0, (-3121));
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-947);
      ArrayUtils.swap(shortArray0, (int) (short) (-947), (int) (short) (-947));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-947)}, shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'G';
      charArray0[1] = 'A';
      ArrayUtils.swap(charArray0, 52, 2816, 2816);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'G', 'A'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, true}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-947);
      longArray0[1] = (long) 'A';
      longArray0[2] = (long) 'G';
      longArray0[3] = (long) 2816;
      longArray0[4] = (long) 'A';
      longArray0[5] = (long) 52;
      longArray0[6] = (long) (short) (-947);
      longArray0[7] = 4701L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-947L), 65L, 71L, 2816L, 65L, 52L, (-947L), 4701L}, longArray0);
      assertArrayEquals(new long[] {(-947L), 65L, 71L, 2816L, 65L, 52L, (-947L), 4701L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2417.0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 285, (-1));
      assertNull(longArray0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (int) (byte)7);
      assertEquals((-1), int0);
      
      Double double0 = new Double((byte)7);
      assertNotNull(double0);
      assertEquals(7.0, (double)double0, 0.01);
      
      Double double1 = new Double((-2333.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2333.0), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2333.0), 7.0, 7.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.reverse(doubleArray1, (int) (byte)7, 16);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-2333.0), 7.0, 7.0}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-3349), 8);
      assertEquals(0, intArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-1), (int) (byte)85);
      assertNull(booleanArray0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 16, (-3349));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (double) 0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Float[] floatArray1 = new Float[4];
      Float float0 = new Float((double) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) floatArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      Double double0 = new Double((-1822.0));
      assertNotNull(double0);
      assertEquals((-1822.0), (double)double0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = '~';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ',', (int) (byte)64);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'n', '~', '~', '~'}, charArray0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (byte)64);
      assertNull(shortArray0);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1841.910003071631);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1, 1545);
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0, (-1841.910003071631), 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2079L));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 2736L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = '!';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '!';
      charArray0[5] = 'R';
      charArray0[6] = '!';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'R', '!', '8', '8', '!', 'R', '!'}, charArray0);
      assertArrayEquals(new char[] {'R', '!', '8', '8', '!', 'R', '!'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'R';
      intArray0[1] = (int) '8';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-840.0), 29.86601489192);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {82, 56, 0, 0, 0, 0}, intArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '8';
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {56L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 82, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 82, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-5909.0F);
      floatArray0[2] = (-3080.0F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 3806.0F;
      floatArray0[5] = (-1277.3838F);
      ArrayUtils.swap(floatArray0, 63, 1, (-3471));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-5909.0F), (-3080.0F), (-1.0F), 3806.0F, (-1277.3838F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2417;
      doubleArray0[1] = (double) (-1277.3838F);
      doubleArray0[2] = (double) 3806.0F;
      int[] intArray0 = new int[8];
      intArray0[0] = (-2143682791);
      intArray0[1] = 874;
      intArray0[2] = (-3471);
      intArray0[3] = 63;
      intArray0[4] = 63;
      intArray0[5] = 2417;
      intArray0[6] = 2417;
      intArray0[7] = 1;
      ArrayUtils.reverse(intArray0, 1, 14);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-2143682791), 1, 2417, 2417, 63, 63, (-3471), 874}, intArray0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 678, 'i');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 678, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      int int0 = (-2070);
      Integer integer1 = new Integer((-2070));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-2070), (int)integer1);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-2070));
      assertNull(intArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) integer1;
      objectArray0[2] = (Object) integer0;
      objectArray0[4] = (Object) 0.0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-2070', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-1299.790305212126);
      Integer integer0 = new Integer(6);
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      Integer integer1 = new Integer(6);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(6, (int)integer1);
      
      Integer integer2 = new Integer((-4533));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-4533), (int)integer2);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 6);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {6}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (int) (byte)7);
      assertEquals((-1), int0);
      
      Double double0 = new Double((byte)7);
      assertNotNull(double0);
      assertEquals(7.0, (double)double0, 0.01);
      
      Double double1 = new Double((-2333.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2333.0), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2333.0), 7.0, 7.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.reverse(doubleArray1, (int) (byte)7, 16);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-2333.0), 7.0, 7.0}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-125));
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((byte)85);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(85, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertEquals(3, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(85, (int)integer2);
      
      integerArray0[2] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (byte)85);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {85, 3, 85}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      short short0 = (short) (-3036);
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-3036));
      assertFalse(boolean0);
      
      int int0 = 245;
      Integer integer0 = new Integer(245);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(245, (int)integer0);
      
      int int1 = (-2070);
      Integer integer1 = new Integer(6);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals(6, (int)integer1);
      
      Integer[] integerArray0 = null;
      Integer[] integerArray1 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray1, (int) (short) (-3036));
      assertEquals(1, integerArray1.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-3036)}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (-600.0149885);
      doubleArray0[8] = (double) 0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-600.0149885));
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-600.0149885), 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 68.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 68.0F;
      floatArray0[5] = 68.0F;
      boolean boolean1 = ArrayUtils.contains(floatArray0, 0.0F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {68.0F, 0.0F, 0.0F, 0.0F, 68.0F, 68.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "byt4");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2762.0F);
      floatArray0[1] = (-2762.0F);
      floatArray0[2] = (-2762.0F);
      floatArray0[3] = (-2762.0F);
      floatArray0[4] = (-2762.0F);
      floatArray0[5] = (-2762.0F);
      floatArray0[6] = (-2762.0F);
      floatArray0[7] = (-2762.0F);
      floatArray0[8] = (-2762.0F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-2762.0F));
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-2762.0F), (-2762.0F), (-2762.0F), (-2762.0F), (-2762.0F), (-2762.0F), (-2762.0F), (-2762.0F), (-2762.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1224);
      ArrayUtils.reverse(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1224)}, intArray0);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) stringArray0);
      assertEquals(0, stringArray1.length);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) stringArray0, (Object) "byt4", (-1224));
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
      assertSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(10, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, false, false, false, false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 1535;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      booleanArray0[4] = true;
      objectArray0[4] = (Object) false;
      ArrayUtils.swap(objectArray0, 1535, (-1453));
      assertEquals(5, objectArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(10, booleanArray0.length);
      assertEquals(9, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, false, false, false}, booleanArray2));
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      ArrayUtils.swap(objectArray0, 1535, (-1453), 1785);
      assertEquals(5, objectArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1785;
      boolean boolean0 = ArrayUtils.contains(longArray0, 1785L);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {1785L}, longArray0);
      
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray0);
      assertEquals(10, booleanArray0.length);
      assertEquals(10, booleanArray3.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, false, false, false, false}, booleanArray0));
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      int[] intArray0 = new int[8];
      intArray0[0] = (-4591);
      Byte byte0 = new Byte((byte)107);
      assertNotNull(byte0);
      assertEquals((byte)107, (byte)byte0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) false;
      objectArray0[1] = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) false;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0, (-4591));
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, Integer.MAX_VALUE);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0L;
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 1059, 1059);
      assertNull(shortArray0);
      
      Long long0 = new Long(52);
      assertNotNull(long0);
      assertEquals(52L, (long)long0);
      
      Long long1 = Long.valueOf((long) 2);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2L, (long)long1);
      
      try { 
        Long.valueOf(", Length: 0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \", Length: 0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      int[] intArray0 = new int[9];
      Character character0 = new Character('\u0017');
      assertNotNull(character0);
      assertEquals('\u0017', (char)character0);
      
      Character character1 = Character.valueOf('*');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('*', (char)character1);
      
      Character character2 = new Character('R');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('R', (char)character2);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character2;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character2;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      ArrayUtils.shift((Object[]) characterArray0, 0);
      assertEquals(4, characterArray0.length);
      assertSame(characterArray0, characterArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) '\u0017';
      intArray0[0] = (int) (char)character0;
      doubleArray0[3] = (double) 'R';
      doubleArray0[4] = 2963.600399632686;
      doubleArray0[1] = (double) 2;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 82.0);
      assertEquals(7, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 82.0, 2963.600399632686, 0.0, 82.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0, 0.0, 82.0, 2963.600399632686, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      int[] intArray1 = ArrayUtils.add((int[]) null, (-822));
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-822)}, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1.0F;
      int[] intArray0 = new int[7];
      intArray0[0] = 15;
      intArray0[1] = 15;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (-66);
      intArray0[4] = (-66);
      intArray0[5] = (-1182);
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-1182);
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray1, (-362.1F));
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-1182.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1182.0F)}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      
      int int0 = ArrayUtils.indexOf(floatArray1, 627.5948F, (-1908874352));
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1182.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      
      int int1 = ArrayUtils.indexOf(floatArray1, 2963.7449F, (-1182));
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {(-1182.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-95);
      ArrayUtils.reverse((Object[]) null, 15, (-66));
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1.0F;
      int[] intArray0 = new int[7];
      intArray0[0] = 15;
      intArray0[1] = 15;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (-66);
      intArray0[4] = (-66);
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray1, (-362.1F));
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      
      int int0 = ArrayUtils.indexOf(floatArray1, 627.5948F, (-1908874352));
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      
      int int1 = new Integer((-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-95);
      ArrayUtils.reverse((Object[]) null, 15, (-66));
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)7;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)7;
      longArray0[1] = (long) 2076;
      longArray0[2] = 718L;
      longArray0[3] = 718L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 1);
      assertEquals(4, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {7L, 2076L, 718L, 718L}, longArray0);
      
      Integer integer0 = new Integer((byte)7);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      Integer integer1 = new Integer(2076);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2076, (int)integer1);
      
      Integer integer2 = new Integer((-1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      ArrayUtils.shift(longArray0, 1);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {718L, 7L, 2076L, 718L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)7;
      shortArray0[1] = (short) (byte)85;
      shortArray0[2] = (short) (byte)85;
      shortArray0[3] = (short)86;
      shortArray0[4] = (short) (byte)85;
      shortArray0[5] = (short) (-173);
      shortArray0[6] = (short) (byte)7;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-6287), (-10));
      assertEquals(7, shortArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)7, (short)85, (short)85, (short)86, (short)85, (short) (-173), (short)7}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new short[] {(short)7, (short)85, (short)85, (short)86, (short)85, (short) (-173), (short)7}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      Integer integer0 = new Integer((-1489));
      assertNotNull(integer0);
      assertEquals((-1489), (int)integer0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1668L;
      longArray0[1] = 1668L;
      longArray0[2] = (long) (-1489);
      longArray0[3] = 1668L;
      longArray0[4] = 1668L;
      longArray0[5] = 1668L;
      longArray0[6] = (long) (-1489);
      longArray0[7] = (long) (-1489);
      longArray0[8] = (long) (-1489);
      ArrayUtils.shift(longArray0, 667);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-1489L), 1668L, 1668L, (-1489L), 1668L, 1668L, 1668L, (-1489L), (-1489L)}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-6287);
      shortArray0[1] = (short)86;
      shortArray0[2] = (short) (-6287);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)86, (int) (short)86);
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-6287), (short)86, (short) (-6287)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 18688);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {18688}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      Character character0 = new Character(')');
      assertNotNull(character0);
      assertEquals(')', (char)character0);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = character0;
      characterArray0[1] = (Character) '';
      characterArray0[2] = (Character) '';
      Character character1 = Character.valueOf((char) characterArray0[1]);
      assertEquals(7, characterArray0.length);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('', (char)character1);
      
      characterArray0[3] = character1;
      characterArray0[4] = (Character) '';
      Character character2 = new Character('}');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('}', (char)character2);
      
      characterArray0[5] = character2;
      characterArray0[6] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      ArrayUtils.shift((Object[]) null, (-995));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-995);
      doubleArray0[1] = (double) (char)character0;
      doubleArray0[2] = (double) (char)character0;
      doubleArray0[3] = (double) '';
      doubleArray0[4] = (double) ')';
      doubleArray0[5] = (double) (char)character0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) 18688);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-995.0), 41.0, 41.0, 127.0, 41.0, 41.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-995.0), 41.0, 41.0, 127.0, 41.0, 41.0, 18688.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 917L);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {917L}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(intArray1, (int) characterArray0[4]);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(7, characterArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {18688}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(characterArray0, characterArray1);
      
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, (-485));
      assertEquals(7, characterArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(characterArray0, characterArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.swap(booleanArray0, (int) characterArray0[2], (int) characterArray0[2], (-4));
      assertEquals(7, characterArray0.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 18688);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {18688}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      Character character0 = new Character(')');
      assertNotNull(character0);
      assertEquals(')', (char)character0);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = character0;
      characterArray0[1] = (Character) '';
      characterArray0[2] = (Character) '';
      Character character1 = Character.valueOf((char) characterArray0[1]);
      assertEquals(7, characterArray0.length);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('', (char)character1);
      
      characterArray0[3] = character1;
      characterArray0[4] = (Character) '';
      Character character2 = new Character('}');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('}', (char)character2);
      
      characterArray0[5] = character2;
      characterArray0[6] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      ArrayUtils.shift((Object[]) null, (-995));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-995);
      doubleArray0[1] = (double) (char)character0;
      doubleArray0[2] = (double) (char)character0;
      doubleArray0[3] = (double) '';
      doubleArray0[4] = (double) ')';
      doubleArray0[5] = (double) (char)character0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-995.0), 41.0, 41.0, 127.0, 41.0, 41.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-995.0), 41.0, 41.0, 127.0, 41.0, 41.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 917L);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {917L}, longArray0);
      
      boolean boolean0 = ArrayUtils.contains(intArray1, (int) characterArray0[4]);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(7, characterArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {18688}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(characterArray0, characterArray1);
      
      boolean boolean1 = ArrayUtils.isArrayIndexValid(characterArray0, (-485));
      assertEquals(7, characterArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(characterArray0, characterArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.swap(booleanArray0, (int) characterArray0[2], (int) characterArray0[2], (-4));
      assertEquals(7, characterArray0.length);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1.0F;
      int[] intArray0 = new int[7];
      intArray0[0] = 15;
      intArray0[1] = 15;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (-66);
      intArray0[4] = (-66);
      intArray0[5] = (-1182);
      intArray0[6] = (-5135);
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.swap(floatArray0, (-1182), 2144871169, (-2080374783));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[0] = 1.0F;
      floatArray0[2] = (-1380.3F);
      floatArray0[3] = 0.0F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (-2681), (-2681), (-2681));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) 0.0F;
      ArrayUtils.shift(objectArray0, (-399), 558, (-2681));
      assertEquals(2, objectArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.addFirst(stringArray0, (String) null);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[0] = 1.0F;
      floatArray0[2] = (-1380.3F);
      floatArray0[3] = 0.0F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (-2681), (-2681), (-2681));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2681);
      intArray0[1] = (-2681);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-2681), (-2681)}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {(-2681), (-2681)}, intArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) 0.0F;
      ArrayUtils.shift(objectArray0, (-399), 558, (-2681));
      assertEquals(2, objectArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.addFirst(stringArray0, (String) null);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      ArrayUtils.shift((long[]) null, 558, 0, 1);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)88;
      shortArray0[1] = (short)19608;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)88);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)88, (short)19608}, shortArray0);
      assertArrayEquals(new short[] {(short)88, (short)88, (short)19608}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (-1196));
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new short[] {(short)88, (short)19608}, shortArray0);
      assertArrayEquals(new short[] {(short)88, (short)88, (short)19608}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) (short)19608;
      Object object0 = ArrayUtils.get(objectArray0, (int)  (-1196));
      assertEquals(9, objectArray0.length);
      assertNull(object0);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) (short)19608;
      objectArray0[4] = (Object) (short)88;
      objectArray0[5] = (Object) (short)19608;
      objectArray0[6] = (Object) (short)19608;
      objectArray0[7] = (Object) bitSet0;
      objectArray0[8] = (Object) bitSet0;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(9, objectArray1.length);
      assertEquals(9, objectArray0.length);
      assertNotNull(objectArray1);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-4);
      shortArray0[1] = (short)5;
      shortArray0[3] = (short)0;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short) (-4);
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-4), (short)5, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-4), (short)5, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      Double double0 = new Double(2611.38);
      assertNotNull(double0);
      assertEquals(2611.38, (double)double0, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      charArray0[4] = 'p';
      Double double1 = Double.valueOf((double) (short) (-4));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-4.0), (double)double1, 0.01);
      
      Double double2 = new Double((short) (-4));
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-4.0), (double)double2, 0.01);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'p', (int) (short) (-4));
      assertEquals(5, charArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {' ', ' ', 'p', 'p', 'p'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.shift((long[]) null, (-699), 918, 33);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Byte byte0 = Byte.valueOf((byte) (-17));
      assertNotNull(byte0);
      assertEquals((byte) (-17), (byte)byte0);
      
      Double double0 = new Double(1317.4);
      assertNotNull(double0);
      assertEquals(1317.4, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = '0';
      charArray0[2] = ';';
      charArray0[3] = '0';
      charArray0[4] = ';';
      charArray0[5] = '#';
      charArray0[6] = ';';
      charArray0[7] = ';';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ';', (int) (byte)54);
      assertEquals(8, charArray0.length);
      assertEquals(7, int0);
      assertArrayEquals(new char[] {';', '0', ';', '0', ';', '#', ';', ';'}, charArray0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences((double[]) null, 3.0);
      assertNull(doubleArray1);
      
      boolean boolean2 = ArrayUtils.contains((Object[]) null, (Object) byte0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-102);
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = 'x';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = 'R';
      charArray0[5] = '[';
      charArray0[6] = '(';
      charArray0[7] = '\\';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '(');
      assertEquals(8, charArray0.length);
      assertEquals(6, int0);
      assertArrayEquals(new char[] {'[', 'x', '[', '[', 'R', '[', '(', '\\'}, charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)3;
      doubleArray0[1] = (double) (byte)93;
      int int1 = ArrayUtils.indexOf(doubleArray0, 2347.0, (-2144967258));
      assertEquals(2, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {3.0, 93.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(889);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(889, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[6] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, 3, 3, 0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true, true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-31);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-95);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-95));
      assertEquals(4, byteArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte)85, (byte)85, (byte) (-95), (byte) (-95)}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((String[]) null, (int) 85);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 85, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)82;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (-2427));
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)56, (byte)96, (byte)56, (byte)82, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)56;
      longArray0[1] = (long) (byte)96;
      longArray0[2] = (long) (byte)82;
      ArrayUtils.shift(longArray0, 229);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {82L, 56L, 96L}, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 229;
      doubleArray0[1] = (double) (short) (-22065);
      doubleArray0[2] = (double) (byte)56;
      doubleArray0[3] = (double) (byte)56;
      byteArray0[3] = (byte)56;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-22065.0), 56.0, 56.0, 0.0, 229.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)126;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)126;
      shortArray0[3] = (short)126;
      shortArray0[4] = (short)126;
      shortArray0[5] = (short)126;
      shortArray0[6] = (short)126;
      ArrayUtils.reverse(shortArray0, 8, (int) (short)126);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)126, (short)2, (short)126, (short)126, (short)126, (short)126, (short)126}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(7, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)126, (short)2, (short)126, (short)126, (short)126, (short)126, (short)126}, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)126;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (short)126;
      doubleArray0[3] = (double) (short)126;
      doubleArray0[4] = (double) (short)126;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {126.0, 0.0, 126.0, 126.0, 126.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {126.0, 0.0, 126.0, 126.0, 126.0}, doubleArray0, 0.01);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)126;
      longArray0[1] = (long) (short)126;
      longArray0[2] = (long) (short)126;
      longArray0[3] = (long) (short)126;
      longArray0[4] = (-1L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)126, (int) (short)126);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {126L, 126L, 126L, 126L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'M';
      charArray0[2] = '3';
      charArray0[3] = '$';
      charArray0[4] = 'F';
      char[] charArray1 = ArrayUtils.remove(charArray0, 2);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'@', 'M', '3', '$', 'F'}, charArray0);
      assertArrayEquals(new char[] {'@', 'M', '$', 'F'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "byt4");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)36;
      shortArray0[1] = (short)53;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)53, (short)36}, shortArray0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'T');
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'T'}, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'T';
      floatArray0[1] = (float) (short)53;
      int[] intArray0 = new int[9];
      intArray0[0] = (-603);
      intArray0[1] = (int) (short)53;
      intArray0[2] = (int) (short)53;
      intArray0[3] = (int) (short)36;
      intArray0[4] = (int) (short)36;
      intArray0[5] = (int) (short)53;
      intArray0[6] = (int) (short)53;
      intArray0[7] = 392;
      intArray0[8] = (int) (short)53;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 392, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 56);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 56);
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {101}, intArray0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-257));
      assertNull(shortArray0);
      
      char[] charArray1 = Character.toChars((int) 'P');
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'P'}, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray0, 'P');
      assertEquals(5, charArray0.length);
      assertEquals(3, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'K', 'P', 'P', 'K', 'K'}, charArray0);
      assertArrayEquals(new char[] {'K', 'K', 'K'}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      ArrayUtils.shift(charArray0, 1225);
      assertEquals(5, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'K', 'P', 'P', 'K', 'K'}, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'K';
      floatArray0[1] = (float) 'P';
      floatArray0[2] = (float) 'K';
      floatArray0[3] = (float) 'K';
      floatArray0[4] = (float) 'K';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {75.0F, 80.0F, 75.0F, 75.0F, 75.0F}, floatArray0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray0, (int) (byte) (-22), (int) (short)2);
      assertEquals(2, floatArray2.length);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {75.0F, 80.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {75.0F, 80.0F, 75.0F, 75.0F, 75.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      
      char[] charArray3 = ArrayUtils.addFirst(charArray0, 'P');
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray3.length);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertNotNull(charArray3);
      assertArrayEquals(new char[] {'K', 'P', 'P', 'K', 'K'}, charArray0);
      assertArrayEquals(new char[] {'P', 'K', 'P', 'P', 'K', 'K'}, charArray3);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray3, charArray2);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      
      ArrayUtils.swap((short[]) null, 531, (int) (short)2);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1668L;
      doubleArray0[1] = (double) 1668L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1668.0, 1668.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-627.403F);
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-627.403F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, 486, 1073741824, (int) (byte)104);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-627.403F)}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3.0, (double) 3806.0F);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {1668.0, 1668.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3471);
      intArray0[1] = 2417;
      intArray0[2] = 2417;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-3471), 2417, 2417}, intArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (-3471));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1668.0, 1668.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1668.0, 1668.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)431);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "The Array must not be null";
      stringArray0[2] = "";
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-240.0));
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 68.0F;
      boolean boolean1 = ArrayUtils.contains(floatArray0, 68.0F);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {68.0F}, floatArray0, 0.01F);
      
      Short short0 = new Short((short) (-1081));
      assertNotNull(short0);
      assertEquals((short) (-1081), (short)short0);
      
      Short short1 = new Short((short) (-1081));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-1081), (short)short1);
      
      Short short2 = new Short((short) (-1));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-1), (short)short2);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)10);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 89.0;
      doubleArray0[2] = 0.7;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-4115.49);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, Double.NaN);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 89.0, 0.7, 0.0, (-4115.49)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {89.0, 0.7, 0.0, (-4115.49)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-60);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-57));
      assertEquals(10, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-125), (byte) (-70), (byte)76, (byte)13, (byte) (-1), (byte)3, (byte) (-68), (byte) (-60), (byte) (-57)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-125), (byte) (-70), (byte)76, (byte)13, (byte) (-1), (byte)3, (byte) (-68), (byte) (-60)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      ArrayUtils.shuffle(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'>'}, charArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(99);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(99, (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = 13;
      Integer integer2 = new Integer(13);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(13, (int)integer2);
      
      integerArray0[2] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 99, 13}, intArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)101;
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      byteArray0[2] = (byte)101;
      byteArray0[4] = (byte)127;
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)101, (byte)0, (byte)127, (byte)0, (byte)101}, byteArray0);
      
      ArrayUtils.swap(intArray0, int0, (int) (byte)5);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 99, 13}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 18688);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {18688}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      charArray0[1] = '0';
      charArray0[2] = '|';
      charArray0[3] = 'R';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 18688);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-33);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-33)}, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 18688;
      longArray0[1] = (long) '0';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 0);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {18688L, 48L}, longArray1);
      assertArrayEquals(new long[] {18688L, 48L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 67;
      intArray2[1] = 1646;
      intArray2[2] = (int) 'R';
      intArray2[3] = 1646;
      intArray2[4] = (int) '';
      intArray2[5] = (int) (byte) (-33);
      int int1 = ArrayUtils.indexOf(intArray2, 127);
      assertEquals(6, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      assertArrayEquals(new int[] {67, 1646, 82, 1646, 127, (-33)}, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-767);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-924);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-767), Integer.MAX_VALUE, (-924)}, intArray0);
      assertArrayEquals(new int[] {(-767), Integer.MAX_VALUE, (-924), (-767), Integer.MAX_VALUE, (-924)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-767);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(3, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-767), (-924), Integer.MAX_VALUE}, intArray0);
      assertNotSame(intArray0, intArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '-');
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-767);
      longArray0[1] = (long) (-924);
      longArray0[2] = 0L;
      longArray0[3] = (-3042L);
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (-924);
      longArray0[6] = (long) '-';
      longArray0[7] = 1L;
      longArray0[8] = (long) 0;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(18, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-767L), (-924L), 0L, (-3042L), 0L, (-924L), 45L, 1L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1153L;
      longArray0[1] = (-1664L);
      longArray0[2] = (-837L);
      longArray0[3] = 1928L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-603), 4310);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1153L, (-1664L), (-837L), 1928L}, longArray0);
      assertArrayEquals(new long[] {1153L, (-1664L), (-837L), 1928L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 4310);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4310, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-316L);
      longArray0[1] = 0L;
      longArray0[2] = (long) (-603);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 7, 0);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-316L), 0L, (-603L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[9];
      ArrayUtils.reverse(charArray0, 0, (-5277));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)6);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Float float0 = new Float((float) (byte)6);
      assertNotNull(float0);
      assertEquals(6.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) (byte)6);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(6.0F, (float)float1, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray0, (Object) float1);
      assertEquals(4, doubleArray0.length);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertFalse(boolean0);
      
      MutableInt mutableInt0 = new MutableInt(104);
      assertNotNull(mutableInt0);
      assertEquals((short)104, mutableInt0.shortValue());
      assertEquals(104.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(104, (int)mutableInt0.getValue());
      assertEquals((byte)104, mutableInt0.byteValue());
      assertEquals(104, (int)mutableInt0.toInteger());
      assertEquals("104", mutableInt0.toString());
      assertEquals(104, mutableInt0.intValue());
      assertEquals(104.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(104L, mutableInt0.longValue());
      
      MutableInt mutableInt1 = new MutableInt(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals((byte)6, mutableInt1.byteValue());
      assertEquals((short)6, mutableInt1.shortValue());
      assertEquals(6.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(6, mutableInt1.intValue());
      assertEquals(6L, mutableInt1.longValue());
      assertEquals(6.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("6", mutableInt1.toString());
      assertEquals(6, (int)mutableInt1.toInteger());
      assertEquals(6, (int)mutableInt1.getValue());
      
      MutableInt mutableInt2 = new MutableInt(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertNotNull(mutableInt2);
      assertEquals(6.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(6, mutableInt2.intValue());
      assertEquals(6, (int)mutableInt2.toInteger());
      assertEquals((byte)6, mutableInt2.byteValue());
      assertEquals((short)6, mutableInt2.shortValue());
      assertEquals("6", mutableInt2.toString());
      assertEquals(6, (int)mutableInt2.getValue());
      assertEquals(6L, mutableInt2.longValue());
      assertEquals(6.0, mutableInt2.doubleValue(), 0.01);
      
      MutableInt[] mutableIntArray0 = new MutableInt[5];
      mutableIntArray0[0] = mutableInt0;
      mutableIntArray0[1] = mutableInt1;
      int int0 = mutableInt0.incrementAndGet();
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertEquals(105, int0);
      assertEquals((byte)105, mutableInt0.byteValue());
      assertEquals((short)105, mutableInt0.shortValue());
      assertEquals(105, (int)mutableInt0.toInteger());
      assertEquals(105, (int)mutableInt0.getValue());
      assertEquals(105.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("105", mutableInt0.toString());
      assertEquals(105.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(105, mutableInt0.intValue());
      assertEquals(105L, mutableInt0.longValue());
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt2);
      
      mutableIntArray0[2] = mutableInt0;
      mutableIntArray0[4] = mutableInt2;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeAllOccurrences(mutableIntArray0, mutableInt2);
      assertEquals(3, mutableIntArray1.length);
      assertEquals(5, mutableIntArray0.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertNotNull(mutableIntArray1);
      assertEquals(6.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(6, mutableInt2.intValue());
      assertEquals(6, (int)mutableInt2.toInteger());
      assertEquals((byte)6, mutableInt2.byteValue());
      assertEquals((short)6, mutableInt2.shortValue());
      assertEquals("6", mutableInt2.toString());
      assertEquals(6, (int)mutableInt2.getValue());
      assertEquals(6L, mutableInt2.longValue());
      assertEquals(6.0, mutableInt2.doubleValue(), 0.01);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableInt2, mutableInt1);
      assertNotSame(mutableInt2, mutableInt0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)6;
      longArray0[1] = (long) (byte)6;
      longArray0[2] = (long) 104;
      longArray0[3] = (-1L);
      longArray0[4] = (long) (byte)6;
      longArray0[5] = (long) (byte)6;
      longArray0[6] = (long) 104;
      longArray0[7] = (long) 104;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 104, (-1056));
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {6L, 6L, 104L, (-1L), 6L, 6L, 104L, 104L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-525);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-525));
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-525)}, shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      double[] doubleArray0 = new double[1];
      byteArray0[0] = (byte)79;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN, (-3487.36));
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (byte)79);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.insert((int) (byte)79, intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = 1L;
      longArray0[3] = 1556L;
      longArray0[4] = (long) (short) (-525);
      longArray0[5] = (long) (byte)79;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-350), (int) (short) (-525));
      assertEquals(0, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), 1L, 1556L, (-525L), 79L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (int) (short) (-525));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -525, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)0;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte1 = (byte) (-27);
      byteArray1[0] = (byte) (-27);
      boolean boolean0 = ArrayUtils.contains(byteArray1, (byte)2);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-27)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte[] byteArray2 = new Byte[5];
      byteArray2[0] = (Byte) (byte)0;
      byteArray2[1] = (Byte) (byte) (-27);
      byteArray2[2] = (Byte) (byte) (-27);
      byteArray2[3] = (Byte) (byte)0;
      byteArray2[4] = (Byte) (byte)0;
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte) (-116));
      assertEquals(5, byteArray2.length);
      assertEquals(5, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-27), (byte) (-27), (byte)0, (byte)0}, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray2, (Object) byte1);
      assertEquals(5, byteArray2.length);
      assertFalse(byte1 == byte0);
      assertNotNull(bitSet0);
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) (byte)2;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-1248.0729161867073));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0, (-1248.0729161867073)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, (-992));
      assertEquals(2, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1583.0F;
      floatArray0[2] = (float) (-992);
      floatArray0[3] = (-1916.051F);
      floatArray0[4] = (float) (-992);
      floatArray0[5] = (float) (-992);
      floatArray0[6] = (float) (-992);
      floatArray0[7] = (float) (-992);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertEquals(8, floatArray0.length);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new float[] {1.0F, 1583.0F, (-992.0F), (-1916.051F), (-992.0F), (-992.0F), (-992.0F), (-992.0F)}, floatArray0, 0.01F);
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(8, floatArray0.length);
      assertNull(object1);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new float[] {1.0F, 1583.0F, (-992.0F), (-1916.051F), (-992.0F), (-992.0F), (-992.0F), (-992.0F)}, floatArray0, 0.01F);
      
      objectArray0[1] = null;
      ArrayUtils.shift(objectArray0, (-877));
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      int int0 = ArrayUtils.indexOf(charArray0, ' ', (-715827883));
      assertEquals(5, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'[', 'p', 'p', 'p', '\u0000'}, charArray0);
      
      long[] longArray0 = new long[4];
      Double double2 = Double.valueOf((double) doubleArray0[1]);
      assertEquals(4, doubleArray0.length);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      Double double3 = new Double(0.0);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      int int1 = ArrayUtils.indexOf(charArray0, 'L', 1);
      assertEquals(5, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'[', 'p', 'p', 'p', '\u0000'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(4, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      ArrayUtils.shift(longArray0, 3697, (-1084), (-1084));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((-1.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      Float float2 = new Float(2380.342983);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(2380.343F, (float)float2, 0.01F);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-2464);
      longArray0[1] = (long) (short) (-2464);
      longArray0[2] = (long) (short) (-2464);
      ArrayUtils.shift(longArray0, 65536);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-2464L), (-2464L), (-2464L)}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 48;
      intArray0[1] = 6;
      intArray0[2] = (-2681);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 6;
      floatArray0[1] = (float) 48;
      floatArray0[2] = (float) 48;
      floatArray0[3] = (float) (-2681);
      floatArray0[4] = (float) (-4924);
      ArrayUtils.swap(floatArray0, (-2681), 3915);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {6.0F, 48.0F, 48.0F, (-2681.0F), (-4924.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[1] = '<';
      charArray0[4] = 't';
      charArray0[5] = 't';
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertEquals(12, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '<', '\u0000', '\u0000', 't', 't'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      Long long0 = new Long((-840L));
      assertNotNull(long0);
      assertEquals((-840L), (long)long0);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-840L), (-840L), (-840L), (-840L), (-840L)}, longArray1);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      Boolean boolean5 = new Boolean("");
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      Boolean boolean6 = Boolean.TRUE;
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean4));
      assertNotNull(boolean6);
      assertTrue(boolean6);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'c';
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)60);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1668L;
      doubleArray0[1] = (double) 1668L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1668.0, 1668.0}, doubleArray0, 0.01);
      
      Float float0 = new Float((float) (-979L));
      assertNotNull(float0);
      assertEquals((-979.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((float) 1668L);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1668.0F, (float)float1, 0.01F);
      
      Float float2 = new Float(1.0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 468.3602396985576;
      doubleArray0[2] = 2260.7579797797;
      doubleArray0[3] = 723.95535325;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object[] objectArray0 = new Object[1];
      char char0 = 'h';
      Character character0 = new Character('h');
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      assertEquals('h', (char)character0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (int) 'h';
      intArray0[2] = (int) 'h';
      intArray0[3] = (int) 'h';
      intArray0[4] = (int) 'h';
      intArray0[5] = (int) 'h';
      intArray0[6] = 0;
      intArray0[7] = (int) 'h';
      intArray0[8] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 104);
      assertEquals(9, intArray0.length);
      assertNotNull(bitSet0);
      assertEquals(6, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2, 3, 4, 5, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {0, 104, 104, 104, 104, 104, 0, 104, 0}, intArray0);
      
      BitSet bitSet1 = bitSet0.get(0, 2018);
      assertEquals(9, intArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(6, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2, 3, 4, 5, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(8, bitSet1.length());
      assertEquals(6, bitSet1.cardinality());
      assertEquals("{1, 2, 3, 4, 5, 7}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertArrayEquals(new int[] {0, 104, 104, 104, 104, 104, 0, 104, 0}, intArray0);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, bitSet1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)9;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)9);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)9}, shortArray0);
      
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '_';
      charArray1[1] = '5';
      charArray1[2] = 'p';
      charArray1[3] = 'N';
      charArray1[4] = '_';
      charArray1[5] = '5';
      charArray1[6] = '_';
      charArray1[7] = 'N';
      charArray1[8] = '';
      ArrayUtils.shift(charArray1, (-1169), 0, 547);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'_', '5', 'p', 'N', '_', '5', '_', 'N', ''}, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, (-1072));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1072);
      intArray0[2] = (int) (byte)68;
      intArray0[3] = (-4591);
      intArray0[4] = (-1706);
      intArray0[5] = (-4591);
      intArray0[6] = (int) (byte)68;
      ArrayUtils.swap(intArray0, 15, (-1), 7);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1072), 68, (-4591), (-1706), (-4591), 68}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1083), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1083, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      Byte byte0 = Byte.valueOf((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      Double double0 = new Double((byte)99);
      assertNotNull(double0);
      assertEquals(99.0, (double)double0, 0.01);
      
      String string0 = ArrayUtils.toString((Object) double0);
      assertNotNull(string0);
      assertEquals("99.0", string0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)9;
      doubleArray0[1] = (double) (byte)99;
      doubleArray0[3] = (double) (byte)99;
      doubleArray0[4] = (double) (byte)9;
      doubleArray0[5] = (double) (byte)9;
      doubleArray0[7] = (double) (byte)99;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {9.0, 99.0, 0.0, 99.0, 9.0, 9.0, 0.0, 99.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)9;
      longArray0[1] = (long) (byte)99;
      longArray0[2] = (long) (byte)99;
      longArray0[3] = (long) (byte)99;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {9L, 99L, 99L, 99L}, longArray0);
      
      Long[] longArray2 = new Long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (Long) 99L;
      longArray2[1] = (Long) 99L;
      Long long0 = new Long(99L);
      assertNotNull(long0);
      assertEquals(99L, (long)long0);
      
      longArray2[2] = long0;
      longArray2[3] = (Long) 99L;
      longArray2[4] = (Long) 9L;
      Long long1 = new Long(1L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      
      Long[] longArray3 = ArrayUtils.removeAllOccurences(longArray2, long1);
      assertEquals(5, longArray2.length);
      assertEquals(5, longArray3.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(long1.equals((Object)long0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotNull(longArray3);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-767);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-38);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-95));
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)67, (byte) (-95), (byte)8, (byte) (-38)}, byteArray0);
      
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) (byte) (-38);
      byteArray1[1] = (Byte) (byte) (-95);
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-14));
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-38), (byte) (-95)}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-767), 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-767), 0, 0, (-767), 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.shift(intArray0, 0, (-767), (int) (byte) (-38));
      assertEquals(3, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-767), 0, 0}, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(10, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, false, false, false, false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 1535;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      booleanArray0[4] = true;
      objectArray0[4] = (Object) false;
      ArrayUtils.swap(objectArray0, 1535, (-1453));
      assertEquals(5, objectArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(10, booleanArray0.length);
      assertEquals(9, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, false, false, false}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      ArrayUtils.swap(objectArray0, 4, 1724, 1785);
      assertEquals(5, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) (-1453);
      doubleArray0[3] = (double) 1535;
      doubleArray0[5] = (double) 1785;
      doubleArray0[6] = (double) 1785;
      doubleArray0[7] = (double) 1535;
      doubleArray0[8] = (double) 1535;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {4.0, (-1453.0), 0.0, 1535.0, 0.0, 1785.0, 1785.0, 1535.0, 1535.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-1453));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-232);
      intArray0[3] = (-232);
      Double double0 = new Double(27.33522220953097);
      assertNotNull(double0);
      assertEquals(27.33522220953097, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[8];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      
      ArrayUtils.shift(intArray0, 0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-232), 0, 0, (-232), 0, 0, 0, 0}, intArray0);
      
      ArrayUtils.shift(doubleArray1, 57);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 57;
      ArrayUtils.shift(intArray1, 538);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {57}, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'R';
      charArray0[2] = '}';
      charArray0[3] = '[';
      charArray0[4] = 'c';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean0);
      assertArrayEquals(new char[] {']', 'R', '}', '[', 'c'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-44);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-119));
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)51, (byte)17, (byte)60, (byte)48, (byte) (-44)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)17, (byte)60, (byte)48, (byte) (-44)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1.0;
      ArrayUtils.swap(doubleArray0, 75, (-1641), 82);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, (-1.0), 1.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte)80, (byte)13, (byte)13}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)80, (byte)13, (byte)13, (byte)6, (byte)80, (byte)13, (byte)13}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      char[] charArray0 = new char[9];
      charArray0[0] = 'Y';
      charArray0[1] = ',';
      charArray0[2] = 'A';
      charArray0[3] = 'T';
      charArray0[4] = 'i';
      charArray0[5] = 'E';
      charArray0[6] = 'E';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '0', 6);
      assertEquals(9, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'Y', ',', 'A', 'T', 'i', 'E', 'E', '\u0000', '\u0000'}, charArray0);
      
      ArrayUtils.shift(floatArray0, (-1));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-1.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'T';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 84, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      float[] floatArray0 = new float[11];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(11, floatArray0.length);
      assertTrue(boolean0);
      
      Byte byte0 = Byte.valueOf((byte)54);
      assertNotNull(byte0);
      assertEquals((byte)54, (byte)byte0);
      
      Double double0 = new Double((-2469.9027490383));
      assertNotNull(double0);
      assertEquals((-2469.9027490383), (double)double0, 0.01);
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      floatArray0[5] = (float) (byte)9;
      ArrayUtils.shift(floatArray0, 0, (int) (byte)9, 0);
      assertEquals(11, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[14];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)9;
      intArray0[2] = 0;
      intArray0[3] = 0;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(12, booleanArray1.length);
      assertEquals(14, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertArrayEquals(new int[] {0, 9, 0, 0}, intArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)18, object0);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = (Float) (float)0;
      floatArray0[1] = (Float) (float)0;
      floatArray0[2] = (Float) (float)0;
      floatArray0[3] = (Float) (float)0;
      floatArray0[4] = (Float) (float)0;
      floatArray0[5] = (Float) (float)0;
      Float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((double) floatArray0[1]);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1554.81);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1554.81, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      
      Double double2 = new Double(5079.09858570252);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(5079.09858570252, (double)double2, 0.01);
      
      Double double3 = new Double((double) floatArray0[2]);
      assertEquals(6, floatArray0.length);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      Double double4 = new Double((-4412.965F));
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals((-4412.96484375), (double)double4, 0.01);
      
      Double double5 = new Double((-1233.030520954808));
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      assertEquals((-1233.030520954808), (double)double5, 0.01);
      
      Double double6 = new Double((double) doubleArray0[1]);
      assertEquals(6, doubleArray0.length);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotNull(double6);
      assertEquals(1554.81, (double)double6, 0.01);
      
      Double double7 = new Double((-1.0));
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotNull(double7);
      assertEquals((-1.0), (double)double7, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, double1);
      assertEquals(5, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals((double)double1, (double)double4, 0.01);
      assertNotEquals((double)double1, (double)double7, 0.01);
      assertEquals((double)double1, (double)double6, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double5, 0.01);
      assertNotEquals((double)double1, (double)double3, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      ArrayUtils.shift((float[]) null, 0);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)18, object0);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = (Float) (float)0;
      floatArray0[1] = (Float) (float)0;
      floatArray0[2] = (Float) (float)0;
      floatArray0[3] = (Float) (float)0;
      floatArray0[4] = (Float) (float)0;
      floatArray0[5] = (Float) (float)0;
      Float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((double) floatArray0[1]);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1554.81);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1554.81, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(638.907290131279);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(638.907290131279, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(1554.81);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(1554.81, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[1]);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      assertEquals(1554.81, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(2130.466);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      assertEquals(2130.466, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, double0);
      assertEquals(6, floatArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double5, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      float[] floatArray2 = new float[7];
      floatArray2[0] = (-4412.965F);
      floatArray2[1] = (float) floatArray0[4];
      floatArray2[2] = (float) floatArray0[2];
      floatArray2[3] = (float) floatArray0[1];
      floatArray2[4] = (float) 0;
      floatArray2[5] = (float) floatArray0[5];
      floatArray2[6] = (float) 0;
      ArrayUtils.shift(floatArray2, 1114111);
      assertEquals(7, floatArray2.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-4412.965F), 0.0F}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(681);
      assertNotNull(mutableInt0);
      assertEquals((short)681, mutableInt0.shortValue());
      assertEquals("681", mutableInt0.toString());
      assertEquals(681.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-87), mutableInt0.byteValue());
      assertEquals(681, (int)mutableInt0.getValue());
      assertEquals(681, (int)mutableInt0.toInteger());
      assertEquals(681, mutableInt0.intValue());
      assertEquals(681L, mutableInt0.longValue());
      assertEquals(681.0F, mutableInt0.floatValue(), 0.01F);
      
      MutableInt[] mutableIntArray0 = new MutableInt[5];
      mutableIntArray0[0] = mutableInt0;
      mutableInt0.subtract((Number) mutableInt0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      
      mutableIntArray0[1] = mutableInt0;
      mutableIntArray0[2] = mutableInt0;
      mutableIntArray0[3] = mutableInt0;
      mutableIntArray0[4] = mutableInt0;
      MutableInt[] mutableIntArray1 = ArrayUtils.add(mutableIntArray0, mutableInt0);
      assertEquals(5, mutableIntArray0.length);
      assertEquals(6, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) classArray0, (Object) mutableInt0, 82);
      assertEquals(0, classArray0.length);
      assertEquals((-1), int0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)62;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short)321;
      shortArray0[3] = (short) (-2816);
      shortArray0[4] = (short)11;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)62, (short)4, (short)321, (short) (-2816), (short)11}, shortArray1);
      assertArrayEquals(new short[] {(short)62, (short)4, (short)321, (short) (-2816), (short)11}, shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-2143595682));
      assertNotNull(integer0);
      assertEquals((-2143595682), (int)integer0);
      
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '8', (-1128));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)12;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte)12, (byte)74, (byte)12}, byteArray0);
      
      ArrayUtils.reverse((char[]) null);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-90);
      ArrayUtils.shift(shortArray0, (int) (byte) (-90), (int) (byte) (-90), 2291);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-90)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      ArrayUtils.shift((int[]) null, 1672, 1773, 46);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1773;
      doubleArray0[1] = (double) 46;
      doubleArray0[2] = (double) 1672;
      doubleArray0[3] = 2572.964;
      doubleArray0[5] = 1.5;
      doubleArray0[6] = (double) (short) (-6287);
      doubleArray0[7] = (-201.143966441983);
      ArrayUtils.shift(doubleArray0, (-1570));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1672.0, 2572.964, 0.0, 1.5, (-6287.0), (-201.143966441983), 1773.0, 46.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1672;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (int) (short) (-6287));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -6287, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Double double0 = new Double(3634.2973);
      assertNotNull(double0);
      assertEquals(3634.2973, (double)double0, 0.01);
      
      Double double1 = new Double((-993.0984195));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-993.0984195), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      Byte byte0 = new Byte((byte) (-53));
      assertNotNull(byte0);
      assertEquals((byte) (-53), (byte)byte0);
      
      Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) byte0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) (byte) (-53);
      floatArray0[3] = (float) (byte) (-53);
      floatArray0[4] = (float) (byte) (-53);
      floatArray0[5] = (float) (byte) (-53);
      floatArray0[6] = (float) (byte) (-53);
      floatArray0[7] = (float) (byte) (-53);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (int) (byte) (-53));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -53, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)99);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (byte)99;
      doubleArray0[2] = (double) (-1);
      int int1 = ArrayUtils.indexOf(doubleArray0, 0.1, (-1), 0.1);
      assertEquals(3, doubleArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-1.0), 99.0, (-1.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 920.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 99.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 99.0, (-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 40, 40, (int) (short)0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false}, booleanArray0));
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1668L;
      doubleArray0[1] = (double) 1668L;
      int int0 = ArrayUtils.indexOf(doubleArray0, 719.947267484878, (-151), 1521.63);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {1668.0, 1668.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1668.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1668.0, 1668.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, (-151), 122, 122);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short) (-75));
      assertNotNull(short0);
      assertEquals((short) (-75), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)63);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)63, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-75));
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-75), (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)73);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short)73, (short)short3);
      
      Short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, short3);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 468.3602396985576;
      doubleArray0[2] = 2260.7579797797;
      doubleArray0[3] = 723.95535325;
      doubleArray0[4] = 1.5;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 468.3602396985576, 2260.7579797797, 723.95535325, 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 468.3602396985576, 2260.7579797797, 723.95535325, 1.5}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = '/';
      charArray0[2] = 'V';
      charArray0[3] = 'H';
      charArray0[4] = 'N';
      charArray0[5] = 'O';
      charArray0[6] = 'P';
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertEquals(7, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {']', '/', 'V', 'H', 'N', 'O', 'P'}, charArray0);
      assertArrayEquals(new char[] {'/', 'V', 'H', 'N', 'O', 'P'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'V';
      floatArray0[1] = (float) 'N';
      ArrayUtils.swap(floatArray0, (-2746), 0, (-2746));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {86.0F, 78.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null, (byte)66);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)100;
      shortArray0[1] = (short) (-10248);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)1;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)56);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-87), (byte)1}, byteArray0);
      
      Byte[] byteArray1 = new Byte[10];
      byte[] byteArray2 = ArrayUtils.toPrimitive((Byte[]) null, (byte)56);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1827.3981289417716;
      Long[] longArray0 = new Long[7];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 21;
      intArray0[1] = 81;
      intArray0[2] = (-2849);
      intArray0[3] = 1;
      intArray0[4] = 234;
      intArray0[5] = (-3327);
      intArray0[6] = (-2154);
      intArray0[7] = (-1741);
      intArray0[8] = 3002;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1;
      intArray1[1] = (-2154);
      intArray1[2] = (-3327);
      intArray1[3] = 3002;
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean1);
      assertArrayEquals(new int[] {21, 81, (-2849), 1, 234, (-3327), (-2154), (-1741), 3002}, intArray0);
      assertArrayEquals(new int[] {1, (-2154), (-3327), 3002}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-5909.0F);
      floatArray0[2] = (-3080.0F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 3806.0F;
      floatArray0[5] = (-1277.3838F);
      ArrayUtils.swap(floatArray0, 63, 1, (-3471));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-5909.0F), (-3080.0F), (-1.0F), 3806.0F, (-1277.3838F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2417;
      doubleArray0[1] = (double) (-1277.3838F);
      doubleArray0[2] = (double) 3806.0F;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) (-1277.3838F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 76.0, 1.0);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2417.0, (-1277.3837890625), 3806.0, 1.0, (-1277.3837890625)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {1}, intArray0);
      
      MutableInt mutableInt0 = new MutableInt((-1277.3838F));
      assertNotNull(mutableInt0);
      assertEquals((-1277), (int)mutableInt0.getValue());
      assertEquals((-1277.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)3, mutableInt0.byteValue());
      assertEquals((-1277), (int)mutableInt0.toInteger());
      assertEquals((short) (-1277), mutableInt0.shortValue());
      assertEquals((-1277), mutableInt0.intValue());
      assertEquals((-1277L), mutableInt0.longValue());
      assertEquals("-1277", mutableInt0.toString());
      assertEquals((-1277.0F), mutableInt0.floatValue(), 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(mutableInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 92.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {1.0, 92.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 0, 0);
      assertEquals(0, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {}, longArray0);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)127;
      byteArray0[0] = (byte)127;
      byte byte1 = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte)127);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-55);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-66), (int) (byte) (-55));
      assertEquals(2, byteArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-55)}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-55));
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-55)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-72)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, (-1), 43);
      assertEquals(4, intArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-2105));
      assertEquals(5, booleanArray0.length);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-2105));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2105, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Character character0 = new Character('M');
      assertNotNull(character0);
      assertEquals('M', (char)character0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-1030), (Object) character0);
      assertEquals(8, objectArray0.length);
      assertNotNull(object0);
      assertEquals('M', object0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = 'b';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'6', '6', 'b', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (-1030), (-1030), 147);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[1];
      ArrayUtils.swap(longArray0, (-1167), 46);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 1646);
      assertEquals(5, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 0);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int1 = ArrayUtils.indexOf((int[]) null, (-496));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      Character character0 = Character.valueOf('\"');
      assertNotNull(character0);
      assertEquals('\"', (char)character0);
      
      Character character1 = Character.valueOf('*');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('*', (char)character1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = 'R';
      charArray0[2] = 'x';
      charArray0[3] = 'R';
      charArray0[4] = '*';
      charArray0[5] = 'x';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'R');
      assertEquals(6, charArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'|', 'R', 'x', 'R', '*', 'x'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      Short short0 = new Short((short) (-982));
      assertNotNull(short0);
      assertEquals((short) (-982), (short)short0);
      
      Short short1 = new Short((short) (-982));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-982), (short)short1);
      
      Short short2 = new Short((short) (-1));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-1), (short)short2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2558;
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) 0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 3889, (int) (short) (-1));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (int) (short) (-982);
      intArray0[2] = (int) (short) (-982);
      intArray0[3] = 2558;
      intArray0[4] = 3889;
      intArray0[5] = 2558;
      intArray0[6] = (int) (short) (-1);
      intArray0[7] = 0;
      intArray0[8] = (int) (short) (-982);
      int[] intArray1 = ArrayUtils.add(intArray0, (-4601));
      assertEquals(10, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-982), (-982), 2558, 3889, 2558, (-1), 0, (-982), (-4601)}, intArray1);
      assertArrayEquals(new int[] {0, (-982), (-982), 2558, 3889, 2558, (-1), 0, (-982)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1313), (-1313));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte1 = new Byte((byte) (-1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-1), (byte)byte1);
      
      byteArray0[1] = byte0;
      ArrayUtils.swap(shortArray0, (int) (byte) (-53), (int) (short) (-525), (-3194));
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((byte) (-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((byte)2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2, (int)integer2);
      
      integerArray0[2] = integer2;
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '!';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '!';
      charArray0[6] = '!';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'8', '!', '8', '8', '!', '\u0000', '!'}, charArray0);
      assertArrayEquals(new char[] {'8', '!', '8', '8', '!', '\u0000', '!'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'R';
      intArray0[1] = (int) '8';
      intArray0[2] = (int) '!';
      intArray0[3] = 874;
      intArray0[4] = (int) '\u0000';
      intArray0[5] = (int) '8';
      ArrayUtils.reverse(intArray0, 33, (-2143682791));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {82, 56, 33, 874, 0, 56}, intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '8';
      longArray0[1] = (long) 56;
      longArray0[2] = (long) 874;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {56L, 56L, 874L}, longArray0);
      assertArrayEquals(new long[] {56L, 56L, 874L, 56L, 56L, 874L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = (long) (-63);
      longArray0[3] = (-2027L);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), (-63L), 0L, (-2027L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-63L), 0L, (-2027L), (-1L), (-63L), 0L, (-2027L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      char char0 = '\u0017';
      Character character0 = Character.valueOf('\u0017');
      assertNotNull(character0);
      assertEquals('\u0017', (char)character0);
      
      Character character1 = Character.valueOf('*');
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('*', (char)character1);
      
      Character character2 = new Character('R');
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('R', (char)character2);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character2;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character2;
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = '*';
      charArray0[2] = (char) character2;
      charArray0[3] = char0;
      ArrayUtils.shift(charArray0, (-1), 1, 0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'R', '*', 'R', '\u0017'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[6] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-63);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3;
      intArray1[1] = (-63);
      intArray1[2] = 3;
      int int0 = ArrayUtils.lastIndexOf(intArray1, (-63));
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, int0);
      assertArrayEquals(new int[] {3, (-63), 3}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true, true, true}, booleanArray0));
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) 3);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1));
      assertEquals(1, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = '';
      charArray0[2] = 'N';
      ArrayUtils.shift(charArray0, 314, 0, 547);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'_', '', 'N'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = (long) (short)55;
      longArray0[2] = (long) (short)55;
      longArray0[2] = (long) (short)55;
      longArray0[4] = (long) (short)55;
      longArray0[5] = (-2799L);
      ArrayUtils.shift(longArray0, (int) (short)55);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-2799L), 0L, 55L, 55L, 0L, 55L}, longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      longArray0[5] = (long) (byte)24;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)84, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)0, (byte)84, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1231, (int) (short)55);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1069L), 0);
      assertEquals(6, longArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {(-2799L), 0L, 55L, 55L, 0L, 24L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      int int0 = 1724;
      ArrayUtils.swap((Object[]) null, 1724, 1724, (-286));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1724;
      doubleArray0[2] = (double) (-286);
      doubleArray0[3] = 1339.72634548271;
      doubleArray0[4] = 1826.6935823640163;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 1.0F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 29.86601489192);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, 1724.0, (-286.0), 1339.72634548271, 1826.6935823640163, 2.0, 1.0}, doubleArray0, 0.01);
      
      Character character0 = Character.valueOf('R');
      assertNotNull(character0);
      assertEquals('R', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1826.6935823640163, 2);
      assertEquals(7, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {1.0, 1724.0, (-286.0), 1339.72634548271, 1826.6935823640163, 2.0, 1.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift(doubleArray0, 1724, 1724, (-1055));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1724.0, (-286.0), 1339.72634548271, 1826.6935823640163, 2.0, 1.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)85;
      byteArray0[0] = (byte)85;
      byteArray0[2] = (byte)1;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)1, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {1, 0, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (-1119));
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1119)}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null);
      assertTrue(boolean0);
      
      Long long0 = new Long((-1069L));
      assertNotNull(long0);
      assertEquals((-1069L), (long)long0);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      longArray0[1] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1069L), (-1069L)}, longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object[]) longArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1119, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      byte byte0 = (byte)18;
      Byte byte1 = new Byte((byte)18);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)18, (byte)byte1);
      
      Long[] longArray0 = new Long[15];
      Long long0 = new Long(106L);
      assertNotNull(long0);
      assertEquals(106L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((byte)18);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(18L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[1]);
      assertEquals(15, longArray0.length);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(18L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[2]);
      assertEquals(15, longArray0.length);
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(18L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(2147483647L);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals(2147483647L, (long)long4);
      
      longArray0[4] = long4;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Byte byte0 = Byte.valueOf((byte) (-17));
      assertNotNull(byte0);
      assertEquals((byte) (-17), (byte)byte0);
      
      Double double0 = new Double(1317.4);
      assertNotNull(double0);
      assertEquals(1317.4, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-17), Integer.MAX_VALUE);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-17), (byte)54, (byte)54}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-17), (byte)54, (byte)54}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'p';
      charArray0[2] = 'z';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)54, (int) (byte)54);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'J', 'p', 'z'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Long[] longArray0 = new Long[8];
      Long long0 = new Long(Integer.MAX_VALUE);
      assertNotNull(long0);
      assertEquals(2147483647L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((byte) (-17));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-17L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(1L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[1]);
      assertEquals(8, longArray0.length);
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals((-17L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(Integer.MAX_VALUE);
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertNotNull(long4);
      assertEquals(2147483647L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((byte)54);
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertNotNull(long5);
      assertEquals(54L, (long)long5);
      
      longArray0[5] = long5;
      Long long6 = Long.valueOf(171L);
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long1));
      assertNotNull(long6);
      assertEquals(171L, (long)long6);
      
      longArray0[6] = long6;
      Long long7 = new Long((byte) (-17));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long0));
      assertTrue(long7.equals((Object)long3));
      assertTrue(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long6));
      assertNotNull(long7);
      assertEquals((-17L), (long)long7);
      
      longArray0[7] = long7;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2147483647L, (-17L), 1L, (-17L), 2147483647L, 54L, 171L, (-17L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1828.8;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1828.8);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1828.8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray0[0] = (double) (-882L);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)96;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)56, (-1604));
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)37, (byte)56, (byte)37, (byte)82, (byte)96}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, (int) (byte)37);
      assertFalse(boolean0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, 89.2017);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-882.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-882.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Byte[] byteArray2 = new Byte[8];
      byteArray2[0] = (Byte) (byte)82;
      byteArray2[1] = (Byte) (byte)56;
      byteArray2[2] = (Byte) (byte)37;
      byteArray2[3] = (Byte) (byte)0;
      byteArray2[4] = (Byte) (byte)37;
      byteArray2[5] = (Byte) (byte)56;
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      byteArray2[6] = byte0;
      byteArray2[7] = (Byte) (byte)96;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertEquals(8, byteArray3.length);
      assertEquals(8, byteArray2.length);
      assertNotNull(byteArray3);
      assertSame(byteArray3, byteArray2);
      assertSame(byteArray2, byteArray3);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)0, (int) (byte) (-1));
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)37, (byte)56, (byte)37, (byte)82, (byte)96}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int1 = ArrayUtils.indexOf(byteArray1, (byte)40, (-1331));
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)37, (byte)56, (byte)37, (byte)82, (byte)96}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      Long long0 = new Long((-840L));
      assertNotNull(long0);
      assertEquals((-840L), (long)long0);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-840L);
      doubleArray0[1] = (double) (long)longArray0[0];
      doubleArray0[2] = (double) (-840L);
      doubleArray0[3] = (double) (long)longArray0[0];
      doubleArray0[4] = (double) (long)longArray0[0];
      doubleArray0[5] = (-1436.921);
      doubleArray0[6] = (double) (long)longArray0[0];
      doubleArray0[7] = (double) (long)longArray0[0];
      doubleArray0[8] = (double) (long)longArray0[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1436.921), 56);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, int0);
      assertArrayEquals(new double[] {(-840.0), (-840.0), (-840.0), (-840.0), (-840.0), (-1436.921), (-840.0), (-840.0), (-840.0)}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf((Object[]) longArray0, (Object) longArray0[0]);
      assertEquals(5, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)1;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)2);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-45), (byte)2, (byte) (-28), (byte) (-87), (byte) (-116), (byte)0, (byte)2, (byte)1}, byteArray0);
      
      Byte[] byteArray1 = new Byte[3];
      byteArray1[0] = (Byte) (byte) (-87);
      byteArray1[1] = (Byte) (byte) (-87);
      byteArray1[2] = (Byte) (byte) (-116);
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)88);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-87), (byte) (-116)}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-5909.0F);
      floatArray0[2] = (-3080.0F);
      floatArray0[3] = (-1.0F);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)58;
      byteArray0[1] = (byte)48;
      byteArray0[5] = (byte)86;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)81, (int) (byte)0);
      assertEquals(6, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)83, (byte)48, (byte) (-73), (byte)58, (byte)0, (byte)86}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)104;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-64);
      byteArray0[6] = (byte)104;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)104, 5);
      assertEquals(7, byteArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)0, (byte)104, (byte) (-64), (byte)0, (byte)104}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("The type must not be null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Boolean boolean3 = Boolean.valueOf(true);
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), (-2427));
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)56, (byte)96, (byte)56, (byte)82, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-682));
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf(true);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = new Boolean(true);
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      boolean[] booleanArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = '@';
      ArrayUtils.reverse((double[]) null);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'Y';
      intArray0[1] = (int) 'Y';
      ArrayUtils.shift(intArray0, 2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {89, 89}, intArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2503, 512);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Y', '@', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)30);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)30, (byte)byte1);
      
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      Byte byte3 = new Byte((byte) (-1));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte) (-1), (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-1));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      assertEquals((byte) (-1), (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte2);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      assertEquals((byte) (-1), (byte)byte5);
      
      byteArray0[4] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)30, (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)6);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)6, (int) (byte)6);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)6;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 3330, (-4591.0F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3330, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.swap(booleanArray0, (-2681), (-2681), (-2146232928));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.shift(objectArray0, 43, 581, (-2681));
      assertEquals(0, objectArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 43;
      floatArray0[1] = (float) 43;
      boolean boolean2 = ArrayUtils.contains(floatArray0, 1585.87F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new float[] {43.0F, 43.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 68, 68);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[6] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, 3, 3, 0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true, true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-63);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3;
      intArray1[1] = (-63);
      intArray1[2] = 3;
      int int0 = ArrayUtils.lastIndexOf(intArray1, (-63));
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, int0);
      assertArrayEquals(new int[] {3, (-63), 3}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.shift(doubleArray0, (-1));
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      Character character0 = new Character('G');
      assertNotNull(character0);
      assertEquals('G', (char)character0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Character character1 = new Character('G');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('G', (char)character1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) byte0, (Object) character1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-27);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-27)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-27), (byte)1, (byte) (-27)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte) (-27);
      objectArray0[2] = (Object) (byte)1;
      objectArray0[3] = (Object) (byte)1;
      Object object1 = ArrayUtils.toPrimitive(objectArray0[2]);
      assertEquals(9, objectArray0.length);
      assertNotNull(object1);
      assertEquals((byte)1, object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) (byte)1;
      objectArray0[6] = (Object) (byte)1;
      objectArray0[7] = (Object) (byte)1;
      objectArray0[8] = (Object) (byte)1;
      Object[] objectArray1 = ArrayUtils.removeAllOccurrences(objectArray0, object0);
      assertEquals(8, objectArray1.length);
      assertEquals(9, objectArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      
      ArrayUtils.hashCode(objectArray0[8]);
      assertEquals(9, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      byte byte0 = (byte) (-116);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-116);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)99);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116)}, byteArray0);
      
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = (Byte) (byte) (-116);
      byteArray1[1] = (Byte) (byte) (-116);
      byteArray1[2] = (Byte) (byte) (-116);
      byteArray1[3] = (Byte) (byte) (-116);
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, byte0);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116)}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      
      Byte byte1 = new Byte((byte) (-116));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-116), (byte)byte1);
      
      ArrayUtils.hashCode((Object) byte1);
      assertTrue(byte1.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = (long) (short)55;
      longArray0[2] = (long) (short)55;
      longArray0[2] = (long) (short)55;
      longArray0[4] = (long) (-1199);
      longArray0[5] = (-2799L);
      ArrayUtils.shift(longArray0, (int) (short)55);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-2799L), 0L, 55L, 55L, 0L, (-1199L)}, longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      longArray0[5] = (long) (byte)24;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)84, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)0, (byte)84, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1231, (-1199));
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (-597);
      ArrayUtils.reverse((double[]) null);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-597);
      intArray0[1] = (int) (short) (-597);
      intArray0[2] = (int) (short) (-597);
      intArray0[3] = (int) (short) (-597);
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short) (-597);
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 0, 48);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, 1474);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 0.1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      Class<MutableInt>[] classArray0 = (Class<MutableInt>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-922.557);
      doubleArray0[1] = (-158.6);
      doubleArray0[2] = 2510.02240654848;
      doubleArray0[3] = (-420.41);
      doubleArray0[4] = 1339.72634548271;
      doubleArray0[5] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1417.677485999);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-922.557), (-158.6), 2510.02240654848, (-420.41), 1339.72634548271, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-922.557), (-158.6), 2510.02240654848, (-420.41), 1339.72634548271, (-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-158.6);
      double[] doubleArray4 = ArrayUtils.addAll(doubleArray2, doubleArray3);
      assertEquals(0, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-158.6)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-158.6)}, doubleArray4, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-1295));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-5014.02622957433));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)16;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)16;
      doubleArray0[3] = (double) (short)5;
      doubleArray0[4] = (double) (short)16;
      doubleArray0[5] = (double) (short)16;
      doubleArray0[6] = (-3537.9504656477625);
      int int0 = ArrayUtils.indexOf(doubleArray0, 100.0, 65, (-3537.9504656477625));
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 16.0, 5.0, 16.0, 16.0, (-3537.9504656477625)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-3537.9504656477625));
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 16.0, 5.0, 16.0, 16.0, (-3537.9504656477625)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 16.0, 5.0, 16.0, 16.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.swap((boolean[]) null, 155, 2599, (int) (short)0);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1461.89143239268);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Byte byte0 = new Byte((byte)15);
      assertNotNull(byte0);
      assertEquals((byte)15, (byte)byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Long long0 = new Long((-1824L));
      assertNotNull(long0);
      assertEquals((-1824L), (long)long0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-1824L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-232);
      intArray0[1] = 57;
      intArray0[2] = 2128;
      intArray0[3] = 7;
      Double double0 = new Double(27.33522220953097);
      assertNotNull(double0);
      assertEquals(27.33522220953097, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.shift(intArray0, (-232));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-232), 57, 2128, 7, 0, 0, 0, 0}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) doubleArray0, (Object) double0, 0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(doubleArray1, 57);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.shift((Object[]) doubleArray0, (-5727), 2, 92);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = new boolean[9];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      booleanArray1[7] = true;
      booleanArray1[8] = true;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 2102744405);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Character character0 = new Character('w');
      assertNotNull(character0);
      assertEquals('w', (char)character0);
      
      Byte byte0 = new Byte((byte)7);
      assertNotNull(byte0);
      assertEquals((byte)7, (byte)byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) character0, (Object) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(1, objectArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('b');
      assertNotNull(character0);
      assertEquals('b', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('', (char)character1);
      
      characterArray0[1] = character1;
      char char0 = '^';
      Character character2 = new Character('^');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertNotNull(character2);
      assertEquals('^', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('^', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('^');
      assertTrue(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      assertEquals('^', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('b');
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      assertEquals('b', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char0);
      assertTrue(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)char0));
      assertTrue(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertNotNull(character6);
      assertEquals('^', (char)character6);
      
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(7, characterArray1.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) character2);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(character2.equals((Object)character6));
      assertTrue(character2.equals((Object)character4));
      assertTrue(character2.equals((Object)character3));
      assertFalse(character2.equals((Object)character5));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertEquals((-1), int2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)75, (byte)13, (byte)23, (byte) (-82), (byte) (-63), (byte) (-1), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '!';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-2709L));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {33L}, longArray0);
      assertArrayEquals(new long[] {33L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(1, objectArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('b');
      assertNotNull(character0);
      assertEquals('b', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('', (char)character1);
      
      characterArray0[1] = character1;
      char char0 = '^';
      Character character2 = new Character('^');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertNotNull(character2);
      assertEquals('^', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('^', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('^');
      assertTrue(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('^', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('b');
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      assertEquals('b', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char0);
      assertFalse(character6.equals((Object)character0));
      assertTrue(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)character4));
      assertTrue(character6.equals((Object)character2));
      assertNotNull(character6);
      assertEquals('^', (char)character6);
      
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(7, characterArray1.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) character2);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character6));
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character4));
      assertTrue(character2.equals((Object)character3));
      assertTrue(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character5));
      assertEquals(0, int2);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)75, (byte)13, (byte)23, (byte) (-82), (byte) (-63), (byte) (-1), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int1 = ArrayUtils.indexOf((int[]) null, 485);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)9;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)9);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)9}, shortArray0);
      
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '_';
      charArray1[1] = '5';
      charArray1[2] = 'p';
      charArray1[3] = 'N';
      charArray1[4] = '_';
      charArray1[5] = '5';
      charArray1[6] = '_';
      charArray1[7] = 'N';
      charArray1[8] = '';
      ArrayUtils.shift(charArray1, (-1169), (-2258), 547);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'_', '5', 'p', 'N', '_', '5', '_', 'N', ''}, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)76;
      shortArray0[3] = (short) (byte)76;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)76;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)76, (short)76, (short)0, (short)76}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)76, (short)76, (short)0, (short)76}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      MockRandom mockRandom0 = new MockRandom((short)0);
      assertNotNull(mockRandom0);
      
      mockRandom0.nextBytes(byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray1, (short)138);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)76, (short)76, (short)0, (short)76}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)76, (short)76, (short)0, (short)76}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)76, (short)76, (short)0, (short)76}, shortArray2);
      assertSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = '<';
      charArray0[2] = 'B';
      charArray0[3] = ']';
      charArray0[4] = '*';
      char[] charArray1 = Character.toChars((int) ']');
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {']'}, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 's');
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {']'}, charArray1);
      assertArrayEquals(new char[] {']'}, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      ArrayUtils.shift(charArray2, (-380));
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {']'}, charArray1);
      assertArrayEquals(new char[] {']'}, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 56);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = 'y';
      ArrayUtils.shift(charArray0, 1, 1, (-749));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'P', 'y'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1828.8;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1828.8);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1828.8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray0[0] = (double) (-882L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)96;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)56, (-1604));
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte)37, (byte)56, (byte)37, (byte)82, (byte)96}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, 89.2017);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-882.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-882.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      Byte[] byteArray2 = new Byte[8];
      byteArray2[0] = (Byte) (byte)82;
      byteArray2[1] = (Byte) (byte)56;
      byteArray2[2] = (Byte) (byte)37;
      byteArray2[3] = (Byte) (byte)6;
      byteArray2[4] = (Byte) (byte)37;
      byteArray2[5] = (Byte) (byte)56;
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      byteArray2[6] = byte0;
      byteArray2[7] = (Byte) (byte)96;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertEquals(8, byteArray3.length);
      assertEquals(8, byteArray2.length);
      assertNotNull(byteArray3);
      assertSame(byteArray3, byteArray2);
      assertSame(byteArray2, byteArray3);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)6, (int) (byte) (-1));
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)6, (byte)37, (byte)56, (byte)37, (byte)82, (byte)96}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = '@';
      charArray0[2] = 'A';
      charArray0[3] = 'T';
      charArray0[4] = 'i';
      charArray0[5] = 'E';
      charArray0[6] = ';';
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'E';
      doubleArray0[1] = (double) '0';
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) '@';
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) 6);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {69.0, 48.0, Double.NaN, 64.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {69.0, 48.0, Double.NaN, 64.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 6);
      assertEquals(9, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[6] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-63);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3;
      intArray1[1] = (-63);
      intArray1[2] = 3;
      int int0 = ArrayUtils.lastIndexOf(intArray1, (-63));
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, int0);
      assertArrayEquals(new int[] {3, (-63), 3}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, true}, booleanArray0));
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, (double) 3);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1));
      assertEquals(1, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[6] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-63);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray0[0] = 3;
      intArray1[1] = (-63);
      intArray1[2] = 3;
      int int0 = ArrayUtils.lastIndexOf(intArray1, (-63));
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, int0);
      assertArrayEquals(new int[] {0, (-63), 3}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, true}, booleanArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1));
      assertEquals(1, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1032;
      floatArray0[1] = (float) (short)0;
      MockRandom mockRandom0 = new MockRandom(7L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1032.0F}, floatArray0, 0.01F);
      
      MockRandom mockRandom1 = new MockRandom(7L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(2, floatArray0.length);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertArrayEquals(new float[] {1032.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(mockRandom0, mockRandom1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short)0, (double) (short)1032);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)1032;
      intArray0[2] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 1032, 0}, intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Byte byte0 = Byte.valueOf((byte) (-17));
      assertNotNull(byte0);
      assertEquals((byte) (-17), (byte)byte0);
      
      Double double0 = new Double(1317.4);
      assertNotNull(double0);
      assertEquals(1317.4, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean2 = ArrayUtils.contains(doubleArray0, 4022.113);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean3 = ArrayUtils.contains(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean4 = ArrayUtils.contains(doubleArray0, 4022.113);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 56);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'K';
      objectArray0[1] = (Object) 'K';
      ArrayUtils.swap(objectArray0, (-2623), (-17), Integer.MAX_VALUE);
      assertEquals(2, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 834.849831;
      doubleArray0[1] = (double) 101;
      doubleArray0[2] = (double) 'K';
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 56;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2417.0);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {834.849831, 101.0, 75.0, (-1.0), 56.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-2623), byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'K';
      longArray0[1] = (long) 101;
      longArray0[2] = (long) (-2623);
      longArray0[3] = (long) (-17);
      longArray0[4] = (long) 101;
      boolean boolean2 = ArrayUtils.contains(longArray0, 101L);
      assertEquals(5, longArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new long[] {75L, 101L, (-2623L), (-17L), 101L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1.0F;
      int[] intArray0 = new int[7];
      intArray0[0] = (-15);
      Double double0 = new Double(1.0F);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      charArray0[4] = 'B';
      charArray0[5] = 'D';
      int int0 = ArrayUtils.indexOf(charArray0, 'S', 274);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'D', 'D', 'D', 'D', 'B', 'D'}, charArray0);
      
      MutableInt mutableInt0 = new MutableInt((-15));
      assertNotNull(mutableInt0);
      assertEquals((-15), (int)mutableInt0.toInteger());
      assertEquals("-15", mutableInt0.toString());
      assertEquals((byte) (-15), mutableInt0.byteValue());
      assertEquals((-15), mutableInt0.intValue());
      assertEquals((short) (-15), mutableInt0.shortValue());
      assertEquals((-15.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-15L), mutableInt0.longValue());
      assertEquals((-15), (int)mutableInt0.getValue());
      assertEquals((-15.0F), mutableInt0.floatValue(), 0.01F);
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals((-15), (int)mutableInt0.toInteger());
      assertEquals("-15", mutableInt0.toString());
      assertEquals((byte) (-15), mutableInt0.byteValue());
      assertEquals((-15), mutableInt0.intValue());
      assertEquals((short) (-15), mutableInt0.shortValue());
      assertEquals((-15.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-15L), mutableInt0.longValue());
      assertEquals((-15), (int)mutableInt0.getValue());
      assertEquals((-15.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-15), (int)mutableInt1.toInteger());
      assertEquals((-15), (int)mutableInt1.getValue());
      assertEquals((-15), mutableInt1.intValue());
      assertEquals("-15", mutableInt1.toString());
      assertEquals((-15.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-15L), mutableInt1.longValue());
      assertEquals((short) (-15), mutableInt1.shortValue());
      assertEquals((-15.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((byte) (-15), mutableInt1.byteValue());
      
      MutableInt mutableInt2 = new MutableInt(mutableInt1);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertNotNull(mutableInt2);
      assertEquals((-15), (int)mutableInt0.toInteger());
      assertEquals("-15", mutableInt0.toString());
      assertEquals((byte) (-15), mutableInt0.byteValue());
      assertEquals((-15), mutableInt0.intValue());
      assertEquals((short) (-15), mutableInt0.shortValue());
      assertEquals((-15.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-15L), mutableInt0.longValue());
      assertEquals((-15), (int)mutableInt0.getValue());
      assertEquals((-15.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-15), (int)mutableInt1.toInteger());
      assertEquals((-15), (int)mutableInt1.getValue());
      assertEquals((-15), mutableInt1.intValue());
      assertEquals("-15", mutableInt1.toString());
      assertEquals((-15.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-15L), mutableInt1.longValue());
      assertEquals((short) (-15), mutableInt1.shortValue());
      assertEquals((-15.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((byte) (-15), mutableInt1.byteValue());
      assertEquals("-15", mutableInt2.toString());
      assertEquals((-15), mutableInt2.intValue());
      assertEquals((-15), (int)mutableInt2.toInteger());
      assertEquals((byte) (-15), mutableInt2.byteValue());
      assertEquals((-15.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((short) (-15), mutableInt2.shortValue());
      assertEquals((-15.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-15L), mutableInt2.longValue());
      assertEquals((-15), (int)mutableInt2.getValue());
      
      MutableInt[] mutableIntArray0 = new MutableInt[5];
      mutableIntArray0[0] = mutableInt2;
      mutableIntArray0[2] = mutableInt2;
      MutableInt mutableInt3 = new MutableInt(104);
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertNotNull(mutableInt3);
      assertEquals(104.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals(104, (int)mutableInt3.toInteger());
      assertEquals(104, mutableInt3.intValue());
      assertEquals(104, (int)mutableInt3.getValue());
      assertEquals((byte)104, mutableInt3.byteValue());
      assertEquals("104", mutableInt3.toString());
      assertEquals((short)104, mutableInt3.shortValue());
      assertEquals(104.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(104L, mutableInt3.longValue());
      
      mutableInt3.subtract((-15));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertEquals(119.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals("119", mutableInt3.toString());
      assertEquals(119, (int)mutableInt3.getValue());
      assertEquals((byte)119, mutableInt3.byteValue());
      assertEquals(119, (int)mutableInt3.toInteger());
      assertEquals((short)119, mutableInt3.shortValue());
      assertEquals(119, mutableInt3.intValue());
      assertEquals(119.0, mutableInt3.doubleValue(), 0.01);
      assertEquals(119L, mutableInt3.longValue());
      assertNotSame(mutableInt3, mutableInt2);
      assertNotSame(mutableInt3, mutableInt0);
      assertNotSame(mutableInt3, mutableInt1);
      
      int int1 = mutableInt2.compareTo(mutableInt2);
      assertFalse(int1 == int0);
      assertTrue(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt3));
      assertTrue(mutableInt1.equals((Object)mutableInt2));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt1.equals((Object)mutableInt3));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt3));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertEquals(0, int1);
      assertEquals((-15), (int)mutableInt0.toInteger());
      assertEquals("-15", mutableInt0.toString());
      assertEquals((byte) (-15), mutableInt0.byteValue());
      assertEquals((-15), mutableInt0.intValue());
      assertEquals((short) (-15), mutableInt0.shortValue());
      assertEquals((-15.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-15L), mutableInt0.longValue());
      assertEquals((-15), (int)mutableInt0.getValue());
      assertEquals((-15.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-15), (int)mutableInt1.toInteger());
      assertEquals((-15), (int)mutableInt1.getValue());
      assertEquals((-15), mutableInt1.intValue());
      assertEquals("-15", mutableInt1.toString());
      assertEquals((-15.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-15L), mutableInt1.longValue());
      assertEquals((short) (-15), mutableInt1.shortValue());
      assertEquals((-15.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((byte) (-15), mutableInt1.byteValue());
      assertEquals("-15", mutableInt2.toString());
      assertEquals((-15), mutableInt2.intValue());
      assertEquals((-15), (int)mutableInt2.toInteger());
      assertEquals((byte) (-15), mutableInt2.byteValue());
      assertEquals((-15.0), mutableInt2.doubleValue(), 0.01);
      assertEquals((short) (-15), mutableInt2.shortValue());
      assertEquals((-15.0F), mutableInt2.floatValue(), 0.01F);
      assertEquals((-15L), mutableInt2.longValue());
      assertEquals((-15), (int)mutableInt2.getValue());
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt0, mutableInt3);
      assertNotSame(mutableInt1, mutableInt0);
      assertNotSame(mutableInt1, mutableInt2);
      assertNotSame(mutableInt1, mutableInt3);
      assertNotSame(mutableInt2, mutableInt3);
      assertNotSame(mutableInt2, mutableInt0);
      assertNotSame(mutableInt2, mutableInt1);
      
      mutableIntArray0[3] = mutableInt3;
      mutableIntArray0[4] = mutableInt1;
      ArrayUtils.shift((Object[]) mutableIntArray0, (-2517), 274, (-15));
      assertEquals(5, mutableIntArray0.length);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-5909.0F);
      floatArray0[2] = (-3080.0F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 3806.0F;
      floatArray0[5] = (-1277.3838F);
      int[] intArray0 = new int[1];
      intArray0[0] = 23;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-146));
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {23}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1.0F;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) 1.0F);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-146), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -146, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[4] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(8, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, true, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, true, false}, booleanArray0));
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (int) (byte)7);
      assertEquals((-1), int0);
      
      Double double0 = new Double((byte)7);
      assertNotNull(double0);
      assertEquals(7.0, (double)double0, 0.01);
      
      Double double1 = new Double((-2333.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2333.0), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2333.0), 7.0, 7.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.reverse(doubleArray1, (int) (byte)7, 16);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-2333.0), 7.0, 7.0}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, false, (int) (byte)7);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, (-868), 2145154515);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)2);
      assertEquals(8, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1.0F;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 127);
      assertEquals(4, booleanArray0.length);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2084);
      shortArray0[1] = (short)116;
      shortArray0[2] = (short)14;
      shortArray0[3] = (short)1242;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)3927);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2084), (short)116, (short)14, (short)1242}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2084), (short)116, (short)14, (short)1242, (short)3927}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      int[] intArray0 = new int[8];
      intArray0[0] = (-4591);
      intArray0[1] = (-4591);
      ArrayUtils.swap(intArray0, (-4591), (-4591), (-3817));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-4591), (-4591), 0, 0, 0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-4591);
      floatArray0[1] = 4440.135F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-4591);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 2279);
      assertEquals(4, floatArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new float[] {(-4591.0F), 4440.135F, 0.0F, (-4591.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      Long long0 = new Long((-840L));
      assertNotNull(long0);
      assertEquals((-840L), (long)long0);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[3] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-840L), (-840L), (-840L), (-840L)}, longArray1);
      
      Short short0 = new Short((short)8192);
      assertNotNull(short0);
      assertEquals((short)8192, (short)short0);
      
      Short short1 = new Short((short) (-11518));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-11518), (short)short1);
      
      Short short2 = new Short((short) (-604));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-604), (short)short2);
      
      Short short3 = new Short((short) (-604));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short) (-604), (short)short3);
      
      Short short4 = new Short((short)52);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short)52, (short)short4);
      
      Double double0 = new Double((short) (-604));
      assertNotNull(double0);
      assertEquals((-604.0), (double)double0, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      ArrayUtils.swap(charArray0, (int) (short) (-11518), 1339, (int) (short) (-11518));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'p', 'p'}, charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)52;
      shortArray0[1] = (short)8192;
      shortArray0[2] = (short) (-11518);
      ArrayUtils.shift(shortArray0, 2464, (int) (short)8192, 134);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)52, (short)8192, (short) (-11518)}, shortArray0);
      
      AbstractMap.SimpleEntry<Float, MutableInt>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Float, MutableInt>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 4);
      Float float0 = new Float((double) 2464);
      assertNotNull(float0);
      assertEquals(2464.0F, (float)float0, 0.01F);
      
      MutableInt mutableInt0 = new MutableInt((Number) short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short4));
      assertTrue(short2.equals((Object)short3));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(mutableInt0);
      assertEquals((-604.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-604), mutableInt0.intValue());
      assertEquals((-604), (int)mutableInt0.toInteger());
      assertEquals((-604), (int)mutableInt0.getValue());
      assertEquals((short) (-604), mutableInt0.shortValue());
      assertEquals((byte) (-92), mutableInt0.byteValue());
      assertEquals((-604L), mutableInt0.longValue());
      assertEquals((-604.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-604", mutableInt0.toString());
      
      AbstractMap.SimpleEntry<Float, MutableInt> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Float, MutableInt>(float0, mutableInt0);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short4));
      assertTrue(short2.equals((Object)short3));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(abstractMap_SimpleEntry0);
      assertEquals((-604.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-604), mutableInt0.intValue());
      assertEquals((-604), (int)mutableInt0.toInteger());
      assertEquals((-604), (int)mutableInt0.getValue());
      assertEquals((short) (-604), mutableInt0.shortValue());
      assertEquals((byte) (-92), mutableInt0.byteValue());
      assertEquals((-604L), mutableInt0.longValue());
      assertEquals((-604.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-604", mutableInt0.toString());
      
      AbstractMap.SimpleEntry<Float, MutableInt> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Float, MutableInt>(abstractMap_SimpleEntry0);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short4));
      assertTrue(short2.equals((Object)short3));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(abstractMap_SimpleEntry1);
      assertEquals((-604.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-604), mutableInt0.intValue());
      assertEquals((-604), (int)mutableInt0.toInteger());
      assertEquals((-604), (int)mutableInt0.getValue());
      assertEquals((short) (-604), mutableInt0.shortValue());
      assertEquals((byte) (-92), mutableInt0.byteValue());
      assertEquals((-604L), mutableInt0.longValue());
      assertEquals((-604.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-604", mutableInt0.toString());
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry1;
      Float float1 = new Float((float) (short)8192);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(8192.0F, (float)float1, 0.01F);
      
      AbstractMap.SimpleEntry<Float, MutableInt> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Float, MutableInt>(float1, mutableInt0);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short4));
      assertTrue(short2.equals((Object)short3));
      assertFalse(short2.equals((Object)short0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry2);
      assertEquals((-604.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-604), mutableInt0.intValue());
      assertEquals((-604), (int)mutableInt0.toInteger());
      assertEquals((-604), (int)mutableInt0.getValue());
      assertEquals((short) (-604), mutableInt0.shortValue());
      assertEquals((byte) (-92), mutableInt0.byteValue());
      assertEquals((-604L), mutableInt0.longValue());
      assertEquals((-604.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-604", mutableInt0.toString());
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry2;
      AbstractMap.SimpleEntry<Float, MutableInt> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Float, MutableInt>(float1, mutableInt0);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short4));
      assertTrue(short2.equals((Object)short3));
      assertFalse(short2.equals((Object)short0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertTrue(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry3);
      assertEquals((-604.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-604), mutableInt0.intValue());
      assertEquals((-604), (int)mutableInt0.toInteger());
      assertEquals((-604), (int)mutableInt0.getValue());
      assertEquals((short) (-604), mutableInt0.shortValue());
      assertEquals((byte) (-92), mutableInt0.byteValue());
      assertEquals((-604L), mutableInt0.longValue());
      assertEquals((-604.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-604", mutableInt0.toString());
      
      abstractMap_SimpleEntryArray0[2] = abstractMap_SimpleEntry3;
      AbstractMap.SimpleEntry<Float, MutableInt> abstractMap_SimpleEntry4 = new AbstractMap.SimpleEntry<Float, MutableInt>(abstractMap_SimpleEntry3);
      assertTrue(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(abstractMap_SimpleEntry4.equals((Object)abstractMap_SimpleEntry1));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short4));
      assertTrue(short2.equals((Object)short3));
      assertFalse(short2.equals((Object)short0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertTrue(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry2));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry4);
      assertEquals((-604.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-604), mutableInt0.intValue());
      assertEquals((-604), (int)mutableInt0.toInteger());
      assertEquals((-604), (int)mutableInt0.getValue());
      assertEquals((short) (-604), mutableInt0.shortValue());
      assertEquals((byte) (-92), mutableInt0.byteValue());
      assertEquals((-604L), mutableInt0.longValue());
      assertEquals((-604.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-604", mutableInt0.toString());
      
      abstractMap_SimpleEntryArray0[3] = abstractMap_SimpleEntry4;
      AbstractMap.SimpleEntry<Float, MutableInt> abstractMap_SimpleEntry5 = new AbstractMap.SimpleEntry<Float, MutableInt>(float1, mutableInt0);
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry3));
      assertTrue(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short4));
      assertTrue(short2.equals((Object)short3));
      assertFalse(short2.equals((Object)short0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(abstractMap_SimpleEntry5);
      assertEquals((-604.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-604), mutableInt0.intValue());
      assertEquals((-604), (int)mutableInt0.toInteger());
      assertEquals((-604), (int)mutableInt0.getValue());
      assertEquals((short) (-604), mutableInt0.shortValue());
      assertEquals((byte) (-92), mutableInt0.byteValue());
      assertEquals((-604L), mutableInt0.longValue());
      assertEquals((-604.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-604", mutableInt0.toString());
      
      AbstractMap.SimpleEntry<Float, MutableInt> abstractMap_SimpleEntry6 = ArrayUtils.get(abstractMap_SimpleEntryArray0, 955, abstractMap_SimpleEntry5);
      assertEquals(4, abstractMap_SimpleEntryArray0.length);
      assertFalse(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry3));
      assertTrue(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry5.equals((Object)abstractMap_SimpleEntry4));
      assertTrue(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry4));
      assertFalse(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry6.equals((Object)abstractMap_SimpleEntry3));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short4));
      assertTrue(short2.equals((Object)short3));
      assertFalse(short2.equals((Object)short0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(abstractMap_SimpleEntry6);
      assertEquals((-604.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-604), mutableInt0.intValue());
      assertEquals((-604), (int)mutableInt0.toInteger());
      assertEquals((-604), (int)mutableInt0.getValue());
      assertEquals((short) (-604), mutableInt0.shortValue());
      assertEquals((byte) (-92), mutableInt0.byteValue());
      assertEquals((-604L), mutableInt0.longValue());
      assertEquals((-604.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals("-604", mutableInt0.toString());
      assertNotSame(abstractMap_SimpleEntry5, abstractMap_SimpleEntry4);
      assertNotSame(abstractMap_SimpleEntry5, abstractMap_SimpleEntry1);
      assertSame(abstractMap_SimpleEntry5, abstractMap_SimpleEntry6);
      assertNotSame(abstractMap_SimpleEntry5, abstractMap_SimpleEntry2);
      assertNotSame(abstractMap_SimpleEntry5, abstractMap_SimpleEntry3);
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry1);
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry3);
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry4);
      assertSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry5);
      assertNotSame(abstractMap_SimpleEntry6, abstractMap_SimpleEntry2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) abstractMap_SimpleEntry6, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = null;
      int[] intArray0 = new int[6];
      intArray0[0] = 48;
      intArray0[1] = 6;
      intArray0[2] = (-2681);
      intArray0[3] = 5325;
      intArray0[4] = 3840;
      intArray0[5] = (-3244);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5325, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-87);
      byte byte0 = (byte) (-89);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-89));
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)99, (byte) (-87)}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      MockRandom mockRandom0 = new MockRandom(1955L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-89);
      longArray0[1] = (long) (byte) (-87);
      longArray0[2] = 1955L;
      longArray0[3] = (long) (byte)99;
      // Undeclared exception!
      try { 
        mockRandom0.longs((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (int) (byte)7);
      assertEquals((-1), int0);
      
      Double double0 = new Double((byte)7);
      assertNotNull(double0);
      assertEquals(7.0, (double)double0, 0.01);
      
      Double double1 = new Double((-2333.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2333.0), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2333.0), 7.0, 7.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) doubleArray0[2];
      doubleArray2[1] = (double) (byte)85;
      doubleArray2[2] = (double) (-1);
      doubleArray2[3] = (double) doubleArray0[0];
      doubleArray2[4] = 0.0;
      double[] doubleArray3 = ArrayUtils.add(doubleArray2, (double) (byte)7);
      assertEquals(6, doubleArray3.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {7.0, 85.0, (-1.0), (-2333.0), 0.0, 7.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {7.0, 85.0, (-1.0), (-2333.0), 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 1L);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte)85;
      shortArray1[1] = (short) (byte)7;
      shortArray1[2] = (short) (byte)85;
      shortArray1[3] = (short) (byte)7;
      shortArray1[4] = (short) (byte)85;
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short) (byte)7);
      assertEquals(5, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)85, (short)7, (short)85, (short)7, (short)85}, shortArray1);
      assertArrayEquals(new short[] {(short)85, (short)85, (short)7, (short)85}, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-1295));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1295));
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {101}, intArray0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-257));
      assertNull(shortArray0);
      
      char[] charArray1 = Character.toChars((int) 'P');
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'P'}, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray0, 'P');
      assertEquals(5, charArray0.length);
      assertEquals(3, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'K', 'P', 'P', 'K', 'K'}, charArray0);
      assertArrayEquals(new char[] {'K', 'K', 'K'}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      ArrayUtils.shift(charArray0, 1225);
      assertEquals(5, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'K', 'P', 'P', 'K', 'K'}, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-22));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-22)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) float0);
      assertFalse(boolean0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[10];
      MutableInt mutableInt0 = new MutableInt(104);
      assertNotNull(mutableInt0);
      assertEquals(104.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("104", mutableInt0.toString());
      assertEquals(104L, mutableInt0.longValue());
      assertEquals(104, (int)mutableInt0.getValue());
      assertEquals(104, (int)mutableInt0.toInteger());
      assertEquals((byte)104, mutableInt0.byteValue());
      assertEquals((short)104, mutableInt0.shortValue());
      assertEquals(104.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(104, mutableInt0.intValue());
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals(104.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("104", mutableInt0.toString());
      assertEquals(104L, mutableInt0.longValue());
      assertEquals(104, (int)mutableInt0.getValue());
      assertEquals(104, (int)mutableInt0.toInteger());
      assertEquals((byte)104, mutableInt0.byteValue());
      assertEquals((short)104, mutableInt0.shortValue());
      assertEquals(104.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(104, mutableInt0.intValue());
      assertEquals("104", mutableInt1.toString());
      assertEquals(104, (int)mutableInt1.getValue());
      assertEquals((byte)104, mutableInt1.byteValue());
      assertEquals(104, (int)mutableInt1.toInteger());
      assertEquals((short)104, mutableInt1.shortValue());
      assertEquals(104, mutableInt1.intValue());
      assertEquals(104L, mutableInt1.longValue());
      assertEquals(104.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(104.0F, mutableInt1.floatValue(), 0.01F);
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(mutableInt0);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertNotNull(mutableInt2);
      assertEquals(104.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("104", mutableInt0.toString());
      assertEquals(104L, mutableInt0.longValue());
      assertEquals(104, (int)mutableInt0.getValue());
      assertEquals(104, (int)mutableInt0.toInteger());
      assertEquals((byte)104, mutableInt0.byteValue());
      assertEquals((short)104, mutableInt0.shortValue());
      assertEquals(104.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(104, mutableInt0.intValue());
      assertEquals("104", mutableInt2.toString());
      assertEquals(104, mutableInt2.intValue());
      assertEquals(104.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(104L, mutableInt2.longValue());
      assertEquals((short)104, mutableInt2.shortValue());
      assertEquals((byte)104, mutableInt2.byteValue());
      assertEquals(104.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(104, (int)mutableInt2.getValue());
      assertEquals(104, (int)mutableInt2.toInteger());
      
      MutableInt[] mutableIntArray1 = ArrayUtils.removeAllOccurrences(mutableIntArray0, mutableInt2);
      assertEquals(10, mutableIntArray0.length);
      assertEquals(8, mutableIntArray1.length);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertEquals(104.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("104", mutableInt0.toString());
      assertEquals(104L, mutableInt0.longValue());
      assertEquals(104, (int)mutableInt0.getValue());
      assertEquals(104, (int)mutableInt0.toInteger());
      assertEquals((byte)104, mutableInt0.byteValue());
      assertEquals((short)104, mutableInt0.shortValue());
      assertEquals(104.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(104, mutableInt0.intValue());
      assertEquals("104", mutableInt2.toString());
      assertEquals(104, mutableInt2.intValue());
      assertEquals(104.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(104L, mutableInt2.longValue());
      assertEquals((short)104, mutableInt2.shortValue());
      assertEquals((byte)104, mutableInt2.byteValue());
      assertEquals(104.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(104, (int)mutableInt2.getValue());
      assertEquals(104, (int)mutableInt2.toInteger());
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt2, mutableInt1);
      assertNotSame(mutableInt2, mutableInt0);
      assertNotSame(mutableIntArray1, mutableIntArray0);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 4080;
      intArray0[2] = (-982);
      intArray0[3] = 0;
      intArray0[4] = (-357);
      intArray0[5] = (-1351);
      intArray0[6] = (-2120957684);
      intArray0[7] = 944;
      intArray0[8] = 155;
      int int0 = ArrayUtils.indexOf(intArray0, (-872), 0);
      assertEquals(9, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 4080, (-982), 0, (-357), (-1351), (-2120957684), 944, 155}, intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2606);
      shortArray0[1] = (short)1594;
      shortArray0[2] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2606), (short)1594, (short)0}, shortArray0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) (-982));
      assertNotNull(float0);
      assertEquals((-982.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (-357));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-357.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) (-2120957684));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals((-2.1209577E9F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (-2120957684);
      longArray0[2] = (long) 944;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (-1351);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 919L);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-2120957684L), 944L, 0L, (-1351L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-2120957684L), 944L, 0L, (-1351L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      Long long0 = new Long((-840L));
      assertNotNull(long0);
      assertEquals((-840L), (long)long0);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[3] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-840L), (-840L), (-840L), (-840L), (-840L)}, longArray1);
      
      Short short0 = new Short((short)8192);
      assertNotNull(short0);
      assertEquals((short)8192, (short)short0);
      
      Short short1 = new Short((short) (-11518));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-11518), (short)short1);
      
      Short short2 = new Short((short) (-604));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-604), (short)short2);
      
      Short short3 = new Short((short) (-604));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short) (-604), (short)short3);
      
      Short short4 = new Short((short)52);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short)52, (short)short4);
      
      Double double0 = new Double((short) (-604));
      assertNotNull(double0);
      assertEquals((-604.0), (double)double0, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      ArrayUtils.swap(charArray0, (int) (short) (-11518), 1339, (int) (short) (-11518));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'p', 'p'}, charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)52;
      shortArray0[1] = (short)8192;
      shortArray0[2] = (short) (-11518);
      ArrayUtils.shift(shortArray0, 2464, (int) (short)8192, 138);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)52, (short)8192, (short) (-11518)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short)1179;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)4;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2034, (int) (short)4);
      assertEquals(18, shortArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (-3078), 15, 15);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = '@';
      charArray0[2] = 'A';
      charArray0[3] = 'T';
      charArray0[4] = 'i';
      charArray0[5] = 'E';
      charArray0[6] = ';';
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-742.488760145711);
      doubleArray0[1] = (-1299.790305212126);
      doubleArray0[2] = (double) 'A';
      doubleArray0[3] = (double) 1.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3816.53714252, 6, 2158.4145068294924);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-742.488760145711), (-1299.790305212126), 65.0, 1.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2061));
      assertEquals(0, shortArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[2] = (short) (byte)76;
      shortArray0[3] = (short) (byte)76;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)76;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)76, (short)76, (short)0, (short)76}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)76, (short)76, (short)0, (short)76}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      MockRandom mockRandom0 = new MockRandom((short)0);
      assertNotNull(mockRandom0);
      
      mockRandom0.nextBytes(byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray1, (short)138);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)76, (short)76, (short)0, (short)76}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)76, (short)76, (short)0, (short)76}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)76, (short)76, (short)0, (short)76}, shortArray2);
      assertNotSame(shortArray0, shortArray2);
      assertSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = '<';
      charArray0[2] = 'B';
      charArray0[3] = ']';
      charArray0[4] = '*';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)0, 2291);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'e', '<', 'B', ']', '*'}, charArray1);
      assertArrayEquals(new char[] {'e', '<', 'B', ']', '*'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 's');
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray2.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'e', '<', 'B', ']', '*'}, charArray1);
      assertArrayEquals(new char[] {'e', '<', 'B', ']', '*'}, charArray2);
      assertArrayEquals(new char[] {'e', '<', 'B', ']', '*'}, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      
      ArrayUtils.shift(charArray2, (-380));
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray2.length);
      assertEquals(5, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertArrayEquals(new char[] {'e', '<', 'B', ']', '*'}, charArray1);
      assertArrayEquals(new char[] {'e', '<', 'B', ']', '*'}, charArray2);
      assertArrayEquals(new char[] {'e', '<', 'B', ']', '*'}, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)1;
      byteArray0[1] = (byte)0;
      intArray0[2] = (int) (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)85, (byte)0, (byte)1, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {1, 0, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (-1119));
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1119)}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)85;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      MockRandom mockRandom0 = new MockRandom((-4924L));
      assertNotNull(mockRandom0);
      
      mockRandom0.nextBytes(byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      LongStream longStream0 = mockRandom0.longs((long) (byte)0);
      assertNotNull(longStream0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {85.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (byte)0, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (byte)99;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 920.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 99.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 99.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 40, 40, (int) (short)0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false}, booleanArray0));
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      boolean[] booleanArray2 = ArrayUtils.insert((int) (byte)99, (boolean[]) null, booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray3 = ArrayUtils.removeElements(booleanArray1, booleanArray0);
      assertEquals(4, booleanArray3.length);
      assertEquals(8, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 6;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 6;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 6.0);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {6.0, 6.0, (-1.0), 6.0, 6.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.0, 6.0, 6.0, (-1.0), 6.0, 6.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-15);
      byte[] byteArray1 = ArrayUtils.insert(6, byteArray0, byteArray0);
      assertEquals(14, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)116, (byte) (-16), (byte) (-24), (byte) (-1), (byte) (-94), (byte) (-15)}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-102);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-102));
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)98, (byte)3, (byte)93, (byte) (-93), (byte) (-1), (byte) (-102)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)98, (byte)3, (byte)93, (byte) (-93), (byte) (-1), (byte) (-102)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-653);
      intArray0[1] = (int) (byte)3;
      ArrayUtils.reverse(intArray0, (int) (byte)3, (-653));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-653), 3}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 0.0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'H';
      charArray0[1] = 'j';
      charArray0[2] = 'G';
      charArray0[3] = 'p';
      charArray0[4] = '^';
      charArray0[5] = '+';
      charArray0[6] = '$';
      charArray0[7] = 'P';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -653, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = 54;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 54, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 54, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, (-1072));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)36;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)68, (byte)36}, byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)36}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)68;
      doubleArray0[1] = (double) (-1);
      doubleArray0[3] = (double) (byte)68;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-953), (int) (byte)36);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {68.0, (-1.0), 0.0, 68.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {68.0, (-1.0), 0.0, 68.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, 'D');
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'D'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, (-1072));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)36;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)68, (byte)36}, byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)36}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)68;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1072);
      doubleArray0[3] = (double) (byte)68;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-953), (int) (byte)36);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {68.0, (-1.0), (-1072.0), 68.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {68.0, (-1.0), (-1072.0), 68.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-953);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (byte)68);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-953.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-953.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int1 = ArrayUtils.indexOf(byteArray1, (byte)68, (-163));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(int1 == int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {(byte)68, (byte)36}, byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)36}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte[] byteArray2 = new Byte[8];
      byteArray2[0] = (Byte) (byte)36;
      byteArray2[1] = (Byte) (byte)68;
      byteArray2[2] = (Byte) (byte)36;
      byteArray2[3] = (Byte) (byte)36;
      byteArray2[4] = (Byte) (byte)68;
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      byteArray2[5] = byte0;
      byteArray2[6] = (Byte) (byte)68;
      byteArray2[7] = (Byte) (byte)68;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertEquals(8, byteArray2.length);
      assertEquals(8, byteArray3.length);
      assertNotNull(byteArray3);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short) (-982));
      assertNotNull(short0);
      assertEquals((short) (-982), (short)short0);
      
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)18, object0);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = (Float) (float)0;
      floatArray0[1] = (Float) (float)0;
      floatArray0[2] = (Float) (float)0;
      floatArray0[3] = (Float) (float)0;
      floatArray0[4] = (Float) (float)0;
      floatArray0[5] = (Float) (float)0;
      Float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)18);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)18;
      longArray0[1] = (-1742L);
      longArray0[2] = (long) 0;
      longArray0[3] = 101L;
      longArray0[4] = (-178L);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 0;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1894L));
      assertEquals(7, longArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {18L, (-1742L), 0L, 101L, (-178L), (-1L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1380.3F);
      floatArray0[3] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, (-1380.3F), 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short)17787;
      shortArray0[2] = (short)2;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2, 52);
      assertEquals(3, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)5, (short)17787, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-15);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)27);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)5, (byte)5, (byte) (-15)}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, (-1380.3F), 0.0F}, floatArray0, 0.01F);
      
      MockRandom mockRandom0 = new MockRandom((byte) (-15));
      assertNotNull(mockRandom0);
      
      long[] longArray1 = new long[3];
      longArray1[0] = (long) (byte)27;
      longArray1[1] = (long) (short)5;
      longArray1[2] = (long) (short)17787;
      ArrayUtils.shuffle(longArray1, (Random) mockRandom0);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {5L, 17787L, 27L}, longArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[3] = '&';
      charArray0[3] = 'k';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'k', (int) (byte)54);
      assertEquals(4, charArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'(', '(', '\u0000', 'k'}, charArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)126;
      shortArray0[1] = (short)8080;
      shortArray0[2] = (short) (byte)54;
      shortArray0[3] = (short) (byte)1;
      shortArray0[4] = (short)8080;
      ArrayUtils.reverse(shortArray0, (int) (short)54, 159);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)126, (short)8080, (short)54, (short)1, (short)8080}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)126, (short)8080, (short)54, (short)1, (short)8080}, shortArray0);
      
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted((Long[]) null, comparator0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'(', '\u0000', 'k', '('}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      Long long0 = new Long((-840L));
      assertNotNull(long0);
      assertEquals((-840L), (long)long0);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long0;
      longArray0[3] = long0;
      longArray0[4] = longArray0[3];
      ArrayUtils.shift((Object[]) longArray0, (-4601));
      assertEquals(5, longArray0.length);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[4] = '';
      charArray0[2] = 'R';
      charArray0[4] = 'R';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'z', (-1371));
      assertEquals(5, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'8', '\u0000', 'R', '\u0000', 'R'}, charArray0);
      
      ArrayUtils.reverse(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      String string0 = ArrayUtils.toString((Object) longArray0[0]);
      assertEquals(5, longArray0.length);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'R';
      intArray0[1] = (int) 'R';
      intArray0[2] = (int) 'z';
      intArray0[3] = (int) 'R';
      intArray0[4] = (int) (byte)55;
      intArray0[5] = (-4601);
      intArray0[6] = (int) 'R';
      intArray0[7] = (int) 'R';
      intArray0[8] = (int) '';
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, (-1442), (-1));
      assertEquals(9, intArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new int[] {82, 82, 122, 82, 55, (-4601), 82, 82, 127}, intArray0);
      assertNotSame(bitSet1, bitSet0);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 82;
      longArray1[1] = (-840L);
      longArray1[2] = (long) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray1, (int) (byte)55, 3726L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-232);
      intArray0[1] = 57;
      intArray0[2] = 2128;
      intArray0[3] = 7;
      Double double0 = new Double(27.33522220953097);
      assertNotNull(double0);
      assertEquals(27.33522220953097, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, (-1), 409, 1307);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-1831);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertEquals(1, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1831)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1831)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (-1));
      assertEquals(1, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short) (-1831)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1831)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      short[] shortArray2 = ArrayUtils.add((short[]) null, (short)4872);
      assertEquals(1, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)4872}, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1179;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)4;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2034, (int) (short)4);
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1179, (short)0, (short)4}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (-3078), 15, 15);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)17787;
      shortArray0[1] = (short)3364;
      shortArray0[2] = (short)17787;
      shortArray0[3] = (short) (byte)40;
      shortArray0[4] = (short)5;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)2049;
      shortArray0[7] = (short)5;
      shortArray0[8] = (short)17787;
      int int0 = (-767);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-236), (-767));
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)17787, (short)3364, (short)17787, (short)40, (short)5, (short)2, (short)2049, (short)5, (short)17787}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Long long0 = new Long((short)17787);
      assertNotNull(long0);
      assertEquals(17787L, (long)long0);
      
      Long long1 = Long.valueOf((long) (short)2);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2L, (long)long1);
      
      try { 
        Long.valueOf("?#;|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"?#;|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1380.3F);
      floatArray0[3] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, (-1380.3F), 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short)17787;
      shortArray0[2] = (short)2;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-6), 52);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)5, (short)17787, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)5, (short)17787, (short)2}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-6));
      assertNotNull(long0);
      assertEquals((-6L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = Long.valueOf((long) (-6));
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-6L), (long)long1);
      
      longArray0[1] = long1;
      try { 
        Long.valueOf("?#;|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"?#;|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1380.3F);
      floatArray0[3] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, (-1380.3F), 0.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-76);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-76));
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-76), (byte) (-76), (byte) (-76), (byte) (-76)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (byte) (-76), 43, (-2.147483648E9));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1L);
      longArray0[1] = 2L;
      longArray0[2] = 7L;
      longArray0[3] = 715L;
      longArray0[4] = (-648L);
      longArray0[5] = (-947L);
      longArray0[6] = (-47L);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 2L, 7L, 715L, (-648L), (-947L), (-47L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), 2L, 7L, 715L, (-648L), (-947L), (-47L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-182);
      intArray0[1] = 45;
      intArray0[2] = 5;
      intArray0[3] = 45;
      intArray0[4] = (-182);
      intArray0[5] = 45;
      intArray0[6] = 171;
      ArrayUtils.reverse(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {171, 45, (-182), 45, 5, 45, (-182)}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-648L));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'D', (-182));
      assertEquals(1, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 715L);
      assertEquals(7, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(bitSet0);
      assertEquals("{3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new long[] {(-1L), 2L, 7L, 715L, (-648L), (-947L), (-47L)}, longArray0);
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray0 = new double[0];
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (-182), 1.0);
      assertEquals(0, doubleArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '0', (-2146257915));
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'0'}, charArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 6;
      floatArray0[1] = (float) (-603);
      floatArray0[2] = (float) '0';
      floatArray0[3] = (float) (-2146257915);
      floatArray0[4] = (float) (-1);
      ArrayUtils.shift(floatArray0, (-2200));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {6.0F, (-603.0F), 48.0F, (-2.14625792E9F), (-1.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-603);
      intArray0[2] = (-2146257915);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1117;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1117}, shortArray0);
      assertArrayEquals(new short[] {(short)1117, (short)1117}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)1117;
      doubleArray0[1] = (double) (short)1117;
      doubleArray0[2] = (double) (short)1117;
      doubleArray0[3] = (double) (short)1117;
      doubleArray0[4] = (double) (short)1117;
      doubleArray0[5] = (double) (short)1117;
      doubleArray0[6] = (double) (short)1117;
      ArrayUtils.shift(doubleArray0, (int) (short)1117);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1117.0, 1117.0, 1117.0, 1117.0, 1117.0, 1117.0, 1117.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (double) 0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Float[] floatArray2 = new Float[4];
      Float float0 = new Float((double) 0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray2[0] = float0;
      Integer integer0 = new Integer(54);
      assertNotNull(integer0);
      assertEquals(54, (int)integer0);
      
      Integer integer1 = new Integer(117);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(117, (int)integer1);
      
      Integer integer2 = Integer.getInteger("java.lang.Object", Integer.MAX_VALUE);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) floatArray2, (Object) integer0, Integer.MAX_VALUE);
      assertEquals(4, floatArray2.length);
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      ArrayUtils.shift(doubleArray0, 2);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-173);
      shortArray0[1] = (short) (-173);
      shortArray0[2] = (short) (-173);
      shortArray0[3] = (short) (-173);
      shortArray0[4] = (short) (-173);
      shortArray0[5] = (short) (-173);
      shortArray0[6] = (short) (-6287);
      shortArray0[7] = (short) (-6287);
      shortArray0[8] = (short) (-6287);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-6287), (int) (short) (-173));
      assertEquals(9, shortArray0.length);
      assertEquals(6, int0);
      assertArrayEquals(new short[] {(short) (-173), (short) (-173), (short) (-173), (short) (-173), (short) (-173), (short) (-173), (short) (-6287), (short) (-6287), (short) (-6287)}, shortArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      charArray0[1] = '^';
      charArray0[2] = '5';
      charArray0[3] = '\\';
      charArray0[4] = '^';
      charArray0[5] = '_';
      charArray0[6] = '_';
      charArray0[7] = '5';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'Y');
      assertEquals(8, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'K', '^', '5', '\\', '^', '_', '_', '5'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-619);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      Float float0 = new Float((float) (short) (-619));
      assertNotNull(float0);
      assertEquals((-619.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((double) (-2832.7F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2832.7F), (float)float1, 0.01F);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, 0.0F);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(344);
      assertNotNull(integer0);
      assertEquals(344, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(344);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(344, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(344);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(344, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2143595682));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-2143595682), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      Float float0 = new Float(198.82146F);
      assertNotNull(float0);
      assertEquals(198.82146F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) integerArray0[3]);
      assertEquals(4, integerArray0.length);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2.14359565E9F), (float)float1, 0.01F);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, (-1380.3F));
      assertNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, (int) integerArray0[1], (-100), 1188);
      assertEquals(4, integerArray0.length);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      char[] charArray0 = new char[9];
      charArray0[1] = ',';
      charArray0[2] = 'A';
      charArray0[3] = 'T';
      charArray0[4] = 'i';
      charArray0[5] = 'E';
      charArray0[6] = 'E';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '0', 6);
      assertEquals(9, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', ',', 'A', 'T', 'i', 'E', 'E', '\u0000', '\u0000'}, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'T';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 84, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-525);
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte1 = new Byte((byte) (-1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-1), (byte)byte1);
      
      byteArray0[0] = byte1;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'T';
      Character character0 = new Character('A');
      assertNotNull(character0);
      assertEquals('A', (char)character0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 1103, 1480);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.insert(0, intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)12;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)74;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)100, (byte)98, (byte)12, (byte)0, (byte)127, (byte)74, (byte)0}, byteArray0);
      
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)5;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)5, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 4080;
      intArray0[2] = (-982);
      intArray0[3] = 1116;
      intArray0[4] = (-357);
      intArray0[5] = (-1351);
      intArray0[6] = (-2120957684);
      intArray0[7] = 944;
      intArray0[8] = 155;
      int int0 = ArrayUtils.indexOf(intArray0, (-872), 0);
      assertEquals(9, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 4080, (-982), 1116, (-357), (-1351), (-2120957684), 944, 155}, intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2606);
      shortArray0[1] = (short)1594;
      shortArray0[2] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2606), (short)1594, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      Long long0 = new Long((-840L));
      assertNotNull(long0);
      assertEquals((-840L), (long)long0);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long0;
      longArray0[3] = long0;
      longArray0[4] = longArray0[3];
      ArrayUtils.shift((Object[]) longArray0, (-4601));
      assertEquals(5, longArray0.length);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[4] = '';
      charArray0[2] = 'R';
      charArray0[4] = 'R';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'z', (-1371));
      assertEquals(5, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'8', '\u0000', 'R', '\u0000', 'R'}, charArray0);
      
      ArrayUtils.reverse(floatArray1);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      String string0 = ArrayUtils.toString((Object) longArray0[0]);
      assertEquals(5, longArray0.length);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)1;
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)1, object0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-4601);
      intArray0[1] = (-4601);
      intArray0[2] = (int) 'R';
      intArray0[3] = (int) (byte)127;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-4601), (int) (byte)127);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-4601), (-4601), 82, 127}, intArray0);
      assertArrayEquals(new int[] {(-4601), (-4601), 82, 127}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short) (-982));
      assertNotNull(short0);
      assertEquals((short) (-982), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-982));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-982), (short)short1);
      
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      Short short3 = new Short((short) (-1));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      assertEquals((short) (-1), (short)short3);
      
      shortArray0[2] = short3;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      ArrayUtils.shift((double[]) null, 0, (int) short2, 2558);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2558;
      floatArray0[1] = (float) (short)shortArray0[1];
      floatArray0[2] = (float) 2558;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2558.0F, (-982.0F), 2558.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2558.0F, (-982.0F), 2558.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)119;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte)12, (byte)119}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[9];
      MutableInt mutableInt0 = new MutableInt((Number) short0);
      assertFalse(short0.equals((Object)short2));
      assertFalse(short0.equals((Object)short3));
      assertTrue(short0.equals((Object)short1));
      assertNotNull(mutableInt0);
      assertEquals("-982", mutableInt0.toString());
      assertEquals((-982), mutableInt0.intValue());
      assertEquals((-982.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)42, mutableInt0.byteValue());
      assertEquals((-982), (int)mutableInt0.getValue());
      assertEquals((-982L), mutableInt0.longValue());
      assertEquals((short) (-982), mutableInt0.shortValue());
      assertEquals((-982.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-982), (int)mutableInt0.toInteger());
      
      mutableIntArray0[0] = mutableInt0;
      Integer integer0 = new Integer(32);
      assertNotNull(integer0);
      assertEquals(32, (int)integer0);
      
      MutableInt mutableInt1 = new MutableInt((Number) integer0);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals(32.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)32, mutableInt1.shortValue());
      assertEquals("32", mutableInt1.toString());
      assertEquals(32, (int)mutableInt1.getValue());
      assertEquals(32.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(32, (int)mutableInt1.toInteger());
      assertEquals((byte)32, mutableInt1.byteValue());
      assertEquals(32, mutableInt1.intValue());
      assertEquals(32L, mutableInt1.longValue());
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt((Number) (byte)119);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertNotNull(mutableInt2);
      assertEquals((byte)119, mutableInt2.byteValue());
      assertEquals((short)119, mutableInt2.shortValue());
      assertEquals(119, (int)mutableInt2.getValue());
      assertEquals(119, (int)mutableInt2.toInteger());
      assertEquals(119.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(119, mutableInt2.intValue());
      assertEquals(119.0, mutableInt2.doubleValue(), 0.01);
      assertEquals("119", mutableInt2.toString());
      assertEquals(119L, mutableInt2.longValue());
      
      mutableIntArray0[2] = mutableInt2;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      MutableInt mutableInt3 = new MutableInt((Number) (-1));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertNotNull(mutableInt3);
      assertEquals("-1", mutableInt3.toString());
      assertEquals((-1), mutableInt3.intValue());
      assertEquals((-1), (int)mutableInt3.toInteger());
      assertEquals((byte) (-1), mutableInt3.byteValue());
      assertEquals((-1.0F), mutableInt3.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt3.shortValue());
      assertEquals((-1.0), mutableInt3.doubleValue(), 0.01);
      assertEquals((-1), (int)mutableInt3.getValue());
      assertEquals((-1L), mutableInt3.longValue());
      
      mutableIntArray0[3] = mutableInt3;
      MutableInt mutableInt4 = new MutableInt(2920);
      assertFalse(mutableInt4.equals((Object)mutableInt3));
      assertFalse(mutableInt4.equals((Object)mutableInt0));
      assertFalse(mutableInt4.equals((Object)mutableInt1));
      assertFalse(mutableInt4.equals((Object)mutableInt2));
      assertNotNull(mutableInt4);
      assertEquals((byte)104, mutableInt4.byteValue());
      assertEquals(2920, (int)mutableInt4.toInteger());
      assertEquals(2920.0, mutableInt4.doubleValue(), 0.01);
      assertEquals(2920, (int)mutableInt4.getValue());
      assertEquals((short)2920, mutableInt4.shortValue());
      assertEquals(2920, mutableInt4.intValue());
      assertEquals(2920L, mutableInt4.longValue());
      assertEquals(2920.0F, mutableInt4.floatValue(), 0.01F);
      assertEquals("2920", mutableInt4.toString());
      
      mutableIntArray0[4] = mutableInt4;
      MutableInt mutableInt5 = new MutableInt(1);
      assertFalse(mutableInt5.equals((Object)mutableInt1));
      assertFalse(mutableInt5.equals((Object)mutableInt2));
      assertFalse(mutableInt5.equals((Object)mutableInt0));
      assertFalse(mutableInt5.equals((Object)mutableInt3));
      assertFalse(mutableInt5.equals((Object)mutableInt4));
      assertNotNull(mutableInt5);
      assertEquals(1, (int)mutableInt5.getValue());
      assertEquals((byte)1, mutableInt5.byteValue());
      assertEquals(1.0F, mutableInt5.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt5.toInteger());
      assertEquals(1L, mutableInt5.longValue());
      assertEquals("1", mutableInt5.toString());
      assertEquals(1.0, mutableInt5.doubleValue(), 0.01);
      assertEquals((short)1, mutableInt5.shortValue());
      assertEquals(1, mutableInt5.intValue());
      
      mutableIntArray0[5] = mutableInt5;
      MutableInt mutableInt6 = new MutableInt(2147028190);
      assertFalse(mutableInt6.equals((Object)mutableInt1));
      assertFalse(mutableInt6.equals((Object)mutableInt5));
      assertFalse(mutableInt6.equals((Object)mutableInt0));
      assertFalse(mutableInt6.equals((Object)mutableInt3));
      assertFalse(mutableInt6.equals((Object)mutableInt2));
      assertFalse(mutableInt6.equals((Object)mutableInt4));
      assertNotNull(mutableInt6);
      assertEquals(2147028190, mutableInt6.intValue());
      assertEquals((short)3294, mutableInt6.shortValue());
      assertEquals(2147028190L, mutableInt6.longValue());
      assertEquals((byte) (-34), mutableInt6.byteValue());
      assertEquals(2.14702822E9F, mutableInt6.floatValue(), 0.01F);
      assertEquals(2.14702819E9, mutableInt6.doubleValue(), 0.01);
      assertEquals("2147028190", mutableInt6.toString());
      assertEquals(2147028190, (int)mutableInt6.toInteger());
      assertEquals(2147028190, (int)mutableInt6.getValue());
      
      mutableIntArray0[6] = mutableInt6;
      MutableInt mutableInt7 = new MutableInt((-1576));
      assertFalse(mutableInt7.equals((Object)mutableInt5));
      assertFalse(mutableInt7.equals((Object)mutableInt6));
      assertFalse(mutableInt7.equals((Object)mutableInt3));
      assertFalse(mutableInt7.equals((Object)mutableInt0));
      assertFalse(mutableInt7.equals((Object)mutableInt1));
      assertFalse(mutableInt7.equals((Object)mutableInt2));
      assertFalse(mutableInt7.equals((Object)mutableInt4));
      assertNotNull(mutableInt7);
      assertEquals((-1576), mutableInt7.intValue());
      assertEquals((-1576), (int)mutableInt7.toInteger());
      assertEquals((-1576L), mutableInt7.longValue());
      assertEquals((-1576.0), mutableInt7.doubleValue(), 0.01);
      assertEquals((short) (-1576), mutableInt7.shortValue());
      assertEquals("-1576", mutableInt7.toString());
      assertEquals((byte) (-40), mutableInt7.byteValue());
      assertEquals((-1576), (int)mutableInt7.getValue());
      assertEquals((-1576.0F), mutableInt7.floatValue(), 0.01F);
      
      mutableIntArray0[7] = mutableInt7;
      MutableInt mutableInt8 = new MutableInt(1);
      assertTrue(mutableInt8.equals((Object)mutableInt5));
      assertFalse(mutableInt8.equals((Object)mutableInt1));
      assertFalse(mutableInt8.equals((Object)mutableInt0));
      assertFalse(mutableInt8.equals((Object)mutableInt6));
      assertFalse(mutableInt8.equals((Object)mutableInt3));
      assertFalse(mutableInt8.equals((Object)mutableInt4));
      assertFalse(mutableInt8.equals((Object)mutableInt7));
      assertFalse(mutableInt8.equals((Object)mutableInt2));
      assertNotNull(mutableInt8);
      assertEquals("1", mutableInt8.toString());
      assertEquals(1, mutableInt8.intValue());
      assertEquals(1L, mutableInt8.longValue());
      assertEquals((byte)1, mutableInt8.byteValue());
      assertEquals((short)1, mutableInt8.shortValue());
      assertEquals(1, (int)mutableInt8.toInteger());
      assertEquals(1, (int)mutableInt8.getValue());
      assertEquals(1.0F, mutableInt8.floatValue(), 0.01F);
      assertEquals(1.0, mutableInt8.doubleValue(), 0.01);
      
      mutableIntArray0[8] = mutableInt8;
      boolean boolean0 = ArrayUtils.isNotEmpty(mutableIntArray0);
      assertEquals(9, mutableIntArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-149);
      intArray0[1] = (-1009);
      intArray0[2] = 13;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 13;
      intArray1[1] = 12;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-149), (-1009), 13}, intArray0);
      assertArrayEquals(new int[] {13, 12}, intArray1);
      assertArrayEquals(new int[] {(-149), (-1009)}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-821L);
      longArray0[1] = (long) 13;
      longArray0[2] = (long) 13;
      longArray0[3] = (long) 13;
      longArray0[4] = (long) 13;
      longArray0[5] = 2798L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-821L), 13L, 13L, 13L, 13L, 2798L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(6, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-821L), 13L, 13L, 13L, 13L, 2798L}, longArray0);
      
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = (-1009);
      intArray3[1] = 649;
      intArray3[2] = (-149);
      intArray3[3] = 12;
      intArray3[4] = (-1009);
      intArray3[5] = 13;
      intArray3[6] = (-149);
      intArray3[7] = (-149);
      intArray3[8] = 12;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(649, intArray2, intArray3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 649, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[6] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, 3, 3, 0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-63);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3;
      intArray1[1] = (-63);
      intArray1[2] = 3;
      int int0 = ArrayUtils.lastIndexOf(intArray1, (-63));
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, int0);
      assertArrayEquals(new int[] {3, (-63), 3}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[6];
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      boolean boolean2 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      ArrayUtils.shift(floatArray0, 65536, 440, (-63));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0);
      assertEquals(3, intArray1.length);
      assertEquals(3, intArray2.length);
      assertEquals(1, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {3, (-63), 3}, intArray1);
      assertArrayEquals(new int[] {3, (-63), 3}, intArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-4412.965F);
      floatArray0[2] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-4412.965F));
      assertEquals(3, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {0.0F, (-4412.965F), 0.0F}, floatArray0, 0.01F);
      
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)18, object0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-4924);
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-1011);
      intArray2[1] = (-5135);
      intArray2[2] = (-4924);
      intArray2[3] = Integer.MAX_VALUE;
      intArray2[4] = (-2498);
      int[] intArray3 = ArrayUtils.insert(1, intArray2, intArray2);
      assertEquals(10, intArray3.length);
      assertEquals(5, intArray2.length);
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {(-1011), (-1011), (-5135), (-4924), Integer.MAX_VALUE, (-2498), (-5135), (-4924), Integer.MAX_VALUE, (-2498)}, intArray3);
      assertArrayEquals(new int[] {(-1011), (-5135), (-4924), Integer.MAX_VALUE, (-2498)}, intArray2);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((byte[]) null, 2);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      long[] longArray0 = new long[11];
      longArray0[0] = (long) (byte)98;
      longArray0[1] = (long) (byte)3;
      longArray0[2] = (long) (byte)98;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1L);
      assertEquals(11, longArray0.length);
      assertEquals(11, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)98;
      intArray0[1] = (int) (byte)3;
      intArray0[2] = (int) (byte)3;
      intArray0[3] = (int) (byte)98;
      intArray0[4] = (int) (byte)3;
      intArray0[5] = (int) (byte)98;
      int[] intArray1 = ArrayUtils.insert((int) (byte)3, intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {98, 3, 3, 98, 3, 98}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3L;
      doubleArray0[1] = (double) (byte)98;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) (byte)98;
      doubleArray0[5] = (double) (byte)98;
      doubleArray0[6] = (double) 1L;
      doubleArray0[7] = (double) 98L;
      double[] doubleArray1 = ArrayUtils.insert((int) (byte)3, doubleArray0, doubleArray0);
      assertEquals(16, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.0, 98.0, 3.0, 3.0, 98.0, 98.0, 1.0, 98.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3471), (-3471));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 101.0F;
      floatArray0[1] = (float) (-3471);
      floatArray0[2] = (float) (-4924);
      floatArray0[3] = (float) (-4924);
      floatArray0[4] = (float) (-3471);
      floatArray0[5] = (float) (-4924);
      floatArray0[6] = (float) (-3471);
      floatArray0[7] = (float) (-3471);
      ArrayUtils.swap(floatArray0, (-3471), (-2));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {101.0F, (-3471.0F), (-4924.0F), (-4924.0F), (-3471.0F), (-4924.0F), (-3471.0F), (-3471.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = 'w';
      charArray0[2] = '';
      charArray0[3] = 'p';
      charArray0[4] = 'q';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'p', 'w', '', 'p', 'q'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)15);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)15}, byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)15}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Character character0 = new Character('F');
      assertNotNull(character0);
      assertEquals('F', (char)character0);
      
      Character character1 = new Character('F');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('F', (char)character1);
      
      Character character2 = Character.valueOf('+');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('+', (char)character2);
      
      Character character3 = Character.valueOf('F');
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('F', (char)character3);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = 'F';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-788), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -788, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1828.8;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1583.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1583.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1583.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1058);
      intArray0[1] = (-1058);
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      Character character0 = Character.valueOf('w');
      assertNotNull(character0);
      assertEquals('w', (char)character0);
      
      Character character1 = new Character('7');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('7', (char)character1);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) '7';
      intArray1[1] = 944;
      intArray1[2] = (-2120957684);
      intArray1[3] = 1116;
      intArray1[4] = (-1351);
      int int0 = ArrayUtils.indexOf(intArray1, (-872), (-1058));
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {55, 944, (-2120957684), 1116, (-1351)}, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1668L;
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'j';
      charArray0[2] = '#';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'w', 'j', '#'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1425.356F;
      int int0 = ArrayUtils.indexOf((double[]) null, 3989.32774, 3989.32774);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      charArray0[1] = 'D';
      charArray0[2] = 'g';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = 'E';
      charArray0[6] = 'S';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'A', 'D', 'g', '=', '=', 'E', 'S'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(124L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(124L);
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs(124L);
      assertNotNull(longStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double double0 = mockRandom1.nextDouble();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(mockRandom1, mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom1.doubles();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(doubleStream0);
      assertNotSame(mockRandom1, mockRandom0);
      
      int int0 = mockRandom1.nextInt(1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0, int0);
      assertNotSame(mockRandom1, mockRandom0);
      
      boolean[] booleanArray0 = new boolean[5];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (-1));
      assertNull(shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-95));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[0] = (short) (-619);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (int) (short)0, (int) (short)0, (int) (short) (-619));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short) (-619);
      intArray0[3] = (int) (short) (-619);
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (short)0;
      intArray0[8] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, (-619), (-619), 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {0, 0, (-619), (-619), 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-619);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, (int) (short)0, (int) (short)0, (int) (short)0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short) (-619);
      intArray0[1] = (int) (short) (-619);
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short) (-619);
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short) (-619);
      intArray0[7] = (int) (short) (-619);
      intArray0[8] = (int) (short) (-619);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-619), (-619), 0, (-619), 0, 0, (-619), (-619), (-619)}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {(-619), (-619), 0, (-619), 0, 0, (-619), (-619), (-619)}, intArray0);
      
      ArrayUtils.shift((Object[]) longArray0, 539, 539, (-602));
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2158.4145068294924;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 2158.4145068294924;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 5201.261180074444, (-1), (-818.186848));
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2158.4145068294924, 1.0, 2158.4145068294924}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), (-1));
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2158.4145068294924, 1.0, 2158.4145068294924}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-2143595682));
      assertNotNull(integer0);
      assertEquals((-2143595682), (int)integer0);
      
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-2143595682);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) integerArray0[3]);
      assertEquals(4, integerArray0.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(integerArray0.equals((Object)integerArray1));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, (-2.143595682E9)}, doubleArray0, 0.01);
      assertNotSame(integerArray0, integerArray1);
      
      Character character0 = new Character('!');
      assertNotNull(character0);
      assertEquals('!', (char)character0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (int) character0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, (-2.143595682E9)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-2143595682));
      assertNotNull(integer0);
      assertEquals((-2143595682), (int)integer0);
      
      integerArray0[3] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-2143595682);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) integerArray0[3]);
      assertEquals(4, integerArray0.length);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, (-2.143595682E9)}, doubleArray0, 0.01);
      assertSame(integerArray0, integerArray1);
      
      char char0 = '!';
      Character character0 = Character.valueOf('!');
      assertNotNull(character0);
      assertEquals('!', (char)character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'!', '!', '!'}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (int) char0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, (-2.143595682E9)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(344);
      assertNotNull(integer0);
      assertEquals(344, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(344);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(344, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(344);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(344, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-2143595682));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-2143595682), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '8', (-1128));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (int)integerArray0[3];
      doubleArray0[1] = (double) (-2143595682);
      doubleArray0[2] = (double) (int)integerArray0[3];
      doubleArray0[3] = (double) (-1128);
      doubleArray0[4] = (double) (-1128);
      doubleArray0[5] = (double) '8';
      doubleArray0[6] = (double) (int)integerArray0[1];
      doubleArray0[7] = (double) (-1128);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2.143595682E9), (-2.143595682E9), (-2.143595682E9), (-1128.0), (-1128.0), 56.0, 344.0, (-1128.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2.143595682E9), (-2.143595682E9), (-2.143595682E9), (-1128.0), (-1128.0), 56.0, 344.0, (-1128.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shift((short[]) null, (-1083));
      Short[] shortArray0 = new Short[6];
      try { 
        Short.valueOf("79}bxT5L/&4;W[*W", Integer.MAX_VALUE);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 2147483647 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[6] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, 3, 3, 0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-63);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3;
      intArray1[1] = (-63);
      intArray1[2] = 3;
      int int0 = ArrayUtils.lastIndexOf(intArray1, (-63));
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, int0);
      assertArrayEquals(new int[] {3, (-63), 3}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[6];
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 0, (int) (byte) (-1), (double) 0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      ArrayUtils.shift(shortArray0, 34);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      ArrayUtils.shift(objectArray0, 0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)99;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {99}, intArray0);
      
      Double double0 = new Double(3512.4328416426224);
      assertNotNull(double0);
      assertEquals(3512.4328416426224, (double)double0, 0.01);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)64;
      ArrayUtils.swap(byteArray0, 2, 2);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)30, (byte)30, (byte)99, (byte)64}, byteArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) (byte)30);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Short[] shortArray1 = new Short[0];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (byte)30);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      String[] stringArray0 = new String[6];
      ArrayUtils.swap((Object[]) stringArray0, (-1818), (-1818), (-1818));
      assertEquals(6, stringArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short) (-2079);
      shortArray0[2] = (short)2405;
      shortArray0[3] = (short)1510;
      shortArray0[4] = (short) (-2738);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)1963;
      shortArray0[7] = (short)618;
      ArrayUtils.shift(shortArray0, (int) (short)0, 5, (int) (short)2405);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)8, (short) (-2079), (short)2405, (short)1510, (short) (-2738), (short)0, (short)1963, (short)618}, shortArray0);
      
      Float float0 = new Float(207.03175F);
      assertNotNull(float0);
      assertEquals(207.03175F, (float)float0, 0.01F);
      
      Byte byte0 = new Byte((byte)69);
      assertNotNull(byte0);
      assertEquals((byte)69, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)69, object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) stringArray0, (Object[]) stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '/';
      charArray0[2] = 'R';
      charArray0[3] = '6';
      charArray0[4] = 'a';
      charArray0[5] = '>';
      charArray0[6] = '#';
      charArray0[7] = '\'';
      charArray0[8] = 'r';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'K', '/', 'R', '6', 'a', '>', '#', '\'', 'r'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 'r';
      objectArray0[1] = (Object) '#';
      objectArray0[2] = (Object) 'r';
      objectArray0[3] = (Object) '\'';
      objectArray0[4] = (Object) '/';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(1L, 375L);
      assertNotNull(longStream0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray1, booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(1, objectArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('b');
      assertNotNull(character0);
      assertEquals('b', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('', (char)character1);
      
      characterArray0[1] = character1;
      char char0 = '^';
      Character character2 = new Character('^');
      assertTrue(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('^', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character2);
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('^', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('^');
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('^', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('b');
      assertTrue(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)char0));
      assertNotNull(character5);
      assertEquals('b', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char0);
      assertTrue(character6.equals((Object)char0));
      assertTrue(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)character4));
      assertNotNull(character6);
      assertEquals('^', (char)character6);
      
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(7, characterArray1.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Float float0 = new Float((double) character0);
      assertFalse(character0.equals((Object)char0));
      assertFalse(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character5));
      assertFalse(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character4));
      assertFalse(character0.equals((Object)character6));
      assertFalse(character0.equals((Object)character2));
      assertNotNull(float0);
      assertEquals(98.0F, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = Byte.valueOf((byte) (-114));
      assertNotNull(byte0);
      assertEquals((byte) (-114), (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-1), (byte)byte1);
      
      Byte byte2 = new Byte((byte)7);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)7, (byte)byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)1);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)1, (byte)byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte) (-1));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      assertEquals((byte) (-1), (byte)byte4);
      
      byteArray0[4] = byte4;
      Byte byte5 = new Byte((byte)1);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      assertEquals((byte)1, (byte)byte5);
      
      byteArray0[5] = byte5;
      Byte byte6 = new Byte((byte) (-1));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertNotNull(byte6);
      assertEquals((byte) (-1), (byte)byte6);
      
      byteArray0[6] = byte6;
      Byte byte7 = new Byte((byte)106);
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertNotNull(byte7);
      assertEquals((byte)106, (byte)byte7);
      
      byteArray0[7] = byte7;
      Byte byte8 = ArrayUtils.get(byteArray0, 385, (Byte) null);
      assertEquals(8, byteArray0.length);
      assertNull(byte8);
      
      Float float0 = new Float((float) (byte)7);
      assertNotNull(float0);
      assertEquals(7.0F, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray1, (-4115.49), 2, (-345.5461));
      assertEquals(0, doubleArray1.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, (double) (-1));
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-1781), 34, 2);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (-494L);
      longArray0[2] = (-494L);
      longArray0[3] = (-1851L);
      longArray0[4] = 1605L;
      longArray0[5] = 2L;
      longArray0[6] = 1314L;
      longArray0[7] = 1032L;
      longArray0[8] = (-2612L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-494L), (-494L), (-1851L), 1605L, 2L, 1314L, 1032L, (-2612L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)69;
      shortArray0[1] = (short) (-1530);
      shortArray0[2] = (short)3019;
      shortArray0[3] = (short)3019;
      shortArray0[4] = (short)710;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-1604);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)69, (short) (-1530), (short)3019, (short)3019, (short)710, (short)1, (short) (-1604)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1583.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.swap(floatArray1, (-2012), (-1149));
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, 1.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[6] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, 3, 3, 0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-63);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3;
      intArray1[1] = (-63);
      intArray1[2] = 3;
      int int0 = ArrayUtils.lastIndexOf(intArray1, (-63));
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, int0);
      assertArrayEquals(new int[] {3, (-63), 3}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 0, (int) (byte) (-1), (double) 0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-45);
      byteArray0[8] = (byte)1;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)4);
      assertEquals(9, byteArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)4, (byte)19, (byte)37, (byte) (-15), (byte)122, (byte)63, (byte) (-45), (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.shift(booleanArray0, 2612, 2612, (-63));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, true, true}, booleanArray0));
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.reverse((byte[]) null, 254, 7);
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-2818), 2075579724);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) characterArray0, (Object) null, 3);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-72), (-250));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character('x');
      assertNotNull(character0);
      assertEquals('x', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('p');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('p', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertFalse(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('p', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('$');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('$', (char)character3);
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'x', 'p', 'p', '$'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "byt4");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2577;
      floatArray0[2] = (float) 2577;
      floatArray0[4] = (-701.2956F);
      floatArray0[5] = (float) (byte) (-55);
      boolean boolean1 = ArrayUtils.isNotEmpty((double[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, Integer.MAX_VALUE);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift(floatArray0, (-3072), (-3072), (-746));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      ArrayUtils.swap((int[]) null, (-172), 0);
      int int0 = ArrayUtils.indexOf((double[]) null, (-1.0), (-801.6827325151221));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-172);
      floatArray0[2] = (float) (-2174);
      floatArray0[3] = (float) (-2174);
      ArrayUtils.shift(floatArray0, 2151, 0, (-2174));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-172.0F), (-2174.0F), (-2174.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1231;
      shortArray0[1] = (short)1231;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)68, (int) (short)8740);
      assertEquals(2, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1231, (short)1231}, shortArray0);
      
      ArrayUtils.reverse(shortArray0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1231, (short)1231}, shortArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = Integer.MAX_VALUE;
      intArray1[2] = (-1);
      intArray1[3] = (-1);
      intArray1[4] = (int) (short)8740;
      intArray1[5] = Integer.MAX_VALUE;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, Integer.MAX_VALUE, (-1), (-1), 8740, Integer.MAX_VALUE}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)1231, (short)1231}, shortArray0);
      
      int[] intArray3 = ArrayUtils.removeElements(intArray1, intArray1);
      assertEquals(0, intArray3.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {}, intArray3);
      assertArrayEquals(new int[] {0, Integer.MAX_VALUE, (-1), (-1), 8740, Integer.MAX_VALUE}, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      
      Byte byte0 = new Byte((byte) (-48));
      assertNotNull(byte0);
      assertEquals((byte) (-48), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-48), object0);
      
      String string0 = ArrayUtils.toString(object0, "");
      assertNotNull(string0);
      assertEquals("-48", string0);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Float float0 = new Float((float) (short)17787);
      assertNotNull(float0);
      assertEquals(17787.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) (-1.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (-287.79187F));
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)17787;
      intArray0[1] = (int) (short)17787;
      intArray0[2] = (int) (short)17787;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {17787, 17787, 17787}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      Double double0 = new Double((-439.883));
      assertNotNull(double0);
      assertEquals((-439.883), (double)double0, 0.01);
      
      Double double1 = new Double((-4259.756109));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-4259.756109), (double)double1, 0.01);
      
      Double[] doubleArray0 = ArrayUtils.removeAllOccurrences((Double[]) null, double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1114111;
      floatArray0[1] = (float) 1114111;
      floatArray0[2] = (float) 1114111;
      floatArray0[3] = (float) 1114111;
      floatArray0[4] = (float) 1114111;
      floatArray0[5] = (float) 1114111;
      floatArray0[6] = (float) 1114111;
      ArrayUtils.shift(floatArray0, 1114111);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {1114111.0F, 1114111.0F, 1114111.0F, 1114111.0F, 1114111.0F, 1114111.0F, 1114111.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1.0F;
      int[] intArray0 = new int[7];
      intArray0[0] = (-15);
      Double double0 = new Double(1.0F);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = '#';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      charArray0[4] = 'B';
      charArray0[5] = 'D';
      int int0 = ArrayUtils.indexOf(charArray0, 'S', 274);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'D', '#', 'D', 'D', 'B', 'D'}, charArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'B';
      longArray0[1] = 0L;
      longArray0[2] = (long) '#';
      longArray0[3] = (long) (-6);
      longArray0[4] = (-525L);
      longArray0[5] = (long) (-6);
      longArray0[6] = (long) 274;
      longArray0[7] = (long) 'D';
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(8, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {66L, 0L, 35L, (-6L), (-525L), (-6L), 274L, 68L}, longArray0);
      
      ArrayUtils.shift(floatArray0, 440, 440, 440);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) 'D';
      intArray1[1] = 274;
      intArray1[2] = 274;
      intArray1[3] = (int) '#';
      intArray1[4] = 440;
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray1);
      assertEquals(5, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {68, 274, 274, 35, 440}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(1, objectArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('b');
      assertNotNull(character0);
      assertEquals('b', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('', (char)character1);
      
      characterArray0[1] = character1;
      char char0 = '^';
      Character character2 = new Character('^');
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('^', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character2);
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('^', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('^');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('^', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('b');
      assertTrue(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)char0));
      assertNotNull(character5);
      assertEquals('b', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char0);
      assertTrue(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)character3));
      assertTrue(character6.equals((Object)character4));
      assertTrue(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character0));
      assertNotNull(character6);
      assertEquals('^', (char)character6);
      
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(7, characterArray1.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)66;
      ArrayUtils.swap(byteArray0, (int) (byte) (-123), (int) character3, 3019);
      assertEquals(8, byteArray0.length);
      assertFalse(character3.equals((Object)character5));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character6));
      assertTrue(character3.equals((Object)character4));
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character3));
      assertTrue(character2.equals((Object)character4));
      assertTrue(character2.equals((Object)character6));
      assertTrue(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character5));
      assertFalse(character2.equals((Object)character1));
      assertArrayEquals(new byte[] {(byte)121, (byte)0, (byte)0, (byte) (-123), (byte) (-64), (byte) (-1), (byte)117, (byte)66}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "byt4");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      MockRandom mockRandom0 = new MockRandom(1349L);
      assertNotNull(mockRandom0);
      
      Double double0 = new Double((-2769.0234604));
      assertNotNull(double0);
      assertEquals((-2769.0234604), (double)double0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)77;
      ArrayUtils.swap(byteArray0, (-1828), (int) (byte)30);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)30, (byte)30, (byte)77, (byte)77}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)1032);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) (short)0, Integer.MIN_VALUE, 3564);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Float float0 = new Float((float) (short)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Byte byte0 = new Byte((byte)79);
      assertNotNull(byte0);
      assertEquals((byte)79, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)79, object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) float0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) float0;
      objectArray0[5] = (Object) float0;
      objectArray0[6] = object0;
      objectArray0[7] = (Object) byte0;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(8, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3564;
      doubleArray0[1] = (double) (short)1032;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)1032;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (byte)79;
      doubleArray0[6] = (double) (byte)79;
      doubleArray0[7] = (double) Integer.MIN_VALUE;
      doubleArray0[8] = (-3206.101767145841);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {3564.0, 1032.0, 0.0, 1032.0, 0.0, 79.0, 79.0, (-2.147483648E9), (-3206.101767145841)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = 'p';
      charArray0[2] = 'f';
      charArray0[3] = '0';
      charArray0[4] = 'a';
      charArray0[5] = '?';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'!', 'p', 'f', '0', 'a', '?'}, charArray1);
      assertArrayEquals(new char[] {'!', 'p', 'f', '0', 'a', '?'}, charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = 'G';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = '&';
      charArray0[5] = 'B';
      charArray0[6] = '}';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'D', 'G', 'N', 'N', '&', 'B', '}'}, charArray0);
      assertArrayEquals(new char[] {'D', 'G', 'N', 'N', '&', 'B', '}'}, charArray1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-2031);
      intArray0[0] = (-2031);
      intArray0[1] = (-1);
      intArray0[2] = (-95);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2031), (-1), (-95)}, intArray0);
      assertArrayEquals(new int[] {(-2031), (-1), (-95), (-2031), (-1), (-95)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-95));
      assertEquals(0, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new long[] {}, longArray0);
      
      int int1 = 3455;
      boolean boolean0 = ArrayUtils.contains(intArray1, 3455);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-2031), (-1), (-95)}, intArray0);
      assertArrayEquals(new int[] {(-2031), (-1), (-95), (-2031), (-1), (-95)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(4186, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4186, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 2, 1146);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short) (-397));
      assertNotNull(short0);
      assertEquals((short) (-397), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals(2, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-397), (short)short1);
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '!';
      charArray0[1] = ';';
      charArray0[2] = '&';
      charArray0[3] = 'D';
      charArray0[4] = 'e';
      charArray0[6] = 'x';
      charArray0[7] = '3';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'!', ';', '&', 'D', 'e', '\u0000', 'x', '3'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (double) (-3596);
      doubleArray0[1] = (double) '3';
      doubleArray0[2] = (double) 'j';
      doubleArray0[3] = (double) '&';
      doubleArray0[4] = (double) '!';
      doubleArray0[5] = 165.64914991168536;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-3596.0);
      objectArray0[1] = (Object) '\u0000';
      objectArray0[2] = (Object) 165.64914991168536;
      objectArray0[3] = (Object) '!';
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) short0, 160);
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray1, '?');
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray2.length);
      assertEquals(16, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'!', ';', '&', 'D', 'e', '\u0000', 'x', '3'}, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2146581342), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146581342, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)0);
      assertNull(shortArray0);
      
      boolean[] booleanArray2 = ArrayUtils.insert((-2145387093), booleanArray1, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      Short[] shortArray1 = new Short[7];
      Short short0 = new Short((short)8192);
      assertNotNull(short0);
      assertEquals((short)8192, (short)short0);
      
      shortArray1[0] = short0;
      Short short1 = new Short((short)8192);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)8192, (short)short1);
      
      shortArray1[1] = short1;
      Double double0 = Double.valueOf((double) (-2145387093));
      assertNotNull(double0);
      assertEquals((-2.145387093E9), (double)double0, 0.01);
      
      Double double1 = new Double(33.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(33.0, (double)double1, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      int int0 = ArrayUtils.indexOf(charArray0, 'D', (int) (short)8192);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'D', 'D', 'D', 'D'}, charArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) 'D';
      longArray0[2] = (long) 'D';
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 'D';
      longArray0[5] = (long) 'D';
      longArray0[7] = (long) (short)shortArray1[1];
      longArray0[8] = (long) (-2145387093);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(9, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 68L, 68L, (-1L), 68L, 68L, 0L, 8192L, (-2145387093L)}, longArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)8192;
      intArray0[1] = (int) 'D';
      intArray0[2] = (int) 'D';
      intArray0[3] = (int) 'D';
      intArray0[4] = (int) 'D';
      ArrayUtils.swap(intArray0, 91, (int) shortArray1[1]);
      assertEquals(7, shortArray1.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {8192, 68, 68, 68, 68}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      Double double0 = new Double((-439.883));
      assertNotNull(double0);
      assertEquals((-439.883), (double)double0, 0.01);
      
      Double double1 = new Double((-439.883));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-439.883), (double)double1, 0.01);
      
      Double double2 = new Double((-4259.756109));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-4259.756109), (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-578.975));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-439.883)}, doubleArray1, 0.01);
      
      Character[] characterArray0 = new Character[3];
      char char0 = '8';
      Character character0 = Character.valueOf('8');
      assertNotNull(character0);
      assertEquals('8', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('G');
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('G', (char)character1);
      
      characterArray0[1] = character1;
      char char1 = '\\';
      Character character2 = Character.valueOf('\\');
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('\\', (char)character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'8', 'G', '\\'}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (-2264.15113), (-775));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-439.883)}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) char0;
      floatArray0[1] = (float) '\\';
      floatArray0[2] = (float) '-';
      floatArray0[3] = (float) 'G';
      floatArray0[4] = (float) '\\';
      floatArray0[5] = (float) char1;
      floatArray0[6] = (float) 434;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) 434);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {56.0F, 92.0F, 45.0F, 71.0F, 92.0F, 92.0F, 434.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {434.0F, 56.0F, 92.0F, 45.0F, 71.0F, 92.0F, 92.0F, 434.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-612));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "java.lang.Boolean";
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      MutableInt mutableInt0 = new MutableInt(120);
      assertNotNull(mutableInt0);
      assertEquals((short)120, mutableInt0.shortValue());
      assertEquals("120", mutableInt0.toString());
      assertEquals(120L, mutableInt0.longValue());
      assertEquals(120.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(120, mutableInt0.intValue());
      assertEquals(120, (int)mutableInt0.toInteger());
      assertEquals(120.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(120, (int)mutableInt0.getValue());
      assertEquals((byte)120, mutableInt0.byteValue());
      
      Integer integer0 = mutableInt0.toInteger();
      assertNotNull(integer0);
      assertEquals(120, (int)integer0);
      assertEquals((short)120, mutableInt0.shortValue());
      assertEquals("120", mutableInt0.toString());
      assertEquals(120L, mutableInt0.longValue());
      assertEquals(120.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(120, mutableInt0.intValue());
      assertEquals(120, (int)mutableInt0.toInteger());
      assertEquals(120.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(120, (int)mutableInt0.getValue());
      assertEquals((byte)120, mutableInt0.byteValue());
      
      Integer integer1 = new Integer(5573);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(5573, (int)integer1);
      
      Integer integer2 = new Integer((-918));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-918), (int)integer2);
      
      Integer integer3 = Integer.getInteger(",zf", 1991);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(1991, (int)integer3);
      
      Integer integer4 = new Integer(1072);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(1072, (int)integer4);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2486.4));
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-63);
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) 3;
      floatArray0[4] = 68.0F;
      floatArray0[5] = (float) 3;
      floatArray0[6] = (float) (-63);
      floatArray0[7] = (float) (-63);
      boolean boolean1 = ArrayUtils.contains(floatArray0, 946.51F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-63.0F), 3.0F, 3.0F, 3.0F, 68.0F, 3.0F, (-63.0F), (-63.0F)}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)101;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(byteArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Integer[] integerArray0 = new Integer[5];
      MutableInt mutableInt0 = new MutableInt(5573);
      assertNotNull(mutableInt0);
      assertEquals(5573, (int)mutableInt0.getValue());
      assertEquals(5573.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(5573.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)5573, mutableInt0.shortValue());
      assertEquals("5573", mutableInt0.toString());
      assertEquals(5573, mutableInt0.intValue());
      assertEquals(5573L, mutableInt0.longValue());
      assertEquals((byte) (-59), mutableInt0.byteValue());
      assertEquals(5573, (int)mutableInt0.toInteger());
      
      Integer integer0 = mutableInt0.toInteger();
      assertNotNull(integer0);
      assertEquals(5573, (int)integer0);
      assertEquals(5573, (int)mutableInt0.getValue());
      assertEquals(5573.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(5573.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)5573, mutableInt0.shortValue());
      assertEquals("5573", mutableInt0.toString());
      assertEquals(5573, mutableInt0.intValue());
      assertEquals(5573L, mutableInt0.longValue());
      assertEquals((byte) (-59), mutableInt0.byteValue());
      assertEquals(5573, (int)mutableInt0.toInteger());
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(5, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(5573, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertEquals(5, integerArray0.length);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(5573, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("", 89);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(89, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(5573);
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(5573, (int)integer4);
      
      integerArray0[4] = integer4;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {5573, 5573, 5573, 89, 5573}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      Long long0 = new Long((-840L));
      assertNotNull(long0);
      assertEquals((-840L), (long)long0);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-840L), (-840L), (-840L), (-840L), (-840L)}, longArray1);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      Boolean boolean5 = new Boolean("");
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      Boolean boolean6 = Boolean.FALSE;
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean3));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      Boolean boolean7 = Boolean.TRUE;
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean2));
      assertNotNull(boolean7);
      assertTrue(boolean7);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = '9';
      charArray0[2] = 'c';
      charArray0[3] = ';';
      charArray0[4] = 'f';
      charArray0[5] = '>';
      ArrayUtils.shuffle(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'9', 'c', ';', 'f', '>', 'K'}, charArray0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)24;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)24, (byte)101}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)0;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)5, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)5, (short)0}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-2212));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-1073), 'p');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1073, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      Double double2 = new Double(0.0);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[3] = doubleArray0[2];
      Object[] objectArray0 = new Object[9];
      doubleArray0[3] = double1;
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) double0;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short)0, (int) (short)0, 321);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Float float0 = new Float((float) (short)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      String[] stringArray0 = new String[0];
      String string0 = ArrayUtils.get(stringArray0, (int) 0, "");
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) "");
      assertTrue(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals("", object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray0, objectArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(9, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = new boolean[9];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = true;
      booleanArray1[6] = false;
      booleanArray1[7] = false;
      booleanArray1[8] = false;
      int int0 = ArrayUtils.indexOf(booleanArray1, false, Integer.MAX_VALUE);
      assertEquals(9, booleanArray1.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, false, false, false}, booleanArray1));
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)2);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)2447;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) Integer.MAX_VALUE;
      ArrayUtils.reverse(longArray0, (-223), 0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {2447L, 2147483647L, 0L, 2147483647L}, longArray0);
      
      ArrayUtils.shift((Object[]) booleanArray0, 2073088770, 7, 0);
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'0', 'T', 'T'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)0;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-27);
      boolean boolean0 = ArrayUtils.contains(byteArray1, (byte)2);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-27)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte[] byteArray2 = new Byte[5];
      byteArray2[0] = (Byte) (byte)0;
      byteArray2[1] = (Byte) (byte) (-27);
      byteArray2[2] = (Byte) (byte) (-27);
      byteArray2[3] = (Byte) (byte)0;
      byteArray2[4] = (Byte) (byte)0;
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte) (-116));
      assertEquals(5, byteArray2.length);
      assertEquals(5, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-27), (byte) (-27), (byte)0, (byte)0}, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      char char0 = '';
      Character character0 = Character.valueOf('');
      assertNotNull(character0);
      assertEquals('', (char)character0);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(7, characterArray0.length);
      assertEquals(7, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'', '', '', '', '', '', ''}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), (int) char0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) "");
      assertEquals(7, characterArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte)2;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-28), (byte) (-1), (byte) (-77), (byte)0, (byte) (-45), (byte) (-87), (byte)2}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-597);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, (int) (short)0, (int) (short)0, (int) (short)0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-597), (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-597), (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-597));
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(bitSet0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)0, (short) (-597), (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (-494L);
      longArray0[2] = (-771L);
      longArray0[3] = (-1851L);
      longArray0[4] = 1605L;
      longArray0[5] = 2L;
      longArray0[6] = 1314L;
      longArray0[7] = 1032L;
      longArray0[8] = (-2612L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-494L), (-771L), (-1851L), 1605L, 2L, 1314L, 1032L, (-2612L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)69;
      shortArray0[1] = (short) (-1530);
      shortArray0[2] = (short)3019;
      shortArray0[3] = (short)54;
      shortArray0[4] = (short)710;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-1604);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)69, (short) (-1530), (short)3019, (short)54, (short)710, (short)1, (short) (-1604)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      long[] longArray2 = ArrayUtils.add(longArray0, (int) (short)1, (-1405L));
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, (-494L), (-771L), (-1851L), 1605L, 2L, 1314L, 1032L, (-2612L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1405L), (-494L), (-771L), (-1851L), 1605L, 2L, 1314L, 1032L, (-2612L)}, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = '%';
      charArray0[2] = 's';
      charArray0[3] = 'U';
      charArray0[4] = '}';
      charArray0[5] = 'v';
      charArray0[6] = 'c';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, (char[]) null);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'a', '%', 's', 'U', '}', 'v', 'c'}, charArray0);
      assertArrayEquals(new char[] {'a', '%', 's', 'U', '}', 'v', 'c'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "The Array must not be null";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "len must be > 0";
      stringArray0[5] = "lr9bdpiI=Z]g7wq$.";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 2L;
      longArray0[1] = (-2763L);
      longArray0[2] = (-1L);
      longArray0[3] = (-2147483648L);
      longArray0[4] = (-47L);
      longArray0[5] = (-312L);
      longArray0[6] = (-627L);
      longArray0[7] = (-1L);
      ArrayUtils.swap(longArray0, (-2212), 124, 2381);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {2L, (-2763L), (-1L), (-2147483648L), (-47L), (-312L), (-627L), (-1L)}, longArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = 560.2055F;
      floatArray0[3] = (float) 2381;
      floatArray0[4] = (float) (-1L);
      floatArray0[5] = (float) (-1L);
      floatArray0[6] = (float) 124;
      floatArray0[7] = (float) (-47L);
      floatArray0[8] = (float) 2L;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 2.0F);
      assertEquals(9, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 560.2055F, 2381.0F, (-1.0F), (-1.0F), 124.0F, (-47.0F), 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 560.2055F, 2381.0F, (-1.0F), (-1.0F), 124.0F, (-47.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 56);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'P';
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSameType(boolean0, object0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(347.6515288);
      assertNotNull(double0);
      assertEquals(347.6515288, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(347.6515288);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(347.6515288, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(18, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false, true, true, true}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(double0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(347.6515288);
      assertNotNull(double0);
      assertEquals(347.6515288, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(347.6515288);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(347.6515288, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(18, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(double0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 18688);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {18688}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      charArray0[1] = '0';
      charArray0[2] = '|';
      charArray0[3] = 'R';
      charArray0[4] = 'r';
      charArray0[5] = 'R';
      charArray0[6] = 'V';
      charArray0[7] = '\\';
      charArray0[8] = ';';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'', '0', '|', 'R', 'r', 'R', 'V', '\\', ';'}, charArray0);
      assertArrayEquals(new char[] {'', '0', '|', 'R', 'r', 'R', 'V', '\\', ';'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = (Character) '';
      characterArray0[1] = (Character) ';';
      characterArray0[2] = (Character) '|';
      characterArray0[3] = (Character) ';';
      characterArray0[4] = (Character) '';
      characterArray0[5] = (Character) '|';
      Character character0 = Character.valueOf((char) characterArray0[4]);
      assertEquals(7, characterArray0.length);
      assertNotNull(character0);
      assertEquals('', (char)character0);
      
      characterArray0[6] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(7, characterArray1.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 7);
      assertEquals(6, booleanArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-76);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)40);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)40, (byte) (-76)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-76)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 89.2017;
      doubleArray0[1] = (double) (byte) (-76);
      doubleArray0[2] = (double) (byte)40;
      doubleArray0[3] = (double) (byte)40;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (byte)40;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 56.0, (int) (byte) (-76), (-742.488760145711));
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {89.2017, (-76.0), 40.0, 40.0, 0.0, 40.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)6);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Character character0 = new Character('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character character1 = new Character('T');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('T', (char)character1);
      
      ArrayUtils.shift(byteArray0, 2698);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (-597);
      ArrayUtils.reverse((double[]) null);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-597);
      intArray0[1] = (int) (short) (-597);
      intArray0[2] = (int) (short) (-597);
      intArray0[3] = (int) (short) (-597);
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short) (-597);
      ArrayUtils.shift(intArray0, (-597));
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-597), 0, (-597), (-597), (-597), (-597)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-232);
      intArray0[3] = (-232);
      Double double0 = new Double(27.33522220953097);
      assertNotNull(double0);
      assertEquals(27.33522220953097, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[8];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      
      ArrayUtils.shift(intArray0, 0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-232), 0, 0, (-232), 0, 0, 0, 0}, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) doubleArray0, (Object) double0, (-232));
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.isSameType(double0, bitSet0);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1828.8;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1828.8);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1828.8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray0[0] = (double) (-882L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)96;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)56, (-1604));
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte)37, (byte)56, (byte)37, (byte)82, (byte)96}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, (int) (byte)37);
      assertFalse(boolean0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray0, 89.2017);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-882.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-882.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      Byte[] byteArray2 = new Byte[8];
      byteArray2[0] = (Byte) (byte)82;
      byteArray2[1] = (Byte) (byte)56;
      byteArray2[2] = (Byte) (byte)37;
      byteArray2[3] = (Byte) (byte)6;
      byteArray2[4] = (Byte) (byte)37;
      byteArray2[5] = (Byte) (byte)56;
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      byteArray2[6] = byte0;
      byteArray2[7] = (Byte) (byte)96;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertEquals(8, byteArray3.length);
      assertEquals(8, byteArray2.length);
      assertNotNull(byteArray3);
      assertSame(byteArray3, byteArray2);
      assertSame(byteArray2, byteArray3);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-882.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-882.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      boolean boolean2 = ArrayUtils.isEmpty((int[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int[] intArray0 = ArrayUtils.insert((-1), (int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)113;
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = '3';
      charArray0[2] = '&';
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1582.1451416015625;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1582.1451416015625}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      Long long0 = new Long((-840L));
      assertNotNull(long0);
      assertEquals((-840L), (long)long0);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-840L), (-840L), (-840L), (-840L), (-840L)}, longArray1);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      Boolean boolean5 = new Boolean("");
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      Boolean boolean6 = Boolean.FALSE;
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean3));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      Boolean boolean7 = Boolean.TRUE;
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean0));
      assertNotNull(boolean7);
      assertTrue(boolean7);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = '9';
      charArray0[2] = 'c';
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-2257), 63);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (int) 'c';
      intArray0[2] = (int) 'c';
      intArray0[3] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), 99, 99, (-1)}, intArray0);
      assertArrayEquals(new int[] {99, 99, (-1)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1283L;
      longArray0[1] = 0L;
      longArray0[2] = 99L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1283L, 0L, 99L}, longArray0);
      assertArrayEquals(new long[] {1283L, 0L, 99L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)100, (byte) (-12), (byte)100, (byte)100, (byte) (-1)}, byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)100;
      doubleArray0[1] = (double) (byte)100;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 0L, (int) (byte) (-1), 1.0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {100.0, 100.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-4924);
      intArray0[1] = (-4924);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 607, 3741);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-4924), (-4924)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1.0F;
      int[] intArray0 = new int[7];
      intArray0[0] = 15;
      intArray0[1] = 15;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (-66);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-66), (-66));
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {15, 15, Integer.MAX_VALUE, (-66), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-4412.965F);
      floatArray0[2] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-4412.965F));
      assertEquals(3, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {0.0F, (-4412.965F), 0.0F}, floatArray0, 0.01F);
      
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)18, object0);
      
      Float[] floatArray1 = new Float[6];
      floatArray1[0] = (Float) 0.0F;
      floatArray1[1] = (Float) 0.0F;
      floatArray1[2] = (Float) 0.0F;
      int[] intArray0 = new int[6];
      intArray0[0] = (-4924);
      intArray0[1] = 0;
      intArray0[2] = (-4924);
      intArray0[3] = 1;
      intArray0[4] = (int) (byte)18;
      intArray0[5] = 1;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1, 1);
      assertEquals(0, intArray1.length);
      assertEquals(6, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-4924), 0, (-4924), 1, 18, 1}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (-1167), 46);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, (-1167), 46, 46);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true}, booleanArray0));
      
      ArrayUtils.shift((byte[]) null, (-1167));
      int[] intArray0 = new int[8];
      intArray0[0] = (int) ' ';
      intArray0[1] = (-1167);
      intArray0[2] = (int) ' ';
      intArray0[3] = (int) ' ';
      intArray0[4] = (int) ' ';
      intArray0[5] = (-1167);
      intArray0[6] = (int) ' ';
      intArray0[7] = (-1167);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-4924), (-1167));
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {32, (-1167), 32, 32, 32, (-1167), 32, (-1167)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 56);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      MutableInt mutableInt0 = new MutableInt((-2264));
      assertNotNull(mutableInt0);
      assertEquals((-2264), (int)mutableInt0.getValue());
      assertEquals((-2264), (int)mutableInt0.toInteger());
      assertEquals((-2264.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)40, mutableInt0.byteValue());
      assertEquals("-2264", mutableInt0.toString());
      assertEquals((short) (-2264), mutableInt0.shortValue());
      assertEquals((-2264L), mutableInt0.longValue());
      assertEquals((-2264), mutableInt0.intValue());
      assertEquals((-2264.0), mutableInt0.doubleValue(), 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)76, (byte) (-47), (byte)76, (byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      charArray0[1] = 'P';
      charArray0[2] = 'K';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'K', (int) (byte)76);
      assertEquals(3, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'K', 'P', 'K'}, charArray0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)21668);
      assertNull(shortArray0);
      
      char[] charArray1 = ArrayUtils.subarray((char[]) null, 2146913432, (int) (byte)0);
      assertNull(charArray1);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences((char[]) null, 'K');
      assertNull(charArray2);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-64));
      assertEquals(6, byteArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(bitSet1);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new byte[] {(byte)0, (byte)76, (byte) (-47), (byte)76, (byte) (-1), (byte)0}, byteArray0);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      ArrayUtils.reverse((double[]) null);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'Y';
      intArray0[1] = 2;
      ArrayUtils.shift(intArray0, 2);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2, 0, 89}, intArray0);
      
      char[] charArray0 = null;
      char[] charArray1 = ArrayUtils.subarray((char[]) null, 2, 3);
      assertNull(charArray1);
      
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)111);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)111, (byte)byte1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.ints((-1908874352L), (int) (byte)1, (int) (byte)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 56);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Double double0 = new Double(2043.2108314);
      assertNotNull(double0);
      assertEquals(2043.2108314, (double)double0, 0.01);
      
      Byte byte0 = new Byte((byte) (-72));
      assertNotNull(byte0);
      assertEquals((byte) (-72), (byte)byte0);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double1 = new Double((double) doubleArray0[1]);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2043.2108314, (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = doubleArray0[0];
      doubleArray0[7] = double0;
      Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) doubleArray0[2]);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Float float0 = new Float(1582.1451416015625);
      assertNotNull(float0);
      assertEquals(1582.1451F, (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) float0, (Object) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-5909.0F);
      floatArray0[2] = (-3080.0F);
      floatArray0[3] = (-1.0F);
      MockRandom mockRandom0 = new MockRandom(192L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(192L);
      assertNotNull(longStream0);
      
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = mockRandom0.nextInt(1);
      assertEquals(0, int0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      
      Double[] doubleArray0 = new Double[7];
      Double double1 = new Double(0.7);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.7, (double)double1, 0.01);
      
      doubleArray0[0] = double1;
      Double double2 = new Double(192L);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(192.0, (double)double2, 0.01);
      
      doubleArray0[1] = double2;
      Double double3 = new Double(Double.NaN);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(Double.NaN, (double)double3, 0.01);
      
      doubleArray0[2] = double3;
      Double double4 = new Double((double) doubleArray0[0]);
      assertEquals(7, doubleArray0.length);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals(0.7, (double)double4, 0.01);
      
      doubleArray0[3] = double4;
      Double double5 = new Double((-3080.0F));
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotNull(double5);
      assertEquals((-3080.0), (double)double5, 0.01);
      
      doubleArray0[4] = double5;
      Double double6 = new Double((-1.0F));
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotNull(double6);
      assertEquals((-1.0), (double)double6, 0.01);
      
      doubleArray0[5] = double6;
      Double double7 = new Double((-2741.8807204624));
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotNull(double7);
      assertEquals((-2741.8807204624), (double)double7, 0.01);
      
      doubleArray0[6] = double7;
      Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) doubleArray0[1]);
      assertEquals(6, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockRandom mockRandom0 = new MockRandom(124L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(124L);
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs(124L);
      assertNotNull(longStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double double0 = mockRandom1.nextDouble();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(mockRandom1, mockRandom0);
      
      mockRandom1.nextBytes(byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(mockRandom1, mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom1.doubles();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(doubleStream0);
      assertNotSame(mockRandom1, mockRandom0);
      
      int int0 = mockRandom1.nextInt(1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0, int0);
      assertNotSame(mockRandom1, mockRandom0);
      
      boolean[] booleanArray0 = new boolean[5];
      ArrayUtils.reverse(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockRandom mockRandom0 = new MockRandom(124L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(124L);
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs(124L);
      assertNotNull(longStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      mockRandom1.nextBytes(byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(mockRandom1, mockRandom0);
      
      MockRandom mockRandom2 = new MockRandom(3227L);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      int int0 = mockRandom2.nextInt(1);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertEquals(0, int0);
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom1);
      
      boolean boolean0 = mockRandom1.nextBoolean();
      assertFalse(mockRandom1.equals((Object)mockRandom2));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(boolean0);
      assertNotSame(mockRandom1, mockRandom2);
      assertNotSame(mockRandom1, mockRandom0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1700);
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {(-1700)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1670L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 4712L);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1670L}, longArray0);
      assertArrayEquals(new long[] {1670L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, (double) (-567L));
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      ArrayUtils.reverse(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1670L}, longArray0);
      assertArrayEquals(new long[] {1670L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.swap(doubleArray1, (-2237), (-2985), (-1));
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-2237);
      floatArray0[1] = (float) (-153L);
      floatArray0[2] = (float) 55;
      floatArray0[3] = (float) (-2237);
      floatArray0[4] = (float) 1670L;
      floatArray0[5] = (float) (short) (-597);
      floatArray0[6] = (float) (-1604);
      floatArray0[7] = (float) 1670L;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2237.0F), (-153.0F), 55.0F, (-2237.0F), 1670.0F, (-597.0F), (-1604.0F), 1670.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-2985));
      assertEquals(7, booleanArray0.length);
      assertNotNull(bitSet0);
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 4, 6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      ArrayUtils.swap((Object[]) null, 1724, Integer.MAX_VALUE, Integer.MAX_VALUE);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) (-2108L);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = (double) (-2108L);
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = 0.1;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2.147483647E9);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2.147483647E9, (-2108.0), 2.0, 4.0, 2.147483647E9, (-2108.0), 4.0, 0.1}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf((float[]) null, 126.0F, (-2146957560));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(5, booleanArray2.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.147483647E9, (-2108.0), 2.0, 4.0, 2.147483647E9, (-2108.0), 4.0, 0.1}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = null;
      int int0 = 2145059252;
      Float float0 = new Float((double) (-2762.0F));
      assertNotNull(float0);
      assertEquals((-2762.0F), (float)float0, 0.01F);
      
      Object object0 = ArrayUtils.get((Object[]) null, 2145059252, (Object) float0);
      assertNotNull(object0);
      assertEquals((-2762.0F), object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get((Object[]) null, 2145059252);
      assertNull(object1);
      
      objectArray0[1] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)85;
      intArray0[1] = (int) (byte)85;
      intArray0[2] = (int) (byte)7;
      intArray0[3] = (int) (byte)85;
      intArray0[4] = (int) (byte)7;
      intArray0[5] = (int) (byte)85;
      intArray0[6] = (int) (byte)85;
      intArray0[7] = (int) (byte)85;
      intArray0[8] = (int) (byte)85;
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      Float float0 = new Float((double) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      Float float1 = new Float(103.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(103.0F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = float1;
      floatArray0[1] = float0;
      Float float2 = new Float(244.0F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(244.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      floatArray0[3] = float1;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      ArrayUtils.shift((Object[]) floatArray1, (-1));
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-1.0F), 244.0F, 103.0F, (-1.0F), (-1.0F), 103.0F}, floatArray2, 0.01F);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      MockRandom mockRandom0 = new MockRandom((-2372L));
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1069);
      longArray0[1] = (-719L);
      longArray0[2] = (long) 'j';
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) '';
      ArrayUtils.shift((char[]) null, 1454);
      Long[] longArray1 = new Long[0];
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, 106L);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray2, longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1454;
      intArray0[1] = 46;
      intArray0[2] = (int) '';
      intArray0[3] = (int) '';
      intArray0[4] = (-1);
      intArray0[5] = (int) 'j';
      boolean boolean0 = ArrayUtils.contains(intArray0, 10);
      assertEquals(6, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {1454, 46, 127, 127, (-1), 106}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1668L;
      doubleArray0[1] = (double) 1668L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1668.0, 1668.0}, doubleArray0, 0.01);
      
      Float float0 = new Float((float) (-962L));
      assertNotNull(float0);
      assertEquals((-962.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((float) 1668L);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1668.0F, (float)float1, 0.01F);
      
      Float float2 = new Float(1.0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2464);
      shortArray0[1] = (short) (-22065);
      shortArray0[2] = (short)763;
      shortArray0[3] = (short)7;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 3915, 2);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2464), (short) (-22065), (short)763, (short)7}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Long long0 = new Long((short)7);
      assertNotNull(long0);
      assertEquals(7L, (long)long0);
      
      Long long1 = Long.valueOf((long) (short)7);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(7L, (long)long1);
      
      try { 
        Long.valueOf("<R*^p(NB2fFRNhd;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"<R*^p(NB2fFRNhd;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      ArrayUtils.shuffle(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'>'}, charArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(99);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(99, (int)integer1);
      
      integerArray0[1] = integer1;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) '>';
      intArray0[3] = (int) '>';
      ArrayUtils.reverse(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {62, 62, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[6] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      char[] charArray0 = ArrayUtils.insert((-1154), (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 201, 201);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-2070));
      assertEquals(0, booleanArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)76;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)76}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)76;
      shortArray0[1] = (short) (byte)76;
      shortArray0[2] = (short) (byte)76;
      shortArray0[3] = (short)938;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)76;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)76, (short)76, (short)76, (short)938, (short)0, (short)76}, shortArray0);
      assertArrayEquals(new short[] {(short)76, (short)76, (short)76, (short)938, (short)0, (short)76}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      MockRandom mockRandom0 = new MockRandom((short)76);
      assertNotNull(mockRandom0);
      
      mockRandom0.nextBytes(byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      LongStream longStream0 = mockRandom0.longs(245L);
      assertNotNull(longStream0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2093, (-403));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 322);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {322}, intArray0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray0, (double) 245L);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {245.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)938, byteArray1, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 938, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.shuffle(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-4412.965F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-4412.965F));
      assertEquals(3, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {0.0F, (-4412.965F), 0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1919L));
      assertNull(longArray0);
      
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)18, object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-4412.965F);
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 0.0F;
      objectArray0[4] = (Object) 0.0F;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[3]);
      assertEquals(5, objectArray0.length);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-840.984);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 834.849831;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = (-287.3236368);
      doubleArray0[6] = (-1842.0);
      doubleArray0[7] = (-316.294838947664);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1842.0), 1);
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      assertEquals("{6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new double[] {(-1.0), (-840.984), 1.0, 834.849831, 2.0, (-287.3236368), (-1842.0), (-316.294838947664)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)103, (int) (short)103);
      assertEquals(0, shortArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotSame(bitSet1, bitSet0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)103;
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) 1L;
      floatArray0[4] = (float) 1L;
      floatArray0[5] = (float) 1L;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {103.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(6, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, true, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      ArrayUtils.shift(longArray0, (-348));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)84, (byte)50, (byte)0, (byte)84, (byte)50, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)84, (byte)50, (byte)0}, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 56);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = '_';
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3471), (-3471));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Character character0 = new Character('S');
      assertNotNull(character0);
      assertEquals('S', (char)character0);
      
      Character character1 = new Character('');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('', (char)character1);
      
      Character character2 = Character.valueOf('=');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('=', (char)character2);
      
      Character character3 = Character.valueOf('I');
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('I', (char)character3);
      
      Character character4 = new Character('S');
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('S', (char)character4);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)106;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)14, (int) (byte)57);
      assertEquals(4, byteArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-55), (byte) (-113), (byte)106}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      Class<Float[]> class0 = Float[].class;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0, class0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 1290L;
      longArray0[2] = 3052L;
      longArray0[3] = (-1069L);
      longArray0[4] = 42L;
      longArray0[5] = (-3113L);
      longArray0[6] = (-2059L);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 332, 332, 36);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[4] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertEquals(10, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, true, false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray1);
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertEquals(10, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, true, false, false, false}, booleanArray0));
      
      byte[] byteArray2 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      Character character0 = new Character('u');
      assertNotNull(character0);
      assertEquals('u', (char)character0);
      
      Character character1 = new Character('u');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('u', (char)character1);
      
      Character character2 = new Character('Z');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('Z', (char)character2);
      
      Character character3 = Character.valueOf('u');
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('u', (char)character3);
      
      Character character4 = new Character('Z');
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('Z', (char)character4);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'Z';
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 90);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {90}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      Character[] characterArray1 = ArrayUtils.toObject(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertNotSame(characterArray1, characterArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte) (-106);
      ArrayUtils.reverse(byteArray0, (-868), 2145154515);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-106), (byte) (-106), (byte)5, (byte) (-68), (byte) (-106), (byte) (-48), (byte) (-68), (byte) (-68)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[1];
      ArrayUtils.swap(longArray0, (-1167), 46);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[3] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, (-1167), 46, 46);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 0);
      assertNull(intArray0);
      
      Character[] characterArray1 = ArrayUtils.toObject(charArray0);
      assertEquals(0, characterArray1.length);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      
      ArrayUtils.reverse((byte[]) null, 3111, 0);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-1.0);
      doubleArray0[1] = 3412.981175;
      doubleArray0[2] = 3412.981175;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3412.981175);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 3412.981175, 3412.981175, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3412.981175, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, 2051, (-2983));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      Short short0 = new Short((short) (-982));
      assertNotNull(short0);
      assertEquals((short) (-982), (short)short0);
      
      Short short1 = new Short((short) (-982));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-982), (short)short1);
      
      Short short2 = new Short((short) (-1));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-1), (short)short2);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-605);
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (int) (short) (-982);
      intArray0[4] = (-605);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1656));
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-605), (-1), (-1), (-982), (-605)}, intArray0);
      assertArrayEquals(new int[] {(-605), (-1), (-1), (-982), (-605)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (int) (short) (-1);
      intArray2[1] = (int) (short) (-982);
      intArray2[2] = (int) (short) (-1);
      intArray2[3] = (-605);
      intArray2[4] = (-605);
      intArray2[5] = (int) (short) (-982);
      int[] intArray3 = ArrayUtils.insert((-605), (int[]) null, intArray2);
      assertEquals(6, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNull(intArray3);
      assertArrayEquals(new int[] {(-1), (-982), (-1), (-605), (-605), (-982)}, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray4 = ArrayUtils.removeElement(intArray2, (-982));
      assertEquals(5, intArray4.length);
      assertEquals(6, intArray2.length);
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray4);
      assertArrayEquals(new int[] {(-1), (-1), (-605), (-605), (-982)}, intArray4);
      assertArrayEquals(new int[] {(-1), (-982), (-1), (-605), (-605), (-982)}, intArray2);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray2, intArray4);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('');
      assertNotNull(character0);
      assertEquals('', (char)character0);
      
      characterArray0[1] = character0;
      char char0 = '^';
      Character character1 = new Character('^');
      assertFalse(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals('^', (char)character1);
      
      characterArray0[2] = character1;
      Character character2 = new Character((char) character1);
      assertFalse(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('^', (char)character2);
      
      characterArray0[3] = character2;
      Character character3 = Character.valueOf('^');
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('^', (char)character3);
      
      characterArray0[4] = character3;
      Character character4 = new Character(char0);
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      assertEquals('^', (char)character4);
      
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(7, characterArray1.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (char)character0;
      intArray0[1] = (int) '';
      intArray0[2] = (int) (char)character2;
      intArray0[3] = 0;
      intArray0[4] = (int) (char)character1;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) character1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character4));
      assertTrue(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character3));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {127, 127, 94, 0, 94}, intArray0);
      assertArrayEquals(new int[] {127, 127, 0, 94}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = (char) character1;
      charArray0[2] = '';
      Character[] characterArray2 = ArrayUtils.toObject(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray2.length);
      assertFalse(characterArray2.equals((Object)characterArray1));
      assertFalse(characterArray2.equals((Object)characterArray0));
      assertNotNull(characterArray2);
      assertArrayEquals(new char[] {'', '^', ''}, charArray0);
      assertNotSame(characterArray2, characterArray1);
      assertNotSame(characterArray2, characterArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-48);
      ArrayUtils.reverse(byteArray0, (int) character1, 94);
      assertEquals(3, byteArray0.length);
      assertFalse(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)character4));
      assertTrue(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character3));
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-106), (byte) (-48)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-88.9));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-88.9), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(5, doubleArray0.length);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      Double double4 = new Double(1.0);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      assertEquals(1.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-0.6269777847940259));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-88.9), (-0.6269777847940259), 1.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = ArrayUtils.insert(0, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      ArrayUtils.swap(doubleArray1, 1616, 1616);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-88.9), (-0.6269777847940259), 1.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 2703.22645033634);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, (-88.9), (-0.6269777847940259), 1.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isEquals("org.apache.commons.lang3.builder.ToStringStyle$JsonToStringStyle", double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '-';
      int int1 = ArrayUtils.indexOf(longArray0, (-2076L), (-2841));
      assertEquals(1, longArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {45L}, longArray0);
      
      int int2 = ArrayUtils.indexOf(doubleArray1, (double) (-1), 467.76);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertArrayEquals(new double[] {0.0, 0.0, (-88.9), (-0.6269777847940259), 1.0}, doubleArray1, 0.01);
      
      try { 
        Integer.valueOf("org.apache.commons.lang3.builder.ToStringStyle$JsonToStringStyle", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      MutableInt mutableInt0 = new MutableInt((-2264));
      assertNotNull(mutableInt0);
      assertEquals((-2264.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2264), (int)mutableInt0.toInteger());
      assertEquals((-2264), (int)mutableInt0.getValue());
      assertEquals("-2264", mutableInt0.toString());
      assertEquals((byte)40, mutableInt0.byteValue());
      assertEquals((short) (-2264), mutableInt0.shortValue());
      assertEquals((-2264), mutableInt0.intValue());
      assertEquals((-2264.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2264L), mutableInt0.longValue());
      
      mutableInt0.add((Number) 0.0F);
      assertEquals((-2264.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2264), (int)mutableInt0.toInteger());
      assertEquals((-2264), (int)mutableInt0.getValue());
      assertEquals("-2264", mutableInt0.toString());
      assertEquals((byte)40, mutableInt0.byteValue());
      assertEquals((short) (-2264), mutableInt0.shortValue());
      assertEquals((-2264), mutableInt0.intValue());
      assertEquals((-2264.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-2264L), mutableInt0.longValue());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, (-2264), 2147483638, 2147483638);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 4.0, 3.0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 58;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {58}, intArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)64;
      ArrayUtils.swap(byteArray0, 127, 127);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)120, (byte)67, (byte) (-99), (byte)0, (byte)30, (byte)24, (byte)64}, byteArray0);
      
      ArrayUtils.reverse((double[]) null, 925, 1013);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-2461));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray0));
      
      Double double0 = new Double(2359.748553);
      assertNotNull(double0);
      assertEquals(2359.748553, (double)double0, 0.01);
      
      Double double1 = new Double(89.2017);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(89.2017, (double)double1, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int1 = (-4);
      ArrayUtils.reverse((double[]) null, (-4), (-4));
      Double[] doubleArray1 = ArrayUtils.insert((-586), (Double[]) null, (Double[]) null);
      assertNull(doubleArray1);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-4));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-4), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-586));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-586), (int)integer1);
      
      integerArray0[1] = integer1;
      int int2 = (-2146765159);
      Integer integer2 = new Integer((-2146765159));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)int2));
      assertNotNull(integer2);
      assertEquals((-2146765159), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int1);
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertNotNull(integer3);
      assertEquals((-4), (int)integer3);
      
      integerArray0[3] = integer3;
      try { 
        Integer.valueOf((String) null, int1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[4] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 256);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-767);
      intArray0[1] = (-767);
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) (-924));
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-924L)}, longArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-767);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) (-767));
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)57, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 103.0F;
      floatArray0[1] = (float) (-2084L);
      floatArray0[2] = (float) (-2084L);
      floatArray0[3] = (float) (-236);
      floatArray0[4] = (float) (-236);
      ArrayUtils.swap(floatArray0, (-4924), (-236));
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {103.0F, (-2084.0F), (-2084.0F), (-236.0F), (-236.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-4924);
      longArray0[1] = (-2084L);
      longArray0[2] = (long) (-4924);
      longArray0[3] = (long) (-236);
      longArray0[4] = (long) (-4924);
      longArray0[5] = (long) (-236);
      longArray0[6] = (long) (-4924);
      longArray0[7] = (long) (-4924);
      longArray0[8] = (long) (-236);
      int int0 = ArrayUtils.indexOf(longArray0, (-1L));
      assertEquals(9, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-4924L), (-2084L), (-4924L), (-236L), (-4924L), (-236L), (-4924L), (-4924L), (-236L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-37);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-81);
      shortArray0[3] = (short) (-2178);
      shortArray0[4] = (short)3714;
      shortArray0[5] = (short)111;
      shortArray0[6] = (short)23;
      shortArray0[7] = (short)76;
      shortArray0[8] = (short)2374;
      ArrayUtils.reverse(shortArray0, (int) (short) (-2178), (int) (short)2);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short) (-37), (short) (-81), (short) (-2178), (short)3714, (short)111, (short)23, (short)76, (short)2374}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-5909.0F);
      floatArray0[2] = (-3080.0F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 3806.0F;
      floatArray0[5] = (-1277.3838F);
      ArrayUtils.swap(floatArray0, 63, Integer.MAX_VALUE, (-3471));
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-5909.0F), (-3080.0F), (-1.0F), 3806.0F, (-1277.3838F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2417;
      doubleArray0[1] = (double) (-1277.3838F);
      doubleArray0[2] = (double) 3806.0F;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) (-1277.3838F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 76.0, 1.0);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2417.0, (-1277.3837890625), 3806.0, 1.0, (-1277.3837890625)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 63;
      longArray0[1] = 1L;
      longArray0[2] = (long) 2417;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) (-1);
      long[] longArray1 = ArrayUtils.add(longArray0, 2, 27L);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {63L, 1L, 2417L, (-1L), 1L, 1L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {63L, 1L, 27L, 2417L, (-1L), 1L, 1L, (-1L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      short[] shortArray0 = new short[16];
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) (short)1;
      objectArray0[4] = (Object) (short)0;
      objectArray0[5] = (Object) (short)0;
      objectArray0[6] = (Object) (short)0;
      Float float0 = new Float(910.8481F);
      assertNotNull(float0);
      assertEquals(910.8481F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) (short)1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      objectArray0[7] = (Object) float1;
      objectArray0[8] = (Object) (short)1;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(9, objectArray0.length);
      assertTrue(boolean0);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      floatArray0[1] = float1;
      char[] charArray0 = new char[3];
      objectArray0[6] = (Object) 'J';
      charArray0[1] = '!';
      charArray0[2] = '2';
      ArrayUtils.swap(charArray0, 101, 1, 56);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '!', '2'}, charArray0);
      
      ArrayUtils.shift(shortArray0, (-2974), 63, 1);
      assertEquals(16, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3471), (-3471));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 83);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {83}, intArray0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (-1358.96466088362));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1358.96466088362)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      Character character0 = new Character('2');
      assertNotNull(character0);
      assertEquals('2', (char)character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertNotNull(object0);
      assertEquals('2', object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      objectArray0[7] = (Object) true;
      Object object1 = ArrayUtils.get(objectArray0, 2147061695, objectArray0[3]);
      assertEquals(9, objectArray0.length);
      assertNotNull(object1);
      assertEquals(true, object1);
      
      objectArray0[8] = object1;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[8], 1932);
      assertEquals(9, objectArray0.length);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Float float0 = new Float(1785.0);
      assertNotNull(float0);
      assertEquals(1785.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((-1340.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1340.0F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((-1676.138442283144));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1676.138442283144), (double)double1, 0.01);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)9, (byte)2, (byte)2, (byte)9, (byte)2, (byte)56, (byte)2}, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)9, (byte)2, (byte)2, (byte)9, (byte)2, (byte)56, (byte)2}, byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double2 = new Double((byte)2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(2.0, (double)double2, 0.01);
      
      Double double3 = new Double((byte)2);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(2.0, (double)double3, 0.01);
      
      Object object1 = ArrayUtils.toPrimitive((Object) double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertFalse(object1.equals((Object)double0));
      assertTrue(object1.equals((Object)double2));
      assertFalse(object1.equals((Object)double1));
      assertNotNull(object1);
      assertEquals(2.0, object1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray0, (Object) float1, 0);
      assertEquals(5, floatArray0.length);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0, int0);
      
      Byte byte0 = Byte.valueOf((byte)9);
      assertNotNull(byte0);
      assertEquals((byte)9, (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotNull(string0);
      assertEquals("1785.0", string0);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1827.3981289417716;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1583.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1583.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1583.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1058);
      intArray0[1] = (-1058);
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 1583.0F, 2071);
      assertEquals(1, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertArrayEquals(new double[] {1827.3981289417716}, doubleArray0, 0.01);
      assertNotSame(bitSet1, bitSet0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)291;
      shortArray0[1] = (short) (-810);
      BitSet bitSet2 = ArrayUtils.indexesOf(shortArray0, (short) (-810), 2071);
      assertEquals(2, shortArray0.length);
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertNotNull(bitSet2);
      assertTrue(bitSet2.isEmpty());
      assertEquals("{}", bitSet2.toString());
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.cardinality());
      assertEquals(0, bitSet2.length());
      assertArrayEquals(new short[] {(short)291, (short) (-810)}, shortArray0);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1583.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1583.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)291, (short) (-810)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 468.3602396985576;
      doubleArray0[2] = 2260.7579797797;
      doubleArray0[3] = 723.95535325;
      doubleArray0[4] = 1.5;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 468.3602396985576, 2260.7579797797, 723.95535325, 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 468.3602396985576, 2260.7579797797, 723.95535325, 1.5}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = '/';
      charArray0[2] = 'V';
      charArray0[3] = 'H';
      charArray0[4] = 'N';
      charArray0[5] = 'O';
      charArray0[6] = 'P';
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertEquals(7, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {']', '/', 'V', 'H', 'N', 'O', 'P'}, charArray0);
      assertArrayEquals(new char[] {'/', 'V', 'H', 'N', 'O', 'P'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3289);
      shortArray0[1] = (short)4465;
      shortArray0[2] = (short) (-1919);
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1872;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-3289), (short)4465, (short) (-1919), (short)1, (short)1872}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)68;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short)1347;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-1914);
      shortArray0[6] = (short) (-1181);
      shortArray0[7] = (short)958;
      ArrayUtils.reverse(shortArray0, (-1177), (int) (short) (-1181));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)68, (short)4, (short)1347, (short)8, (short)2, (short) (-1914), (short) (-1181), (short)958}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(8, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)68, (short)4, (short)1347, (short)8, (short)2, (short) (-1914), (short) (-1181), (short)958}, shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-1914);
      doubleArray0[1] = (double) (short)4;
      doubleArray0[2] = (double) (short)958;
      doubleArray0[3] = (double) (short)958;
      doubleArray0[4] = (double) (short)8;
      doubleArray0[5] = (double) (short)958;
      doubleArray0[6] = (double) (-1177);
      doubleArray0[7] = 834.849831;
      doubleArray0[8] = (double) (short) (-1914);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1914.0), 4.0, 958.0, 958.0, 8.0, 958.0, (-1177.0), 834.849831, (-1914.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1914.0), 4.0, 958.0, 958.0, 8.0, 958.0, (-1177.0), 834.849831, (-1914.0)}, doubleArray0, 0.01);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 6L;
      longArray0[1] = 969L;
      longArray0[2] = 1432L;
      longArray0[3] = 98L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {6L, 969L, 1432L, 98L}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 6L;
      doubleArray0[1] = (double) 1432L;
      doubleArray0[2] = (double) 6L;
      doubleArray0[3] = (double) 1432L;
      doubleArray0[4] = (double) 1432L;
      doubleArray0[5] = 100.0;
      doubleArray0[6] = (double) 1432L;
      doubleArray0[7] = (double) 6L;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {6.0, 1432.0, 6.0, 1432.0, 1432.0, 100.0, 1432.0, 6.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.0, 1432.0, 6.0, 1432.0, 1432.0, 100.0, 1432.0, 6.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      Class<Float[]> class0 = Float[].class;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0, class0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 1290L;
      longArray0[2] = 3052L;
      longArray0[3] = (-1069L);
      longArray0[4] = 42L;
      longArray0[5] = (-3113L);
      longArray0[6] = (-2059L);
      longArray0[7] = (-153L);
      ArrayUtils.reverse(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-153L), (-2059L), (-3113L), 42L, (-1069L), 3052L, 1290L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      assertNotNull(byte0);
      assertEquals((byte)16, (byte)byte0);
      
      Double[] doubleArray0 = ArrayUtils.removeElement((Double[]) null, (Object) byte0);
      assertNull(doubleArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)16;
      shortArray0[1] = (short)1734;
      shortArray0[2] = (short) (byte)16;
      shortArray0[3] = (short)1734;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-646));
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)16, (short)1734, (short)16, (short)1734}, shortArray0);
      assertArrayEquals(new short[] {(short)16, (short)1734, (short)16, (short)1734}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (short)16;
      doubleArray1[1] = (double) (short)16;
      doubleArray1[2] = (double) (-1660);
      doubleArray1[3] = (double) (short)1734;
      ArrayUtils.shift(doubleArray1, 0);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {16.0, 16.0, (-1660.0), 1734.0}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)1734;
      longArray0[1] = (long) (-1660);
      longArray0[2] = (long) (byte)16;
      longArray0[3] = (long) (short)16;
      longArray0[4] = (long) (short) (-646);
      longArray0[5] = (long) (short)1734;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (short)16;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1734L, (-1660L), 16L, 16L, (-646L), 1734L, 0L, 16L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 56);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 56);
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {101}, intArray0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-257));
      assertNull(shortArray0);
      
      char[] charArray1 = Character.toChars((int) 'P');
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'P'}, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray0, 'P');
      assertEquals(5, charArray0.length);
      assertEquals(3, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'K', 'P', 'P', 'K', 'K'}, charArray0);
      assertArrayEquals(new char[] {'K', 'K', 'K'}, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      ArrayUtils.shift(charArray0, 1225);
      assertEquals(5, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertArrayEquals(new char[] {'K', 'P', 'P', 'K', 'K'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-22));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-22)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) float0);
      assertFalse(boolean0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      MutableInt mutableInt0 = new MutableInt(104);
      assertNotNull(mutableInt0);
      assertEquals(104.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(104L, mutableInt0.longValue());
      assertEquals((byte)104, mutableInt0.byteValue());
      assertEquals(104, (int)mutableInt0.toInteger());
      assertEquals(104, (int)mutableInt0.getValue());
      assertEquals("104", mutableInt0.toString());
      assertEquals((short)104, mutableInt0.shortValue());
      assertEquals(104.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(104, mutableInt0.intValue());
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals(104.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(104L, mutableInt0.longValue());
      assertEquals((byte)104, mutableInt0.byteValue());
      assertEquals(104, (int)mutableInt0.toInteger());
      assertEquals(104, (int)mutableInt0.getValue());
      assertEquals("104", mutableInt0.toString());
      assertEquals((short)104, mutableInt0.shortValue());
      assertEquals(104.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(104, mutableInt0.intValue());
      assertEquals(104L, mutableInt1.longValue());
      assertEquals(104, mutableInt1.intValue());
      assertEquals(104.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(104.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(104, (int)mutableInt1.getValue());
      assertEquals((byte)104, mutableInt1.byteValue());
      assertEquals(104, (int)mutableInt1.toInteger());
      assertEquals((short)104, mutableInt1.shortValue());
      assertEquals("104", mutableInt1.toString());
      
      mutableIntArray0[1] = mutableInt1;
      MutableInt mutableInt2 = new MutableInt(mutableInt0);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertNotNull(mutableInt2);
      assertEquals(104.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(104L, mutableInt0.longValue());
      assertEquals((byte)104, mutableInt0.byteValue());
      assertEquals(104, (int)mutableInt0.toInteger());
      assertEquals(104, (int)mutableInt0.getValue());
      assertEquals("104", mutableInt0.toString());
      assertEquals((short)104, mutableInt0.shortValue());
      assertEquals(104.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(104, mutableInt0.intValue());
      assertEquals(104L, mutableInt2.longValue());
      assertEquals(104, mutableInt2.intValue());
      assertEquals(104.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((short)104, mutableInt2.shortValue());
      assertEquals("104", mutableInt2.toString());
      assertEquals(104, (int)mutableInt2.getValue());
      assertEquals((byte)104, mutableInt2.byteValue());
      assertEquals(104, (int)mutableInt2.toInteger());
      assertEquals(104.0, mutableInt2.doubleValue(), 0.01);
      
      MutableInt[] mutableIntArray1 = ArrayUtils.removeAllOccurrences(mutableIntArray0, mutableInt2);
      assertEquals(2, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertTrue(mutableInt0.equals((Object)mutableInt2));
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertEquals(104.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(104L, mutableInt0.longValue());
      assertEquals((byte)104, mutableInt0.byteValue());
      assertEquals(104, (int)mutableInt0.toInteger());
      assertEquals(104, (int)mutableInt0.getValue());
      assertEquals("104", mutableInt0.toString());
      assertEquals((short)104, mutableInt0.shortValue());
      assertEquals(104.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(104, mutableInt0.intValue());
      assertEquals(104L, mutableInt2.longValue());
      assertEquals(104, mutableInt2.intValue());
      assertEquals(104.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((short)104, mutableInt2.shortValue());
      assertEquals("104", mutableInt2.toString());
      assertEquals(104, (int)mutableInt2.getValue());
      assertEquals((byte)104, mutableInt2.byteValue());
      assertEquals(104, (int)mutableInt2.toInteger());
      assertEquals(104.0, mutableInt2.doubleValue(), 0.01);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt2, mutableInt0);
      assertNotSame(mutableInt2, mutableInt1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 29.86601489192;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 551.03455F;
      floatArray0[2] = (float) 0;
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.toPrimitive((Object) (-1.0));
      assertNotNull(object0);
      assertEquals((-1.0), object0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)13, 32);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "The Array must not be null";
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      Double double1 = new Double(0.7);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.7, (double)double1, 0.01);
      
      Byte byte0 = Byte.valueOf((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      MutableInt mutableInt0 = new MutableInt(double0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotNull(mutableInt0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      
      Short short0 = new Short((short) (-740));
      assertNotNull(short0);
      assertEquals((short) (-740), (short)short0);
      
      String string0 = ArrayUtils.toString((Object) short0);
      assertNotNull(string0);
      assertEquals("-740", string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2522.0F;
      floatArray0[1] = (float) 5;
      floatArray0[2] = (float) 1;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1305.8942F, 1);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {2522.0F, 5.0F, 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, 3, 3, 0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-63);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-63.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3;
      intArray1[1] = (-63);
      intArray1[2] = 3;
      int int0 = ArrayUtils.lastIndexOf(intArray1, (-63));
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, int0);
      assertArrayEquals(new int[] {3, (-63), 3}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) (-737);
      floatArray0[4] = (float) 3;
      floatArray0[5] = (float) 0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 3.0F, 3);
      assertEquals(6, floatArray0.length);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      assertArrayEquals(new float[] {1.0F, 3.0F, 3.0F, (-737.0F), 3.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1668L;
      doubleArray0[1] = (double) 1668L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1668.0, 1668.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-627.403F);
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-627.403F)}, floatArray0, 0.01F);
      
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) 1668L);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) 1668L);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1668L;
      doubleArray0[0] = (double) 1668L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1668.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-627.403F);
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-627.403F)}, floatArray0, 0.01F);
      
      Float[] floatArray1 = new Float[1];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) 1668L);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1668.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1828.8;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1828.8);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1828.8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[7];
      doubleArray0[0] = (double) (-882L);
      longArray0[1] = 0L;
      longArray0[2] = (-947L);
      longArray0[3] = 1670L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-882.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((float) 1670L);
      assertNotNull(float0);
      assertEquals(1670.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1575.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1575.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-882.0));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals((-882.0F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) (-882L));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals((-882.0F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) floatArray0[2]);
      assertEquals(5, floatArray0.length);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals((-882.0F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1670.0F, (-1575.0F), (-882.0F), (-882.0F), (-882.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double(56);
      assertNotNull(double0);
      assertEquals(56.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2585, 56);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      MutableInt mutableInt0 = new MutableInt((-2264));
      assertNotNull(mutableInt0);
      assertEquals((-2264.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)40, mutableInt0.byteValue());
      assertEquals((-2264), (int)mutableInt0.getValue());
      assertEquals((short) (-2264), mutableInt0.shortValue());
      assertEquals((-2264.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2264), (int)mutableInt0.toInteger());
      assertEquals((-2264), mutableInt0.intValue());
      assertEquals((-2264L), mutableInt0.longValue());
      assertEquals("-2264", mutableInt0.toString());
      
      mutableInt0.add((Number) 0.0F);
      assertEquals((-2264.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)40, mutableInt0.byteValue());
      assertEquals((-2264), (int)mutableInt0.getValue());
      assertEquals((short) (-2264), mutableInt0.shortValue());
      assertEquals((-2264.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2264), (int)mutableInt0.toInteger());
      assertEquals((-2264), mutableInt0.intValue());
      assertEquals((-2264L), mutableInt0.longValue());
      assertEquals("-2264", mutableInt0.toString());
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 3060L;
      longArray0[1] = 0L;
      longArray0[2] = (long) 101;
      longArray0[3] = (long) (-2264);
      longArray0[4] = (long) (-2264);
      longArray0[5] = (long) 101;
      longArray0[6] = (long) 101;
      longArray0[7] = (long) 101;
      longArray0[8] = (-1L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-3121L));
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {3060L, 0L, 101L, (-2264L), (-2264L), 101L, 101L, 101L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-3121L), 3060L, 0L, 101L, (-2264L), (-2264L), 101L, 101L, 101L, (-1L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Double double0 = new Double(0L);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray2, (-1744.715449));
      assertEquals(0, doubleArray2.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Double double0 = new Double(3634.2973);
      assertNotNull(double0);
      assertEquals(3634.2973, (double)double0, 0.01);
      
      Double double1 = new Double((-993.0984195));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-993.0984195), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      Byte byte0 = new Byte((byte) (-53));
      assertNotNull(byte0);
      assertEquals((byte) (-53), (byte)byte0);
      
      Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) byte0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-53);
      shortArray0[1] = (short) (byte) (-53);
      shortArray0[2] = (short) (byte) (-53);
      shortArray0[3] = (short) (byte) (-53);
      shortArray0[4] = (short) (byte) (-53);
      shortArray0[5] = (short) (byte) (-53);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 190);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 190, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)9510;
      shortArray0[1] = (short)8192;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)3035;
      shortArray0[5] = (short)6722;
      shortArray0[6] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)8192);
      assertEquals(7, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)9510, (short)8192, (short) (-1), (short) (-1), (short)3035, (short)6722, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)9510, (short) (-1), (short) (-1), (short)3035, (short)6722, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap((Object[]) null, 2, 2, Integer.MAX_VALUE);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 2;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 1724);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {4.0, 2.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift((Object[]) null, 2, 3863, (-2146086456));
      Character[] characterArray0 = new Character[1];
      char char0 = ' ';
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {' '}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) Integer.MAX_VALUE, (int) char0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {4.0, 2.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1116);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-2676));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2676, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      Character[] characterArray0 = new Character[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-4115.49), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) doubleArray0[0];
      objectArray0[1] = (Object) double1;
      objectArray0[2] = (Object) double1;
      objectArray0[3] = (Object) doubleArray0[1];
      objectArray0[4] = (Object) doubleArray0[1];
      objectArray0[5] = (Object) doubleArray0[3];
      ArrayUtils.swap(doubleArray1, (-167), (-1684));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-4115.49), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) (-1684));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-4115.49), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isEquals(doubleArray0[0], doubleArray0[3]);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.indexOf(longArray0, (long) (-1), 0);
      assertEquals(0, longArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {}, longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (-1684));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-4115.49), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3471), (-3471));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-84)}, byteArray0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-84);
      shortArray0[1] = (short) (byte) (-84);
      shortArray0[2] = (short) (byte) (-84);
      shortArray0[3] = (short) (byte) (-84);
      shortArray0[4] = (short) (byte) (-84);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-84));
      assertEquals(6, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-84), (short) (-84), (short) (-84), (short) (-84), (short) (-84), (short) (-84)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-84), (short) (-84), (short) (-84), (short) (-84), (short) (-84)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1117;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(14, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1117, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (short)1117;
      doubleArray0[2] = (double) (short)1117;
      doubleArray0[3] = (double) (short)1117;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1117.0, 1117.0, 1117.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap((Object[]) null, 2, 2, Integer.MAX_VALUE);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 2;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 1724);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {4.0, 2.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) Integer.MAX_VALUE, 1724);
      assertEquals(6, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)8080;
      shortArray0[1] = (short) (-24313);
      shortArray0[2] = (short)14;
      shortArray0[3] = (short)186;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)8080, (short) (-24313), (short)14, (short)186}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4.0, 2.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, 1032);
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.insert(1032, (int[]) null, (int[]) null);
      assertNull(intArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 1032;
      longArray0[1] = (long) 1032;
      longArray0[2] = (long) 1032;
      longArray0[3] = (long) 1032;
      longArray0[4] = (long) 1032;
      longArray0[5] = (long) 1032;
      longArray0[6] = (long) 1032;
      int int0 = ArrayUtils.indexOf(longArray0, 0L, 1);
      assertEquals(7, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {1032L, 1032L, 1032L, 1032L, 1032L, 1032L, 1032L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)6);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Character character0 = new Character('F');
      assertNotNull(character0);
      assertEquals('F', (char)character0);
      
      Character character1 = new Character('F');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('F', (char)character1);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Byte byte0 = new Byte((byte)93);
      assertNotNull(byte0);
      assertEquals((byte)93, (byte)byte0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)93;
      intArray0[1] = (int) (byte)93;
      intArray0[2] = (int) (byte)93;
      intArray0[3] = (int) (byte)93;
      intArray0[4] = (int) (byte)93;
      intArray0[5] = (int) (byte)93;
      intArray0[6] = (int) (byte)93;
      intArray0[7] = (int) (byte)93;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 0L, (-1555));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1283L;
      longArray0[1] = 0L;
      longArray0[2] = 99L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1283L, 0L, 99L}, longArray0);
      assertArrayEquals(new long[] {1283L, 0L, 99L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 45;
      intArray0[1] = 171;
      intArray0[2] = (-719);
      intArray0[3] = (-182);
      ArrayUtils.reverse(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-182), (-719), 171, 45}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 4712L);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'D', 171);
      assertEquals(0, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[5] = (-925.0423F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, (-925.0423F)}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)9;
      Byte byte0 = Byte.valueOf((byte)54);
      assertNotNull(byte0);
      assertEquals((byte)54, (byte)byte0);
      
      Double double0 = new Double((-2469.9027490383));
      assertNotNull(double0);
      assertEquals((-2469.9027490383), (double)double0, 0.01);
      
      String string0 = ArrayUtils.toString((Object) double0);
      assertNotNull(string0);
      assertEquals("-2469.9027490383", string0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)54;
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {54.0}, doubleArray0, 0.01);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte)9;
      byteArray1[5] = (byte)54;
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 2905, 54);
      assertEquals(6, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9, (byte)9, (byte)9, (byte)54}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2905;
      intArray0[1] = 54;
      intArray0[2] = (int) (byte)9;
      intArray0[3] = (int) (byte)54;
      intArray0[4] = (-1771);
      intArray0[5] = (int) (byte)9;
      int int0 = ArrayUtils.indexOf(intArray0, (-1142));
      assertEquals(6, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {2905, 54, 9, 54, (-1771), 9}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-232);
      intArray0[1] = 57;
      intArray0[2] = 2128;
      intArray0[3] = 7;
      Double double0 = new Double(27.33522220953097);
      assertNotNull(double0);
      assertEquals(27.33522220953097, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = 'u';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'u');
      assertEquals(2, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'-', 'u'}, charArray0);
      
      ArrayUtils.swap(charArray0, 0, (-928));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'-', 'u'}, charArray0);
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-232), 57, 2128, 7, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-232), 57, 2128, 7, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-232);
      intArray0[1] = 57;
      intArray0[2] = 2128;
      intArray0[3] = 7;
      intArray0[4] = 14;
      intArray0[5] = (-1115);
      intArray0[6] = 2141322482;
      intArray0[7] = 1191;
      ArrayUtils.swap(intArray0, (-1115), 7, (-4591));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-232), 57, 2128, 7, 14, (-1115), 2141322482, 1191}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.insert(2141322482, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1115);
      doubleArray0[1] = (double) 57;
      doubleArray0[2] = (double) 1191;
      doubleArray0[3] = (double) (-1115);
      doubleArray0[4] = (double) (-1115);
      doubleArray0[5] = (double) (-232);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-232.0), (-1115.0), (-1115.0), 1191.0, 57.0, (-1115.0)}, doubleArray0, 0.01);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-232));
      assertNotNull(long0);
      assertEquals((-232L), (long)long0);
      
      Long long1 = Long.getLong("", long0);
      assertNotNull(long1);
      assertEquals((-232L), (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long((-1115));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-1115L), (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long((-2714L));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals((-2714L), (long)long3);
      
      longArray0[2] = long3;
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1136).when(comparator0).compare(anyLong() , anyLong());
      boolean boolean0 = ArrayUtils.isSorted(longArray0, comparator0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-55);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-66), (int) (byte) (-55));
      assertEquals(2, byteArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-55)}, byteArray0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((byte) (-66));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-66L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((byte) (-55));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-55L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((byte) (-66));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals((-66L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((long) longArray0[1]);
      assertEquals(6, longArray0.length);
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals((-66L), (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((byte) (-66));
      assertFalse(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long1));
      assertNotNull(long5);
      assertEquals((-66L), (long)long5);
      
      longArray0[5] = long5;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(6, longArray0.length);
      assertFalse(boolean0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 70.0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "The Array must not be null";
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      Double double1 = new Double(0.7);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.7, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) stringArray0, (Object[]) doubleArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)5747;
      shortArray0[1] = (short)82;
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(10, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)5747, (short)82, (short)0, (short)0, (short)0, (short)5747, (short)82, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)5747, (short)82, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      org.evosuite.runtime.Random.setNextRandom(2952);
      boolean boolean2 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean2);
      assertArrayEquals(new short[] {(short)5747, (short)82, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short)85;
      shortArray0[0] = (short)85;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1073741824), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1073741824, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-3036));
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(245);
      assertNotNull(integer0);
      assertEquals(245, (int)integer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)103;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2585, (-2070));
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)103}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2054), (int) (byte)8);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '%');
      assertNull(charArray0);
      
      char[] charArray1 = ArrayUtils.removeElement((char[]) null, '0');
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1.0F;
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = ',';
      charArray0[2] = 'A';
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 'A';
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1750.0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, Double.NaN, 65.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 65.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray1, 228);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 228, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "The Array must not be null";
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      Double double1 = new Double(0.7);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.7, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) stringArray0, (Object[]) doubleArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)5747;
      shortArray0[1] = (short)82;
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(10, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)5747, (short)82, (short)0, (short)0, (short)0, (short)5747, (short)82, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)5747, (short)82, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray1, (-1908));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1908, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-1299.790305212126);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short)0, (int) (short)0, 1329);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      try { 
        Long.decode("Array and element cannot both be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Array and element cannot both be null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short)0, (int) (short)5, 9);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)5, (short)0}, shortArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)5;
      objectArray0[2] = (Object) (short)5;
      objectArray0[3] = (Object) (short)0;
      try { 
        Long.decode("ZUfS");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ZUfS\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short)0, (int) (short)5, 9);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)5, (short)0}, shortArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)5;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)5;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = (Object) (short)5;
      objectArray0[5] = (Object) (short)0;
      objectArray0[6] = (Object) (short)0;
      Float float0 = new Float(910.8481F);
      assertNotNull(float0);
      assertEquals(910.8481F, (float)float0, 0.01F);
      
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertNotNull(object0);
      assertEquals(910.8481F, object0);
      
      objectArray0[7] = object0;
      objectArray0[8] = (Object) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(9, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)7;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)7;
      longArray0[1] = (long) 2076;
      longArray0[2] = 718L;
      longArray0[3] = 718L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 1);
      assertEquals(4, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {7L, 2076L, 718L, 718L}, longArray0);
      
      Integer integer0 = new Integer((byte)7);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      Integer integer1 = new Integer(2076);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2076, (int)integer1);
      
      Integer integer2 = new Integer((-1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      ArrayUtils.shift(longArray0, 1);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {718L, 7L, 2076L, 718L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)7;
      shortArray0[1] = (short) (byte)85;
      shortArray0[2] = (short) (byte)85;
      shortArray0[3] = (short)86;
      shortArray0[4] = (short) (byte)85;
      shortArray0[5] = (short) (-173);
      shortArray0[6] = (short) (byte)7;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-6287), (-10));
      assertEquals(7, shortArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)7, (short)85, (short)85, (short)86, (short)85, (short) (-173), (short)7}, shortArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "B.3(v$");
      assertNull(stringArray0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted((Object[]) null, comparator0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-6287);
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "java.lang.Object");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      boolean boolean0 = ArrayUtils.contains((int[]) null, 56);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = (-1380.3F);
      floatArray0[3] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1380.3F), 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs(1L, (-390L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      Double double0 = new Double((-439.883));
      assertNotNull(double0);
      assertEquals((-439.883), (double)double0, 0.01);
      
      boolean[] booleanArray0 = new boolean[19];
      long[] longArray0 = new long[3];
      longArray0[0] = 2507L;
      longArray0[1] = (-1882L);
      longArray0[2] = 75L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 75L);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {2507L, (-1882L), 75L}, longArray0);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(19, booleanArray0.length);
      assertEquals(19, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)6);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Float float0 = new Float((float) (byte)6);
      assertNotNull(float0);
      assertEquals(6.0F, (float)float0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-66), 2398);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 56);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 56);
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {101}, intArray0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-257));
      assertNull(shortArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2147028190, 101);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'K', 'P', 'P', 'K', 'K'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray0, 'P');
      assertEquals(5, charArray0.length);
      assertEquals(3, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'K', 'P', 'P', 'K', 'K'}, charArray0);
      assertArrayEquals(new char[] {'K', 'K', 'K'}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      ArrayUtils.shift(charArray0, 1225);
      assertEquals(5, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'K', 'P', 'P', 'K', 'K'}, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-22));
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-22)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)126;
      float[] floatArray0 = new float[13];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(13, floatArray0.length);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 103.0F, (int) (byte)126);
      assertEquals(13, floatArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (double) (byte)79;
      doubleArray0[2] = (double) (byte)126;
      doubleArray0[3] = (double) (byte)126;
      doubleArray0[4] = (double) (byte)79;
      doubleArray0[5] = (double) (byte)126;
      doubleArray0[6] = (double) 103.0F;
      doubleArray0[7] = (double) (byte)126;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 126.0);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.5, 79.0, 126.0, 126.0, 79.0, 126.0, 103.0, 126.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {126.0, 1.5, 79.0, 126.0, 126.0, 79.0, 126.0, 103.0, 126.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.5, 79.0, 126.0, 126.0, 79.0, 126.0, 103.0, 126.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)79, (byte)126, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)79, (byte)126, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[2];
      Short short0 = new Short((short)583);
      assertNotNull(short0);
      assertEquals((short)583, (short)short0);
      
      MutableInt mutableInt0 = new MutableInt((Number) short0);
      assertNotNull(mutableInt0);
      assertEquals((short)583, mutableInt0.shortValue());
      assertEquals(583.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(583.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(583L, mutableInt0.longValue());
      assertEquals(583, mutableInt0.intValue());
      assertEquals("583", mutableInt0.toString());
      assertEquals(583, (int)mutableInt0.getValue());
      assertEquals((byte)71, mutableInt0.byteValue());
      assertEquals(583, (int)mutableInt0.toInteger());
      
      mutableIntArray0[0] = mutableInt0;
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals((short)583, mutableInt0.shortValue());
      assertEquals(583.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(583.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(583L, mutableInt0.longValue());
      assertEquals(583, mutableInt0.intValue());
      assertEquals("583", mutableInt0.toString());
      assertEquals(583, (int)mutableInt0.getValue());
      assertEquals((byte)71, mutableInt0.byteValue());
      assertEquals(583, (int)mutableInt0.toInteger());
      assertEquals(583.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(583.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((byte)71, mutableInt1.byteValue());
      assertEquals(583, (int)mutableInt1.toInteger());
      assertEquals("583", mutableInt1.toString());
      assertEquals(583, (int)mutableInt1.getValue());
      assertEquals(583, mutableInt1.intValue());
      assertEquals(583L, mutableInt1.longValue());
      assertEquals((short)583, mutableInt1.shortValue());
      
      mutableIntArray0[1] = mutableInt1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(mutableIntArray0, (int) 583);
      assertEquals(2, mutableIntArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '#');
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'a'}, charArray0);
      assertArrayEquals(new char[] {'a'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'a';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {97.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = 'g';
      charArray0[2] = 'r';
      charArray0[3] = 'f';
      charArray0[4] = '<';
      charArray0[5] = '_';
      charArray0[6] = ';';
      charArray0[7] = 'T';
      charArray0[8] = 'A';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '<');
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'^', 'g', 'r', 'f', '<', '_', ';', 'T', 'A'}, charArray0);
      assertArrayEquals(new char[] {'^', 'g', 'r', 'f', '_', ';', 'T', 'A'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 1339;
      intArray0[2] = (-2141644121);
      intArray0[3] = 2;
      intArray0[4] = 53;
      intArray0[5] = 1;
      intArray0[6] = 2;
      intArray0[7] = 6;
      ArrayUtils.reverse(intArray0, 1339, (-698));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 1339, (-2141644121), 2, 53, 1, 2, 6}, intArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 1;
      objectArray0[1] = (Object) 2;
      objectArray0[2] = (Object) 6;
      objectArray0[3] = (Object) 6;
      objectArray0[4] = (Object) 6;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[3], 1339);
      assertEquals(5, objectArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1425.356F;
      floatArray0[1] = 908.6487F;
      floatArray0[2] = 1624.6F;
      floatArray0[3] = 550.3413F;
      floatArray0[4] = 78.9578F;
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), 1);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {1425.356F, 908.6487F, 1624.6F, 550.3413F, 78.9578F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1425.356F, 908.6487F, 1624.6F, 550.3413F, 78.9578F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, 86, (-1), 1);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-287.79187F));
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1425.356F, 908.6487F, 1624.6F, 550.3413F, 78.9578F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1425.356F, 908.6487F, 1624.6F, 550.3413F, 78.9578F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int1 = ArrayUtils.indexOf(floatArray0, 103.0F, 86);
      assertEquals(5, floatArray0.length);
      assertTrue(int1 == int0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {1425.356F, 908.6487F, 1624.6F, 550.3413F, 78.9578F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      int int2 = ArrayUtils.indexOf(floatArray0, (-255.0F), 86);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertArrayEquals(new float[] {1425.356F, 908.6487F, 1624.6F, 550.3413F, 78.9578F}, floatArray0, 0.01F);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)1544);
      assertNotNull(short0);
      assertEquals((short)1544, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)1544);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)1544, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1849));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-1849), (short)short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1544, (short)1544, (short) (-1849)}, shortArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1849);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1849.0F)}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf((Object[]) shortArray0, (Object) short1);
      assertEquals(3, shortArray0.length);
      assertFalse(short1.equals((Object)short2));
      assertTrue(short1.equals((Object)short0));
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1544;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {1544.0}, doubleArray0, 0.01);
      
      Character[] characterArray0 = new Character[8];
      char char0 = '\\';
      Character character0 = Character.valueOf('\\');
      assertNotNull(character0);
      assertEquals('\\', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('\\');
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('\\', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('\\', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('\\');
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('\\', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf(char0);
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('\\', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf((char) character1);
      assertTrue(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character4));
      assertTrue(character1.equals((Object)character3));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character1));
      assertNotNull(character5);
      assertEquals('\\', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char0);
      assertTrue(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)character0));
      assertTrue(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)character3));
      assertTrue(character6.equals((Object)char0));
      assertTrue(character6.equals((Object)character4));
      assertTrue(character6.equals((Object)character5));
      assertNotNull(character6);
      assertEquals('\\', (char)character6);
      
      characterArray0[6] = character6;
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) null, (Object[]) characterArray0);
      assertEquals(8, characterArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.swap(floatArray0, 80, (int) char0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1849.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)1544);
      assertNotNull(short0);
      assertEquals((short)1544, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)1544);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)1544, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1849));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-1849), (short)short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1544, (short)1544, (short) (-1849)}, shortArray1);
      
      Character character0 = Character.valueOf('?');
      assertNotNull(character0);
      assertEquals('?', (char)character0);
      
      Character character1 = Character.valueOf('T');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('T', (char)character1);
      
      Character character2 = Character.valueOf('a');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('a', (char)character2);
      
      Character character3 = new Character('T');
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('T', (char)character3);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) shortArray0);
      assertEquals(3, shortArray0.length);
      assertFalse(boolean0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((double) shortArray0[0]);
      assertEquals(3, shortArray0.length);
      assertNotNull(double0);
      assertEquals(1544.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) shortArray0[1]);
      assertEquals(3, shortArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1544.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((short)1544);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(1544.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((short)1544);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(1544.0, (double)double3, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, double3);
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '?';
      intArray0[1] = (int) 'a';
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) shortArray0[1]);
      assertEquals(3, shortArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {63, 97}, intArray0);
      assertArrayEquals(new int[] {63, 97}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(4584.2941053);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(4584.2941053, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(5, doubleArray0.length);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1.0);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals(1.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 4584.2941053, 0.0, 1.0}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = '-';
      charArray0[2] = 'u';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'h');
      assertEquals(3, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'G', '-', 'u'}, charArray0);
      
      ArrayUtils.swap(charArray0, 0, 0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'G', '-', 'u'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'G';
      ArrayUtils.reverse(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 0.0, 4584.2941053, 0.0, 0.0}, doubleArray1, 0.01);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '-');
      assertEquals(2, charArray1.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'G', 'u'}, charArray1);
      assertArrayEquals(new char[] {'G', '-', 'u'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      char[] charArray2 = new char[4];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 'G';
      charArray2[1] = 'G';
      charArray2[2] = 'u';
      charArray2[3] = 'h';
      int int0 = ArrayUtils.indexOf(charArray2, 'W');
      assertEquals(4, charArray2.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'G', 'G', 'u', 'h'}, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      Double double0 = new Double((-439.883));
      assertNotNull(double0);
      assertEquals((-439.883), (double)double0, 0.01);
      
      Double double1 = new Double((-439.883));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-439.883), (double)double1, 0.01);
      
      Double double2 = new Double((-4259.756109));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-4259.756109), (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-578.975));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-439.883)}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = 'x';
      charArray0[2] = '-';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'u');
      assertEquals(5, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertArrayEquals(new char[] {'-', 'x', '-', 'u', 'u'}, charArray0);
      
      ArrayUtils.swap(charArray0, 0, (-3350));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'-', 'x', '-', 'u', 'u'}, charArray0);
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-439.883)}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray0, (-1572L));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1196);
      shortArray0[1] = (short)1874;
      shortArray0[2] = (short)51;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1196));
      assertEquals(3, shortArray0.length);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short) (-1196), (short)1874, (short)51}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      double double0 = (-4115.49);
      Double double1 = Double.valueOf((-4115.49));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-4115.49), (double)double1, 0.01);
      
      doubleArray0[0] = double1;
      short short0 = (short) (-23319);
      char[] charArray0 = new char[19];
      charArray0[0] = 'J';
      charArray0[1] = 'D';
      charArray0[2] = 'Q';
      ArrayUtils.shift(charArray0, 2);
      assertEquals(19, charArray0.length);
      
      byte byte0 = (byte) (-22);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) doubleArray0[0];
      doubleArray1[1] = 3.0;
      doubleArray1[2] = (double) (short) (-23319);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3009), doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3009, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = (Float) (float)0;
      floatArray0[1] = (Float) (float)0;
      floatArray0[2] = (Float) (float)0;
      int[] intArray0 = new int[6];
      intArray0[0] = (-4924);
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'R';
      charArray0[4] = ',';
      charArray0[5] = 'd';
      charArray0[7] = '<';
      ArrayUtils.shift(charArray0, (-4924));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {',', 'd', '\u0000', '<', 'R', 'B', 'B', 'R'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 56, 1307);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[5] = (-925.0423F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, (-925.0423F)}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)9;
      Byte byte0 = Byte.valueOf((byte)54);
      assertNotNull(byte0);
      assertEquals((byte)54, (byte)byte0);
      
      Double double0 = new Double((-2469.9027490383));
      assertNotNull(double0);
      assertEquals((-2469.9027490383), (double)double0, 0.01);
      
      String string0 = ArrayUtils.toString((Object) double0);
      assertNotNull(string0);
      assertEquals("-2469.9027490383", string0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte)9;
      byteArray1[5] = (byte)54;
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 2905, 54);
      assertEquals(6, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9, (byte)9, (byte)9, (byte)54}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), (-2427));
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)56, (byte)96, (byte)37, (byte)82, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-682));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      Double double0 = new Double((-993.0984195));
      assertNotNull(double0);
      assertEquals((-993.0984195), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[15];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 946.51F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {946.51F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)969;
      shortArray0[1] = (short) (-31);
      shortArray0[2] = (short) (-1468);
      shortArray0[3] = (short)3644;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-132);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-149);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1468));
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)969, (short) (-31), (short) (-1468), (short)3644, (short)0, (short) (-132), (short)0, (short) (-149)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1468), (short)969, (short) (-31), (short) (-1468), (short)3644, (short)0, (short) (-132), (short)0, (short) (-149)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)3644;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (short)0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {3644.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3644.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-88.9));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-88.9), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(5, doubleArray0.length);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      Double double4 = new Double(1.0);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals(1.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-0.6269777847940259));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-88.9), (-0.6269777847940259), 1.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = ArrayUtils.insert(0, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      float[] floatArray0 = new float[5];
      floatArray0[4] = (-925.0423F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '-';
      intArray0[1] = 0;
      intArray0[2] = (int) '-';
      intArray0[3] = (int) 'G';
      intArray0[4] = 1545;
      intArray0[5] = (int) 'G';
      intArray0[6] = 0;
      intArray0[8] = 698;
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 45, 71, 1545, 71, 0, 0, 698, 45}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-31915);
      shortArray0[1] = (short) (-622);
      shortArray0[2] = (short)97;
      shortArray0[3] = (short) (-1627);
      shortArray0[4] = (short)321;
      shortArray0[5] = (short)1136;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)54);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-31915), (short) (-622), (short)97, (short) (-1627), (short)321, (short)1136}, shortArray0);
      assertArrayEquals(new short[] {(short) (-31915), (short) (-622), (short)97, (short) (-1627), (short)321, (short)1136, (short)54}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'q';
      charArray0[1] = '!';
      charArray0[2] = 'B';
      charArray0[3] = 's';
      charArray0[4] = 'l';
      charArray0[5] = 'V';
      charArray0[6] = '7';
      charArray0[7] = 'd';
      charArray0[8] = '=';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-306), 'd');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -306, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3915;
      shortArray0[1] = (short)3226;
      shortArray0[2] = (short)132;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-2755));
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3915, (short)3226, (short)132}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2755), (short)3915, (short)3226, (short)132}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-2755);
      intArray0[1] = (int) (short)3226;
      intArray0[2] = (int) (short)3915;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (short)3226, (int) (short)132);
      assertEquals(3, intArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {(-2755), 3226, 3915}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2515;
      intArray0[1] = 7;
      intArray0[2] = (-1660);
      intArray0[3] = 11;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3349), 7);
      assertEquals(4, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {2515, 7, (-1660), 11}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Double double0 = new Double(3634.2973);
      assertNotNull(double0);
      assertEquals(3634.2973, (double)double0, 0.01);
      
      Double double1 = new Double((-993.0984195));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-993.0984195), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[10];
      doubleArray0[0] = double1;
      String string0 = ArrayUtils.toString((Object) double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(string0);
      assertEquals("-993.0984195", string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), (-1));
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[5];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-6287);
      doubleArray0[1] = (double) (-1570);
      doubleArray0[2] = (double) (-1570);
      doubleArray0[3] = (double) (short) (-6287);
      doubleArray0[4] = 0.0;
      int[] intArray0 = new int[0];
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-6287.0), (-1570.0), (-1570.0), (-6287.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {(-6287.0), (-1570.0), (-1570.0), (-6287.0), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-6287.0), (-1570.0), (-1570.0), (-6287.0), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1366));
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)56);
      assertEquals(5, shortArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 8;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 134, (-2367));
      assertEquals(2, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {8, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2515;
      intArray0[2] = (-1660);
      intArray0[3] = 11;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3349), 7);
      assertEquals(4, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {2515, 0, (-1660), 11}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, (-63), 3, (-63));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-63);
      doubleArray0[1] = (double) (-63);
      doubleArray0[2] = (double) (-63);
      doubleArray0[3] = 1724.0;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = 3;
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertEquals(5, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, intArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-63.0), (-63.0), (-63.0), 3.0, 3.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-63.0), (-63.0), (-63.0), 1724.0, 3.0, 3.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {3, 3}, intArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, intArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-63.0), (-63.0), (-63.0), 3.0, 3.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-63.0), (-63.0), (-63.0), 1724.0, 3.0, 3.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {3, 3}, intArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 3);
      assertEquals(2, intArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {3, 3}, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 3, (-737));
      assertEquals(1, floatArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, (-2109), (Object) null);
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      ArrayUtils.swap(objectArray0, (-2109), 10, 99);
      assertEquals(1, objectArray0.length);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(3, classArray0.length);
      assertEquals(3, classArray1.length);
      assertNotNull(classArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)14;
      shortArray0[2] = (short) (-16);
      shortArray0[3] = (short)2642;
      shortArray0[4] = (short)2591;
      ArrayUtils.reverse(shortArray0, 77, (int) (short)14);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)3, (short)14, (short) (-16), (short)2642, (short)2591}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[3] = '&';
      charArray0[3] = 'k';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'k', (int) (byte)54);
      assertEquals(4, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'(', '(', '\u0000', 'k'}, charArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)126;
      shortArray0[1] = (short)8080;
      shortArray0[2] = (short) (byte)54;
      shortArray0[3] = (short) (byte)1;
      shortArray0[4] = (short)8080;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)186);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)126, (short)8080, (short)54, (short)1, (short)8080}, shortArray1);
      assertArrayEquals(new short[] {(short)126, (short)8080, (short)54, (short)1, (short)8080}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '(';
      intArray0[1] = (int) (short)8080;
      boolean boolean0 = ArrayUtils.contains(intArray0, 43);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {40, 8080}, intArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'E', 43);
      assertEquals(4, charArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertArrayEquals(new char[] {'(', '(', '\u0000', 'k'}, charArray0);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte)114;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-38), (byte)54, (byte)114, (byte)54, (byte)114, (byte) (-38), (byte)114, (byte)54}, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '(', (int) (byte)54);
      assertEquals(1, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'&'}, charArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1527);
      shortArray0[1] = (short) (byte)54;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)8080);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1527), (short)54}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1527), (short)54}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '&';
      intArray0[1] = (int) (byte)114;
      intArray0[2] = (int) (byte) (-38);
      intArray0[3] = (int) (byte)114;
      intArray0[4] = (int) (byte) (-38);
      intArray0[5] = (int) (short)8080;
      intArray0[6] = (int) (short) (-1527);
      intArray0[7] = (int) (byte)54;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-38));
      assertEquals(8, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {38, 114, (-38), 114, (-38), 8080, (-1527), 54}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      Double double2 = new Double(0.0);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[3] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-4115.49), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) doubleArray0[0];
      objectArray0[1] = (Object) double1;
      objectArray0[2] = (Object) double1;
      objectArray0[3] = (Object) doubleArray0[1];
      objectArray0[4] = (Object) doubleArray0[1];
      objectArray0[5] = (Object) doubleArray0[3];
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)2}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double3 = new Double(0.0);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) double0;
      objectArray1[1] = (Object) double3;
      objectArray1[2] = (Object) (byte)2;
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray1, (Object) null, 0);
      assertEquals(3, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals((-1), int0);
      assertNotSame(objectArray1, objectArray0);
      
      Byte byte0 = Byte.valueOf((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertNotNull(string0);
      assertEquals("2", string0);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-4115.49), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      ArrayUtils.swap((char[]) null, 2080374784, (-1824));
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 1164L);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {1164L}, longArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)99;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)99);
      assertEquals(4, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)99, (byte)99, (byte)5, (byte)99}, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)5;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {5.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift((char[]) null, (int) (byte)99);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)99;
      longArray0[1] = (long) (byte)99;
      longArray0[2] = (long) (byte)99;
      longArray0[3] = (long) (byte)99;
      longArray0[4] = (long) (byte)99;
      longArray0[5] = (long) (byte)99;
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (byte)5);
      assertEquals(7, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {99L, 99L, 99L, 99L, 99L, 99L, 5L}, longArray1);
      assertArrayEquals(new long[] {99L, 99L, 99L, 99L, 99L, 99L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[2] = 1283L;
      longArray0[3] = 3052L;
      longArray0[4] = (-2059L);
      longArray0[5] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1283L);
      assertEquals(6, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertArrayEquals(new long[] {0L, 0L, 1283L, 3052L, (-2059L), 0L}, longArray0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 1283L, 3052L, (-2059L), 0L}, longArray0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 774);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 774, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('b');
      assertNotNull(character0);
      assertEquals('b', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('', (char)character1);
      
      characterArray0[1] = character1;
      Float float0 = new Float((-2461.5408F));
      assertNotNull(float0);
      assertEquals((-2461.5408F), (float)float0, 0.01F);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) characterArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(7, characterArray0.length);
      assertFalse(boolean0);
      
      int int2 = ArrayUtils.lastIndexOf(objectArray0, (Object) character1, 2823);
      assertEquals(0, objectArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(character1.equals((Object)character0));
      assertEquals((-1), int2);
      
      ArrayUtils.reverse(booleanArray0);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = (char) character0;
      charArray0[1] = '';
      charArray0[2] = 'Z';
      charArray0[3] = 'b';
      charArray0[4] = '';
      charArray0[5] = (char) character1;
      charArray0[6] = 'b';
      charArray0[7] = '';
      charArray0[8] = (char) character1;
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'b', '', 'Z', 'b', '', '', 'b', '', ''}, charArray0);
      assertArrayEquals(new char[] {'b', '', 'Z', 'b', '', '', 'b', '', ''}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap((Object[]) null, 2, 2, Integer.MAX_VALUE);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 2;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 1724);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {4.0, 2.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift((Object[]) null, 2, 3863, (-2146086456));
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {' '}, charArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) ' ';
      longArray0[1] = (long) Integer.MAX_VALUE;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 52, 44);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2146086456);
      intArray0[1] = 3863;
      intArray0[2] = 1724;
      intArray0[3] = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 1724, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1724, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1502.426305);
      doubleArray0[1] = 531.995;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1149.4);
      doubleArray0[4] = 2045.61;
      doubleArray0[5] = 0.1;
      doubleArray0[6] = 3809.0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1502.426305), 531.995, 1.0, (-1149.4), 2045.61, 0.1, 3809.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)126;
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 103.0F, (int) (byte)126);
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (double) (byte)126;
      doubleArray0[2] = (double) (byte)126;
      doubleArray0[3] = (double) (byte)126;
      doubleArray0[4] = (double) (byte)79;
      doubleArray0[5] = (double) (byte)126;
      doubleArray0[6] = (double) 103.0F;
      doubleArray0[7] = (double) (byte)126;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 126.0);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.5, 126.0, 126.0, 126.0, 79.0, 126.0, 103.0, 126.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {126.0, 1.5, 126.0, 126.0, 126.0, 79.0, 126.0, 103.0, 126.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.5, 126.0, 126.0, 126.0, 79.0, 126.0, 103.0, 126.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[0] = (-1.0F);
      floatArray0[2] = (-1380.3F);
      floatArray0[3] = 0.0F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = (-1380.3F);
      floatArray0[3] = 0.0F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurrences(booleanArray2, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1809, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1809, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 29.86601489192;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 551.03455F;
      floatArray0[2] = (float) 0;
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(5, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) (-1.0);
      objectArray0[2] = (Object) (-1.0);
      objectArray0[3] = (Object) 551.03455F;
      objectArray0[4] = (Object) 0.0F;
      ArrayUtils.reverse(objectArray0);
      assertEquals(5, objectArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 774;
      longArray0[3] = (long) 0;
      int[] intArray0 = new int[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2L, 0L, 774L, 0L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {2L, 0L, 774L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 18688);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {18688}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      charArray0[1] = '0';
      charArray0[2] = '|';
      charArray0[3] = 'R';
      charArray0[4] = 'x';
      charArray0[5] = 'R';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '[');
      assertEquals(9, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'', '0', '|', 'R', 'x', 'R', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = 'L';
      charArray0[2] = 'b';
      charArray0[3] = '`';
      charArray0[4] = 'n';
      charArray0[5] = '%';
      charArray0[6] = 'l';
      charArray0[7] = '.';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'n');
      assertEquals(8, charArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'i', 'L', 'b', '`', 'n', '%', 'l', '.'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = '@';
      charArray0[2] = 'A';
      charArray0[3] = 'T';
      charArray0[4] = 'i';
      charArray0[5] = 'E';
      charArray0[6] = ';';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '0', 6);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'Y', '@', 'A', 'T', 'i', 'E', ';'}, charArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'E';
      doubleArray0[1] = (double) '0';
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) '@';
      doubleArray0[4] = (double) 'T';
      doubleArray0[5] = (double) 'E';
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) 6);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {69.0, 48.0, Double.NaN, 64.0, 84.0, 69.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {69.0, 48.0, Double.NaN, 64.0, 84.0, 69.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = (-1536);
      intArray0[4] = (-2333);
      intArray0[5] = (-1434);
      intArray0[7] = 7;
      intArray0[7] = Integer.MAX_VALUE;
      intArray0[8] = 827;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(18, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 7, 7, (-1536), (-2333), (-1434), 0, Integer.MAX_VALUE, 827}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) (-1434);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-604.3);
      doubleArray0[5] = (double) 827;
      ArrayUtils.swap(doubleArray0, (-698), (-1536));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {2.147483647E9, 7.0, (-1434.0), Double.NaN, (-604.3), 827.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 541.936);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2.147483647E9, 7.0, (-1434.0), Double.NaN, (-604.3), 827.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = 'W';
      charArray0[2] = '{';
      charArray0[3] = ')';
      charArray0[4] = ',';
      charArray0[5] = 'V';
      charArray0[6] = '5';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'N');
      assertEquals(7, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {']', 'W', '{', ')', ',', 'V', '5'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = 'z';
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      Double double0 = new Double(1L);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      Double double1 = new Double((double) doubleArray0[3]);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      
      doubleArray0[4] = double1;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      double[] doubleArray1 = ArrayUtils.add((double[]) null, (double) doubleArray0[1]);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      
      Integer integer0 = new Integer(2436);
      assertNotNull(integer0);
      assertEquals(2436, (int)integer0);
      
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      Integer integer2 = new Integer((-2266));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-2266), (int)integer2);
      
      Integer integer3 = new Integer(2436);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals(2436, (int)integer3);
      
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null, class0);
      assertEquals(0, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Class<Float[]> class0 = Float[].class;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0, class0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('b');
      assertNotNull(character0);
      assertEquals('b', (char)character0);
      
      Character[] characterArray1 = new Character[5];
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      characterArray1[0] = character0;
      characterArray1[1] = character0;
      characterArray1[2] = character0;
      characterArray1[3] = character0;
      characterArray1[4] = character0;
      Character[] characterArray2 = ArrayUtils.nullToEmpty(characterArray1);
      assertEquals(5, characterArray1.length);
      assertEquals(5, characterArray2.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertFalse(characterArray2.equals((Object)characterArray0));
      assertNotNull(characterArray2);
      assertNotSame(characterArray1, characterArray0);
      assertSame(characterArray1, characterArray2);
      assertSame(characterArray2, characterArray1);
      assertNotSame(characterArray2, characterArray0);
      
      ArrayUtils.shift((Object[]) characterArray0, (int) character0);
      assertEquals(7, characterArray0.length);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(characterArray0.equals((Object)characterArray2));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray0, characterArray2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 'b';
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) character0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 98.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 98.0, 98.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((int) character0);
      assertNotNull(integer0);
      assertEquals(98, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(356);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(356, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-1), (int)integer3);
      
      integerArray0[3] = integer3;
      Class<Integer[]> class0 = Integer[].class;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0, class0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1757L;
      longArray0[1] = 1773L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1757L, 1773L}, longArray0);
      assertArrayEquals(new long[] {1757L, 1773L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)359);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)359;
      doubleArray0[1] = (-227.47);
      doubleArray0[2] = 2.147483648E9;
      doubleArray0[3] = (double) (short)359;
      doubleArray0[4] = (double) (short)359;
      doubleArray0[5] = (double) (short)359;
      doubleArray0[6] = (double) (short)359;
      doubleArray0[7] = (double) (short)359;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2836.00489));
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {359.0, (-227.47), 2.147483648E9, 359.0, 359.0, 359.0, 359.0, 359.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 2.147483648E9);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {359.0, (-227.47), 2.147483648E9, 359.0, 359.0, 359.0, 359.0, 359.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {359.0, (-227.47), 359.0, 359.0, 359.0, 359.0, 359.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'm');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[1];
      ArrayUtils.swap(longArray0, (-1167), 46);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'S');
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long[] longArray0 = new long[1];
      Long[] longArray1 = new Long[3];
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray1[0] = long0;
      Long long1 = new Long((-232L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-232L), (long)long1);
      
      longArray1[1] = long1;
      Long long2 = new Long((-1));
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      
      longArray1[2] = long2;
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyLong() , anyLong());
      boolean boolean0 = ArrayUtils.isSorted(longArray1, comparator0);
      assertEquals(3, longArray1.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean boolean2 = ArrayUtils.contains(byteArray0, (byte)120);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      Long[] longArray0 = new Long[10];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(10, longArray0.length);
      assertEquals(10, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      int[] intArray0 = new int[0];
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1}, byteArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, 1988);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1988}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Short[] shortArray0 = new Short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      
      Long long0 = new Long((byte)0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)3;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)85, (byte)7, (byte)3, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {3, 0, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)3}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (-1119));
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1119)}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Double[] doubleArray0 = new Double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(doubleArray0, (Comparator<Double>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      int[] intArray0 = new int[8];
      intArray0[0] = (-4591);
      intArray0[1] = (-4591);
      ArrayUtils.swap(intArray0, (-4591), (-4591), (-3817));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-4591), (-4591), 0, 0, 0, 0, 0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)97;
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)97}, byteArray0);
      assertArrayEquals(new byte[] {(byte)97, (byte)97}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Long long0 = new Long((-2427L));
      assertNotNull(long0);
      assertEquals((-2427L), (long)long0);
      
      Long long1 = new Long((-4591));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-4591L), (long)long1);
      
      Long[] longArray0 = new Long[0];
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(longArray0, comparator0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.add(shortArray1, (int) (short)0, (short)0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertEquals(11, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      ArrayUtils.swap(intArray0, (-2174), 0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 0, (double) 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)1518);
      assertNotNull(short0);
      assertEquals((short)1518, (short)short0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-232);
      intArray0[1] = 57;
      intArray0[2] = 2128;
      intArray0[3] = 7;
      intArray0[4] = 14;
      intArray0[5] = (-1115);
      intArray0[6] = 2141322482;
      intArray0[7] = 1191;
      ArrayUtils.swap(intArray0, (-1115), 7, (-4591));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-232), 57, 2128, 7, 14, (-1115), 2141322482, 1191}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.insert(2141322482, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1115);
      doubleArray0[1] = (double) 57;
      doubleArray0[2] = (double) 1191;
      doubleArray0[3] = (double) (-1115);
      doubleArray0[4] = (double) (-1115);
      doubleArray0[5] = (double) (-232);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-232.0), (-1115.0), (-1115.0), 1191.0, 57.0, (-1115.0)}, doubleArray0, 0.01);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-232));
      assertNotNull(long0);
      assertEquals((-232L), (long)long0);
      
      Long long1 = Long.getLong("", long0);
      assertNotNull(long1);
      assertEquals((-232L), (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long((-1115));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-1115L), (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long((-2714L));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-2714L), (long)long3);
      
      longArray0[2] = long3;
      Comparator<Long> comparator0 = (Comparator<Long>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyLong() , anyLong());
      boolean boolean0 = ArrayUtils.isSorted(longArray0, comparator0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-3148));
      assertNull(intArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = ',';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'5', ','}, charArray0);
      
      ArrayUtils.swap((int[]) null, (-2145582795), (-2146092790), Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1.0F;
      int[] intArray0 = new int[7];
      intArray0[0] = 15;
      intArray0[1] = 15;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (-66);
      intArray0[4] = (-2145340484);
      intArray0[5] = (-1182);
      intArray0[6] = (-5135);
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.insert((-1011), intArray1, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ArrayUtils.shift(byteArray0, 718);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, 2296, 2296, 2296);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      
      ArrayUtils.shift((byte[]) null, 2296);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-1533916891), 6, 6);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'A'}, charArray0);
      
      ArrayUtils.shift((Object[]) characterArray0, 2612, (-1993), 4);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'A'}, charArray0);
      
      Character character0 = Character.valueOf('A');
      assertNotNull(character0);
      assertEquals('A', (char)character0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(characterArray0, 4);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'A'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[10];
      ArrayUtils.swap(longArray0, (-1167), 46);
      assertEquals(10, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, (-1167), 46, 46);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (-1167), 46);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, (-1167), 46, 46);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true}, booleanArray0));
      
      ArrayUtils.shift((byte[]) null, (-1167));
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1828.8;
      float[] floatArray0 = new float[16];
      floatArray0[0] = 1583.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1583.0F);
      assertEquals(16, floatArray0.length);
      assertEquals(15, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1062);
      intArray0[1] = (-1062);
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      Character character0 = Character.valueOf('w');
      assertNotNull(character0);
      assertEquals('w', (char)character0);
      
      Character character1 = new Character('7');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('7', (char)character1);
      
      Character character2 = Character.valueOf('Q');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('Q', (char)character2);
      
      Character character3 = Character.valueOf('R');
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('R', (char)character3);
      
      Character character4 = Character.valueOf('Q');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      assertEquals('Q', (char)character4);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character3;
      characterArray0[3] = character4;
      characterArray0[4] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(5, characterArray1.length);
      assertEquals(5, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      ArrayUtils.shift((Object[]) characterArray1, 2);
      assertEquals(5, characterArray1.length);
      assertEquals(5, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-4567.2989365286));
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1828.8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1828.8, (-4567.2989365286)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray1 = ArrayUtils.clone((int[]) null);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      int[] intArray0 = new int[4];
      Character character0 = Character.valueOf('\u0017');
      assertNotNull(character0);
      assertEquals('\u0017', (char)character0);
      
      Character character1 = Character.valueOf('*');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('*', (char)character1);
      
      Character character2 = new Character('R');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('R', (char)character2);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character2;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character2;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      ArrayUtils.shift((Object[]) characterArray0, 0);
      assertEquals(4, characterArray0.length);
      assertSame(characterArray0, characterArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("Array and element cannot both be null");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('b');
      assertNotNull(character0);
      assertEquals('b', (char)character0);
      
      Character[] characterArray1 = new Character[5];
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      characterArray1[0] = character0;
      characterArray1[1] = character0;
      characterArray1[2] = character0;
      characterArray1[3] = character0;
      characterArray1[4] = character0;
      Character[] characterArray2 = ArrayUtils.nullToEmpty(characterArray1);
      assertEquals(5, characterArray2.length);
      assertEquals(5, characterArray1.length);
      assertFalse(characterArray2.equals((Object)characterArray0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray2);
      assertNotSame(characterArray2, characterArray0);
      assertSame(characterArray2, characterArray1);
      assertSame(characterArray1, characterArray2);
      assertNotSame(characterArray1, characterArray0);
      
      ArrayUtils.shift((Object[]) characterArray0, (int) character0);
      assertEquals(7, characterArray0.length);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(characterArray0.equals((Object)characterArray2));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray0, characterArray2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 'b';
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) character0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 98.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 98.0, 98.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)76;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)76}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)76;
      floatArray0[1] = (float) (byte)76;
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      charArray0[4] = 'P';
      charArray0[5] = 'P';
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-21845));
      assertNull(shortArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2608), 1004);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'P', 'P', 'P', 'P', 'P', 'P'}, charArray1);
      assertArrayEquals(new char[] {'P', 'P', 'P', 'P', 'P', 'P'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'Y');
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray2.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'P', 'P', 'P', 'P', 'P', 'P'}, charArray1);
      assertArrayEquals(new char[] {'P', 'P', 'P', 'P', 'P', 'P'}, charArray2);
      assertArrayEquals(new char[] {'P', 'P', 'P', 'P', 'P', 'P'}, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte) (-1));
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)76}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.shift((short[]) null, (int) (byte) (-1), (-1634), 1234);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'P';
      doubleArray0[1] = (double) 'P';
      doubleArray0[2] = (double) 'P';
      doubleArray0[3] = (double) 'Y';
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 76.0F;
      doubleArray0[6] = 100.0;
      doubleArray0[7] = (double) (-1634);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {80.0, 80.0, 80.0, 89.0, 0.0, 76.0, 100.0, (-1634.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1032;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)99);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)99, (byte)99}, byteArray0);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = (Byte) (byte)99;
      ArrayUtils.shift((short[]) null, (-5), (int) (byte)99, (int) (byte)99);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)99;
      doubleArray0[1] = (double) (-5);
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (-5));
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {99.0, (-5.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-167), (int) (byte)104);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      Byte byte0 = new Byte((byte)53);
      assertNotNull(byte0);
      assertEquals((byte)53, (byte)byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap((Object[]) null, 2, 2, Integer.MAX_VALUE);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 2;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 1724);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {4.0, 2.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift((Object[]) null, 2, 3863, (-2146086456));
      Character[] characterArray0 = new Character[1];
      char char0 = ' ';
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {' '}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) Integer.MAX_VALUE, (int) char0);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {4.0, 2.0}, doubleArray0, 0.01);
      
      MutableInt mutableInt0 = new MutableInt(Integer.MAX_VALUE);
      assertNotNull(mutableInt0);
      assertEquals(2147483647L, mutableInt0.longValue());
      assertEquals("2147483647", mutableInt0.toString());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.toInteger());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.getValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals(2.14748365E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.147483647E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, mutableInt0.intValue());
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(mutableInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'M';
      floatArray0[1] = (float) 'K';
      floatArray0[2] = (float) 'K';
      floatArray0[3] = (float) 'z';
      floatArray0[4] = (float) 'K';
      floatArray0[5] = (float) 'z';
      floatArray0[6] = (float) 'K';
      floatArray0[7] = (float) 'K';
      floatArray0[8] = (float) '\u0000';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {77.0F, 75.0F, 75.0F, 122.0F, 75.0F, 122.0F, 75.0F, 75.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) '~';
      floatArray1[1] = (float) 'K';
      floatArray1[2] = (float) '\u0000';
      floatArray1[3] = (float) 'K';
      floatArray1[4] = (float) 'K';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, 1.0F, (-752));
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {126.0F, 75.0F, 0.0F, 75.0F, 75.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'z';
      intArray0[1] = (int) '~';
      intArray0[2] = (-752);
      intArray0[3] = (-1217);
      intArray0[4] = (int) 'z';
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {122, 126, (-752), (-1217), 122}, intArray0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.toArray(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotNull(integerArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      Double double0 = new Double(948.7163622);
      assertNotNull(double0);
      assertEquals(948.7163622, (double)double0, 0.01);
      
      Double double1 = new Double((byte)5);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(5.0, (double)double1, 0.01);
      
      double[] doubleArray0 = ArrayUtils.insert((int) (byte)99, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)5;
      intArray0[1] = (int) (byte)99;
      intArray0[2] = (int) (byte)99;
      intArray0[3] = (int) (byte)99;
      intArray0[4] = (int) (byte)99;
      intArray0[5] = (int) (byte)99;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {5, 99, 99, 99, 99, 99}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (int) (byte)7);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)29362);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)29362}, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)85;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      ArrayUtils.reverse(longArray0, (-2128765637), 834);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 85L}, longArray0);
      
      ArrayUtils.shift((Object[]) null, 1696, 1696, (-942));
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = ArrayUtils.insert(91, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "The Array must not be null";
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      Double double1 = new Double(0.7);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.7, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) stringArray0, (Object[]) doubleArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)5747;
      shortArray0[1] = (short)82;
      boolean boolean1 = ArrayUtils.isSorted((float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) '~';
      floatArray0[3] = (float) (short)82;
      floatArray0[4] = (float) (short)5747;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 75.0F, (int) (short)82);
      assertEquals(5, floatArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 126.0F, 82.0F, 5747.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-1);
      byteArray0[5] = (byte) (-69);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)0;
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) (byte)2);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (byte) (-1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      ArrayUtils.shift((Object[]) floatArray1, (-1069));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-1.0F), 2.0F}, floatArray2, 0.01F);
      assertSame(floatArray0, floatArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-69);
      doubleArray0[1] = (double) (float)floatArray0[1];
      doubleArray0[2] = 0.1;
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (-1822);
      ArrayUtils.swap(doubleArray0, (-167), 57);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-69.0), 2.0, 0.1, (-1.0), (-1822.0)}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 347.6515288);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-69.0), 2.0, 0.1, (-1.0), (-1822.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEquals(floatArray0[0], "org.apache.commons.lang3.builder.ToStringStyle$JsonToStringStyle");
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      assertSame(floatArray0, floatArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)9;
      longArray0[1] = (long) (-1069);
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) (byte)9;
      longArray0[4] = (long) (byte) (-69);
      longArray0[5] = (long) (-1069);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (byte) (-47);
      int int1 = ArrayUtils.indexOf(longArray0, (-2076L), (-941));
      assertEquals(8, longArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {9L, (-1069L), 2L, 9L, (-69L), (-1069L), (-1L), (-47L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 9L;
      longArray0[1] = (long) (-232);
      longArray0[2] = (long) (-232);
      longArray0[3] = 9L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-37L), (-232));
      assertEquals(4, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {9L, (-232L), (-232L), 9L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1.0F;
      floatArray0[3] = 0.0F;
      Float float0 = new Float((-1380.3F));
      assertNotNull(float0);
      assertEquals((-1380.3F), (float)float0, 0.01F);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
      
      MutableInt mutableInt0 = new MutableInt((-1747));
      assertNotNull(mutableInt0);
      assertEquals((-1747), (int)mutableInt0.toInteger());
      assertEquals((-1747L), mutableInt0.longValue());
      assertEquals((byte)45, mutableInt0.byteValue());
      assertEquals((-1747), (int)mutableInt0.getValue());
      assertEquals((short) (-1747), mutableInt0.shortValue());
      assertEquals((-1747.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-1747", mutableInt0.toString());
      assertEquals((-1747.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1747), mutableInt0.intValue());
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals((-1747), (int)mutableInt0.toInteger());
      assertEquals((-1747L), mutableInt0.longValue());
      assertEquals((byte)45, mutableInt0.byteValue());
      assertEquals((-1747), (int)mutableInt0.getValue());
      assertEquals((short) (-1747), mutableInt0.shortValue());
      assertEquals((-1747.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-1747", mutableInt0.toString());
      assertEquals((-1747.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1747), mutableInt0.intValue());
      assertEquals((byte)45, mutableInt1.byteValue());
      assertEquals((-1747), (int)mutableInt1.getValue());
      assertEquals((short) (-1747), mutableInt1.shortValue());
      assertEquals((-1747L), mutableInt1.longValue());
      assertEquals((-1747.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1747), mutableInt1.intValue());
      assertEquals((-1747.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals("-1747", mutableInt1.toString());
      assertEquals((-1747), (int)mutableInt1.toInteger());
      
      MutableInt mutableInt2 = new MutableInt(0.0F);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertNotNull(mutableInt2);
      assertEquals("0", mutableInt2.toString());
      assertEquals(0.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(0, mutableInt2.intValue());
      assertEquals(0L, mutableInt2.longValue());
      assertEquals(0, (int)mutableInt2.toInteger());
      assertEquals((byte)0, mutableInt2.byteValue());
      assertEquals(0, (int)mutableInt2.getValue());
      assertEquals((short)0, mutableInt2.shortValue());
      assertEquals(0.0F, mutableInt2.floatValue(), 0.01F);
      
      MutableInt[] mutableIntArray0 = new MutableInt[3];
      mutableIntArray0[0] = mutableInt1;
      mutableIntArray0[1] = mutableInt0;
      mutableIntArray0[2] = mutableInt0;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeAllOccurrences(mutableIntArray0, mutableInt0);
      assertEquals(3, mutableIntArray0.length);
      assertEquals(0, mutableIntArray1.length);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertEquals((-1747), (int)mutableInt0.toInteger());
      assertEquals((-1747L), mutableInt0.longValue());
      assertEquals((byte)45, mutableInt0.byteValue());
      assertEquals((-1747), (int)mutableInt0.getValue());
      assertEquals((short) (-1747), mutableInt0.shortValue());
      assertEquals((-1747.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-1747", mutableInt0.toString());
      assertEquals((-1747.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1747), mutableInt0.intValue());
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-775.58792);
      doubleArray0[1] = 2580.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 328.1567945411, 1522.6861512);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-775.58792), 2580.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = 'W';
      charArray0[2] = 'p';
      charArray0[3] = 'm';
      charArray0[4] = 'h';
      charArray0[5] = 'y';
      charArray0[6] = 'H';
      charArray0[7] = 'p';
      charArray0[8] = 'F';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'(', 'W', 'p', 'm', 'h', 'y', 'H', 'p', 'F'}, charArray0);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, '(');
      assertEquals(9, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'(', 'W', 'p', 'm', 'h', 'y', 'H', 'p', 'F'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)6);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Float float0 = new Float((float) (byte)6);
      assertNotNull(float0);
      assertEquals(6.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((float) (byte)6);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(6.0F, (float)float1, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray0, (Object) float1);
      assertEquals(4, doubleArray0.length);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertFalse(boolean0);
      
      MutableInt mutableInt0 = new MutableInt(104);
      assertNotNull(mutableInt0);
      assertEquals(104L, mutableInt0.longValue());
      assertEquals(104.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("104", mutableInt0.toString());
      assertEquals((short)104, mutableInt0.shortValue());
      assertEquals(104, mutableInt0.intValue());
      assertEquals(104, (int)mutableInt0.getValue());
      assertEquals((byte)104, mutableInt0.byteValue());
      assertEquals(104, (int)mutableInt0.toInteger());
      assertEquals(104.0, mutableInt0.doubleValue(), 0.01);
      
      MutableInt mutableInt1 = new MutableInt(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals(6, mutableInt1.intValue());
      assertEquals(6, (int)mutableInt1.toInteger());
      assertEquals("6", mutableInt1.toString());
      assertEquals(6, (int)mutableInt1.getValue());
      assertEquals((byte)6, mutableInt1.byteValue());
      assertEquals((short)6, mutableInt1.shortValue());
      assertEquals(6.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(6L, mutableInt1.longValue());
      assertEquals(6.0F, mutableInt1.floatValue(), 0.01F);
      
      MutableInt mutableInt2 = new MutableInt(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertNotNull(mutableInt2);
      assertEquals(6, mutableInt2.intValue());
      assertEquals(6L, mutableInt2.longValue());
      assertEquals(6.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(6.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals("6", mutableInt2.toString());
      assertEquals(6, (int)mutableInt2.getValue());
      assertEquals(6, (int)mutableInt2.toInteger());
      assertEquals((byte)6, mutableInt2.byteValue());
      assertEquals((short)6, mutableInt2.shortValue());
      
      MutableInt[] mutableIntArray0 = new MutableInt[5];
      mutableIntArray0[0] = mutableInt0;
      mutableIntArray0[1] = mutableInt1;
      mutableIntArray0[2] = mutableInt0;
      mutableIntArray0[4] = mutableInt2;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeAllOccurrences(mutableIntArray0, mutableInt2);
      assertEquals(5, mutableIntArray0.length);
      assertEquals(3, mutableIntArray1.length);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertEquals(6, mutableInt2.intValue());
      assertEquals(6L, mutableInt2.longValue());
      assertEquals(6.0, mutableInt2.doubleValue(), 0.01);
      assertEquals(6.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals("6", mutableInt2.toString());
      assertEquals(6, (int)mutableInt2.getValue());
      assertEquals(6, (int)mutableInt2.toInteger());
      assertEquals((byte)6, mutableInt2.byteValue());
      assertEquals((short)6, mutableInt2.shortValue());
      assertNotSame(mutableInt2, mutableInt0);
      assertNotSame(mutableInt2, mutableInt1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((boolean[]) null, (-2120957684), (-1073741823), 4304);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4304;
      doubleArray0[1] = (double) (-1073741823);
      doubleArray0[2] = (double) (-1073741823);
      doubleArray0[3] = (double) 4304;
      doubleArray0[4] = (double) (-1073741823);
      doubleArray0[5] = (double) 4304;
      doubleArray0[6] = (double) (-1073741823);
      doubleArray0[7] = (-140.8184948787849);
      doubleArray0[8] = Double.NaN;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      byte byte0 = (byte)6;
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)6);
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte1 = new Byte((byte)6);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)6, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)14);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)14, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte)6, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)47);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      assertEquals((byte)47, (byte)byte4);
      
      ArrayUtils.shift((Object[]) byteArray0, (-237), (-113), 2562);
      assertEquals(8, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, 579, 43, 1396);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      
      Short short0 = new Short((short) (-847));
      assertNotNull(short0);
      assertEquals((short) (-847), (short)short0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) byteArray0, (Object) short0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = 'w';
      charArray0[2] = ' ';
      charArray0[3] = 'v';
      charArray0[4] = ';';
      charArray0[5] = 'q';
      charArray0[6] = 'V';
      charArray0[7] = 'T';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'A');
      assertEquals(8, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'Q', 'w', ' ', 'v', ';', 'q', 'V', 'T'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      Long[] longArray0 = new Long[10];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(10, longArray0.length);
      assertEquals(10, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'N');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3471), (-3471));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      int[] intArray0 = new int[2];
      intArray0[0] = (-3471);
      intArray0[1] = (-3471);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = '*';
      charArray0[3] = 'G';
      charArray0[4] = 'u';
      charArray0[5] = '$';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '$');
      assertEquals(6, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{5}", bitSet0.toString());
      assertArrayEquals(new char[] {'h', 'h', '*', 'G', 'u', '$'}, charArray0);
      
      ArrayUtils.swap(charArray0, 1, 2146674802);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'h', 'h', '*', 'G', 'u', '$'}, charArray0);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (long) 1724;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = (-2059L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2655L);
      assertEquals(6, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {0L, 1724L, 1L, 0L, 0L, (-2059L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)99);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (byte)99;
      doubleArray0[2] = (double) (-1);
      int int1 = ArrayUtils.indexOf(doubleArray0, 0.1, (-1), 0.1);
      assertEquals(3, doubleArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-1.0), 99.0, (-1.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 920.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 99.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 99.0, (-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (-173), (-1));
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      Long long0 = new Long((-840L));
      assertNotNull(long0);
      assertEquals((-840L), (long)long0);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long0;
      longArray0[3] = long0;
      longArray0[4] = longArray0[3];
      Object object0 = ArrayUtils.toPrimitive((Object) longArray0[4]);
      assertEquals(5, longArray0.length);
      assertTrue(object0.equals((Object)long0));
      assertNotNull(object0);
      assertEquals((-840L), object0);
      
      int[] intArray0 = new int[16];
      intArray0[0] = 0;
      int int0 = 4111;
      intArray0[1] = 4111;
      intArray0[2] = (-615);
      intArray0[3] = (-113);
      intArray0[4] = 4111;
      intArray0[5] = 0;
      intArray0[6] = (-809);
      intArray0[7] = 1993;
      intArray0[8] = (-1676);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-113), 9);
      assertEquals(16, intArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-615);
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 0, 577, (double) 4111);
      assertEquals(1, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertArrayEquals(new double[] {(-615.0)}, doubleArray0, 0.01);
      assertNotSame(bitSet1, bitSet0);
      
      bitSet0.and(bitSet1);
      assertEquals(1, doubleArray0.length);
      assertEquals(16, intArray0.length);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertArrayEquals(new double[] {(-615.0)}, doubleArray0, 0.01);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[3] = null;
      stringArray0[5] = "";
      String[] stringArray1 = ArrayUtils.addFirst(stringArray0, "");
      assertEquals(6, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)86;
      ArrayUtils.reverse(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)86, (byte)23, (byte)86, (byte)113}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-2084L);
      longArray0[2] = 445L;
      longArray0[3] = 1L;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)0);
      assertEquals(0, intArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 34.26186818549738, (-2146127912));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)57;
      shortArray0[1] = (short)57;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 50, (short)57);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 56);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 56);
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {101}, intArray0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-257));
      assertNull(shortArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2147028190, 101);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'K', 'P', 'P', 'K', 'K'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray0, 'P');
      assertEquals(5, charArray0.length);
      assertEquals(3, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'K', 'P', 'P', 'K', 'K'}, charArray0);
      assertArrayEquals(new char[] {'K', 'K', 'K'}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      ArrayUtils.shift(charArray0, 1225);
      assertEquals(5, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'K', 'P', 'P', 'K', 'K'}, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      
      ArrayUtils.swap(booleanArray0, (-1756), (int) (short) (-257));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      Short[] shortArray0 = new Short[16];
      short short0 = (short) (-9);
      Short short1 = new Short((short) (-9));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-9), (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short) (-2092));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-2092), (short)short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short) (-28365));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      assertEquals((short) (-28365), (short)short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short(short0);
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short) (-9), (short)short4);
      
      shortArray0[3] = short4;
      Short short5 = Short.valueOf((short) (-2));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertNotNull(short5);
      assertEquals((short) (-2), (short)short5);
      
      shortArray0[4] = short5;
      Short short6 = new Short((short) (-28365));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short1));
      assertTrue(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short2));
      assertNotNull(short6);
      assertEquals((short) (-28365), (short)short6);
      
      shortArray0[5] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[5]);
      assertEquals(16, shortArray0.length);
      assertEquals(16, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.swap(booleanArray0, 2603, (-173));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 56);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = 390L;
      longArray0[1] = (-1490L);
      longArray0[3] = (long) 101;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 101);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2147483647L, (-1490L), 0L, 101L}, longArray0);
      assertArrayEquals(new long[] {101L, 2147483647L, (-1490L), 0L, 101L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Double double0 = new Double(2299.3803846201);
      assertNotNull(double0);
      assertEquals(2299.3803846201, (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      Double double1 = new Double(0.1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.1, (double)double1, 0.01);
      
      doubleArray1[2] = double1;
      doubleArray1[3] = double0;
      doubleArray1[4] = double0;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3.0);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = 'r';
      charArray0[2] = 'X';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "The Array must not be null";
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      Double double1 = new Double(0.7);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.7, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) stringArray0, (Object[]) doubleArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)5747;
      shortArray0[1] = (short)82;
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean("org.apache.commons.lang3.ClassUtils");
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      MockRandom mockRandom0 = new MockRandom((short)5747);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)82;
      longArray0[1] = 0L;
      longArray0[2] = (long) (short)82;
      MockRandom mockRandom1 = new MockRandom((short)5747);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom1);
      assertEquals(3, longArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertArrayEquals(new long[] {0L, 82L, 82L}, longArray0);
      assertNotSame(mockRandom1, mockRandom0);
      
      boolean boolean3 = ArrayUtils.isNotEmpty((Short[]) null);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double0;
      Double double2 = new Double(0.0);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = doubleArray0[2];
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) double2;
      objectArray0[1] = (Object) double1;
      objectArray0[2] = (Object) double1;
      objectArray0[1] = (Object) double2;
      objectArray0[4] = (Object) doubleArray0[1];
      objectArray0[5] = (Object) doubleArray0[3];
      objectArray0[6] = (Object) double2;
      objectArray0[7] = (Object) doubleArray0[1];
      objectArray0[8] = (Object) double3;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(9, objectArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      ArrayUtils.shift(longArray0, (-348));
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) doubleArray0[3];
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) doubleArray0[3];
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 0L;
      doubleArray1[6] = (double) 0L;
      doubleArray1[7] = (double) 0.0F;
      doubleArray1[8] = (double) doubleArray0[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 0.0);
      assertEquals(9, doubleArray1.length);
      assertNotNull(bitSet0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-4115.49)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      ArrayUtils.shift((long[]) null, (-2240));
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1670L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 4712L);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1670L}, longArray0);
      assertArrayEquals(new long[] {1670L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, (double) (-567L));
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 29.86601489192, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-219);
      intArray0[2] = 55;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(3, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, (-219), 55}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3887.0F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-3887.0F));
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-3887.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, 2147146470, 2147146470, (-1));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1492.8F);
      floatArray0[1] = 1873.902F;
      floatArray0[2] = 1305.8942F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 99.0F, (-3527));
      assertEquals(3, floatArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {(-1492.8F), 1873.902F, 1305.8942F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-3507L);
      longArray0[1] = 1L;
      longArray0[2] = (long) (-3527);
      longArray0[3] = (long) (-3527);
      longArray0[4] = (long) (-3527);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-3507L), 1L, (-3527L), (-3527L), (-3527L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-767);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-924);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-767), Integer.MAX_VALUE, (-924)}, intArray0);
      assertArrayEquals(new int[] {(-767), Integer.MAX_VALUE, (-924), (-767), Integer.MAX_VALUE, (-924)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-767);
      doubleArray0[1] = (double) (-588);
      doubleArray0[2] = (double) (-1822);
      doubleArray0[3] = (double) (-767);
      doubleArray0[4] = (double) (-588);
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      ArrayUtils.swap(doubleArray0, (-924), Integer.MAX_VALUE);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-767.0), (-588.0), (-1822.0), (-767.0), (-588.0), 2.147483647E9}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)18, object0);
      
      Float[] floatArray0 = new Float[18];
      floatArray0[0] = (Float) (float)0;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 0, (int) (byte)18, (-2824));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      Long long0 = new Long((-840L));
      assertNotNull(long0);
      assertEquals((-840L), (long)long0);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-840L), (-840L), (-840L), (-840L), (-840L)}, longArray1);
      
      Short short0 = new Short((short)8192);
      assertNotNull(short0);
      assertEquals((short)8192, (short)short0);
      
      Short short1 = new Short((short) (-11518));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-11518), (short)short1);
      
      Short short2 = new Short((short) (-604));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-604), (short)short2);
      
      Short short3 = new Short((short) (-604));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      assertEquals((short) (-604), (short)short3);
      
      Short short4 = new Short((short)52);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short)52, (short)short4);
      
      Short short5 = new Short((short)8192);
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      assertNotNull(short5);
      assertEquals((short)8192, (short)short5);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)16);
      assertNull(shortArray0);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray1, (-2799L));
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-840L), (-840L), (-840L), (-840L), (-840L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 56);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'P';
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'K';
      objectArray0[1] = (Object) 'K';
      boolean[] booleanArray1 = ArrayUtils.insert(101, booleanArray0, booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)1518);
      assertNotNull(short0);
      assertEquals((short)1518, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)1518);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)1518, (short)short1);
      
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[2]);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)1518, (short)1518, (short)1518}, shortArray2);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)0);
      assertNull(shortArray0);
      
      boolean[] booleanArray2 = ArrayUtils.insert((-2145387093), booleanArray1, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      Short[] shortArray1 = new Short[7];
      Short short0 = new Short((short)8192);
      assertNotNull(short0);
      assertEquals((short)8192, (short)short0);
      
      shortArray1[0] = short0;
      Short short1 = new Short((short)8192);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)8192, (short)short1);
      
      shortArray1[1] = short1;
      Short short2 = new Short((short) (-604));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-604), (short)short2);
      
      shortArray1[2] = short2;
      Short short3 = new Short((short)3169);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short)3169, (short)short3);
      
      shortArray1[3] = short3;
      Short short4 = new Short((short)31521);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      assertEquals((short)31521, (short)short4);
      
      shortArray1[4] = short4;
      Short short5 = new Short((short) (-2285));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertNotNull(short5);
      assertEquals((short) (-2285), (short)short5);
      
      shortArray1[5] = short5;
      Short short6 = new Short((short) shortArray1[0]);
      assertEquals(7, shortArray1.length);
      assertTrue(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short2));
      assertTrue(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      assertNotNull(short6);
      assertEquals((short)8192, (short)short6);
      
      shortArray1[6] = short6;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (-1452));
      assertEquals(7, shortArray2.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)8192, (short)8192, (short) (-604), (short)3169, (short)31521, (short) (-2285), (short)8192}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      Long long0 = new Long((-840L));
      assertNotNull(long0);
      assertEquals((-840L), (long)long0);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long0;
      longArray0[3] = long0;
      longArray0[4] = longArray0[3];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-840L), (-840L), (-840L), (-840L), (-840L)}, longArray1);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      Boolean boolean5 = new Boolean("");
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      Boolean boolean6 = Boolean.FALSE;
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      Boolean boolean7 = Boolean.TRUE;
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean5));
      assertNotNull(boolean7);
      assertTrue(boolean7);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean4;
      boolean[] booleanArray1 = new boolean[9];
      booleanArray1[1] = (boolean) boolean4;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[6] = true;
      booleanArray1[7] = true;
      booleanArray1[8] = true;
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray1, true);
      assertEquals(9, booleanArray1.length);
      assertEquals(10, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, false, true, true, true}, booleanArray2));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (long)longArray0[3];
      floatArray0[2] = (float) (long)longArray0[0];
      floatArray0[3] = (float) (long)longArray0[4];
      floatArray0[4] = (float) (long)longArray0[3];
      boolean boolean8 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean8);
      assertArrayEquals(new float[] {(-840.0F), 0.0F, (-840.0F), (-840.0F), (-840.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift((char[]) null, 38);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      ArrayUtils.swap(byteArray0, (int) (byte)56, (int) (byte)56);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)56}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      char[] charArray0 = new char[9];
      char char0 = 'K';
      charArray0[0] = 'K';
      charArray0[1] = '/';
      charArray0[2] = 'R';
      char char1 = '6';
      charArray0[3] = '6';
      charArray0[4] = 'a';
      char char2 = '>';
      charArray0[5] = '>';
      char char3 = '#';
      charArray0[6] = '#';
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 85.0F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {85.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-1822), '*');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1822, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)114;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)114;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)114, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 114, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-525);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-525));
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-525)}, shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)82;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)99);
      assertEquals(4, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)99, (byte)116, (byte)5, (byte)82}, byteArray0);
      
      ArrayUtils.reverse(shortArray0, (-119), (int) (byte)82);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-525)}, shortArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)5;
      floatArray0[1] = (float) 0;
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '1';
      charArray1[0] = 'r';
      charArray1[2] = 'r';
      charArray1[3] = 'r';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(0, charArray2.length);
      assertEquals(3, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'r', '\u0000', 'r', 'r'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {'r', 'r', 'r'}, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      
      int int1 = ArrayUtils.indexOf(floatArray0, (-1.0F));
      assertEquals(2, floatArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {5.0F, 0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(274, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 274, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte1 = (byte) (-1);
      byteArray0[0] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3175.0;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-34);
      intArray0[2] = (int) (byte) (-34);
      intArray0[3] = (int) (byte)99;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), (-34), (-34), 99, 0}, intArray0);
      assertArrayEquals(new int[] {(-1), (-34), (-34), 99}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-4292), intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4292, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-767);
      intArray0[1] = (-767);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1623.9);
      doubleArray0[1] = (-1623.9);
      doubleArray0[2] = (-1623.9);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1623.9));
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1623.9), (-1623.9), (-1623.9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1623.9), (-1623.9), (-1623.9), (-1623.9)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-1), byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "The Array must not be null";
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      Double double1 = new Double(0.7);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.7, (double)double1, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 0.7;
      doubleArray0[4] = 0.7;
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 0.7, 0.7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 0.7, 0.7, 1.0, 1.0, 0.7, 0.7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-925.0423F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, (-925.0423F)}, floatArray0, 0.01F);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)57;
      Byte byte1 = new Byte((byte)57);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)57, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-53));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-53), (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte)57, (byte)byte3);
      
      byteArray0[2] = byte3;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 1691);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1691, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      ArrayUtils.swap((long[]) null, 65, 425, 65);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap((Object[]) null, 2, 2, Integer.MAX_VALUE);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 2;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 1724);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {4.0, 2.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift((Object[]) null, 2, 3863, (-2146086456));
      Character[] characterArray0 = new Character[1];
      char char0 = ' ';
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {' '}, charArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) ' ';
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) char0;
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) ' ';
      longArray0[6] = (long) 3863;
      longArray0[7] = (long) ' ';
      longArray0[8] = (long) 1724;
      ArrayUtils.swap(longArray0, 9, 1724);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {32L, 2147483647L, 32L, 2147483647L, 2L, 32L, 3863L, 32L, 1724L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-1299.790305212126);
      int int0 = ArrayUtils.indexOf(doubleArray0, 3.0, (-98));
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-1299.790305212126), 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(42);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(42, (int)integer0);
      
      MutableInt mutableInt0 = new MutableInt((-1));
      assertNotNull(mutableInt0);
      assertEquals("-1", mutableInt0.toString());
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1L), mutableInt0.longValue());
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      
      boolean boolean0 = ArrayUtils.isSameType(integer0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-98), (short) (-860));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -98, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      byte[] byteArray0 = new byte[2];
      floatArray0[0] = (float) (byte) (-64);
      byteArray0[1] = (byte) (-125);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-125)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 18688);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {18688, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 18688;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 33L, 18688);
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {18688L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)74, (byte)74}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)0);
      assertNull(shortArray0);
      
      boolean[] booleanArray2 = ArrayUtils.insert((-2145387093), booleanArray1, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)62;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)1, (byte)105, (byte)66, (byte)62}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2417.0);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 285;
      int int0 = ArrayUtils.indexOf(intArray0, 285, (-1220));
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {285}, intArray0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte) (-95);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-23), (byte)0, (byte)83, (byte)29, (byte)1, (byte) (-82), (byte)113, (byte) (-95)}, byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)113;
      shortArray0[1] = (short) (byte) (-82);
      shortArray0[2] = (short) (byte)113;
      shortArray0[3] = (short) (byte)29;
      shortArray0[4] = (short) (byte)83;
      shortArray0[5] = (short) (byte)29;
      shortArray0[6] = (short) (byte)0;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-95);
      intArray0[1] = (int) (byte)113;
      intArray0[2] = (int) (byte)29;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (short)113;
      intArray0[5] = (int) (byte) (-82);
      intArray0[6] = (int) (byte)113;
      intArray0[7] = (int) (byte) (-82);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 113, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.swap((Object[]) longArray0, 88, 407, (-884257973));
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (-884257973));
      assertFalse(boolean0);
      
      Character character0 = Character.valueOf('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'U', 'U', 'U'}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 124.0, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)84;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)84}, byteArray0);
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte)84, (byte)24, (byte)24, (byte)84}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "The Array must not be null";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "len must be > 0";
      stringArray0[5] = "lr9bdpiI=Z]g7wq$.";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 3052L;
      longArray0[2] = 1283L;
      longArray0[3] = 2798L;
      longArray0[4] = (-2059L);
      longArray0[5] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1283L);
      assertEquals(6, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertArrayEquals(new long[] {0L, 3052L, 1283L, 2798L, (-2059L), 0L}, longArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-50), (byte)60, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-50), (byte)60, (byte) (-1), (byte) (-50), (byte)60, (byte) (-1)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(49.597862);
      assertNotNull(float0);
      assertEquals(49.597862F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3471), (-3471));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      int[] intArray0 = new int[2];
      intArray0[0] = (-3471);
      intArray0[1] = (-3471);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-3471), (-3471)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      MockRandom mockRandom0 = new MockRandom(Integer.MAX_VALUE);
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 90;
      intArray0[1] = (-2145930248);
      intArray0[2] = (int) 'p';
      intArray0[3] = (int) 'd';
      intArray0[4] = 0;
      intArray0[5] = 1381;
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2145930248), 112, 100, 0, 1381, 90}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'd';
      longArray0[1] = (long) 1381;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) 'd';
      longArray0[4] = (-2258L);
      longArray0[5] = (-882L);
      longArray0[6] = (long) 'p';
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertEquals(7, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {100L, 1381L, 2147483647L, 100L, (-2258L), (-882L), 112L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-119);
      intArray0[1] = (int) (byte) (-119);
      intArray0[2] = (int) (byte) (-119);
      intArray0[3] = (int) (byte) (-119);
      intArray0[4] = (int) (byte) (-119);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-119);
      shortArray0[1] = (short) (byte) (-119);
      shortArray0[2] = (short) (byte) (-119);
      shortArray0[3] = (short) (byte) (-119);
      shortArray0[4] = (short) (byte) (-119);
      shortArray0[5] = (short) (byte) (-119);
      shortArray0[6] = (short) (byte) (-119);
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-119));
      assertEquals(7, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new short[] {(short) (-119), (short) (-119), (short) (-119), (short) (-119), (short) (-119), (short) (-119), (short) (-119)}, shortArray0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float(Double.NaN);
      assertNotNull(float0);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(Double.NaN);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(Float.NaN, (float)float1, 0.01F);
      
      Float float2 = new Float(Double.NaN);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(Float.NaN, (float)float2, 0.01F);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "byte");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte)12;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)100, (byte)2, (byte) (-78), (byte) (-1), (byte) (-2), (byte) (-89), (byte)12}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      LongStream longStream0 = mockRandom0.longs(3052L, (-1248L), (long) (byte) (-1));
      assertNotNull(longStream0);
      
      ArrayUtils.reverse((char[]) null, 100, (-2268));
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      String[] stringArray0 = new String[6];
      ArrayUtils.swap((Object[]) stringArray0, (-1818), (-1818), (-1818));
      assertEquals(6, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1425.356F;
      floatArray0[1] = (float) (-1818);
      floatArray0[2] = 1083.2585F;
      floatArray0[3] = (float) (-1818);
      floatArray0[4] = (float) (-1818);
      floatArray0[5] = (float) (-1818);
      floatArray0[6] = (float) (-1818);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1425.356F, (-1818.0F), 1083.2585F, (-1818.0F), (-1818.0F), (-1818.0F), (-1818.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.reverse((char[]) null, (int) (short)17787, (-1818));
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray0, 1.0F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1425.356F, (-1818.0F), 1083.2585F, (-1818.0F), (-1818.0F), (-1818.0F), (-1818.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1425.356F, (-1818.0F), 1083.2585F, (-1818.0F), (-1818.0F), (-1818.0F), (-1818.0F)}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2458.092248);
      doubleArray0[1] = (double) (-1818.0F);
      doubleArray0[2] = (double) (short)17787;
      doubleArray0[3] = (double) (-1818.0F);
      doubleArray0[4] = (double) (-1818.0F);
      doubleArray0[5] = (double) 1425.356F;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (double) 1083.2585F;
      doubleArray0[8] = (double) (-1818.0F);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2458.092248), (-1818.0), 17787.0, (-1818.0), (-1818.0), 1425.35595703125, 1.0, 1083.258544921875, (-1818.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      float[] floatArray0 = new float[2];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)1032;
      doubleArray0[1] = (double) (short)1032;
      doubleArray0[2] = (double) (short)1032;
      doubleArray0[3] = (double) (short)1032;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1032.0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1032.0, 1032.0, 1032.0, 1032.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, 567.7F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1032;
      intArray0[1] = (int) (short)1032;
      ArrayUtils.reverse(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1032, 1032}, intArray0);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 567.7F);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1032);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertArrayEquals(new double[] {1032.0, 1032.0, 1032.0, 1032.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) short0);
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Character character0 = new Character('M');
      assertNotNull(character0);
      assertEquals('M', (char)character0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-1030), (Object) character0);
      assertEquals(8, objectArray0.length);
      assertNotNull(object1);
      assertEquals('M', object1);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object2);
      assertEquals((short)0, object2);
      
      objectArray0[2] = object2;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1030);
      longArray0[1] = (long) 'M';
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) 'M';
      longArray0[6] = (long) 'M';
      longArray0[7] = (long) (short)0;
      longArray0[8] = (long) (short)0;
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertEquals(18, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1030L), 77L, 0L, 0L, 0L, 77L, 77L, 0L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      ArrayUtils.reverse(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(2255.041);
      assertNotNull(float0);
      assertEquals(2255.041F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-102.773));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-102.773F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(3258.9);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(3258.9F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) (-1030));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals((-1030.0F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-157.6640209));
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      assertEquals((-157.66402F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float(2093.3114472);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotNull(float5);
      assertEquals(2093.3115F, (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(floatArray1);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte1 = new Byte((byte) (-1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-1), (byte)byte1);
      
      byteArray0[0] = byte1;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)2, (byte)2, (byte)2}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      byte byte0 = (byte)6;
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)6);
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte1 = new Byte((byte)6);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)6, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)14);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)14, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)6, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)47);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      assertEquals((byte)47, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-38));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      assertEquals((byte) (-38), (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)47);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      assertEquals((byte)47, (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)14);
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertNotNull(byte7);
      assertEquals((byte)14, (byte)byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte) (-7));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte0));
      assertNotNull(byte8);
      assertEquals((byte) (-7), (byte)byte8);
      
      byteArray0[7] = byte8;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6, (byte)14, (byte)6, (byte)47, (byte) (-38), (byte)47, (byte)14, (byte) (-7)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[3] = (-1.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1380.3F);
      floatArray0[3] = 0.0F;
      Float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)206;
      shortArray0[2] = (short)206;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2, 52);
      assertEquals(3, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)206, (short)206}, shortArray0);
      assertArrayEquals(new short[] {(short)206}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F, (-1380.3F), 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (-1.0F));
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      short short0 = (short)17787;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) (short)5, (long) (short)17787, (long) (short)5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) 0.0F;
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1380.3F);
      floatArray0[3] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, (-1380.3F), 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short)17787;
      shortArray0[2] = (short)2;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2, 52);
      assertEquals(3, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)5, (short)17787, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = Long.valueOf((long) 2);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2L, (long)long1);
      
      longArray0[1] = long1;
      try { 
        Long.valueOf("?#;|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"?#;|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)206;
      shortArray0[1] = (short)206;
      shortArray0[2] = (short)206;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)206, 2);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)206, (short)206, (short)206}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray1 = new float[3];
      floatArray1[0] = (float) (short)206;
      floatArray1[1] = (-1380.3F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray1);
      assertEquals(3, floatArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {206.0F, (-1380.3F), 0.0F}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0, (float) (short)206);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray2, floatArray1);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)206, (short)206, (short)206}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)206, (short)206, (short)206}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "byt4");
      assertEquals(8, objectArray0.length);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((Short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 43;
      intArray0[1] = 43;
      intArray0[2] = 43;
      intArray0[3] = 43;
      intArray0[4] = 43;
      intArray0[5] = 43;
      int int0 = ArrayUtils.indexOf(intArray0, 1, 43);
      assertEquals(6, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {43, 43, 43, 43, 43, 43}, intArray0);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray0, (-1572L));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1224);
      intArray0[1] = 2;
      intArray0[2] = (-1224);
      intArray0[3] = (-1224);
      ArrayUtils.reverse(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1224), (-1224), 2, (-1224)}, intArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 2;
      objectArray0[1] = (Object) (-1224);
      objectArray0[2] = (Object) (-1572L);
      objectArray0[3] = (Object) (-1224);
      objectArray0[4] = (Object) 2;
      objectArray0[5] = (Object) (-1224);
      objectArray0[6] = (Object) (-1224);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, objectArray0[3], 2);
      assertEquals(0, longArray0.length);
      assertEquals(7, objectArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals((-1), int0);
      assertNotSame(longArray0, longArray1);
      
      long[] longArray3 = ArrayUtils.addAll(longArray2, (long[]) null);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray3, longArray2);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "byt4");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte)80);
      assertNotNull(byte0);
      assertEquals((byte)80, (byte)byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) "byt4", (Object) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "byte");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long long0 = (-567L);
      Long long1 = new Long((-567L));
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-567L), (long)long1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) stringArray0, (Object) long1);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertEquals((-1), int0);
      
      Float[] floatArray0 = new Float[1];
      try { 
        Float.valueOf("byte");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1842.0);
      doubleArray0[2] = (-1842.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1, 1545);
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {(-1842.0), 0.0, (-1842.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-982);
      shortArray0[1] = (short) (-982);
      shortArray0[2] = (short) (-982);
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short) (-982), (int) (short) (-982));
      assertEquals(3, shortArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(3, bitSet1.cardinality());
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(3, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertArrayEquals(new short[] {(short) (-982), (short) (-982), (short) (-982)}, shortArray0);
      assertNotSame(bitSet1, bitSet0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-982), (short) (-982), (short) (-982)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float(Double.NaN);
      assertNotNull(float0);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(Double.NaN);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(Float.NaN, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) floatArray0[0]);
      assertEquals(4, floatArray0.length);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(Float.NaN, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(Double.NaN);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals(Float.NaN, (float)float3, 0.01F);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1289));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertArrayEquals(new char[] {'O'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.subarray(longArray0, 8, (-2126));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.swap((Object[]) longArray1, (-396), (-2146997126), 8);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-2212);
      longArray0[1] = (long) (-2212);
      longArray0[2] = (long) (-2212);
      longArray0[3] = (long) (-2212);
      longArray0[4] = (long) (-2212);
      ArrayUtils.shift(longArray0, (-2212));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-2212L), (-2212L), (-2212L), (-2212L), (-2212L)}, longArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = '#';
      charArray0[2] = 'p';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-1073), '#');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1073, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-4412.965F);
      floatArray0[2] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-4412.965F));
      assertEquals(3, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {0.0F, (-4412.965F), 0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1919L));
      assertNull(longArray0);
      
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Byte byte1 = new Byte((byte)18);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)18, (byte)byte1);
      
      Float[] floatArray1 = new Float[6];
      floatArray1[0] = (Float) 0.0F;
      ArrayUtils.shift((long[]) null, (int) (byte)18);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      Float float0 = new Float((float) (-979L));
      assertNotNull(float0);
      assertEquals((-979.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((float) 1668L);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1668.0F, (float)float1, 0.01F);
      
      Float float2 = new Float(1.0);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-22065);
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 373);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)54;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-12), (byte)0, (byte)114, (byte) (-38), (byte)54, (byte) (-1)}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = '3';
      charArray0[2] = '/';
      charArray0[3] = '\"';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'P', 16);
      assertEquals(4, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'&', '3', '/', '\"'}, charArray0);
      
      Double double0 = new Double(2421.64507);
      assertNotNull(double0);
      assertEquals(2421.64507, (double)double0, 0.01);
      
      Double double1 = new Double((byte) (-12));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-12.0), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.reverse(doubleArray1, (int) (byte) (-1), (-2505));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.insert(16, doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-925.0423F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, (-925.0423F)}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)9;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 882, (int) (byte)0);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, (-925.0423F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-3036));
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs(1L, (long) (short) (-3036));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-34);
      byteArray0[0] = (byte) (-34);
      byte byte1 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byte byte2 = (byte)99;
      byteArray0[2] = (byte)99;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-809), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -809, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1032;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)99);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)99, (byte)99}, byteArray0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-83));
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-83)}, intArray0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) (byte)99);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {99.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-83), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -83, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      int int0 = 284;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 284);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 284, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      Double double2 = new Double(0.0);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      Double double3 = new Double(0.0);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      Double double4 = new Double((-97.6));
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals((-97.6), (double)double4, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[2];
      doubleArray2[1] = (-97.6);
      int int0 = ArrayUtils.lastIndexOf(doubleArray2, 3.0);
      assertEquals(2, doubleArray2.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-97.6)}, doubleArray2, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)96;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)11, (byte)82, (byte)96}, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'I');
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "The Array must not be null";
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      Double double1 = new Double(0.7);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.7, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) stringArray0, (Object[]) doubleArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)5747;
      shortArray0[1] = (short)82;
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean("org.apache.commons.lang3.ClassUtils");
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(10, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)5747, (short)82, (short)0, (short)0, (short)0, (short)5747, (short)82, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)5747, (short)82, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean("]");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)256;
      doubleArray0[1] = 1736.1407967;
      doubleArray0[2] = (double) (short)256;
      doubleArray0[3] = (double) (short)256;
      doubleArray0[4] = (double) (short) (-1100);
      doubleArray0[5] = (double) (short) (-1100);
      doubleArray0[6] = (double) (short) (-1100);
      doubleArray0[7] = (double) (short) (-1100);
      doubleArray0[8] = (double) (short)256;
      ArrayUtils.reverse(doubleArray0, (int) (short) (-1100), (int) (short)256);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {256.0, (-1100.0), (-1100.0), (-1100.0), (-1100.0), 256.0, 256.0, 1736.1407967, 256.0}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) (-1100.0);
      doubleArray1[1] = (Double) 256.0;
      doubleArray1[2] = (Double) 1736.1407967;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3124, doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3124, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 56);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 56);
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {101}, intArray0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-257));
      assertNull(shortArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2147028190, 101);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'K', 'P', 'P', 'K', 'K'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray0, 'P');
      assertEquals(5, charArray0.length);
      assertEquals(3, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'K', 'P', 'P', 'K', 'K'}, charArray0);
      assertArrayEquals(new char[] {'K', 'K', 'K'}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)5;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)2);
      assertEquals(2, byteArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(1, bitSet1.length());
      assertEquals("{0}", bitSet1.toString());
      assertArrayEquals(new byte[] {(byte)2, (byte)5}, byteArray0);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-767);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)8;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-767), (int) (byte)67);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte byte0 = new Byte((byte)25);
      assertNotNull(byte0);
      assertEquals((byte)25, (byte)byte0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)8;
      floatArray0[1] = (float) (byte) (-95);
      floatArray0[2] = (float) (-767);
      floatArray0[3] = (float) (byte)1;
      floatArray0[4] = (float) (byte)8;
      floatArray0[5] = 110.0F;
      floatArray0[6] = (float) (byte)0;
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-95.0F), (-767.0F), 1.0F, 8.0F, 110.0F, 0.0F, 8.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, (-2104533975), (int) (byte)25, 2);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-95.0F), (-767.0F), 1.0F, 8.0F, 110.0F, 0.0F, 8.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2147028190, 101);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'K', 'P', 'P', 'K', 'K'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray0, 'P');
      assertEquals(5, charArray0.length);
      assertEquals(3, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'K', 'P', 'P', 'K', 'K'}, charArray0);
      assertArrayEquals(new char[] {'K', 'K', 'K'}, charArray2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      ArrayUtils.shift(charArray0, 1225);
      assertEquals(5, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'K', 'P', 'P', 'K', 'K'}, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)76;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)76}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)76;
      floatArray0[1] = (float) (byte)76;
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      charArray0[4] = 'P';
      charArray0[5] = 'P';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'K', (-2608));
      assertEquals(6, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'P', 'P', 'P', 'P', 'P', 'P'}, charArray0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-21845));
      assertNull(shortArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2608), 1004);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'P', 'P', 'P', 'P', 'P', 'P'}, charArray1);
      assertArrayEquals(new char[] {'P', 'P', 'P', 'P', 'P', 'P'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, 'Y');
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray2.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'P', 'P', 'P', 'P', 'P', 'P'}, charArray1);
      assertArrayEquals(new char[] {'P', 'P', 'P', 'P', 'P', 'P'}, charArray2);
      assertArrayEquals(new char[] {'P', 'P', 'P', 'P', 'P', 'P'}, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray1, (byte) (-1));
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)76}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (double) 0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      
      Double double0 = new Double(437.7);
      assertNotNull(double0);
      assertEquals(437.7, (double)double0, 0.01);
      
      Double double1 = new Double((-1779.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1779.0), (double)double1, 0.01);
      
      Double double2 = new Double(437.7);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(437.7, (double)double2, 0.01);
      
      Double[] doubleArray2 = new Double[8];
      doubleArray2[0] = double0;
      doubleArray2[1] = double1;
      doubleArray2[2] = double1;
      doubleArray2[3] = double0;
      doubleArray2[4] = double1;
      doubleArray2[5] = double1;
      doubleArray2[6] = double0;
      doubleArray2[7] = double2;
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertEquals(8, doubleArray3.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {437.7, (-1779.0), (-1779.0), 437.7, (-1779.0), (-1779.0), 437.7, 437.7}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray2, (Object[]) mutableIntArray0);
      assertEquals(0, mutableIntArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2076;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2076}, shortArray0);
      assertArrayEquals(new short[] {(short)2076}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      ArrayUtils.reverse(doubleArray3, 34, Integer.MAX_VALUE);
      assertEquals(8, doubleArray3.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {437.7, (-1779.0), (-1779.0), 437.7, (-1779.0), (-1779.0), 437.7, 437.7}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      
      Double[] doubleArray4 = ArrayUtils.insert(1226, doubleArray2, (Double[]) null);
      assertEquals(8, doubleArray4.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray2, doubleArray4);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      MutableInt mutableInt0 = new MutableInt(744);
      assertNotNull(mutableInt0);
      assertEquals(744L, mutableInt0.longValue());
      assertEquals(744, mutableInt0.intValue());
      assertEquals((short)744, mutableInt0.shortValue());
      assertEquals("744", mutableInt0.toString());
      assertEquals(744, (int)mutableInt0.getValue());
      assertEquals(744, (int)mutableInt0.toInteger());
      assertEquals(744.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(744.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-24), mutableInt0.byteValue());
      
      mutableInt0.add((Number) doubleArray0[0]);
      assertEquals(4, doubleArray0.length);
      assertEquals((-3371), mutableInt0.intValue());
      assertEquals((short) (-3371), mutableInt0.shortValue());
      assertEquals((-3371.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-3371.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-3371), (int)mutableInt0.getValue());
      assertEquals((-3371), (int)mutableInt0.toInteger());
      assertEquals((-3371L), mutableInt0.longValue());
      assertEquals((byte) (-43), mutableInt0.byteValue());
      assertEquals("-3371", mutableInt0.toString());
      
      MutableInt[] mutableIntArray0 = new MutableInt[6];
      MutableInt mutableInt1 = new MutableInt(2144867955);
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals(2144867955, (int)mutableInt1.toInteger());
      assertEquals(2144867955, (int)mutableInt1.getValue());
      assertEquals((short)5747, mutableInt1.shortValue());
      assertEquals((byte)115, mutableInt1.byteValue());
      assertEquals(2.14486797E9F, mutableInt1.floatValue(), 0.01F);
      assertEquals(2144867955L, mutableInt1.longValue());
      assertEquals(2.144867955E9, mutableInt1.doubleValue(), 0.01);
      assertEquals(2144867955, mutableInt1.intValue());
      assertEquals("2144867955", mutableInt1.toString());
      
      mutableIntArray0[0] = mutableInt1;
      mutableIntArray0[1] = mutableInt0;
      mutableIntArray0[2] = mutableInt0;
      mutableIntArray0[3] = mutableInt0;
      MutableInt mutableInt2 = new MutableInt(744);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertNotNull(mutableInt2);
      assertEquals(744.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals((byte) (-24), mutableInt2.byteValue());
      assertEquals(744, (int)mutableInt2.toInteger());
      assertEquals(744, (int)mutableInt2.getValue());
      assertEquals(744.0, mutableInt2.doubleValue(), 0.01);
      assertEquals((short)744, mutableInt2.shortValue());
      assertEquals("744", mutableInt2.toString());
      assertEquals(744L, mutableInt2.longValue());
      assertEquals(744, mutableInt2.intValue());
      
      mutableInt1.increment();
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertEquals(2144867956, (int)mutableInt1.getValue());
      assertEquals(2144867956, (int)mutableInt1.toInteger());
      assertEquals((short)5748, mutableInt1.shortValue());
      assertEquals(2.14486797E9F, mutableInt1.floatValue(), 0.01F);
      assertEquals(2144867956L, mutableInt1.longValue());
      assertEquals((byte)116, mutableInt1.byteValue());
      assertEquals(2144867956, mutableInt1.intValue());
      assertEquals(2.144867956E9, mutableInt1.doubleValue(), 0.01);
      assertEquals("2144867956", mutableInt1.toString());
      assertNotSame(mutableInt1, mutableInt0);
      assertNotSame(mutableInt1, mutableInt2);
      
      mutableIntArray0[4] = mutableInt2;
      mutableIntArray0[5] = mutableInt0;
      Double double1 = new Double(428.38);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(428.38, (double)double1, 0.01);
      
      MutableInt mutableInt3 = new MutableInt(double1);
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(mutableInt3);
      assertEquals(428, mutableInt3.intValue());
      assertEquals(428.0, mutableInt3.doubleValue(), 0.01);
      assertEquals("428", mutableInt3.toString());
      assertEquals(428.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals((byte) (-84), mutableInt3.byteValue());
      assertEquals((short)428, mutableInt3.shortValue());
      assertEquals(428, (int)mutableInt3.toInteger());
      assertEquals(428, (int)mutableInt3.getValue());
      assertEquals(428L, mutableInt3.longValue());
      
      MutableInt[] mutableIntArray1 = ArrayUtils.add(mutableIntArray0, mutableInt3);
      assertEquals(7, mutableIntArray1.length);
      assertEquals(6, mutableIntArray0.length);
      assertFalse(mutableInt3.equals((Object)mutableInt0));
      assertFalse(mutableInt3.equals((Object)mutableInt2));
      assertFalse(mutableInt3.equals((Object)mutableInt1));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(mutableIntArray1);
      assertEquals(428, mutableInt3.intValue());
      assertEquals(428.0, mutableInt3.doubleValue(), 0.01);
      assertEquals("428", mutableInt3.toString());
      assertEquals(428.0F, mutableInt3.floatValue(), 0.01F);
      assertEquals((byte) (-84), mutableInt3.byteValue());
      assertEquals((short)428, mutableInt3.shortValue());
      assertEquals(428, (int)mutableInt3.toInteger());
      assertEquals(428, (int)mutableInt3.getValue());
      assertEquals(428L, mutableInt3.longValue());
      assertNotSame(mutableInt3, mutableInt0);
      assertNotSame(mutableInt3, mutableInt2);
      assertNotSame(mutableInt3, mutableInt1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (short)2291;
      doubleArray1[1] = (double) 2144867955;
      ArrayUtils.reverse(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {2.144867955E9, 2291.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2144867955;
      intArray0[1] = 2144867955;
      intArray0[2] = 2144867955;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2144867955, 1389);
      assertEquals(3, intArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new int[] {2144867955, 2144867955, 2144867955}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[6] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int[] intArray0 = new int[3];
      intArray0[0] = (-63);
      intArray0[1] = 3;
      intArray0[2] = (-2585);
      ArrayUtils.swap(intArray0, (-2585), (-2174));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-63), 3, (-2585)}, intArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 359.1, (double) 3);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-2174), (-1063), (-2536));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (double) 0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      
      mutableInt0.add((Number) 0);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      
      MutableInt[] mutableIntArray1 = ArrayUtils.add(mutableIntArray0, mutableInt0);
      assertEquals(0, mutableIntArray0.length);
      assertEquals(1, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2314;
      shortArray0[2] = (short)744;
      shortArray0[3] = (short)572;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)2314, (short)744, (short)572}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2314, (short)744, (short)572}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      ArrayUtils.reverse(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)572;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)744;
      intArray0[4] = (int) (short)572;
      intArray0[5] = 2;
      intArray0[6] = (int) (short)744;
      intArray0[7] = (int) (short)744;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 744, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-2762.0F));
      assertEquals(4, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.swap(intArray0, 4401, 2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      ArrayUtils.shift(floatArray0, 4401, 2, 3377);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-998), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -998, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)7;
      Integer integer0 = new Integer((byte)64);
      assertNotNull(integer0);
      assertEquals(64, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)85, (byte)7, (byte)1, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {1, 0, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (-1119));
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1119)}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(3, booleanArray0, booleanArray0);
      assertEquals(6, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1119), (-1119));
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 482L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {482L}, longArray0);
      
      int int0 = 2146946239;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2146946239, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146946239, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "byt4");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 451.4347132;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 283.98151);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 451.4347132}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 451.4347132}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-64);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (int) (byte) (-1));
      assertEquals(2, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-13), (byte) (-64)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-102);
      byteArray0[8] = (byte)1;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2399), (int) (byte)7);
      assertEquals(9, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)32, (byte)7, (byte)98, (byte)8, (byte) (-7), (byte)8, (byte) (-102), (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)32, (byte)7, (byte)98, (byte)8, (byte) (-7), (byte)8}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Character[] characterArray0 = null;
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 't');
      assertNull(charArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)7;
      shortArray0[1] = (short) (byte)98;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)7, (short)98}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray1, (int) (byte)32, (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byte byte0 = (byte)40;
      byteArray0[1] = (byte)40;
      byte byte1 = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)97;
      byte byte2 = (byte) (-12);
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)81;
      byte byte3 = (byte)1;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)1, (-790));
      assertEquals(7, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)9, (byte) (-25), (byte)97, (byte) (-12), (byte)81}, byteArray0);
      
      int int1 = 894;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 894, (byte) (-11));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 894, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 7);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {7, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)18, object0);
      
      Float[] floatArray0 = new Float[18];
      floatArray0[0] = (Float) (float)0;
      floatArray0[2] = (Float) (float)0;
      floatArray0[3] = (Float) (float)0;
      floatArray0[5] = (Float) (float)0;
      Float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(18, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-4412.965F);
      floatArray0[2] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-4412.965F));
      assertEquals(3, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {0.0F, (-4412.965F), 0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1919L));
      assertNull(longArray0);
      
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)18, object0);
      
      Float[] floatArray1 = new Float[6];
      floatArray1[0] = (Float) 0.0F;
      floatArray1[1] = (Float) 0.0F;
      floatArray1[2] = (Float) 0.0F;
      floatArray1[3] = (Float) (-4412.965F);
      floatArray1[4] = (Float) (-4412.965F);
      floatArray1[5] = (Float) 0.0F;
      Float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray1);
      assertEquals(0, floatArray2.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      int int0 = 0;
      int int1 = (-425);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = 551.03455F;
      floatArray1[2] = (float) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-425), floatArray0, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -425, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (long) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 4712L, (int) (byte)0);
      assertEquals(8, longArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = ArrayUtils.get(objectArray0, Integer.MAX_VALUE);
      assertEquals(7, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Character character0 = new Character('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) character0);
      assertNotNull(object1);
      assertEquals('T', object1);
      
      objectArray0[1] = object1;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[4] = (long) Integer.MAX_VALUE;
      longArray0[5] = (long) Integer.MAX_VALUE;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2147483647L, Integer.MAX_VALUE);
      assertEquals(6, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {2147483647L, 2147483647L, 2147483647L, 2147483647L, 2147483647L, 2147483647L}, longArray0);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = ArrayUtils.get(objectArray0, Integer.MAX_VALUE, (Object) null);
      assertEquals(7, objectArray0.length);
      assertNull(object3);
      
      objectArray0[3] = null;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Object object4 = ArrayUtils.get(objectArray0, Integer.MAX_VALUE, (Object) boolean0);
      assertEquals(7, objectArray0.length);
      assertNotNull(object4);
      assertEquals(false, object4);
      
      objectArray0[4] = object4;
      Object object5 = ArrayUtils.get(objectArray0, Integer.MAX_VALUE, object0);
      assertEquals(7, objectArray0.length);
      assertNull(object5);
      
      objectArray0[5] = null;
      Object object6 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(6, longArray0.length);
      assertNull(object6);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {2147483647L, 2147483647L, 2147483647L, 2147483647L, 2147483647L, 2147483647L}, longArray0);
      
      objectArray0[6] = null;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(7, objectArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      short short0 = (short)0;
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)0);
      assertNull(shortArray0);
      
      int int0 = (-2145387093);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2145387093), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2145387093, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)93;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)93}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)93;
      floatArray0[1] = (float) (byte)93;
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((byte) (-1));
      LongStream longStream0 = mockRandom0.longs(180L, (long) (byte) (-1), (long) (byte)93);
      assertNotNull(longStream0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      int int0 = mockRandom0.nextInt(795);
      assertEquals(1, int0);
      
      int int1 = mockRandom0.nextInt();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {93.0F, 93.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, (-1113), 1, 2417);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {93.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 93.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Character[] characterArray0 = new Character[8];
      char char0 = '|';
      Character character0 = Character.valueOf('|');
      assertNotNull(character0);
      assertEquals('|', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('K');
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals('K', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('|', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character(char0);
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('|', (char)character3);
      
      characterArray0[3] = character3;
      char char1 = '7';
      Character character4 = Character.valueOf('7');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('7', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('v');
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)char1));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertNotNull(character5);
      assertEquals('v', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf(char1);
      assertFalse(char1 == char0);
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)char0));
      assertNotNull(character6);
      assertEquals('7', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf('-');
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)char1));
      assertNotNull(character7);
      assertEquals('-', (char)character7);
      
      characterArray0[7] = character7;
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)1544);
      assertNotNull(short0);
      assertEquals((short)1544, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)1544);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)1544, (short)short1);
      
      short short2 = (short) (-1849);
      shortArray0[2] = short0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.toArray(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.reverse(shortArray0, (int) (short)0, 1);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      int int0 = ArrayUtils.indexOf(floatArray0, 1583.0F, 1);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shuffle(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 1583.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (-1);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray3.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray3);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      
      boolean[] booleanArray4 = ArrayUtils.addFirst(booleanArray2, (boolean) boolean0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertEquals(2, booleanArray4.length);
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray1.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertNotNull(booleanArray4);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray4));
      assertNotSame(booleanArray0, booleanArray3);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray2, booleanArray4);
      assertNotSame(booleanArray4, booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (int) (byte)7);
      assertEquals((-1), int0);
      
      Double double0 = new Double((byte)7);
      assertNotNull(double0);
      assertEquals(7.0, (double)double0, 0.01);
      
      Double double1 = new Double((-2333.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2333.0), (double)double1, 0.01);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = new short[8];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte)85;
      shortArray1[1] = (short) (byte)85;
      shortArray1[2] = (short) (byte)85;
      shortArray1[3] = (short) (byte)85;
      shortArray1[4] = (short) (byte)7;
      shortArray1[5] = (short) (byte)7;
      shortArray1[6] = (short) (byte)85;
      shortArray1[7] = (short) (byte)85;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)85, (short)85, (short)85, (short)85, (short)7, (short)7, (short)85, (short)85}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst((boolean[]) null, false);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (int) (byte)7);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)29362);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)29362}, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)85;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      ArrayUtils.reverse(longArray0, (-2128765637), 834);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 85L}, longArray0);
      
      ArrayUtils.shift((Object[]) null, 1696, 1696, (-942));
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 11;
      intArray0[1] = 1696;
      intArray0[2] = 834;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte)85;
      intArray0[5] = (-2128765637);
      intArray0[6] = 0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(14, intArray1.length);
      assertEquals(7, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {11, 1696, 834, 0, 85, (-2128765637), 0}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 834;
      longArray0[1] = (long) 834;
      longArray0[2] = (long) 834;
      longArray0[3] = (long) 834;
      longArray0[4] = (long) 834;
      longArray0[5] = (long) 834;
      ArrayUtils.reverse(longArray0, 1740, 834);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {834L, 834L, 834L, 834L, 834L, 834L}, longArray0);
      
      ArrayUtils.shift((Object[]) doubleArray0, 1740, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-1);
      byteArray0[5] = (byte) (-69);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2);
      assertEquals(6, byteArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {(byte)9, (byte) (-1), (byte)0, (byte)2, (byte) (-47), (byte)0}, byteArray0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) (byte)2);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (byte) (-1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      ArrayUtils.shift((Object[]) floatArray1, (-1069));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-1.0F), 2.0F}, floatArray2, 0.01F);
      assertSame(floatArray0, floatArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'A';
      longArray0[1] = (long) '8';
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) 'R';
      longArray0[4] = (long) (byte)9;
      longArray0[5] = (long) (byte)2;
      longArray0[6] = (long) '';
      MockRandom mockRandom0 = new MockRandom((-2372L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {56L, 0L, 82L, 9L, 2L, 127L, 65L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-1.3556037F));
      assertNull(floatArray0);
      
      ArrayUtils.reverse((float[]) null);
      float[] floatArray1 = ArrayUtils.add((float[]) null, (-1.3556037F));
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.3556037F)}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double((-1.3556037F));
      assertNotNull(double0);
      assertEquals((-1.3556036949157715), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      try { 
        Double.valueOf("java.lang.Boolean");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = true;
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift(floatArray0, (-3072), (-3072), (-746));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2646;
      intArray0[1] = (-2585);
      intArray0[2] = 567;
      ArrayUtils.swap(intArray0, 2572, 2145836539);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2646, (-2585), 567}, intArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 0.0, (double) 2646);
      assertEquals((-1), int0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, 2646, (-1));
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-548), 12);
      assertEquals(3, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {2646, (-2585), 567}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-702);
      intArray0[1] = (-1139);
      intArray0[2] = (-702);
      intArray0[6] = (-1536);
      intArray0[4] = (-2333);
      ArrayUtils.swap((byte[]) null, (-1139), (-1536), (-1536));
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 1136;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 1136, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)20521;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)3283;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)20521, (short)5, (short) (-1), (short)3283}, shortArray0);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0);
      assertEquals(0, intArray2.length);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 1136, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      
      Byte byte0 = new Byte((byte)70);
      assertNotNull(byte0);
      assertEquals((byte)70, (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      Long long0 = new Long((-840L));
      assertNotNull(long0);
      assertEquals((-840L), (long)long0);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long0;
      longArray0[3] = long0;
      longArray0[4] = longArray0[3];
      ArrayUtils.shift((Object[]) longArray0, (-4601));
      assertEquals(5, longArray0.length);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '';
      charArray0[2] = 'R';
      charArray0[3] = '8';
      charArray0[4] = 'R';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'z', (-1371));
      assertEquals(5, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'8', '', 'R', '8', 'R'}, charArray0);
      
      ArrayUtils.reverse(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      String string0 = ArrayUtils.toString((Object) longArray0[0]);
      assertEquals(5, longArray0.length);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)112;
      byteArray0[8] = (byte)20;
      ArrayUtils.swap(byteArray0, (int) (byte)127, 0, 520);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)55, (byte)1, (byte)127, (byte) (-91), (byte) (-17), (byte) (-70), (byte)112, (byte)112, (byte)20}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt(795);
      assertEquals(0, int0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      int int1 = mockRandom1.nextInt();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertNotSame(mockRandom1, mockRandom0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 795;
      floatArray0[4] = (float) 0;
      int int2 = mockRandom1.nextInt();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertNotSame(mockRandom1, mockRandom0);
      
      floatArray0[5] = (float) 795;
      IntStream intStream0 = mockRandom1.ints(0, 758);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(intStream0);
      assertNotSame(mockRandom1, mockRandom0);
      
      floatArray0[6] = (float) 795;
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(7, floatArray0.length);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertArrayEquals(new float[] {0.0F, 0.0F, 795.0F, 0.0F, 795.0F, 795.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(mockRandom0, mockRandom1);
      
      ArrayUtils.swap(floatArray0, 0, (-1339), 0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 795.0F, 0.0F, 795.0F, 795.0F, 0.0F}, floatArray0, 0.01F);
      
      int int3 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0.0F, 1.0);
      assertEquals(1, doubleArray0.length);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = 2417;
      intArray0[3] = 2417;
      intArray0[4] = 795;
      intArray0[5] = 0;
      intArray0[6] = 2417;
      intArray0[7] = 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {8, 0, 2417, 2417, 795, 0, 2417, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short) (-525);
      shortArray0[0] = (short) (-525);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-525));
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-525)}, shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)82;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)99);
      assertEquals(4, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)99, (byte)126, (byte)5, (byte)82}, byteArray0);
      
      ArrayUtils.reverse(shortArray0, (-119), (int) (byte)82);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-525)}, shortArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)5;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)126;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals(5, objectArray0.length);
      assertNotNull(object0);
      assertEquals((byte)126, object0);
      
      objectArray0[1] = object0;
      int[] intArray0 = new int[2];
      intArray0[0] = (-119);
      intArray0[1] = (int) (byte)126;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0, (int) (byte)5);
      assertEquals(2, intArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {(-119), 126}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[1], bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-572);
      Float float0 = new Float(374.97696F);
      assertNotNull(float0);
      assertEquals(374.97696F, (float)float0, 0.01F);
      
      Float float1 = new Float((-132.70396558798961));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-132.70396F), (float)float1, 0.01F);
      
      Float float2 = new Float((-132.70396558798961));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals((-132.70396F), (float)float2, 0.01F);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1827.3981289417716;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-4412.965F);
      floatArray0[2] = (-4412.965F);
      floatArray0[3] = (-4412.965F);
      floatArray0[4] = (-4412.965F);
      floatArray0[7] = (-4412.965F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1889.924F);
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-4412.965F), 0.0F, (-4412.965F), (-4412.965F), (-4412.965F), 0.0F, 0.0F, (-4412.965F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1889.924F, (-4412.965F), 0.0F, (-4412.965F), (-4412.965F), (-4412.965F), 0.0F, 0.0F, (-4412.965F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 28, 28);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)1032);
      assertFalse(boolean0);
      
      byte byte0 = (byte)79;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1799.211632610594;
      doubleArray0[1] = (double) (short) (-525);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1799.211632610594, (-3402.04954746385));
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {1799.211632610594, (-525.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-525);
      intArray0[1] = (int) (byte)79;
      intArray0[2] = (int) (short) (-525);
      intArray0[3] = (int) (short)1032;
      intArray0[4] = (int) (byte)126;
      intArray0[5] = (int) (short)1032;
      intArray0[6] = (int) (short) (-525);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-525), 79, (-525), 1032, 126, 1032, (-525)}, intArray0);
      assertArrayEquals(new int[] {(-525), 79, (-525), 1032, 126, 1032, (-525)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1812, intArray1, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1812, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-3036));
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-3036), Integer.MAX_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(681);
      assertNotNull(mutableInt0);
      assertEquals(681, mutableInt0.intValue());
      assertEquals(681.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("681", mutableInt0.toString());
      assertEquals(681L, mutableInt0.longValue());
      assertEquals(681.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)681, mutableInt0.shortValue());
      assertEquals(681, (int)mutableInt0.getValue());
      assertEquals(681, (int)mutableInt0.toInteger());
      assertEquals((byte) (-87), mutableInt0.byteValue());
      
      MutableInt[] mutableIntArray0 = new MutableInt[5];
      mutableIntArray0[0] = mutableInt0;
      mutableInt0.subtract((Number) mutableInt0);
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0L, mutableInt0.longValue());
      
      mutableIntArray0[1] = mutableInt0;
      mutableIntArray0[2] = mutableInt0;
      int int0 = mutableInt0.getAndAdd(681);
      assertEquals(0, int0);
      assertEquals(681, mutableInt0.intValue());
      assertEquals(681.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("681", mutableInt0.toString());
      assertEquals(681L, mutableInt0.longValue());
      assertEquals(681.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)681, mutableInt0.shortValue());
      assertEquals(681, (int)mutableInt0.getValue());
      assertEquals(681, (int)mutableInt0.toInteger());
      assertEquals((byte) (-87), mutableInt0.byteValue());
      
      int int1 = mutableInt0.getAndIncrement();
      assertFalse(int1 == int0);
      assertEquals(681, int1);
      assertEquals(682, mutableInt0.intValue());
      assertEquals("682", mutableInt0.toString());
      assertEquals(682L, mutableInt0.longValue());
      assertEquals(682.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(682, (int)mutableInt0.getValue());
      assertEquals((short)682, mutableInt0.shortValue());
      assertEquals(682.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(682, (int)mutableInt0.toInteger());
      assertEquals((byte) (-86), mutableInt0.byteValue());
      
      mutableIntArray0[3] = mutableInt0;
      mutableIntArray0[4] = mutableInt0;
      MutableInt[] mutableIntArray1 = ArrayUtils.add(mutableIntArray0, mutableInt0);
      assertEquals(5, mutableIntArray0.length);
      assertEquals(6, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertEquals(682, mutableInt0.intValue());
      assertEquals("682", mutableInt0.toString());
      assertEquals(682L, mutableInt0.longValue());
      assertEquals(682.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(682, (int)mutableInt0.getValue());
      assertEquals((short)682, mutableInt0.shortValue());
      assertEquals(682.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(682, (int)mutableInt0.toInteger());
      assertEquals((byte) (-86), mutableInt0.byteValue());
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 261.0F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {261.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0, (int) (short)0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-525);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-525));
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-525)}, shortArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-525);
      longArray0[1] = (long) (short) (-525);
      longArray0[2] = (long) (short) (-525);
      longArray0[3] = (long) (short) (-525);
      longArray0[4] = (long) (short) (-525);
      boolean boolean1 = ArrayUtils.contains(longArray0, 0L);
      assertEquals(5, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {(-525L), (-525L), (-525L), (-525L), (-525L)}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (short) (-525));
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-525L), (-525L), (-525L), (-525L), (-525L)}, longArray0);
      assertArrayEquals(new long[] {(-525L), (-525L), (-525L), (-525L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean2 = ArrayUtils.contains(shortArray0, (short) (-525));
      assertEquals(1, shortArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new short[] {(short) (-525)}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-525L);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1860, 1860);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-525.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-525);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-525));
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-525)}, shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)82;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)99);
      assertEquals(4, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)99, (byte)126, (byte)5, (byte)82}, byteArray0);
      
      ArrayUtils.reverse(shortArray0, (-119), (int) (byte)82);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-525)}, shortArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)5;
      floatArray0[1] = (float) 0;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 0.0F);
      assertEquals(2, floatArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new float[] {5.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)99;
      longArray0[1] = (long) (short) (-525);
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1L);
      assertEquals(3, longArray1.length);
      assertEquals(4, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {99L, (-525L), 0L}, longArray1);
      assertArrayEquals(new long[] {99L, (-525L), 1L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (short) (-525));
      assertEquals(3, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-525.0F), 5.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {5.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = 'Z';
      charArray0[2] = '3';
      charArray0[3] = '*';
      charArray0[4] = 'B';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 2144890068, 'X');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2144890068, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "The Array must not be null";
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'N');
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) stringArray0, (Object) "The Array must not be null");
      assertEquals(6, stringArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 350;
      intArray0[1] = (int) 'N';
      int int0 = ArrayUtils.indexOf(intArray0, (-57), 350);
      assertEquals(2, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {350, 78}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)1544);
      assertNotNull(short0);
      assertEquals((short)1544, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)1544);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)1544, (short)short1);
      
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1544, (short)1544, (short)1544}, shortArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1849);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1849.0F)}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf((Object[]) shortArray0, (Object) short1);
      assertEquals(3, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), (int) (short) (-1849));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int1 = mockRandom0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)1544);
      assertNotNull(short0);
      assertEquals((short)1544, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)1544);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)1544, (short)short1);
      
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1544, (short)1544, (short)1544}, shortArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1849);
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1690));
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      MutableInt mutableInt0 = new MutableInt(228);
      assertNotNull(mutableInt0);
      assertEquals(228, (int)mutableInt0.toInteger());
      assertEquals((byte) (-28), mutableInt0.byteValue());
      assertEquals(228, mutableInt0.intValue());
      assertEquals((short)228, mutableInt0.shortValue());
      assertEquals(228L, mutableInt0.longValue());
      assertEquals(228.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("228", mutableInt0.toString());
      assertEquals(228.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(228, (int)mutableInt0.getValue());
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      assertEquals(228, (int)mutableInt0.toInteger());
      assertEquals((byte) (-28), mutableInt0.byteValue());
      assertEquals(228, mutableInt0.intValue());
      assertEquals((short)228, mutableInt0.shortValue());
      assertEquals(228L, mutableInt0.longValue());
      assertEquals(228.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("228", mutableInt0.toString());
      assertEquals(228.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(228, (int)mutableInt0.getValue());
      assertEquals(228, (int)mutableInt1.toInteger());
      assertEquals(228, (int)mutableInt1.getValue());
      assertEquals((byte) (-28), mutableInt1.byteValue());
      assertEquals(228, mutableInt1.intValue());
      assertEquals((short)228, mutableInt1.shortValue());
      assertEquals(228L, mutableInt1.longValue());
      assertEquals(228.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("228", mutableInt1.toString());
      assertEquals(228.0F, mutableInt1.floatValue(), 0.01F);
      
      MutableInt mutableInt2 = new MutableInt(mutableInt1);
      assertTrue(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt1));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertNotNull(mutableInt2);
      assertEquals(228, (int)mutableInt0.toInteger());
      assertEquals((byte) (-28), mutableInt0.byteValue());
      assertEquals(228, mutableInt0.intValue());
      assertEquals((short)228, mutableInt0.shortValue());
      assertEquals(228L, mutableInt0.longValue());
      assertEquals(228.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("228", mutableInt0.toString());
      assertEquals(228.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(228, (int)mutableInt0.getValue());
      assertEquals(228, (int)mutableInt1.toInteger());
      assertEquals(228, (int)mutableInt1.getValue());
      assertEquals((byte) (-28), mutableInt1.byteValue());
      assertEquals(228, mutableInt1.intValue());
      assertEquals((short)228, mutableInt1.shortValue());
      assertEquals(228L, mutableInt1.longValue());
      assertEquals(228.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("228", mutableInt1.toString());
      assertEquals(228.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(228L, mutableInt2.longValue());
      assertEquals(228, mutableInt2.intValue());
      assertEquals("228", mutableInt2.toString());
      assertEquals(228, (int)mutableInt2.getValue());
      assertEquals((byte) (-28), mutableInt2.byteValue());
      assertEquals(228, (int)mutableInt2.toInteger());
      assertEquals((short)228, mutableInt2.shortValue());
      assertEquals(228.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(228.0, mutableInt2.doubleValue(), 0.01);
      
      MutableInt[] mutableIntArray0 = new MutableInt[1];
      mutableInt1.subtract((Number) mutableInt2);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertTrue(mutableInt2.equals((Object)mutableInt0));
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertEquals(228, (int)mutableInt0.toInteger());
      assertEquals((byte) (-28), mutableInt0.byteValue());
      assertEquals(228, mutableInt0.intValue());
      assertEquals((short)228, mutableInt0.shortValue());
      assertEquals(228L, mutableInt0.longValue());
      assertEquals(228.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("228", mutableInt0.toString());
      assertEquals(228.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(228, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0, mutableInt1.intValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(228L, mutableInt2.longValue());
      assertEquals(228, mutableInt2.intValue());
      assertEquals("228", mutableInt2.toString());
      assertEquals(228, (int)mutableInt2.getValue());
      assertEquals((byte) (-28), mutableInt2.byteValue());
      assertEquals(228, (int)mutableInt2.toInteger());
      assertEquals((short)228, mutableInt2.shortValue());
      assertEquals(228.0F, mutableInt2.floatValue(), 0.01F);
      assertEquals(228.0, mutableInt2.doubleValue(), 0.01);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt1, mutableInt2);
      assertNotSame(mutableInt1, mutableInt0);
      assertNotSame(mutableInt2, mutableInt0);
      assertNotSame(mutableInt2, mutableInt1);
      
      mutableIntArray0[0] = mutableInt2;
      MutableInt[] mutableIntArray1 = ArrayUtils.removeAllOccurrences(mutableIntArray0, mutableInt1);
      assertEquals(1, mutableIntArray0.length);
      assertEquals(1, mutableIntArray1.length);
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertTrue(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt2));
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertEquals(228, (int)mutableInt0.toInteger());
      assertEquals((byte) (-28), mutableInt0.byteValue());
      assertEquals(228, mutableInt0.intValue());
      assertEquals((short)228, mutableInt0.shortValue());
      assertEquals(228L, mutableInt0.longValue());
      assertEquals(228.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("228", mutableInt0.toString());
      assertEquals(228.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(228, (int)mutableInt0.getValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0, mutableInt1.intValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertNotSame(mutableInt0, mutableInt1);
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt1, mutableInt2);
      assertNotSame(mutableInt1, mutableInt0);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)1544);
      assertNotNull(short0);
      assertEquals((short)1544, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)1544);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)1544, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1849));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-1849), (short)short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1544, (short)1544, (short) (-1849)}, shortArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-1849);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1849.0F)}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf((Object[]) shortArray0, (Object) short1);
      assertEquals(3, shortArray0.length);
      assertFalse(short1.equals((Object)short2));
      assertTrue(short1.equals((Object)short0));
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1544;
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {1544.0}, doubleArray0, 0.01);
      
      Character[] characterArray0 = new Character[8];
      char char0 = '\\';
      Character character0 = Character.valueOf('\\');
      assertNotNull(character0);
      assertEquals('\\', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('\\');
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('\\', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('\\', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('\\');
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('\\', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf(char0);
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('\\', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf((char) character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character3));
      assertTrue(character1.equals((Object)character4));
      assertTrue(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character1));
      assertNotNull(character5);
      assertEquals('\\', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char0);
      assertTrue(character6.equals((Object)character0));
      assertTrue(character6.equals((Object)character4));
      assertTrue(character6.equals((Object)character3));
      assertTrue(character6.equals((Object)character1));
      assertTrue(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)char0));
      assertNotNull(character6);
      assertEquals('\\', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character('*');
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertNotNull(character7);
      assertEquals('*', (char)character7);
      
      characterArray0[7] = character7;
      Character character8 = Character.valueOf((char) character3);
      assertTrue(character8.equals((Object)character6));
      assertTrue(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character7));
      assertTrue(character8.equals((Object)character3));
      assertTrue(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character7));
      assertTrue(character3.equals((Object)character4));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character6));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character5));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character8);
      assertEquals('\\', (char)character8);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(characterArray0, (int) shortArray0[2], character8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1849, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 3764.090232940246;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      assertEquals(7, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 3764.090232940246, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      int int0 = ArrayUtils.indexOf(charArray0, '+', 1);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'!'}, charArray0);
      
      Double double0 = Double.valueOf(3764.090232940246);
      assertNotNull(double0);
      assertEquals(3764.090232940246, (double)double0, 0.01);
      
      Double double1 = new Double((-1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      
      int int1 = ArrayUtils.indexOf(charArray0, '+', (-2146141469));
      assertEquals(1, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'!'}, charArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-2146141469);
      longArray0[1] = (long) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'!'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Float float0 = new Float(1785.0);
      assertNotNull(float0);
      assertEquals(1785.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((-1340.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1340.0F), (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float1;
      floatArray0[1] = float1;
      floatArray0[2] = float1;
      floatArray0[3] = float0;
      Float float2 = new Float(Float.NaN);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(Float.NaN, (float)float2, 0.01F);
      
      floatArray0[4] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      ArrayUtils.shift((Object[]) floatArray1, 2871);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      ArrayUtils.swap(doubleArray0, (-167), 2147028190);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-3401.872314453125));
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1828.8;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1583.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1583.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1583.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1058);
      intArray0[1] = (-1058);
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      Character character0 = Character.valueOf('w');
      assertNotNull(character0);
      assertEquals('w', (char)character0);
      
      Character character1 = new Character('7');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('7', (char)character1);
      
      Character character2 = Character.valueOf('Q');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('Q', (char)character2);
      
      Character character3 = Character.valueOf('R');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('R', (char)character3);
      
      Character character4 = Character.valueOf('Q');
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      assertEquals('Q', (char)character4);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character3;
      characterArray0[3] = character4;
      characterArray0[4] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(5, characterArray1.length);
      assertEquals(5, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      ArrayUtils.shift((Object[]) characterArray1, 2);
      assertEquals(5, characterArray1.length);
      assertEquals(5, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "byt4");
      assertEquals(8, objectArray0.length);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 100.0;
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) "byt4", (Object) boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[5] = (-925.0423F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, (-925.0423F)}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)118);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, (-925.0423F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'Q';
      charArray0[2] = '[';
      charArray0[3] = '!';
      charArray0[4] = '';
      charArray0[5] = 'k';
      charArray0[6] = 'C';
      charArray0[7] = 'v';
      ArrayUtils.shift(charArray0, (int) (byte)5);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'!', '', 'k', 'C', 'v', 'x', 'Q', '['}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)99;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)99);
      assertEquals(4, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)99, (byte)99, (byte)5, (byte)99}, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)5;
      Object[] objectArray0 = new Object[5];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {5.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift((char[]) null, (int) (byte)99);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(4584.2941053);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(4584.2941053, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(5, doubleArray0.length);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1.0);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      assertEquals(1.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 4584.2941053, 0.0, 1.0}, doubleArray1, 0.01);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean("");
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = Boolean.TRUE;
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2.14748365E9F;
      floatArray0[1] = (-1021.58F);
      boolean boolean5 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean5);
      assertArrayEquals(new float[] {2.14748365E9F, (-1021.58F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift((char[]) null, 38);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      ArrayUtils.shift(shortArray0, 1136, (int) (short)5, 9);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)5, (short)0, (short)0}, shortArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) (short)5;
      objectArray0[4] = (Object) (short)0;
      objectArray0[5] = (Object) (short)0;
      objectArray0[6] = (Object) (short)0;
      Float float0 = new Float(910.8481F);
      assertNotNull(float0);
      assertEquals(910.8481F, (float)float0, 0.01F);
      
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertNotNull(object0);
      assertEquals(910.8481F, object0);
      
      objectArray0[7] = object0;
      objectArray0[8] = (Object) (short)5;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(9, objectArray0.length);
      assertTrue(boolean0);
      
      Float[] floatArray0 = new Float[2];
      floatArray0[0] = float0;
      floatArray0[1] = (Float) object0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = '!';
      charArray0[2] = '2';
      ArrayUtils.swap(charArray0, 101, 1, 56);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'J', '!', '2'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      float[] floatArray0 = new float[2];
      long[] longArray0 = new long[22];
      longArray0[1] = 75L;
      longArray0[2] = 1310L;
      longArray0[5] = 1032L;
      longArray0[5] = (-1055L);
      longArray0[6] = 1032L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(22, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1604);
      shortArray0[2] = (short)69;
      shortArray0[4] = (short)710;
      shortArray0[5] = (short) (-1604);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1604), (short)0, (short)69, (short)0, (short)710, (short) (-1604), (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      Float[] floatArray1 = new Float[3];
      floatArray1[0] = (Float) (-1.0F);
      floatArray1[1] = (Float) (-1.0F);
      floatArray1[2] = (Float) (-1.0F);
      Float[] floatArray2 = ArrayUtils.removeElements((Float[]) null, floatArray1);
      assertEquals(3, floatArray1.length);
      assertNull(floatArray2);
      
      ArrayUtils.swap(floatArray0, (-236), (-236), (-236));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      Double double2 = new Double(0.0);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[3] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-4115.49), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) doubleArray0[0];
      objectArray0[1] = (Object) double1;
      objectArray0[2] = (Object) double1;
      objectArray0[3] = (Object) doubleArray0[1];
      objectArray0[4] = (Object) doubleArray0[1];
      objectArray0[5] = (Object) doubleArray0[3];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)2, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)2, (byte)2}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double3 = new Double(0.0);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) double0;
      objectArray1[1] = (Object) double3;
      objectArray1[2] = (Object) (byte)2;
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray1, (Object) null, 0);
      assertEquals(3, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals((-1), int0);
      assertNotSame(objectArray1, objectArray0);
      
      Byte byte0 = Byte.valueOf((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertNotNull(string0);
      assertEquals("2", string0);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-4115.49), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)6);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char char0 = 'T';
      Character character0 = new Character('T');
      assertTrue(character0.equals((Object)char0));
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character character1 = new Character('T');
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('T', (char)character1);
      
      Character character2 = Character.valueOf('+');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('+', (char)character2);
      
      Character character3 = Character.valueOf('T');
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('T', (char)character3);
      
      Character character4 = new Character('5');
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      assertEquals('5', (char)character4);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = character3;
      characterArray0[2] = character3;
      characterArray0[3] = character2;
      characterArray0[4] = character4;
      char[] charArray0 = new char[1];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) char0;
      longArray0[1] = (long) (char)character0;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {84L, 84L}, longArray0);
      
      ArrayUtils.swap((double[]) null, (-3349), 1307, 52);
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'p');
      assertEquals(1, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-5909.0F);
      floatArray0[2] = (-3080.0F);
      floatArray0[3] = (-1.0F);
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (double) (-1138);
      doubleArray0[2] = (double) (-1138);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) (-3080.0F);
      doubleArray0[7] = (double) (-1138);
      ArrayUtils.swap(doubleArray0, 4443, (-1138));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.5, (-1138.0), (-1138.0), (-1.0), 1.0, (-1.0), (-3080.0), (-1138.0)}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 656.98);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.5, (-1138.0), (-1138.0), (-1.0), 1.0, (-1.0), (-3080.0), (-1138.0)}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1138.0), (-3080.0), (-1.0), 1.0, (-1.0), (-1138.0), (-1138.0), 1.5}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray1, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3764.090232940246;
      doubleArray0[1] = 3806.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-2654.191);
      doubleArray0[5] = 3764.090232940246;
      doubleArray0[6] = 413.2395;
      doubleArray0[7] = (-716.3351787842427);
      doubleArray0[8] = 1.0;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3806.0, 0.0, (-1.0), (-2654.191), 3764.090232940246, 413.2395, (-716.3351787842427), 1.0, 3764.090232940246}, doubleArray0, 0.01);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-1));
      assertNull(intArray0);
      
      int[] intArray1 = new int[0];
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertEquals(8, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3806.0, 0.0, (-1.0), (-2654.191), 3764.090232940246, 413.2395, (-716.3351787842427), 3764.090232940246}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3806.0, 0.0, (-1.0), (-2654.191), 3764.090232940246, 413.2395, (-716.3351787842427), 1.0, 3764.090232940246}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3471), (-3471));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      int[] intArray0 = new int[2];
      intArray0[0] = (-3471);
      intArray0[1] = (-3471);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-3471), (-3471)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '!';
      charArray0[1] = ';';
      charArray0[2] = '&';
      charArray0[3] = 'D';
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-1338), 1);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1842.0);
      doubleArray0[1] = (-1842.0);
      doubleArray0[2] = (-1842.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1, 1545);
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {(-1842.0), (-1842.0), (-1842.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-982);
      shortArray0[1] = (short) (-982);
      shortArray0[2] = (short) (-982);
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short) (-982), (int) (short) (-982));
      assertEquals(3, shortArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals("{0, 1, 2}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(3, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      assertEquals(3, bitSet1.cardinality());
      assertArrayEquals(new short[] {(short) (-982), (short) (-982), (short) (-982)}, shortArray0);
      assertNotSame(bitSet1, bitSet0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-982);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-982.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-982.0F), (-982.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(2, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertEquals(3, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-982), (short) (-982), (short) (-982)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-88.9));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-88.9), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(5, doubleArray0.length);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1.0);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals(1.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-0.6269777847940259));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-88.9), 0.0, 1.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = ArrayUtils.insert(0, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) '-';
      floatArray0[4] = (-925.0423F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {45.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '-';
      intArray0[1] = 0;
      intArray0[2] = (int) '-';
      intArray0[3] = (int) 'G';
      intArray0[4] = 1545;
      intArray0[5] = (int) 'G';
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 698;
      MockRandom mockRandom0 = new MockRandom(22L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 45, 71, 1545, 71, 0, 0, 698, 45}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-702);
      intArray0[1] = (-1139);
      intArray0[2] = 3590;
      intArray0[3] = (-1536);
      intArray0[4] = (-2333);
      intArray0[5] = (-1434);
      intArray0[7] = Integer.MAX_VALUE;
      intArray0[8] = 7;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(18, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-702), (-1139), 3590, (-1536), (-2333), (-1434), 0, Integer.MAX_VALUE, 7}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 827;
      doubleArray0[1] = (double) (-1434);
      doubleArray0[2] = (double) (-2333);
      doubleArray0[5] = (double) 7;
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      ArrayUtils.swap(doubleArray0, (-1138), (-1822));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {827.0, (-1434.0), (-2333.0), 0.0, 0.0, 7.0, 2.147483647E9}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {827.0, (-1434.0), (-2333.0), 0.0, 0.0, 7.0, 2.147483647E9}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {2.147483647E9, 7.0, 0.0, 0.0, (-2333.0), (-1434.0), 827.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((float) (-1536));
      assertNotNull(float0);
      assertEquals((-1536.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (-702));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-702.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) (-1434));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals((-1434.0F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(827.0);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals(827.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) (-702));
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      assertEquals((-702.0F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-1), (-2146454172), (-1));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, Integer.MAX_VALUE);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.shift(floatArray0, (-3072), (-3072), (-746));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (-63);
      longArray0[3] = (-2027L);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-63L), 0L, (-2027L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-63L), 0L, (-2027L), 0L, (-63L), 0L, (-2027L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-63));
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-63)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)99);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (byte)99;
      doubleArray0[2] = (double) (-1);
      int int1 = ArrayUtils.indexOf(doubleArray0, 0.1, (-1), 0.1);
      assertEquals(3, doubleArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-1.0), 99.0, (-1.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 920.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 99.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 99.0, (-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 40, 40, (int) (short)0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false}, booleanArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 40);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (byte)99;
      intArray0[2] = (-1);
      intArray0[3] = (int) (byte)99;
      intArray0[4] = (int) (byte)99;
      intArray0[5] = 40;
      intArray0[6] = (-1);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(14, intArray1.length);
      assertEquals(7, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 99, (-1), 99, 99, 40, (-1)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, Integer.MAX_VALUE);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) Integer.MAX_VALUE;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2147483647L}, longArray0);
      assertArrayEquals(new long[] {0L, 2147483647L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2147483647L;
      floatArray0[1] = (float) 2147483647L;
      floatArray0[2] = (float) 101;
      floatArray0[3] = (float) Integer.MAX_VALUE;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 2147483647L;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertEquals(7, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 101.0F, 2.14748365E9F, 0.0F, 0.0F, 2.14748365E9F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 101.0F, 2.14748365E9F, 0.0F, 0.0F, 0.0F, 2.14748365E9F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1058));
      assertEquals(1, intArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {101}, intArray0);
      
      Character[] characterArray0 = new Character[8];
      Character character0 = Character.valueOf('7');
      assertNotNull(character0);
      assertEquals('7', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = '{';
      Character character1 = Character.valueOf('{');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('{', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('{', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('[');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertNotNull(character3);
      assertEquals('[', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('7');
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      assertEquals('7', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf((char) character2);
      assertFalse(character5.equals((Object)character3));
      assertTrue(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character4));
      assertTrue(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character3));
      assertNotNull(character5);
      assertEquals('{', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf((char) character2);
      assertTrue(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character4));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character5));
      assertFalse(character2.equals((Object)character3));
      assertNotNull(character6);
      assertEquals('{', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character('l');
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character5));
      assertNotNull(character7);
      assertEquals('l', (char)character7);
      
      characterArray0[7] = character7;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      int int0 = Integer.MAX_VALUE;
      Object object0 = ArrayUtils.get(objectArray0, Integer.MAX_VALUE);
      assertEquals(7, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Character character0 = new Character('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) character0);
      assertNotNull(object1);
      assertEquals('T', object1);
      
      objectArray0[1] = object1;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[4] = (long) Integer.MAX_VALUE;
      longArray0[5] = (long) Integer.MAX_VALUE;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2147483647L, Integer.MAX_VALUE);
      assertEquals(6, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {2147483647L, 2147483647L, 2147483647L, 2147483647L, 2147483647L, 2147483647L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) "\"N2 u2^sf[#pY8^fw", bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = null;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-15));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -15, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      MutableInt mutableInt0 = new MutableInt((-2264));
      assertNotNull(mutableInt0);
      assertEquals((-2264.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2264), (int)mutableInt0.toInteger());
      assertEquals((-2264), (int)mutableInt0.getValue());
      assertEquals((byte)40, mutableInt0.byteValue());
      assertEquals((short) (-2264), mutableInt0.shortValue());
      assertEquals((-2264), mutableInt0.intValue());
      assertEquals((-2264L), mutableInt0.longValue());
      assertEquals((-2264.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-2264", mutableInt0.toString());
      
      mutableInt0.add((Number) 0.0F);
      assertEquals((-2264.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2264), (int)mutableInt0.toInteger());
      assertEquals((-2264), (int)mutableInt0.getValue());
      assertEquals((byte)40, mutableInt0.byteValue());
      assertEquals((short) (-2264), mutableInt0.shortValue());
      assertEquals((-2264), mutableInt0.intValue());
      assertEquals((-2264L), mutableInt0.longValue());
      assertEquals((-2264.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-2264", mutableInt0.toString());
      
      MutableInt[] mutableIntArray0 = new MutableInt[3];
      mutableIntArray0[0] = mutableInt0;
      mutableIntArray0[1] = mutableInt0;
      mutableIntArray0[2] = mutableInt0;
      MutableInt[] mutableIntArray1 = ArrayUtils.add(mutableIntArray0, mutableInt0);
      assertEquals(3, mutableIntArray0.length);
      assertEquals(4, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertEquals((-2264.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2264), (int)mutableInt0.toInteger());
      assertEquals((-2264), (int)mutableInt0.getValue());
      assertEquals((byte)40, mutableInt0.byteValue());
      assertEquals((short) (-2264), mutableInt0.shortValue());
      assertEquals((-2264), mutableInt0.intValue());
      assertEquals((-2264L), mutableInt0.longValue());
      assertEquals((-2264.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-2264", mutableInt0.toString());
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(4584.2941053);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(4584.2941053, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(5, doubleArray0.length);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1.0);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals(1.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 4584.2941053, 0.0, 1.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = ArrayUtils.insert(0, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-2070));
      assertEquals(8, booleanArray0.length);
      assertNotNull(bitSet0);
      assertEquals(8, bitSet0.length());
      assertEquals(6, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 4, 5, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, true, false}, booleanArray0));
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 8);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[4] = class4;
      Class<Byte> class5 = Byte.class;
      classArray0[5] = class5;
      Class<Byte> class6 = Byte.class;
      classArray0[6] = class6;
      Class<Byte> class7 = Byte.class;
      classArray0[7] = class7;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(8, classArray0.length);
      assertEquals(8, classArray1.length);
      assertNotNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      doubleArray0[3] = 1258.2741776854;
      doubleArray0[4] = 477.4094;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, Integer.MAX_VALUE);
      assertEquals(0, booleanArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, Integer.MAX_VALUE, 2147483647L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)76;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)76}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)76;
      floatArray0[1] = (float) (byte)76;
      floatArray0[2] = (float) (byte) (-1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 76.0F;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 76.0F;
      doubleArray0[3] = (double) (byte)76;
      doubleArray0[4] = (-2333.0);
      ArrayUtils.reverse(doubleArray0, (int) (byte)0, (int) (byte) (-1));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {76.0, 0.0, 76.0, 76.0, (-2333.0)}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) 76.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) 76.0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-585), doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -585, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)527;
      shortArray0[1] = (short)527;
      shortArray0[2] = (short)527;
      shortArray0[3] = (short)527;
      shortArray0[4] = (short)527;
      shortArray0[5] = (short)527;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)527, (short)527, (short)527, (short)527, (short)527, (short)527}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      Byte byte0 = new Byte((byte)24);
      assertNotNull(byte0);
      assertEquals((byte)24, (byte)byte0);
      
      Byte byte1 = new Byte((byte)40);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)40, (byte)byte1);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(552, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 552, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = doubleArray0[2];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-4115.49), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) double2;
      objectArray0[1] = (Object) double1;
      objectArray0[2] = (Object) double1;
      objectArray0[1] = (Object) double2;
      objectArray0[4] = (Object) doubleArray0[1];
      objectArray0[5] = (Object) doubleArray0[3];
      objectArray0[6] = (Object) double2;
      objectArray0[7] = (Object) doubleArray0[1];
      objectArray0[8] = (Object) double3;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(9, objectArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.reverse(doubleArray1, 6, (-963));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-4115.49), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(6, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)76;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)76}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)76;
      shortArray0[1] = (short) (byte)76;
      shortArray0[2] = (short) (byte)76;
      shortArray0[3] = (short)938;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)76, (short)76, (short)76, (short)938, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)76, (short)76, (short)76, (short)938, (short)0, (short)0}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      MockRandom mockRandom0 = new MockRandom((short)76);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      mockRandom0.nextBytes(byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 160);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 160, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)99;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)99);
      assertEquals(4, byteArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)99, (byte)99, (byte)5, (byte)99}, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)5;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {5.0F, 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)5;
      longArray0[1] = (long) (byte)5;
      longArray0[2] = (long) (byte)99;
      longArray0[3] = (long) (byte)99;
      longArray0[4] = (long) (byte)99;
      MockRandom mockRandom0 = new MockRandom((byte)99);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {5L, 99L, 99L, 99L, 5L}, longArray0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "The Array must not be null";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "len must be > 0";
      stringArray0[5] = "lr9bdpiI=Z]g7wq$.";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = 0.1;
      doubleArray0[2] = 2267.729776744149;
      doubleArray0[3] = 113.7281969;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.1, 0.1, 2267.729776744149, 113.7281969}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shuffle(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Character[] characterArray0 = new Character[8];
      char char0 = ',';
      Character character0 = Character.valueOf(',');
      assertNotNull(character0);
      assertEquals(',', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals(',', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(',');
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals(',', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('@');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('@', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('r');
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('r', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('+');
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertNotNull(character5);
      assertEquals('+', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('0');
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character2));
      assertNotNull(character6);
      assertEquals('0', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf('r');
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character1));
      assertNotNull(character7);
      assertEquals('r', (char)character7);
      
      characterArray0[7] = character7;
      Character[] characterArray1 = ArrayUtils.clone(characterArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 60;
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3401.8723F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 2701.4275F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-2861.0F);
      floatArray0[7] = 0.0F;
      ArrayUtils.swap(floatArray0, (-236), (-236));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-3401.8723F), 1.0F, 2701.4275F, 0.0F, 1.0F, 1.0F, (-2861.0F), 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-236);
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.reverse(longArray1, (-236), (-236));
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('b');
      assertNotNull(character0);
      assertEquals('b', (char)character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = new char[6];
      charArray0[0] = (char) character0;
      charArray0[1] = 'b';
      charArray0[2] = (char) character0;
      charArray0[3] = 'z';
      charArray0[4] = 'b';
      charArray0[5] = (char) character0;
      ArrayUtils.swap(charArray0, 0, (-1));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'b', 'b', 'b', 'z', 'b', 'b'}, charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (char)character0;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(4584.2941053);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(4584.2941053, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(5, doubleArray0.length);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1.0);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals(1.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 4584.2941053, 0.0, 1.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = ArrayUtils.insert(0, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = '-';
      charArray0[2] = 'u';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'h');
      assertEquals(3, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'G', '-', 'u'}, charArray0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-1));
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(124L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(124L);
      assertNotNull(intStream0);
      
      LongStream longStream0 = mockRandom0.longs(124L);
      assertNotNull(longStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      double double0 = mockRandom1.nextDouble();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(mockRandom1, mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom1.doubles();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(doubleStream0);
      assertNotSame(mockRandom1, mockRandom0);
      
      int int0 = mockRandom1.nextInt(1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(0, int0);
      assertNotSame(mockRandom1, mockRandom0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (-1));
      assertNull(shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-95));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      int int0 = (-46);
      Float float0 = new Float((float) (-46));
      assertNotNull(float0);
      assertEquals((-46.0F), (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Float[]) null, (-46), float0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -46, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-767);
      Float float0 = new Float((float) (-767));
      assertNotNull(float0);
      assertEquals((-767.0F), (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-767), floatArray0[1]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -767, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = 'z';
      char char0 = 'M';
      charArray0[2] = 'M';
      char char1 = '~';
      charArray0[3] = '~';
      charArray0[4] = '!';
      ArrayUtils.reverse(charArray0, 2021, 2021);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'.', 'z', 'M', '~', '!'}, charArray0);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-55);
      Byte byte1 = new Byte((byte) (-55));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-55), (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-55), (byte)byte2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-2317), byte2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2317, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean("]");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = 'r';
      charArray0[2] = 'X';
      charArray0[3] = '.';
      charArray0[4] = '`';
      char[] charArray1 = ArrayUtils.add(charArray0, '`');
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'V', 'r', 'X', '.', '`'}, charArray0);
      assertArrayEquals(new char[] {'V', 'r', 'X', '.', '`', '`'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 0);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)2447);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)2447}, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)2447;
      longArray0[1] = (long) (short)2447;
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2447L, 2447L, 0L}, longArray0);
      assertArrayEquals(new long[] {2447L, 2447L, 0L, 2447L, 2447L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.swap(charArray0, 1920, 1920);
      assertEquals(5, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'V', 'r', 'X', '.', '`'}, charArray0);
      assertNotSame(charArray0, charArray1);
      
      Boolean[] booleanArray1 = new Boolean[8];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) true;
      booleanArray1[4] = (Boolean) false;
      booleanArray1[5] = (Boolean) false;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[7] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, false, false, false}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = 'r';
      charArray0[2] = 'X';
      charArray0[3] = '.';
      charArray0[4] = '`';
      char[] charArray1 = ArrayUtils.add(charArray0, '`');
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'V', 'r', 'X', '.', '`'}, charArray0);
      assertArrayEquals(new char[] {'V', 'r', 'X', '.', '`', '`'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 0);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)2447);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)2447}, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)2447;
      longArray0[1] = (long) (short)2447;
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2447L, 2447L, 0L}, longArray0);
      assertArrayEquals(new long[] {2447L, 2447L, 0L, 2447L, 2447L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.swap(charArray0, 1920, 1920);
      assertEquals(5, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'V', 'r', 'X', '.', '`'}, charArray0);
      assertNotSame(charArray0, charArray1);
      
      Boolean[] booleanArray1 = new Boolean[8];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) false;
      booleanArray1[5] = (Boolean) false;
      booleanArray1[6] = (Boolean) false;
      booleanArray1[7] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray2));
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-5909.0F);
      floatArray0[2] = (-3080.0F);
      floatArray0[3] = (-1.0F);
      MockRandom mockRandom0 = new MockRandom(192L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(192L);
      assertNotNull(longStream0);
      
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = mockRandom0.nextInt(1);
      assertEquals(0, int0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      Double double0 = new Double((-439.883));
      assertNotNull(double0);
      assertEquals((-439.883), (double)double0, 0.01);
      
      boolean[] booleanArray0 = new boolean[19];
      booleanArray0[0] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(19, booleanArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 18688;
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 18688;
      longArray1[1] = (long) 18688;
      longArray1[2] = (long) 18688;
      longArray1[3] = (long) 18688;
      longArray1[4] = (long) 18688;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(18688, longArray0, longArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18688, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[6] = 'Y';
      int int0 = ArrayUtils.indexOf(charArray0, '\u0000', 15);
      assertEquals(15, charArray0.length);
      assertEquals((-1), int0);
      
      Double double0 = Double.valueOf((double) (-715827883));
      assertNotNull(double0);
      assertEquals((-7.15827883E8), (double)double0, 0.01);
      
      Double double1 = new Double(15);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(15.0, (double)double1, 0.01);
      
      int int1 = new Integer('e');
      assertFalse(int1 == int0);
      assertEquals(101, int1);
      
      long[] longArray0 = new long[5];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "The Array must not be null";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "len must be > 0";
      stringArray0[5] = "lr9bdpiI=Z]g7wq$.";
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = 'm';
      charArray0[2] = 'd';
      charArray0[3] = '[';
      charArray0[4] = '2';
      charArray0[5] = 'd';
      charArray0[6] = ':';
      charArray0[7] = '2';
      int int0 = ArrayUtils.indexOf(charArray0, 'p', Integer.MAX_VALUE);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'[', 'm', 'd', '[', '2', 'd', ':', '2'}, charArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'm';
      longArray0[1] = (long) '2';
      longArray0[2] = (long) 'm';
      longArray0[3] = (long) 'p';
      longArray0[4] = (long) '2';
      longArray0[5] = (long) ':';
      longArray0[6] = (long) Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {109L, 50L, 109L, 112L, 50L, 58L, 2147483647L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = 'z';
      charArray0[2] = 'M';
      charArray0[3] = '~';
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'z';
      floatArray0[1] = (float) '.';
      floatArray0[2] = (float) 'M';
      floatArray0[3] = (float) 'z';
      floatArray0[4] = (float) '~';
      floatArray0[5] = (float) '~';
      floatArray0[6] = (float) '.';
      floatArray0[7] = (float) '!';
      floatArray0[8] = (float) '.';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {122.0F, 46.0F, 77.0F, 122.0F, 126.0F, 126.0F, 46.0F, 33.0F, 46.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 982.31F, 76);
      assertEquals(9, floatArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new float[] {122.0F, 46.0F, 77.0F, 122.0F, 126.0F, 126.0F, 46.0F, 33.0F, 46.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-4924), 122);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 122;
      floatArray0[1] = (float) (-4924);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1156.1561F, 122);
      assertEquals(2, floatArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new float[] {122.0F, (-4924.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 101.0F;
      floatArray0[1] = (-4412.965F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {101.0F, (-4412.965F), 1.0F, 1.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F, (-2125));
      assertEquals(4, floatArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{2, 3}", bitSet0.toString());
      assertArrayEquals(new float[] {101.0F, (-4412.965F), 1.0F, 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[6];
      ArrayUtils.reverse(charArray0, 1, (int) (short)1796);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)76;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)76}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)76;
      floatArray0[1] = (float) (byte)76;
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(180L, (long) (byte) (-1), (long) (byte)76);
      assertNotNull(longStream0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = 'h';
      ArrayUtils.reverse(charArray0, 100, (-72));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'!', 'h'}, charArray0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(2, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'!', 'h', '!', 'h'}, charArray1);
      assertArrayEquals(new char[] {'!', 'h'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1299.790305212126), (int) (short) (-982), (-509.8));
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short) (-982);
      longArray0[1] = (long) (short) (-982);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (short) (-982);
      longArray0[6] = (long) (-1);
      long[] longArray1 = ArrayUtils.add(longArray0, (-2147483648L));
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-982L), (-982L), (-1L), (-1L), (-1L), (-982L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-982L), (-982L), (-1L), (-1L), (-1L), (-982L), (-1L), (-2147483648L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-4412.965F);
      floatArray0[2] = (float) 0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1114111;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0, 0, 1114111, 0, 0, 0, 0}, intArray0);
      
      ArrayUtils.swap(floatArray0, 0, 494);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-4412.965F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = 'z';
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      int int0 = mockRandom0.nextInt(795);
      assertEquals(1, int0);
      
      int int1 = mockRandom0.nextInt();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 795;
      IntStream intStream0 = mockRandom0.ints((-105), (-64));
      assertNotNull(intStream0);
      
      floatArray0[1] = (float) '.';
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 'z';
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {46.0F, 795.0F, 122.0F, 1.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, 1, 58, 1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {46.0F, 795.0F, 122.0F, 1.0F}, floatArray0, 0.01F);
      
      int int2 = ArrayUtils.lastIndexOf((double[]) null, (double) 795.0F, 1.0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      Float float0 = new Float(4349.0F);
      assertNotNull(float0);
      assertEquals(4349.0F, (float)float0, 0.01F);
      
      Long long0 = new Long(1030L);
      assertNotNull(long0);
      assertEquals(1030L, (long)long0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object0);
      assertEquals(1030L, object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray0, (Object[]) doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.swap((char[]) null, 4, 101, 6);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)11;
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = 'X';
      charArray0[2] = '!';
      charArray0[3] = '!';
      charArray0[4] = 'X';
      ArrayUtils.swap(charArray0, (int) (byte)11, (int) (byte)11, (int) (byte)11);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'!', 'X', '!', '!', 'X'}, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'!', 'X', '!', '!', 'X'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'u';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'u');
      assertEquals(2, charArray0.length);
      assertNotNull(bitSet0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertArrayEquals(new char[] {'h', 'u'}, charArray0);
      
      ArrayUtils.swap(charArray0, 7, 7);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'h', 'u'}, charArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 'h';
      doubleArray0[3] = (double) 'u';
      doubleArray0[4] = (double) 'h';
      doubleArray0[5] = 3299.0;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 'h';
      doubleArray0[8] = (double) 0;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'h';
      intArray0[1] = (int) 'h';
      intArray0[2] = (int) 'h';
      intArray0[3] = 5;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 104, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)7;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)7;
      longArray0[1] = (long) 2076;
      longArray0[2] = 718L;
      longArray0[3] = 718L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 1);
      assertEquals(4, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {7L, 2076L, 718L, 718L}, longArray0);
      
      Integer integer0 = new Integer((byte)7);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      Integer integer1 = new Integer(2076);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2076, (int)integer1);
      
      Integer integer2 = new Integer((-1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      Byte byte0 = new Byte((byte) (-5));
      assertNotNull(byte0);
      assertEquals((byte) (-5), (byte)byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) null, (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1023.292);
      doubleArray0[2] = (-659.00201076);
      doubleArray0[3] = (-383.179786946583);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), (-1023.292), (-659.00201076), (-383.179786946583)}, doubleArray0, 0.01);
      
      Character character0 = Character.valueOf('L');
      assertNotNull(character0);
      assertEquals('L', (char)character0);
      
      Character character1 = Character.valueOf('L');
      assertNotNull(character1);
      assertEquals('L', (char)character1);
      
      Character character2 = new Character('L');
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('L', (char)character2);
      
      Character character3 = new Character(',');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals(',', (char)character3);
      
      Character character4 = Character.valueOf('M');
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('M', (char)character4);
      
      Character character5 = new Character('+');
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertNotNull(character5);
      assertEquals('+', (char)character5);
      
      Character character6 = Character.valueOf('@');
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character3));
      assertNotNull(character6);
      assertEquals('@', (char)character6);
      
      Character character7 = Character.valueOf('k');
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character5));
      assertNotNull(character7);
      assertEquals('k', (char)character7);
      
      Character[] characterArray0 = ArrayUtils.clone((Character[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2480);
      doubleArray0[1] = (double) (-2480);
      ArrayUtils.reverse(doubleArray0, (-56), (-2095));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2480.0), (-2480.0)}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[0];
      Double[] doubleArray2 = ArrayUtils.insert((-2480), doubleArray1, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 18688);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {18688}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 18688;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 9L, 18688);
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {18688L}, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2062L), (-1));
      assertEquals(1, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {18688L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'h', 'h'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)99);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-2134.14809165), 1009);
      assertEquals(3, doubleArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      float[] floatArray0 = new float[8];
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0.0F);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-1795.57));
      assertNotNull(double0);
      assertEquals((-1795.57), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1795.57));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1795.57), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-1453.0));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-1453.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals((-1795.57), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(75.0);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      assertEquals(75.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-828.50810858));
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      assertEquals((-828.50810858), (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) doubleArray0[0];
      doubleArray2[1] = (double) doubleArray0[5];
      doubleArray2[2] = 1.5;
      doubleArray2[3] = (double) doubleArray0[5];
      doubleArray2[4] = (-1795.57);
      doubleArray2[5] = 521.4225674512;
      doubleArray2[6] = (double) doubleArray0[1];
      int int0 = ArrayUtils.lastIndexOf(doubleArray2, 1.0);
      assertEquals(7, doubleArray2.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1795.57), (-828.50810858), 1.5, (-828.50810858), (-1795.57), 521.4225674512, (-1795.57)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = 1884L;
      ArrayUtils.reverse(longArray0, (-1), 0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 1884L}, longArray0);
      
      ArrayUtils.shift(objectArray0, (-251), (-251), 55);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-702);
      intArray0[1] = (-1139);
      intArray0[2] = 3590;
      intArray0[3] = (-1536);
      intArray0[4] = (-2333);
      intArray0[5] = (-1434);
      intArray0[6] = 827;
      char[] charArray0 = new char[4];
      charArray0[0] = '8';
      charArray0[1] = '&';
      charArray0[2] = '3';
      charArray0[3] = 'j';
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'D';
      charArray1[1] = '&';
      charArray1[2] = '3';
      charArray1[3] = 'U';
      charArray1[4] = '8';
      charArray1[5] = '3';
      charArray1[6] = 'x';
      charArray1[7] = 'D';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2144867955, charArray0, charArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2144867955, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(4584.2941053);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(4584.2941053, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(5, doubleArray0.length);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1.0);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals(1.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 4584.2941053, 0.0, 1.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = ArrayUtils.insert(0, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-94);
      byteArray1[1] = (byte) (-94);
      byteArray1[2] = (byte)6;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-94), (byte)6, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      org.evosuite.runtime.Random.setNextRandom((-642));
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-57));
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "The Array must not be null";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "len must be > 0";
      stringArray0[5] = "lr9bdpiI=Z]g7wq$.";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 3052L;
      longArray0[2] = 1283L;
      longArray0[3] = 2798L;
      longArray0[4] = (-2059L);
      longArray0[5] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1283L);
      assertEquals(6, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new long[] {0L, 3052L, 1283L, 2798L, (-2059L), 0L}, longArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte) (-104);
      byteArray0[8] = (byte) (-94);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-108), (byte)98, (byte) (-55), (byte)6, (byte)127, (byte) (-39), (byte) (-104), (byte) (-94)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      Character character0 = Character.valueOf('\u0017');
      assertNotNull(character0);
      assertEquals('\u0017', (char)character0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\u0017';
      charArray0[1] = 'R';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      charArray0[4] = '#';
      charArray0[5] = 'p';
      charArray0[7] = 'R';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-466), '2');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -466, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1149L));
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = new Long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-597);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      long[] longArray3 = new long[21];
      longArray3[0] = (long) (short)0;
      longArray3[1] = (-153L);
      ArrayUtils.reverse(longArray3);
      assertEquals(21, longArray3.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-153L);
      doubleArray0[1] = (double) (-153L);
      ArrayUtils.swap(doubleArray0, (int) (short)0, (-2237), (-1604));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-153.0), (-153.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)16;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)5, (short)16, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)5, (short)16, (short)0, (short)0}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-2212));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'p';
      doubleArray0[1] = (double) '#';
      doubleArray0[2] = 3.0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) '#';
      doubleArray0[5] = (double) (-1073);
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {35.0, 3.0, 0.0, 35.0, (-1073.0), 112.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-702);
      intArray0[1] = (-1139);
      intArray0[2] = 3590;
      intArray0[3] = (-1536);
      intArray0[4] = (-2333);
      intArray0[5] = (-1434);
      intArray0[6] = 827;
      intArray0[7] = Integer.MAX_VALUE;
      intArray0[8] = 7;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2333);
      intArray1[1] = (-1434);
      intArray1[2] = 3590;
      intArray1[3] = (-1434);
      intArray1[4] = Integer.MAX_VALUE;
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray1);
      assertEquals(14, intArray2.length);
      assertEquals(9, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-702), (-1139), 3590, (-1536), (-2333), (-1434), 827, Integer.MAX_VALUE, 7}, intArray0);
      assertArrayEquals(new int[] {(-2333), (-1434), 3590, (-1434), Integer.MAX_VALUE}, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 16.180884182;
      doubleArray0[1] = (double) (-1434);
      doubleArray0[2] = (double) 3590;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) (-1434);
      doubleArray0[5] = (double) 7;
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      ArrayUtils.swap(doubleArray0, (-1138), (-1822));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {16.180884182, (-1434.0), 3590.0, 2.147483647E9, (-1434.0), 7.0, 2.147483647E9}, doubleArray0, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 827);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {16.180884182, (-1434.0), 3590.0, 2.147483647E9, (-1434.0), 7.0, 2.147483647E9}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {2.147483647E9, 7.0, (-1434.0), 2.147483647E9, 3590.0, (-1434.0), 16.180884182}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      Double double0 = new Double((-1822.0));
      assertNotNull(double0);
      assertEquals((-1822.0), (double)double0, 0.01);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
      
      byte[] byteArray0 = new byte[1];
      ArrayUtils.swap(byteArray0, (int) (byte)66, (int) (byte)66, (-1949));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('b');
      assertNotNull(character0);
      assertEquals('b', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('', (char)character1);
      
      characterArray0[1] = character1;
      char char0 = '^';
      Character character2 = new Character('^');
      assertTrue(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('^', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character2);
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertTrue(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('^', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('^');
      assertFalse(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('^', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('I');
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      assertEquals('I', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char0);
      assertFalse(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character0));
      assertTrue(character6.equals((Object)char0));
      assertTrue(character6.equals((Object)character3));
      assertTrue(character6.equals((Object)character2));
      assertNotNull(character6);
      assertEquals('^', (char)character6);
      
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(7, characterArray1.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-113);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-55), (-1));
      assertEquals(6, byteArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte)57, (byte)106, (byte) (-89), (byte) (-72), (byte)82, (byte) (-113)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 60;
      intArray0[0] = 60;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 60;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {60L}, longArray0);
      
      ArrayUtils.shift(longArray0, 60, 60, 51);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {60L}, longArray0);
      
      short short0 = (short)88;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-631);
      shortArray0[1] = (short) (-631);
      shortArray0[2] = (short)19608;
      shortArray0[3] = (short)88;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)53);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-631), (short) (-631), (short)19608, (short)88}, shortArray0);
      assertArrayEquals(new short[] {(short)53, (short) (-631), (short) (-631), (short)19608, (short)88}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 60, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)85;
      objectArray0[2] = (Object) (byte)85;
      objectArray0[3] = (Object) (byte)85;
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      objectArray0[4] = object0;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(5, objectArray0.length);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)7;
      shortArray0[1] = (short) (byte)7;
      shortArray0[2] = (short) (byte)85;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray1);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      ArrayUtils.swap((Object[]) null, 1724, 1724, (-286));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1724;
      doubleArray0[2] = (double) (-286);
      doubleArray0[3] = 1339.72634548271;
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '8', (-1128));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)74}, byteArray0);
      
      ArrayUtils.reverse((char[]) null);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-90);
      shortArray0[1] = (short) (byte) (-90);
      ArrayUtils.shift(shortArray0, (-3053), (-309), 1);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-90), (short) (-90)}, shortArray0);
      
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-1));
      assertNull(intArray0);
      
      ArrayUtils.reverse((int[]) null, (-1), (-2337));
      ArrayUtils.reverse((int[]) null, 98, 98);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 98;
      floatArray0[1] = (float) (-2337);
      floatArray0[2] = (float) (-2337);
      floatArray0[3] = (float) 98;
      floatArray0[4] = (float) (-2337);
      floatArray0[5] = (float) 98;
      floatArray0[6] = (float) (-2337);
      floatArray0[7] = 946.51F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {98.0F, (-2337.0F), (-2337.0F), 98.0F, (-2337.0F), 98.0F, (-2337.0F), 946.51F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      byte byte0 = (byte)6;
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)6);
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte1 = new Byte((byte)6);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)6, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)14);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)14, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)6, (byte)byte3);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 3.0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.reverse((Object[]) byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = doubleArray0[2];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-4115.49), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) double2;
      objectArray0[1] = (Object) double1;
      objectArray0[2] = (Object) double1;
      objectArray0[1] = (Object) double2;
      objectArray0[4] = (Object) doubleArray0[1];
      objectArray0[5] = (Object) doubleArray0[3];
      objectArray0[6] = (Object) double2;
      objectArray0[7] = (Object) doubleArray0[1];
      objectArray0[8] = (Object) double3;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(9, objectArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.insert(0, floatArray0, floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(9, objectArray0.length);
      
      float[] floatArray3 = ArrayUtils.removeElements(floatArray0, floatArray2);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 774;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 774, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      Short short0 = new Short((short)2240);
      assertNotNull(short0);
      assertEquals((short)2240, (short)short0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)2240;
      intArray0[1] = (int) (short)0;
      intArray0[2] = 752;
      intArray0[0] = (int) (short)0;
      intArray0[4] = (int) (short)2240;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertEquals(5, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 752, 0, 2240}, intArray0);
      assertArrayEquals(new int[] {752, 2240}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(752, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 752, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1023.292);
      doubleArray0[2] = (-659.00201076);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lr9bdpiI=Z]g7wq$.";
      stringArray0[1] = "lr9bdpiI=Z]g7wq$.";
      stringArray0[2] = "lr9bdpiI=Z]g7wq$.";
      stringArray0[3] = "";
      stringArray0[4] = "lr9bdpiI=Z]g7wq$.";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2146907915;
      intArray0[1] = 2146622587;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2146907915, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146907915, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-15);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-15), (-15));
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-15.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[6] = (float) 2;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 2;
      floatArray0[2] = (-1604.0F);
      floatArray0[6] = (float) 2;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 97);
      assertEquals(7, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F, 2.0F, (-1604.0F), 2.0F, 2.0F, 0.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1604.0F), 2.0F, 2.0F, 0.0F, 2.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)76;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)76}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)76;
      floatArray0[1] = (float) (byte)76;
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(180L, (long) (byte) (-1), (long) (byte)76);
      assertNotNull(longStream0);
      
      int int0 = mockRandom0.nextInt(795);
      assertEquals(0, int0);
      
      int int1 = mockRandom0.nextInt();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {76.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 76.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2146910455), (int) (byte)76);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {76.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 76.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {76.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 76.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[18];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      ArrayUtils.reverse(floatArray0, (-1), (-5277));
      assertEquals(18, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 56);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = '_';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 56, (int) (short) (-257));
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'K', '_', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, '3');
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'K', '_', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      ArrayUtils.shift(charArray1, 2147028190);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertArrayEquals(new char[] {'K', '_', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = 'r';
      charArray0[2] = 'X';
      charArray0[3] = '.';
      charArray0[4] = '`';
      char[] charArray1 = ArrayUtils.add(charArray0, '`');
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'V', 'r', 'X', '.', '`'}, charArray0);
      assertArrayEquals(new char[] {'V', 'r', 'X', '.', '`', '`'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 0);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)2447);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)2447}, shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)2447;
      longArray0[1] = (long) (short)2447;
      longArray0[2] = (long) 0;
      ArrayUtils.reverse(longArray0, 0, (int) (short)2447);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 2447L, 2447L}, longArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'r';
      objectArray0[1] = (Object) 'X';
      ArrayUtils.shift(objectArray0, 0, 0, 76);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1023.292);
      doubleArray0[1] = (-1023.292);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 17.83672674, 67);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {(-1023.292), (-1023.292)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1023.292), (-1023.292)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2);
      assertEquals(6, byteArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertEquals("{3}", bitSet0.toString());
      assertArrayEquals(new byte[] {(byte)9, (byte) (-1), (byte) (-69), (byte)2, (byte) (-47), (byte)0}, byteArray0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) (byte)2);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (byte) (-1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.shift((Object[]) floatArray1, (-1069));
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {2.0F, (-1.0F)}, floatArray2, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = '';
      charArray0[2] = 'j';
      charArray0[3] = 'O';
      charArray0[4] = 'A';
      charArray0[5] = '8';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'O', (int) (byte)0);
      assertEquals(6, charArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertFalse(bitSet1.isEmpty());
      assertEquals("{3}", bitSet1.toString());
      assertEquals(1, bitSet1.cardinality());
      assertEquals(4, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertArrayEquals(new char[] {'R', '', 'j', 'O', 'A', '8'}, charArray0);
      assertNotSame(bitSet1, bitSet0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '8';
      doubleArray0[1] = 3962.2563443517;
      doubleArray0[2] = (double) 'j';
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {56.0, 3962.2563443517, 106.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)76;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)76}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)76;
      floatArray0[1] = (float) (byte)76;
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(180L, (long) (byte) (-1), (long) (byte)76);
      assertNotNull(longStream0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      int int0 = mockRandom0.nextInt(795);
      assertEquals(1, int0);
      
      int int1 = mockRandom0.nextInt();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {76.0F, 76.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, (-1113), 1, 2417);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {76.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 76.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-1113);
      doubleArray0[5] = (double) 2417;
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0.0F, (double) (byte)76);
      assertEquals(6, doubleArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(3, int2);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0, (-1113.0), 2417.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      Double double2 = new Double((double) doubleArray0[1]);
      assertEquals(4, doubleArray0.length);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[3] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-4115.49), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) doubleArray0[0];
      objectArray0[1] = (Object) double1;
      objectArray0[2] = (Object) double1;
      objectArray0[3] = (Object) doubleArray0[1];
      objectArray0[4] = (Object) doubleArray0[1];
      objectArray0[5] = (Object) doubleArray0[3];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[2] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte)2}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double3 = new Double((-4115.49));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals((-4115.49), (double)double3, 0.01);
      
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) double0;
      objectArray1[1] = (Object) double3;
      objectArray1[2] = (Object) (byte)0;
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray1, (Object) null, 0);
      assertEquals(3, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals((-1), int0);
      assertNotSame(objectArray1, objectArray0);
      
      Byte byte0 = Byte.valueOf((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertNotNull(string0);
      assertEquals("2", string0);
      
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)2, (-1));
      assertEquals(0, floatArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Character character0 = new Character('M');
      assertNotNull(character0);
      assertEquals('M', (char)character0);
      
      Object object0 = ArrayUtils.get(objectArray0, (-1030), (Object) character0);
      assertEquals(8, objectArray0.length);
      assertNotNull(object0);
      assertEquals('M', object0);
      
      objectArray0[1] = object0;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1030);
      longArray0[1] = (long) 'M';
      longArray0[2] = (long) 0;
      Character character1 = Character.valueOf('d');
      assertFalse(character1.equals((Object)object0));
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('d', (char)character1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) character1);
      assertFalse(character1.equals((Object)object0));
      assertFalse(character1.equals((Object)character0));
      assertFalse(object1.equals((Object)character0));
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      assertEquals('d', object1);
      
      Object object2 = ArrayUtils.toPrimitive((Object) character0);
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)object1));
      assertFalse(object2.equals((Object)character1));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      assertEquals('M', object2);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object2, (int) (short)0);
      assertEquals(8, objectArray0.length);
      assertFalse(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)object1));
      assertFalse(object2.equals((Object)character1));
      assertFalse(object2.equals((Object)object1));
      assertEquals((-1), int0);
      
      Byte byte0 = Byte.valueOf((byte)36);
      assertNotNull(byte0);
      assertEquals((byte)36, (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) "org.apache.commons.lang3.CharSequenceUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 77L;
      doubleArray0[1] = (double) 'd';
      doubleArray0[2] = (double) 'M';
      doubleArray0[3] = (double) 77L;
      doubleArray0[4] = (double) (-1030);
      doubleArray0[5] = (double) 'd';
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {77.0, 100.0, 77.0, 77.0, (-1030.0), 100.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(10, objectArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(10, objectArray0.length);
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('^');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('^', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('^', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character2);
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character3));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character4);
      assertEquals('^', (char)character4);
      
      characterArray0[4] = character0;
      Character character5 = Character.valueOf('U');
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertTrue(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      assertEquals('U', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character((char) character0);
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character4));
      assertTrue(character6.equals((Object)character5));
      assertTrue(character0.equals((Object)character5));
      assertFalse(character0.equals((Object)character2));
      assertFalse(character0.equals((Object)character3));
      assertFalse(character0.equals((Object)character4));
      assertFalse(character0.equals((Object)character1));
      assertNotNull(character6);
      assertEquals('U', (char)character6);
      
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(7, characterArray1.length);
      assertEquals(7, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)99);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[3];
      Object[] objectArray0 = new Object[2];
      Integer integer0 = Integer.getInteger("pTV5qLJ(!Ku<j");
      assertNull(integer0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.get(objectArray0, (-2120957684), (Object) "pTV5qLJ(!Ku<j");
      assertEquals(2, objectArray0.length);
      assertNotNull(object1);
      assertEquals("pTV5qLJ(!Ku<j", object1);
      
      objectArray0[1] = (Object) "pTV5qLJ(!Ku<j";
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(2, objectArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-4115.49), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) double2;
      objectArray0[1] = (Object) double1;
      objectArray0[2] = (Object) double1;
      objectArray0[3] = (Object) double2;
      objectArray0[4] = (Object) doubleArray0[1];
      objectArray0[5] = (Object) doubleArray0[3];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)9, (byte)2, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)2, (byte)2}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double4 = new Double(0.0);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals(0.0, (double)double4, 0.01);
      
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) double0;
      objectArray1[1] = (Object) double4;
      objectArray1[2] = (Object) (byte)2;
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray1, (Object) null, 0);
      assertEquals(3, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals((-1), int0);
      assertNotSame(objectArray1, objectArray0);
      
      Byte byte0 = Byte.valueOf((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertNotNull(string0);
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3401.8723F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 2701.4275F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-2861.0F);
      floatArray0[7] = 0.0F;
      ArrayUtils.swap(floatArray0, (-236), (-236));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-3401.8723F), 1.0F, 2701.4275F, 0.0F, 1.0F, 1.0F, (-2861.0F), 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-236);
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      ArrayUtils.reverse(longArray1, 0, 0);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "byt4");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2762.0F);
      floatArray0[2] = (-2762.0F);
      floatArray0[3] = (-2762.0F);
      floatArray0[4] = (-2762.0F);
      floatArray0[5] = (-2762.0F);
      floatArray0[6] = (-2762.0F);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1196);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1196));
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short) (-1196)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('b');
      assertNotNull(character0);
      assertEquals('b', (char)character0);
      
      characterArray0[0] = character0;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2562);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt(681);
      assertNotNull(mutableInt0);
      assertEquals(681, mutableInt0.intValue());
      assertEquals(681, (int)mutableInt0.toInteger());
      assertEquals(681, (int)mutableInt0.getValue());
      assertEquals((byte) (-87), mutableInt0.byteValue());
      assertEquals((short)681, mutableInt0.shortValue());
      assertEquals("681", mutableInt0.toString());
      assertEquals(681L, mutableInt0.longValue());
      assertEquals(681.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(681.0F, mutableInt0.floatValue(), 0.01F);
      
      MutableInt[] mutableIntArray0 = new MutableInt[5];
      mutableIntArray0[0] = mutableInt0;
      mutableIntArray0[1] = mutableInt0;
      mutableIntArray0[2] = mutableInt0;
      ArrayUtils.swap((Object[]) mutableIntArray0, (-1260), 681, (-3471));
      assertEquals(5, mutableIntArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-6275.47));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 1535);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 1535;
      longArray0[2] = (long) (-1);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 1535L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), 1535L, (-1L)}, longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-1L);
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      ArrayUtils.swap(objectArray0, 1535, (-1453));
      assertEquals(5, objectArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray2));
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      
      ArrayUtils.swap(objectArray0, 4, 1724, 1785);
      assertEquals(5, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) (-1453);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 1535L;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 1785;
      doubleArray0[6] = 2417.0;
      doubleArray0[7] = (double) 1535L;
      doubleArray0[8] = (double) 1535;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {4.0, (-1453.0), (-1.0), 1535.0, (-1.0), 1785.0, 2417.0, 1535.0, 1535.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 1339;
      intArray0[2] = (-2141644121);
      intArray0[3] = 2;
      intArray0[4] = 53;
      intArray0[5] = 1;
      intArray0[6] = 2;
      intArray0[7] = 6;
      ArrayUtils.reverse(intArray0, 1339, (-698));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 1339, (-2141644121), 2, 53, 1, 2, 6}, intArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 1;
      objectArray0[1] = (Object) 2;
      objectArray0[2] = (Object) 6;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2147.63824522);
      doubleArray0[1] = (double) (-698);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1339, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1339, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (double) (-698);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-4519), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4519, Length: 16
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "The Array must not be null";
      Double double0 = new Double(0.7);
      assertNotNull(double0);
      assertEquals(0.7, (double)double0, 0.01);
      
      Double double1 = new Double(0.7);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.7, (double)double1, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 6;
      ArrayUtils.reverse(intArray0, 1, (-4519));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {6}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) (-698);
      doubleArray0[3] = 0.7;
      doubleArray0[4] = 0.7;
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {6.0, 6.0, (-698.0), 0.7, 0.7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.0, 6.0, 6.0, (-698.0), 0.7, 0.7, 6.0, (-698.0), 0.7, 0.7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '!';
      charArray0[1] = ';';
      charArray0[2] = '&';
      charArray0[3] = 'D';
      charArray0[4] = 'e';
      charArray0[5] = 'j';
      charArray0[6] = 'x';
      charArray0[7] = '3';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'!', ';', '&', 'D', 'e', 'j', 'x', '3'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3596);
      doubleArray0[1] = (double) '3';
      doubleArray0[2] = (double) 'j';
      doubleArray0[3] = (double) '&';
      doubleArray0[4] = (double) '!';
      doubleArray0[5] = 165.64914991168536;
      doubleArray0[6] = (double) '!';
      doubleArray0[7] = (double) '3';
      doubleArray0[8] = (double) 'e';
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) '3';
      doubleArray1[1] = (double) 'e';
      doubleArray1[2] = (double) 'e';
      doubleArray1[3] = (double) 'e';
      doubleArray1[4] = (double) '!';
      doubleArray1[5] = 348.03877414;
      doubleArray1[6] = (double) ';';
      doubleArray1[7] = (double) '&';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3596), doubleArray0, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3596, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1428;
      doubleArray0[1] = (double) 1428;
      doubleArray0[2] = (double) 1428;
      doubleArray0[3] = (double) 1428;
      doubleArray0[4] = (double) 1428;
      doubleArray0[5] = (double) 1428;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1428, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1428, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short) (-982));
      assertNotNull(short0);
      assertEquals((short) (-982), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-982));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-982), (short)short1);
      
      shortArray0[1] = short1;
      short short2 = (short) (-1);
      Short short3 = new Short((short) (-1));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short) (-1), (short)short3);
      
      shortArray0[2] = short3;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      ArrayUtils.shift((double[]) null, 0, (int) short2, 2558);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2558;
      floatArray0[1] = (float) (short)shortArray0[1];
      floatArray0[2] = (float) 2558;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 0);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2558.0F, (-982.0F), 2558.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2558.0F, (-982.0F), 2558.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int int0 = ArrayUtils.indexOf((char[]) null, '=', (-298));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, 1611);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1611, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2);
      assertEquals(6, byteArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{3}", bitSet0.toString());
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte) (-69), (byte)2, (byte) (-47), (byte)0}, byteArray0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) (byte)2);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (byte) (-1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      ArrayUtils.shift((Object[]) floatArray1, (-1069));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-1.0F), 2.0F}, floatArray2, 0.01F);
      assertSame(floatArray0, floatArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = '';
      charArray0[2] = 'j';
      charArray0[3] = 'O';
      charArray0[4] = 'A';
      charArray0[5] = '8';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, '?', (int) (byte)0);
      assertEquals(6, charArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new char[] {'R', '', 'j', 'O', 'A', '8'}, charArray0);
      assertNotSame(bitSet1, bitSet0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 98;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-477));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -477, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1481.44176554);
      doubleArray0[2] = 0.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, (-1481.44176554), 0.0}, doubleArray0, 0.01);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(43L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(43L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(32L);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(32L, (long)long3);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 2451);
      assertEquals(5, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(16, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (byte)0);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 101;
      floatArray0[2] = (float) 101;
      ArrayUtils.swap(floatArray0, 56, 2146595524);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {101.0F, 0.0F, 101.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = 0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (double) 0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int1 = 3010;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2974.8765F;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3010, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3010, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      short[] shortArray0 = new short[3];
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.swap(shortArray0, (-1109), (int) (byte)14, (int) (byte) (-53));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (byte)14, (double) (-1109));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, 32, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "byt4");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, 10, (-823.118398174535));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      Double double0 = new Double((-439.883));
      assertNotNull(double0);
      assertEquals((-439.883), (double)double0, 0.01);
      
      Double double1 = new Double((-4259.756109));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-4259.756109), (double)double1, 0.01);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long((short)94);
      assertNotNull(long0);
      assertEquals(94L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short)94);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(94L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[1]);
      assertEquals(4, longArray0.length);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(94L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(3190L);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(3190L, (long)long3);
      
      longArray0[3] = long3;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotNull(longArray1);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2681);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-943);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-2681), (short) (-1), (short)0, (short) (-943)}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, (int) (short) (-943), (double) (short) (-2681));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -943, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 56;
      Double double0 = new Double(56);
      assertNotNull(double0);
      assertEquals(56.0, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Double[]) null, 56, double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 56, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-597);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)2;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short) (-597), (short)0, (short)2, (short)2}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, 10, (double) (short)2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)6);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Character character0 = new Character('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character character1 = new Character('T');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('T', (char)character1);
      
      Character character2 = Character.valueOf('+');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('+', (char)character2);
      
      Character character3 = Character.valueOf('T');
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('T', (char)character3);
      
      Character character4 = new Character('5');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      assertEquals('5', (char)character4);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = character3;
      characterArray0[2] = character3;
      characterArray0[3] = character2;
      characterArray0[4] = character4;
      Character character5 = new Character(';');
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character2));
      assertNotNull(character5);
      assertEquals(';', (char)character5);
      
      characterArray0[5] = character5;
      characterArray0[6] = character2;
      characterArray0[7] = character0;
      characterArray0[8] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(9, characterArray1.length);
      assertEquals(9, characterArray0.length);
      assertNotNull(characterArray1);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      ArrayUtils.swap(byteArray0, (-3579), (-1338), 919);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1828.8;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1828.8);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1828.8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[7];
      doubleArray0[0] = (double) (-882L);
      longArray0[1] = 0L;
      longArray0[2] = (-947L);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2562;
      shortArray0[1] = (short)2562;
      shortArray0[2] = (short)2562;
      shortArray0[3] = (short)2562;
      shortArray0[4] = (short)3081;
      shortArray0[5] = (short)2562;
      shortArray0[6] = (short)2562;
      shortArray0[7] = (short)2562;
      shortArray0[8] = (short) (-4924);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2562);
      assertEquals(2, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)3081, (short) (-4924)}, shortArray1);
      assertArrayEquals(new short[] {(short)2562, (short)2562, (short)2562, (short)2562, (short)3081, (short)2562, (short)2562, (short)2562, (short) (-4924)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      assertNotNull(double0);
      assertEquals((-4115.49), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)2562);
      assertNull(shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = (long) (short)2562;
      longArray0[2] = (long) (short)2562;
      longArray0[3] = (long) (short)2562;
      longArray0[4] = (long) (short)2562;
      longArray0[5] = 63L;
      longArray0[6] = (long) (short)2562;
      ArrayUtils.shift(longArray0, (-2144772178));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {2562L, 2562L, 63L, 2562L, 1L, 2562L, 2562L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)113;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)114, (byte) (-38), (byte)113, (byte) (-1)}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = '3';
      boolean boolean0 = ArrayUtils.isNotEmpty((Short[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-118);
      ArrayUtils.swap(byteArray0, 1, 1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-118)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte)18, object0);
      
      Float[] floatArray0 = new Float[6];
      floatArray0[0] = (Float) (float)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      IntStream intStream0 = mockRandom0.ints(95L);
      assertNotNull(intStream0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1668L;
      doubleArray0[1] = (double) 1668L;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-79);
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)40;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(byteArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1668L;
      Float float0 = new Float((double) 1668L);
      assertNotNull(float0);
      assertEquals(1668.0F, (float)float0, 0.01F);
      
      short[] shortArray0 = new short[4];
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1668.0}, doubleArray0, 0.01);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)1072);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 44.0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1668.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1668.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)54;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-12), (byte)0, (byte)94, (byte) (-38), (byte)54, (byte) (-1)}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = '3';
      charArray0[2] = '/';
      charArray0[3] = '\"';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'P', 0);
      assertEquals(4, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new char[] {'&', '3', '/', '\"'}, charArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)16;
      shortArray0[3] = (short)16;
      shortArray0[4] = (short) (byte)94;
      shortArray0[5] = (short) (byte)94;
      shortArray0[6] = (short) (byte)54;
      shortArray0[7] = (short) (byte) (-12);
      shortArray0[8] = (short) (byte) (-38);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2562);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)16, (short)16, (short)94, (short)94, (short)54, (short) (-12), (short) (-38)}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)16, (short)16, (short)94, (short)94, (short)54, (short) (-12), (short) (-38)}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-525);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-525));
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-525)}, shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)126;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)79, (byte)126, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)79, (byte)126, (byte)0, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double((-630.869025));
      assertNotNull(double0);
      assertEquals((-630.869025), (double)double0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 8080);
      assertEquals((-1), int0);
      
      Byte byte0 = Byte.valueOf((byte) (-77));
      assertNotNull(byte0);
      assertEquals((byte) (-77), (byte)byte0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (byte)79);
      assertNotNull(mutableInt0);
      assertEquals("79", mutableInt0.toString());
      assertEquals(79, mutableInt0.intValue());
      assertEquals(79.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(79.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(79L, mutableInt0.longValue());
      assertEquals((short)79, mutableInt0.shortValue());
      assertEquals(79, (int)mutableInt0.getValue());
      assertEquals(79, (int)mutableInt0.toInteger());
      assertEquals((byte)79, mutableInt0.byteValue());
      
      String string0 = ArrayUtils.toString((Object) mutableInt0);
      assertNotNull(string0);
      assertEquals("79", string0);
      assertEquals("79", mutableInt0.toString());
      assertEquals(79, mutableInt0.intValue());
      assertEquals(79.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(79.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(79L, mutableInt0.longValue());
      assertEquals((short)79, mutableInt0.shortValue());
      assertEquals(79, (int)mutableInt0.getValue());
      assertEquals(79, (int)mutableInt0.toInteger());
      assertEquals((byte)79, mutableInt0.byteValue());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-77);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-77.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)56;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)56;
      intArray0[1] = (int) (byte)82;
      intArray0[2] = (int) (byte)82;
      intArray0[3] = (int) (byte)56;
      intArray0[4] = (int) (byte)56;
      intArray0[5] = (int) (byte)56;
      intArray0[6] = (int) (byte)96;
      ArrayUtils.shift(intArray0, (-1398));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {56, 96, 56, 82, 82, 56, 56}, intArray0);
      
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)56, (byte)96, (byte)56, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)56, (byte)96, (byte)56, (byte)0, (byte)0}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, 1);
      assertEquals(7, intArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {56, 96, 56, 82, 82, 56, 56}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean("]");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, (Object) boolean0, (-1614));
      assertEquals(3, booleanArray0.length);
      assertEquals((-1), int0);
      
      Byte byte0 = Byte.valueOf((byte) (-101));
      assertNotNull(byte0);
      assertEquals((byte) (-101), (byte)byte0);
      
      MutableInt mutableInt0 = new MutableInt((Number) byte0);
      assertNotNull(mutableInt0);
      assertEquals((-101.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-101), mutableInt0.intValue());
      assertEquals((short) (-101), mutableInt0.shortValue());
      assertEquals((-101L), mutableInt0.longValue());
      assertEquals((-101), (int)mutableInt0.getValue());
      assertEquals((byte) (-101), mutableInt0.byteValue());
      assertEquals("-101", mutableInt0.toString());
      assertEquals((-101.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-101), (int)mutableInt0.toInteger());
      
      String string0 = ArrayUtils.toString((Object) "]");
      assertNotNull(string0);
      assertEquals("]", string0);
      
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 2522.0F, (-48));
      assertEquals(0, floatArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte) (-32);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)55, (byte)0, (byte) (-26), (byte)2, (byte)3, (byte) (-106), (byte)73, (byte) (-32)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)55, (byte)0, (byte) (-26), (byte)2, (byte)3, (byte) (-106), (byte)73, (byte) (-32)}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte) (-26);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte) (-32);
      objectArray0[3] = (Object) (byte)3;
      objectArray0[4] = (Object) (byte) (-26);
      objectArray0[5] = (Object) (byte) (-32);
      objectArray0[6] = (Object) (byte) (-106);
      objectArray0[7] = (Object) (byte)3;
      Double double0 = new Double((-3633.937270521));
      assertNotNull(double0);
      assertEquals((-3633.937270521), (double)double0, 0.01);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) double0, (int) (byte) (-32));
      assertEquals(8, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1828.8;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1828.8);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1828.8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 55;
      intArray0[1] = (-327);
      intArray0[2] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {55, (-327), 0, 0, 0, 0, 0}, intArray0);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals(0, booleanArray0.length);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      longArray0[0] = long0;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap((Object[]) byteArray1, (-1849), 108);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      ArrayUtils.swap((Object[]) longArray0, 2, (-2146188518), (-802));
      assertEquals(3, longArray0.length);
      
      ArrayUtils.reverse(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 373;
      longArray0[1] = (long) 373;
      ArrayUtils.shift(longArray0, 512);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {373L, 373L}, longArray0);
      
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 373L;
      objectArray0[1] = (Object) 373L;
      objectArray0[2] = (Object) 373L;
      objectArray0[3] = (Object) 373L;
      objectArray0[4] = (Object) 373L;
      ArrayUtils.swap(objectArray0, 512, 512, 512);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(10, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, false, false, false, false}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 1535;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) true;
      booleanArray0[4] = true;
      objectArray0[4] = (Object) false;
      ArrayUtils.swap(objectArray0, 1535, (-1453));
      assertEquals(5, objectArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, true);
      assertEquals(10, booleanArray0.length);
      assertEquals(9, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, false, false, false}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      ArrayUtils.swap(objectArray0, 1535, (-1453), 1785);
      assertEquals(5, objectArray0.length);
      
      ArrayUtils.reverse(booleanArray0);
      assertEquals(10, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, true, true, false}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, true, true}, booleanArray1));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3175.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2264.089, (double) (byte) (-34));
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {3175.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-34);
      intArray0[2] = (int) (byte) (-34);
      intArray0[3] = (int) (byte)99;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), (-34), (-34), 99, 0}, intArray0);
      assertArrayEquals(new int[] {(-1), (-34), (-34), 99}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-4292), intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4292, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.insert(0, intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte) (-90);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)100, (byte)98, (byte)12, (byte)0, (byte)127, (byte)74, (byte) (-90)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-525);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-525));
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-525)}, shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)126;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN, (-3487.36));
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {126.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (byte)79);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.insert((int) (byte)79, intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)79, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "byt4");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-55), 2577);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2577;
      floatArray0[1] = (float) 10;
      floatArray0[2] = (float) 2577;
      floatArray0[3] = (float) (byte) (-55);
      floatArray0[4] = (-701.2956F);
      floatArray0[5] = (float) (byte) (-55);
      ArrayUtils.reverse(floatArray0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-55.0F), (-701.2956F), (-55.0F), 2577.0F, 10.0F, 2577.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((double[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3471), (-3471));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 83);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {83}, intArray0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (-1358.96466088362));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1358.96466088362)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert(73, byteArray0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)85;
      longArray0[1] = (long) 2076;
      longArray0[2] = 718L;
      longArray0[3] = 718L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 1);
      assertEquals(4, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {85L, 2076L, 718L, 718L}, longArray0);
      
      Integer integer0 = new Integer((byte)85);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(85, (int)integer0);
      
      Integer integer1 = new Integer(2076);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2076, (int)integer1);
      
      Integer integer2 = new Integer((-1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      ArrayUtils.shift(longArray0, 1);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {718L, 85L, 2076L, 718L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((Short[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (int) (short) (-6287);
      intArray0[2] = (int) (short)86;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 86, (-1));
      assertEquals(3, intArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertArrayEquals(new int[] {1, (-6287), 86}, intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 718L;
      floatArray0[1] = (float) (short) (-6287);
      floatArray0[2] = (float) (short) (-6287);
      floatArray0[3] = (float) (short) (-173);
      floatArray0[4] = (float) (byte)85;
      floatArray0[5] = (float) 718L;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {718.0F, (-6287.0F), (-6287.0F), (-173.0F), 85.0F, 718.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {718.0F, (-6287.0F), (-6287.0F), (-173.0F), 85.0F, 718.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      short[] shortArray0 = new short[1];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      double[] doubleArray0 = new double[1];
      byteArray0[0] = (byte)79;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN, (-3487.36));
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (byte)79);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.insert((int) (byte)79, intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)79, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-119));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)99;
      shortArray0[1] = (short) (byte)99;
      shortArray0[2] = (short)36;
      shortArray0[3] = (short)53;
      shortArray0[4] = (short)36;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)99, (short)36, (short)53, (short)36, (short)99}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      float[] floatArray0 = new float[4];
      Float float0 = new Float((double) 0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1.0F);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-4746);
      intArray0[1] = (-4746);
      intArray0[2] = (-4746);
      intArray0[3] = (-164);
      intArray0[4] = (-363);
      intArray0[5] = (-164);
      intArray0[6] = (-363);
      intArray0[7] = (-164);
      intArray0[8] = (-363);
      ArrayUtils.swap(intArray0, (-164), (-164), (-363));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-4746), (-4746), (-4746), (-164), (-363), (-164), (-363), (-164), (-363)}, intArray0);
      
      byte[] byteArray0 = ArrayUtils.insert(65, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-4746);
      floatArray0[1] = (float) (-4746);
      ArrayUtils.swap(floatArray0, (-164), (-45));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-4746.0F), (-4746.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      int[] intArray0 = new int[4];
      Character character0 = Character.valueOf('\u0017');
      assertNotNull(character0);
      assertEquals('\u0017', (char)character0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 4);
      assertEquals(4, intArray0.length);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 227.9529;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-1), (int) (byte) (-1), 712.41698);
      assertEquals(1, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new double[] {227.9529}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1023.292);
      doubleArray0[2] = (-659.00201076);
      doubleArray0[3] = (-383.179786946583);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), (-1023.292), (-659.00201076), (-383.179786946583)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = ArrayUtils.insert(0, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1023.292), 1745.7314604);
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertArrayEquals(new double[] {(-1.0), (-1023.292), (-659.00201076), (-383.179786946583)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 34);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2205);
      shortArray0[1] = (short) (-954);
      shortArray0[2] = (short) (-1075);
      shortArray0[3] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-954), (short) (-1075), (short)0, (short) (-2205)}, shortArray0);
      
      byte[] byteArray1 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, 2064, 4472, 4472);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray0));
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 4472);
      assertNull(intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '$';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'$'}, charArray0);
      
      ArrayUtils.reverse((byte[]) null, (-2818), 254);
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 2064, 2);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) bitSet0;
      Byte byte0 = new Byte((byte)4);
      assertNotNull(byte0);
      assertEquals((byte)4, (byte)byte0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, (Object) byte0, (-2120957684));
      assertEquals(2, objectArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ArrayUtils.shuffle(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-4412.965F);
      floatArray0[2] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-4412.965F));
      assertEquals(3, floatArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {0.0F, (-4412.965F), 0.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-1919L));
      assertNull(longArray0);
      
      Character character0 = Character.valueOf('<');
      assertNotNull(character0);
      assertEquals('<', (char)character0);
      
      Character character1 = Character.valueOf('<');
      assertNotNull(character1);
      assertEquals('<', (char)character1);
      
      Character character2 = new Character('I');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('I', (char)character2);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      Character character0 = new Character('h');
      assertNotNull(character0);
      assertEquals('h', (char)character0);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, characterArray1.length);
      assertNotNull(characterArray1);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      AbstractMap.SimpleEntry<Float, MutableInt>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Float, MutableInt>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 2);
      Float float0 = new Float((-853.474087316));
      assertNotNull(float0);
      assertEquals((-853.47406F), (float)float0, 0.01F);
      
      MutableInt mutableInt0 = new MutableInt(float0);
      assertNotNull(mutableInt0);
      assertEquals((-853.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-853", mutableInt0.toString());
      assertEquals((-853), (int)mutableInt0.getValue());
      assertEquals((byte) (-85), mutableInt0.byteValue());
      assertEquals((-853.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-853), (int)mutableInt0.toInteger());
      assertEquals((-853), mutableInt0.intValue());
      assertEquals((-853L), mutableInt0.longValue());
      assertEquals((short) (-853), mutableInt0.shortValue());
      
      AbstractMap.SimpleEntry<Float, MutableInt> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Float, MutableInt>(float0, mutableInt0);
      assertNotNull(abstractMap_SimpleEntry0);
      assertEquals((-853.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-853", mutableInt0.toString());
      assertEquals((-853), (int)mutableInt0.getValue());
      assertEquals((byte) (-85), mutableInt0.byteValue());
      assertEquals((-853.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-853), (int)mutableInt0.toInteger());
      assertEquals((-853), mutableInt0.intValue());
      assertEquals((-853L), mutableInt0.longValue());
      assertEquals((short) (-853), mutableInt0.shortValue());
      
      abstractMap_SimpleEntryArray0[0] = abstractMap_SimpleEntry0;
      AbstractMap.SimpleEntry<Float, MutableInt> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Float, MutableInt>(abstractMap_SimpleEntry0);
      assertTrue(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry1);
      assertEquals((-853.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-853", mutableInt0.toString());
      assertEquals((-853), (int)mutableInt0.getValue());
      assertEquals((byte) (-85), mutableInt0.byteValue());
      assertEquals((-853.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-853), (int)mutableInt0.toInteger());
      assertEquals((-853), mutableInt0.intValue());
      assertEquals((-853L), mutableInt0.longValue());
      assertEquals((short) (-853), mutableInt0.shortValue());
      
      abstractMap_SimpleEntryArray0[1] = abstractMap_SimpleEntry1;
      AbstractMap.SimpleEntry<Float, MutableInt> abstractMap_SimpleEntry2 = ArrayUtils.get(abstractMap_SimpleEntryArray0, (-2145719228), abstractMap_SimpleEntry0);
      assertEquals(2, abstractMap_SimpleEntryArray0.length);
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertNotNull(abstractMap_SimpleEntry2);
      assertEquals((-853.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-853", mutableInt0.toString());
      assertEquals((-853), (int)mutableInt0.getValue());
      assertEquals((byte) (-85), mutableInt0.byteValue());
      assertEquals((-853.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-853), (int)mutableInt0.toInteger());
      assertEquals((-853), mutableInt0.intValue());
      assertEquals((-853L), mutableInt0.longValue());
      assertEquals((short) (-853), mutableInt0.shortValue());
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      assertNotSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
      assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
      assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry1);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) abstractMap_SimpleEntry2, 1);
      assertEquals(0, objectArray0.length);
      assertEquals(2, abstractMap_SimpleEntryArray0.length);
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      assertEquals((-1), int0);
      assertEquals((-853.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-853", mutableInt0.toString());
      assertEquals((-853), (int)mutableInt0.getValue());
      assertEquals((byte) (-85), mutableInt0.byteValue());
      assertEquals((-853.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-853), (int)mutableInt0.toInteger());
      assertEquals((-853), mutableInt0.intValue());
      assertEquals((-853L), mutableInt0.longValue());
      assertEquals((short) (-853), mutableInt0.shortValue());
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      assertNotSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
      assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
      assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry1);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)99);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (byte)99;
      doubleArray0[2] = (double) (-1);
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-1554L));
      assertNull(longArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 36;
      intArray0[1] = (int) (byte)99;
      intArray0[2] = 46;
      intArray0[3] = (-1);
      intArray0[4] = 46;
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {36, 99, 46, (-1), 46}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = new long[8];
      longArray2[0] = (long) (byte) (-1);
      longArray2[1] = (long) (byte) (-1);
      longArray2[2] = (long) (byte) (-1);
      longArray2[3] = (long) (byte) (-1);
      longArray2[4] = (long) (byte) (-1);
      longArray2[5] = (long) (byte) (-1);
      longArray2[6] = (long) (byte) (-1);
      longArray2[7] = (long) (byte) (-1);
      boolean boolean0 = ArrayUtils.isSorted(longArray2);
      assertEquals(8, longArray2.length);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) 2237;
      ArrayUtils.swap(doubleArray0, 2237, 2237, 2293);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 2237.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'o';
      charArray0[2] = '-';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '{');
      assertEquals(3, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'W', 'o', '-'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1.0), 2237.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      Long long0 = new Long((-840L));
      assertNotNull(long0);
      assertEquals((-840L), (long)long0);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long0;
      longArray0[3] = long0;
      longArray0[4] = longArray0[3];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-840L), (-840L), (-840L), (-840L), (-840L)}, longArray1);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      Boolean boolean4 = new Boolean(true);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      Boolean boolean5 = new Boolean("");
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      Boolean boolean6 = Boolean.FALSE;
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      Boolean boolean7 = Boolean.TRUE;
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean4));
      assertNotNull(boolean7);
      assertTrue(boolean7);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean4;
      boolean[] booleanArray1 = new boolean[9];
      booleanArray1[0] = (boolean) boolean4;
      booleanArray1[1] = (boolean) boolean4;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = (boolean) boolean4;
      booleanArray1[6] = true;
      booleanArray1[7] = true;
      booleanArray1[8] = true;
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray1, true);
      assertEquals(9, booleanArray1.length);
      assertEquals(10, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true, true}, booleanArray2));
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (long)longArray0[3];
      floatArray0[1] = (float) (long)longArray0[0];
      floatArray0[2] = (float) (long)longArray0[0];
      floatArray0[3] = (float) (long)longArray0[4];
      floatArray0[4] = (float) (long)longArray0[3];
      boolean boolean8 = ArrayUtils.isEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean8);
      assertArrayEquals(new float[] {(-840.0F), (-840.0F), (-840.0F), (-840.0F), (-840.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift((char[]) null, 38);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      Long[] longArray0 = new Long[10];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(10, longArray0.length);
      assertEquals(10, longArray1.length);
      assertNotNull(longArray1);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2237;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2293;
      doubleArray0[4] = (double) 2293;
      ArrayUtils.swap(doubleArray0, 2293, 2237, 2293);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2237.0, 0.0, 2293.0, 0.0, 2293.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'W');
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2237.0, 0.0, 2293.0, 0.0, 2293.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1481.44176554);
      doubleArray0[2] = 0.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, (-1481.44176554), 0.0}, doubleArray0, 0.01);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      long long2 = 43L;
      Long long3 = new Long(43L);
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(43L, (long)long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(0L);
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertNotNull(long4);
      assertEquals(0L, (long)long4);
      
      longArray0[3] = long4;
      Long long5 = new Long((-861L));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertNotNull(long5);
      assertEquals((-861L), (long)long5);
      
      longArray0[4] = long5;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, long2);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 43L, 0L, (-861L)}, longArray1);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = new Boolean("@#_p#e+b.'H38");
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean0));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = Boolean.FALSE;
      assertTrue(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean2));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = Boolean.TRUE;
      assertFalse(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean1));
      assertNotNull(boolean8);
      assertTrue(boolean8);
      
      booleanArray0[7] = boolean8;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, false, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)9;
      floatArray0[1] = (-925.0423F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (byte)9;
      floatArray0[4] = (float) (byte)9;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {9.0F, (-925.0423F), 1.0F, 9.0F, 9.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-525);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)126;
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 103.0F, (int) (byte)126);
      assertEquals(1, floatArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-155.1061202);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1061.1);
      doubleArray0[4] = 982.00210567259;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = (-1172.3);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1.0);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-155.1061202), 1.0, (-1061.1), 982.00210567259, 0.0, 0.0, 1.0, (-1172.3)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-155.1061202), 1.0, (-1061.1), 982.00210567259, 0.0, 0.0, 1.0, (-1172.3), 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 99;
      intArray0[1] = 687;
      intArray0[2] = 1110;
      intArray0[3] = 100;
      intArray0[4] = 0;
      intArray0[5] = 874;
      intArray0[6] = 1063;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1110, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3471), (-3471));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte byte0 = (byte)2;
      int[] intArray0 = new int[1];
      intArray0[0] = (-3471);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3471, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)0);
      assertNull(shortArray0);
      
      boolean[] booleanArray2 = ArrayUtils.insert((-2145387093), booleanArray1, booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      Short[] shortArray1 = new Short[7];
      Short short0 = new Short((short)8192);
      assertNotNull(short0);
      assertEquals((short)8192, (short)short0);
      
      shortArray1[0] = short0;
      Short short1 = new Short((short)8192);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)8192, (short)short1);
      
      shortArray1[1] = short1;
      Short short2 = new Short((short) (-604));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-604), (short)short2);
      
      shortArray1[2] = short2;
      Short short3 = new Short((short)3169);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      assertEquals((short)3169, (short)short3);
      
      shortArray1[3] = short3;
      Short short4 = new Short((short)31521);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short)31521, (short)short4);
      
      shortArray1[4] = short4;
      Short short5 = new Short((short) (-2285));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertNotNull(short5);
      assertEquals((short) (-2285), (short)short5);
      
      Short short6 = new Short((short) shortArray1[0]);
      assertEquals(7, shortArray1.length);
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short3));
      assertTrue(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short2));
      assertTrue(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short4));
      assertNotNull(short6);
      assertEquals((short)8192, (short)short6);
      
      shortArray1[6] = short6;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (-1452));
      assertEquals(7, shortArray2.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)8192, (short)8192, (short) (-604), (short)3169, (short)31521, (short) (-1452), (short)8192}, shortArray2);
      
      ArrayUtils.swap(booleanArray0, (-1331), (-2145387093));
      assertEquals(1, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 82, 71, 3);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      Short short0 = new Short((short) (-982));
      assertNotNull(short0);
      assertEquals((short) (-982), (short)short0);
      
      Short short1 = new Short((short) (-982));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-982), (short)short1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, (int) (short) (-982));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 97, 97);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)36;
      shortArray0[1] = (short)49;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1));
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)36, (short)49}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)36, (short)49}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)969;
      shortArray0[1] = (short) (-31);
      shortArray0[2] = (short) (-1468);
      shortArray0[3] = (short)3644;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-132);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-149);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1468));
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)969, (short) (-31), (short) (-1468), (short)3644, (short)0, (short) (-132), (short)0, (short) (-149)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1468), (short)969, (short) (-31), (short) (-1468), (short)3644, (short)0, (short) (-132), (short)0, (short) (-149)}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      ArrayUtils.swap(booleanArray0, 3, 0, 52);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) short0);
      assertEquals(8, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      int int0 = (-1030);
      Character character0 = new Character('M');
      assertNotNull(character0);
      assertEquals('M', (char)character0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-1030), (Object) character0);
      assertEquals(8, objectArray0.length);
      assertNotNull(object1);
      assertEquals('M', object1);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object2);
      assertEquals((short)0, object2);
      
      objectArray0[2] = object2;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1030);
      longArray0[1] = (long) 'M';
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) 'M';
      longArray0[6] = (long) 'M';
      longArray0[7] = (long) (short)0;
      longArray0[8] = (long) (short)0;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      assertEquals(9, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 70, 320, 322, 323, 326, 384, 386, 387, 390}", bitSet0.toString());
      assertEquals(391, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(448, bitSet0.size());
      assertEquals(73, bitSet0.cardinality());
      assertArrayEquals(new long[] {(-1030L), 77L, 0L, 0L, 0L, 77L, 77L, 0L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) character0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.toArray(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.reverse(shortArray0, (int) (short)0, 1);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      int int0 = ArrayUtils.indexOf(floatArray0, 1583.0F, 1);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shuffle(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 1583.0F;
      doubleArray0[4] = (double) 0.0F;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1, (double) 0.0F);
      assertEquals(9, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new double[] {0.0, 1.0, (-1.0), 1583.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1481.44176554);
      doubleArray0[2] = 0.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, (-1481.44176554), 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1113);
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 2417;
      floatArray0[3] = (float) (-1113);
      floatArray0[4] = (float) (-1113);
      floatArray0[5] = (float) (-1113);
      floatArray0[6] = 1.0F;
      ArrayUtils.swap(floatArray0, 2417, (-1113), 50);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1113.0F), 1.0F, 2417.0F, (-1113.0F), (-1113.0F), (-1113.0F), 1.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2264.089, 0.0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.0, (-1481.44176554), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 36;
      intArray0[1] = (-1113);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {36, (-1113), (-1), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'M';
      doubleArray0[1] = (double) 'M';
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (-1030);
      doubleArray0[4] = (double) 'M';
      doubleArray0[5] = (double) 'M';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-553.95716), 2230.089);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, int0);
      assertArrayEquals(new double[] {77.0, 77.0, 0.0, (-1030.0), 77.0, 77.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {5}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)0;
      byte byte0 = (byte)100;
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      try { 
        mockRandom1.longs((-104L), 970L, (long) (byte)12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3471), (-3471));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (-1277.3838F);
      floatArray0[2] = 1583.0F;
      floatArray0[3] = (float) Integer.MAX_VALUE;
      floatArray0[4] = (float) (-3471);
      ArrayUtils.swap(floatArray0, 69, (-1553), 69);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-1277.3838F), 1583.0F, 2.14748365E9F, (-3471.0F)}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 100.0, (-1822.0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1032;
      floatArray0[1] = (float) (short)0;
      MockRandom mockRandom0 = new MockRandom(7L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1032.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, 58, (int) (short)0, (int) (short)0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1032.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'E'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)76;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)76}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)76;
      floatArray0[1] = (float) (byte)76;
      floatArray0[6] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(180L, (long) (byte)0, (long) (byte)76);
      assertNotNull(longStream0);
      
      int int0 = mockRandom0.nextInt(795);
      assertEquals(0, int0);
      
      int int1 = mockRandom0.nextInt();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {76.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 76.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, (-1113), (-2764), 2417);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {76.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 76.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2764);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 2417;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-1113);
      doubleArray0[5] = (double) 2417;
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0.0F, (double) (byte)76);
      assertEquals(6, doubleArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3, int2);
      assertArrayEquals(new double[] {(-2764.0), 0.0, 2417.0, 0.0, (-1113.0), 2417.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)76;
      intArray0[1] = (int) (byte)76;
      intArray0[2] = (-1113);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = 795;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {76, 76, (-1113), 0, 795}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)99;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {99}, intArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 2, 1146);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1668L;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1668L, (-76.0));
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1668.0, 0.0}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      ArrayUtils.swap((float[]) null, 6, 6, 6);
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1407.12398147087, (-2665.812125));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 6;
      intArray0[4] = 6;
      intArray0[5] = (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(6, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), 6, 6, (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)76;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)76}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)76;
      floatArray0[1] = (float) (byte)76;
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs(180L, (long) (byte) (-1), (long) (byte)76);
      assertNotNull(longStream0);
      
      int int0 = mockRandom0.nextInt(795);
      assertEquals(0, int0);
      
      int int1 = mockRandom0.nextInt();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {76.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 76.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, (-1113), 1, 2417);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 76.0F, 76.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-1113);
      doubleArray0[5] = (double) 2417;
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0.0F, (double) (byte)76);
      assertEquals(6, doubleArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3, int2);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0, 0.0, (-1113.0), 2417.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)76;
      intArray0[1] = (int) (byte)76;
      intArray0[2] = (-1113);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = 795;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray0.length);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {76, 76, (-1113), 0, 795}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '.';
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      Double double0 = new Double(1L);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      Double double1 = new Double((double) doubleArray0[3]);
      assertEquals(9, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      
      doubleArray0[4] = double1;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[8] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[1]);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'e');
      assertEquals(5, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new char[] {'.', '.', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ArrayUtils.swap(charArray0, 0, 3);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '.', '\u0000', '.', '\u0000'}, charArray0);
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      Double double0 = new Double((-439.883));
      assertNotNull(double0);
      assertEquals((-439.883), (double)double0, 0.01);
      
      Double double1 = new Double((-439.883));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-439.883), (double)double1, 0.01);
      
      Double double2 = new Double((-4259.756109));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-4259.756109), (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-578.975));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-439.883)}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = 'h';
      charArray0[2] = '-';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'u');
      assertEquals(5, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{3, 4}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertArrayEquals(new char[] {'-', 'h', '-', 'u', 'u'}, charArray0);
      
      ArrayUtils.swap(charArray0, (int) 'u', (-3350));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'-', 'h', '-', 'u', 'u'}, charArray0);
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-439.883)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'n';
      charArray0[3] = 'g';
      ArrayUtils.swap(charArray0, (-2378), 0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'T', 'T', 'n', 'g'}, charArray0);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)89;
      Byte byte1 = new Byte((byte)89);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)89, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-101);
      Byte byte3 = new Byte((byte) (-101));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte) (-101), (byte)byte3);
      
      byteArray0[1] = byte3;
      Byte[] byteArray1 = ArrayUtils.remove(byteArray0, 0);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)89;
      byteArray2[1] = (byte)89;
      byteArray2[2] = (byte)89;
      byteArray2[3] = (byte)6;
      byteArray2[4] = (byte)89;
      byteArray2[5] = byte2;
      byteArray2[6] = byte0;
      byteArray2[7] = byte0;
      byteArray2[8] = byte2;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) (-2378), 2130L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      Double double0 = new Double((-439.883));
      assertNotNull(double0);
      assertEquals((-439.883), (double)double0, 0.01);
      
      Double double1 = new Double((-439.883));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-439.883), (double)double1, 0.01);
      
      Double double2 = new Double((-4259.756109));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-4259.756109), (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-578.975));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-439.883)}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = 'h';
      charArray0[2] = '-';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'u');
      assertEquals(5, charArray0.length);
      assertNotNull(bitSet0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals("{3, 4}", bitSet0.toString());
      assertArrayEquals(new char[] {'-', 'h', '-', 'u', 'u'}, charArray0);
      
      ArrayUtils.swap(charArray0, 0, (-3350));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'-', 'h', '-', 'u', 'u'}, charArray0);
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-439.883)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      Short short0 = new Short((short) (-982));
      assertNotNull(short0);
      assertEquals((short) (-982), (short)short0);
      
      Short short1 = new Short((short) (-982));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-982), (short)short1);
      
      Short short2 = new Short((short) (-5));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-5), (short)short2);
      
      long[] longArray0 = new long[1];
      ArrayUtils.reverse(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      Long long0 = Long.getLong((String) null, (long) (short) (-5));
      assertNotNull(long0);
      assertEquals((-5L), (long)long0);
      
      Long long1 = new Long((-3471L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-3471L), (long)long1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0L;
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      ArrayUtils.swap(charArray0, (-102), (-102), (int) (short) (-5));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\''}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-808.8059F);
      floatArray0[1] = 445.4608F;
      floatArray0[2] = 1545.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1184.41F);
      floatArray0[5] = 3233.1F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = 1199.666F;
      floatArray0[8] = 1992.291F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-2134.0F));
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-808.8059F), 445.4608F, 1545.0F, 0.0F, (-1184.41F), 3233.1F, 1.0F, 1199.666F, 1992.291F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2134.0F), (-808.8059F), 445.4608F, 1545.0F, 0.0F, (-1184.41F), 3233.1F, 1.0F, 1199.666F, 1992.291F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(100, shortArray0, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1421);
      intArray0[1] = 100;
      intArray0[2] = 115;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1421));
      assertEquals(3, intArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new int[] {(-1421), 100, 115}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)6);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Character character0 = new Character('T');
      assertNotNull(character0);
      assertEquals('T', (char)character0);
      
      Character character1 = new Character('T');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('T', (char)character1);
      
      Character character2 = Character.valueOf('+');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('+', (char)character2);
      
      Character character3 = Character.valueOf('T');
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('T', (char)character3);
      
      Character character4 = new Character('5');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('5', (char)character4);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character0;
      characterArray0[1] = character3;
      characterArray0[2] = character3;
      characterArray0[3] = character2;
      characterArray0[4] = character4;
      char[] charArray0 = new char[1];
      charArray0[0] = (char) character0;
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'T'}, charArray0);
      
      short[] shortArray0 = ArrayUtils.insert(4, (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      Double double0 = new Double(27.33522220953097);
      assertNotNull(double0);
      assertEquals(27.33522220953097, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[8];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      
      ArrayUtils.reverse(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      
      ArrayUtils.shift(doubleArray1, 57);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'h';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '$');
      assertEquals(2, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'x', 'h'}, charArray0);
      
      ArrayUtils.swap(charArray0, (-291), 46);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'x', 'h'}, charArray0);
      
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      int[] intArray0 = new int[4];
      Character character0 = Character.valueOf('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      Character character1 = new Character('R');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('R', (char)character1);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = character1;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(4584.2941053);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(4584.2941053, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertEquals(5, doubleArray0.length);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1.0);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      assertEquals(1.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 4584.2941053, 0.0, 1.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = ArrayUtils.insert(0, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = '-';
      charArray0[2] = 'u';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'h');
      assertEquals(3, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'G', '-', 'u'}, charArray0);
      
      ArrayUtils.swap(charArray0, 0, 0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'G', '-', 'u'}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'G';
      intArray0[1] = (int) 'h';
      intArray0[2] = (int) 'h';
      intArray0[3] = (int) '-';
      intArray0[4] = 0;
      intArray0[5] = (int) 'u';
      intArray0[6] = (int) 'u';
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 117, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      float[] floatArray0 = new float[11];
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = 551.03455F;
      floatArray1[2] = (float) 0;
      float[] floatArray2 = ArrayUtils.insert(2, floatArray0, floatArray1);
      assertEquals(11, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(14, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, 551.03455F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(5, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[3] = (Object) 551.03455F;
      objectArray0[4] = (Object) 0.0F;
      ArrayUtils.reverse(objectArray0);
      assertEquals(5, objectArray0.length);
      
      float[] floatArray3 = ArrayUtils.removeElements(floatArray2, floatArray0);
      assertEquals(11, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals(14, floatArray2.length);
      assertEquals(3, floatArray3.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {0.0F, 551.03455F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {551.03455F, 0.0F, 0.0F}, floatArray3, 0.01F);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 774;
      longArray0[3] = (long) 0;
      int[] intArray0 = new int[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {2L, 0L, 774L, 0L}, longArray1);
      assertArrayEquals(new long[] {2L, 0L, 774L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 944);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {944}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 1668L);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1668L;
      doubleArray0[2] = 29.86601489192;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1668.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1668.0, 29.86601489192}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 29.86601489192}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, (-1879), Integer.MAX_VALUE);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 1668.0, 29.86601489192}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1668.0, 29.86601489192}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      MockRandom mockRandom1 = new MockRandom((-1990L));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      int int0 = mockRandom1.nextInt();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertEquals(1, int0);
      assertNotSame(mockRandom1, mockRandom0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (int) ' ';
      intArray0[2] = 1;
      MockRandom mockRandom2 = new MockRandom();
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertNotNull(mockRandom2);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom2);
      assertEquals(3, intArray0.length);
      assertFalse(mockRandom2.equals((Object)mockRandom0));
      assertFalse(mockRandom2.equals((Object)mockRandom1));
      assertArrayEquals(new int[] {32, Integer.MAX_VALUE, 1}, intArray0);
      assertNotSame(mockRandom2, mockRandom0);
      assertNotSame(mockRandom2, mockRandom1);
      
      float[] floatArray2 = ArrayUtils.insert((-1527), floatArray1, floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (int) (byte)7);
      assertEquals((-1), int0);
      
      Double double0 = new Double((byte)7);
      assertNotNull(double0);
      assertEquals(7.0, (double)double0, 0.01);
      
      Double double1 = new Double((-2333.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2333.0), (double)double1, 0.01);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[2] = double1;
      Double double2 = new Double(0.0);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      Object[] objectArray0 = new Object[10];
      doubleArray0[3] = double1;
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) double0;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short)0, (int) (short)0, 321);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      Float float0 = new Float((float) (short)0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      String[] stringArray0 = new String[0];
      String string0 = ArrayUtils.get(stringArray0, (int) 0, "");
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) "");
      assertTrue(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals("", object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) doubleArray0, objectArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(10, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1583.0F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[3] = '&';
      charArray0[3] = 'k';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'k', (int) (byte)54);
      assertEquals(4, charArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'(', '(', '\u0000', 'k'}, charArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)126;
      shortArray0[1] = (short)8080;
      shortArray0[2] = (short) (byte)54;
      shortArray0[3] = (short) (byte)1;
      shortArray0[4] = (short)8080;
      ArrayUtils.reverse(shortArray0, (int) (short)54, 159);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)126, (short)8080, (short)54, (short)1, (short)8080}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)126, (short)8080, (short)54, (short)1, (short)8080}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-262));
      assertEquals(1, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(bitSet1, bitSet0);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray0, 216.2534);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[24];
      MutableInt[] mutableIntArray1 = ArrayUtils.add(mutableIntArray0, mutableIntArray0[4]);
      assertEquals(24, mutableIntArray0.length);
      assertEquals(25, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-541));
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray2));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 100.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {100.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.toArray(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.reverse(shortArray0, (int) (short)0, 1);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      int int0 = ArrayUtils.indexOf(floatArray0, 1583.0F, 1);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shuffle(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 1583.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = (double) 1583.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1862.5674), 1023);
      assertEquals(9, doubleArray0.length);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0, 1.0, (-1.0), 1583.0, 0.0, (-1.0), 0.0, 0.0, 1583.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 9.977916F;
      int[] intArray0 = new int[7];
      intArray0[0] = 15;
      intArray0[1] = 15;
      intArray0[2] = Integer.MAX_VALUE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) Integer.MAX_VALUE;
      objectArray0[1] = (Object) 15;
      objectArray0[2] = (Object) 15;
      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(6, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {15, 15, Integer.MAX_VALUE, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {15, 15, Integer.MAX_VALUE, 0, 0, 0, 0}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.toArray(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.reverse(shortArray0, (int) (short)0, 1);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)0;
      shortArray0[0] = (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      boolean[] booleanArray3 = ArrayUtils.clone(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray3.length);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray3));
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(5000, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5000, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      int int0 = 3375;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 3375;
      floatArray0[1] = (float) 3375;
      floatArray0[2] = (float) 3375;
      floatArray0[3] = (float) 3375;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3375, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3375, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, false, true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      short[] shortArray0 = new short[1];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)126;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (byte)79);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.insert((int) (byte)79, intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)79, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)126;
      longArray0[1] = (long) (byte)79;
      longArray0[2] = (long) 1299;
      longArray0[3] = (long) (byte)126;
      longArray0[4] = (long) (byte)79;
      longArray0[5] = (long) (byte)79;
      longArray0[6] = (long) (byte)126;
      longArray0[7] = (long) (byte)79;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1299, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1299, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1827.3981289417716;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1583.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1583.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1583.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1058);
      intArray0[1] = (-1058);
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      Character character0 = Character.valueOf('w');
      assertNotNull(character0);
      assertEquals('w', (char)character0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '7');
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1058);
      longArray0[1] = (long) (-1058);
      longArray0[2] = 716L;
      longArray0[3] = (long) (-1058);
      longArray0[4] = (long) '7';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1058), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1058, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      long[] longArray0 = ArrayUtils.insert(0, (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-750);
      shortArray0[1] = (short) (-750);
      shortArray0[3] = (short) (-1836);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-750), (short) (-750), (short)0, (short) (-1836)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (-494L);
      longArray0[2] = (-494L);
      longArray0[3] = (-1832L);
      longArray0[4] = 1605L;
      longArray0[5] = 2L;
      longArray0[6] = 1314L;
      longArray0[7] = 1032L;
      longArray0[8] = (-2612L);
      ArrayUtils.swap((float[]) null, (-4924), (-4924));
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.insert((-4924), (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      ArrayUtils.swap(longArray1, 99, 93);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 373;
      ArrayUtils.shift(longArray0, 373);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 373L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3401.8723F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 2701.4275F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-2861.0F);
      floatArray0[7] = 0.0F;
      ArrayUtils.swap(floatArray0, (-236), (-236));
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-3401.8723F), 1.0F, 2701.4275F, 0.0F, 1.0F, 1.0F, (-2861.0F), 0.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-236);
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (-236);
      longArray1[1] = (long) (-236);
      longArray1[2] = (long) (-236);
      longArray1[3] = (long) (-236);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-236), longArray0, longArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -236, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-767);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-924);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-767), Integer.MAX_VALUE, (-924)}, intArray0);
      assertArrayEquals(new int[] {(-767), Integer.MAX_VALUE, (-924), (-767), Integer.MAX_VALUE, (-924)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1163.1735F;
      floatArray0[2] = 1.0F;
      ArrayUtils.reverse(floatArray0, (-5277), Integer.MAX_VALUE);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 1163.1735F, (-1.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) 1163.1735F;
      ArrayUtils.reverse(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1163.1734619140625, (-1.0), 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayUtils.reverse(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      doubleArray0[3] = 1258.2741776854;
      doubleArray0[4] = 477.4094;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      ArrayUtils.reverse(doubleArray0, (-3254), (-3254));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 3764.090232940246, 29.86601489192, 1258.2741776854, 477.4094, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)16;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)5, (short)16, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)5, (short)16, (short)0, (short)0}, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)5;
      longArray0[1] = 3953L;
      int[] intArray0 = new int[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {5L, 3953L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {5L, 3953L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)85, (byte)7, (byte)1, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {1, 0, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (-1119));
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1119)}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)85;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1623.9));
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {85.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1623.9), 85.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)85, byteArray0, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 85, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)1032);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((double[]) null, (double) (short)0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short)1032, 1020);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 2809, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2809, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.add(shortArray1, (int) (short)0, (short)0);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertEquals(11, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)99;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)99}, shortArray0);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertArrayEquals(new int[] {1}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)99, Integer.MAX_VALUE);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)99, (byte)99, (byte)99}, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) (short)99;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-314.0F));
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {Float.NaN, 99.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, 99.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)85, (byte)7, (byte)1, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {1, 0, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)7);
      assertEquals(4, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte)85, (byte)7, (byte)1, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 0, (int) (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)7;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (byte)7, (short)57);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1828.8;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1828.8);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1828.8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-882L);
      longArray0[1] = 0L;
      longArray0[2] = (-947L);
      longArray0[3] = 1670L;
      longArray0[4] = (-567L);
      longArray0[5] = (-1L);
      longArray0[6] = (-2543L);
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'O';
      charArray0[2] = ']';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (int) 'O');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 79, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-97.4);
      doubleArray0[1] = (-3423.63752758);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-97.4), (-3423.63752758), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-97.4), (-3423.63752758), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = null;
      int int0 = (-3990);
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, (-3990));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3990, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1602L;
      longArray0[1] = (-178L);
      longArray0[2] = (-425L);
      longArray0[3] = (-670L);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[1];
      intArray0[0] = (-605);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-605));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-605)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.insert(11, (int[]) null, (int[]) null);
      assertNull(intArray2);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray3 = ArrayUtils.removeElement((int[]) null, 1656);
      assertNull(intArray3);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short) (-1);
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)3273;
      shortArray0[2] = (short) (-775);
      shortArray0[3] = (short)0;
      short short1 = (short)0;
      shortArray0[4] = (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      long[] longArray0 = ArrayUtils.add((long[]) null, 2147483647L);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {2147483647L}, longArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, 'i');
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'i'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-56L);
      longArray0[1] = 716L;
      longArray0[2] = (-1363L);
      ArrayUtils.reverse(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1363L), 716L, (-56L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 1535);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[6];
      int int1 = ArrayUtils.indexOf(booleanArray0, false, (-2070));
      assertEquals(6, booleanArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)2447);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)2447}, shortArray0);
      
      ArrayUtils.reverse((long[]) null, Integer.MAX_VALUE, (-2070));
      ArrayUtils.shift((Object[]) null, Integer.MAX_VALUE, (-1574), (-125));
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      short[] shortArray0 = new short[6];
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 100.0);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {100.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift((double[]) null, (int) (byte)0, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[24];
      MutableInt[] mutableIntArray1 = ArrayUtils.add(mutableIntArray0, mutableIntArray0[4]);
      assertEquals(24, mutableIntArray0.length);
      assertEquals(25, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1583.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-2012));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2012, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 341.76646783959;
      doubleArray0[1] = 468.3602396985576;
      doubleArray0[2] = 2260.7579797797;
      doubleArray0[3] = 723.95535325;
      doubleArray0[4] = 1.5;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {341.76646783959, 468.3602396985576, 2260.7579797797, 723.95535325, 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {341.76646783959, 468.3602396985576, 2260.7579797797, 723.95535325, 1.5}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = '/';
      charArray0[2] = 'V';
      charArray0[3] = 'H';
      charArray0[4] = 'N';
      charArray0[5] = 'O';
      charArray0[6] = 'P';
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertEquals(7, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {']', '/', 'V', 'H', 'N', 'O', 'P'}, charArray0);
      assertArrayEquals(new char[] {'/', 'V', 'H', 'N', 'O', 'P'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) "", intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3471), (-3471));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      int[] intArray0 = new int[2];
      intArray0[0] = (-3471);
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, 53);
      assertEquals((-1), int0);
      
      Double double0 = new Double(124.0);
      assertNotNull(double0);
      assertEquals(124.0, (double)double0, 0.01);
      
      Double double1 = new Double((-2333.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2333.0), (double)double1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      ArrayUtils.reverse(doubleArray0, (-3471), 0);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      Double[] doubleArray3 = new Double[2];
      doubleArray3[0] = (Double) 0.0;
      doubleArray3[1] = double1;
      Double[] doubleArray4 = ArrayUtils.insert((-3471), (Double[]) null, doubleArray3);
      assertEquals(2, doubleArray3.length);
      assertNull(doubleArray4);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-1730);
      intArray0[0] = (-1730);
      int int1 = 207;
      intArray0[1] = 207;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 207, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2147.57843289);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2147.57843289, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = Double.valueOf(0.0);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 2147.57843289, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3077.83F;
      floatArray0[2] = 1330.0F;
      floatArray0[3] = (-870.9F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-3425.0F);
      floatArray0[7] = 0.0F;
      int[] intArray0 = new int[6];
      intArray0[0] = 2471;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = 1568;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)85;
      byte byte0 = (byte)7;
      int int0 = 0;
      short[] shortArray0 = null;
      Double double0 = new Double((byte)7);
      assertNotNull(double0);
      assertEquals(7.0, (double)double0, 0.01);
      
      Double double1 = new Double((-2333.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2333.0), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[1] = 'D';
      charArray0[2] = 's';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1162, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1162, Length: 10
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = 'o';
      charArray0[2] = 'r';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'g', 'o', 'r'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (double) 0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(6, longArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      MutableInt[] mutableIntArray0 = new MutableInt[0];
      MutableInt mutableInt0 = new MutableInt(0);
      assertNotNull(mutableInt0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      
      mutableInt0.add((Number) 0L);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      
      MutableInt[] mutableIntArray1 = ArrayUtils.add(mutableIntArray0, mutableInt0);
      assertEquals(0, mutableIntArray0.length);
      assertEquals(1, mutableIntArray1.length);
      assertFalse(mutableIntArray1.equals((Object)mutableIntArray0));
      assertNotNull(mutableIntArray1);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertNotSame(mutableIntArray0, mutableIntArray1);
      assertNotSame(mutableIntArray1, mutableIntArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2314;
      shortArray0[2] = (short)744;
      shortArray0[3] = (short)572;
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)2314, (short)744, (short)572}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)2314, (short)744, (short)572}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'b';
      charArray0[2] = ' ';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 99, 'J');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) long0);
      assertNotNull(object1);
      assertEquals(0L, object1);
      
      objectArray0[1] = object1;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(2, objectArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (-1001.3529474176278);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1023.292), (-1));
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, (-1001.3529474176278)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1827.3981289417716;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1583.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1583.0F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1583.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.swap(floatArray1, (-2012), (-1149));
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1583.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-1295));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-5014.02622957433));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Byte byte0 = Byte.valueOf((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Double double0 = new Double((byte)0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      String string0 = ArrayUtils.toString((Object) double0);
      assertNotNull(string0);
      assertEquals("0.0", string0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)9;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte)0);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-5014.02622957433));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = '}';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'}', '}', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Long[]) null, 1190);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1190, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-2084L);
      longArray0[1] = 4712L;
      longArray0[2] = 445L;
      longArray0[3] = 1L;
      longArray0[4] = (-947L);
      longArray0[5] = (-2543L);
      longArray0[6] = 1L;
      longArray0[7] = 718L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1911L, 2076);
      assertEquals(8, longArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-2084L), 4712L, 445L, 1L, (-947L), (-2543L), 1L, 718L}, longArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(3, integerArray0.length);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      assertEquals(3, integerArray0.length);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertEquals(3, integerArray1.length);
      assertEquals(3, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, Double.NaN);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1.0));
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      long[] longArray0 = new long[9];
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (short) (-612));
      assertEquals(9, longArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1599L));
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1828.8;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1828.8);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1828.8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-882L);
      longArray0[1] = 0L;
      longArray0[2] = (-947L);
      longArray0[3] = 1670L;
      longArray0[4] = (-567L);
      longArray0[5] = (-1L);
      longArray0[6] = (-2543L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 4712L);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-882L), 0L, (-947L), 1670L, (-567L), (-1L), (-2543L)}, longArray0);
      assertArrayEquals(new long[] {(-882L), 0L, (-947L), 1670L, (-567L), (-1L), (-2543L)}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (-947L));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1828.8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1828.8}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 55;
      intArray0[1] = (-327);
      intArray0[2] = 0;
      intArray0[3] = 51;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-219);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {55, (-327), 0, 51, 0, 0, (-219)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 18688);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {18688}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 9L, 18688);
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1668L;
      doubleArray0[1] = (double) 1668L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1668.0, 1668.0}, doubleArray0, 0.01);
      
      Float float0 = new Float((float) (-979L));
      assertNotNull(float0);
      assertEquals((-979.0F), (float)float0, 0.01F);
      
      Float float1 = new Float((float) 1668L);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1668.0F, (float)float1, 0.01F);
      
      Float float2 = new Float(1.0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '+';
      charArray0[2] = '$';
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '\u0000';
      intArray0[1] = (int) '$';
      intArray0[2] = (int) '\u0000';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      int[] intArray0 = new int[5];
      intArray0[1] = (int) (byte)6;
      intArray0[2] = (int) (byte)6;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'H';
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '|';
      intArray0[1] = (int) 'H';
      intArray0[2] = (int) '|';
      intArray0[3] = (int) '|';
      intArray0[4] = (int) 'H';
      intArray0[5] = (int) '|';
      intArray0[6] = (int) '|';
      intArray0[7] = (-540);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 124, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 2987, 2987);
      assertNull(doubleArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(1, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 65536;
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {65536}, intArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '4';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'N', '/', '/', '4'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-234));
      assertEquals(1, booleanArray0.length);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-234);
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3471), (-3471));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.swap(doubleArray0, (-3471), (-3471));
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[7];
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(14, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3471), (-3471));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-2070));
      assertEquals(7, booleanArray0.length);
      assertNotNull(bitSet0);
      assertEquals("{5, 6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(7, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 1);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3471), (-3471));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-2070));
      assertEquals("{1, 5}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1283L;
      longArray0[1] = 0L;
      longArray0[2] = 99L;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 1283L, 322);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2146566311;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt(64);
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      Double double0 = new Double((-4259.756109));
      ArrayUtils.removeAllOccurrences((Double[]) null, double0);
      float[] floatArray0 = new float[7];
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      byte byte0 = (byte)42;
      Byte byte1 = new Byte((byte) (-1));
      Byte byte2 = new Byte((byte)113);
      Byte byte3 = new Byte((byte)42);
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte3;
      ArrayUtils.toPrimitive(byteArray0, byte0);
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 969L);
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 567.7F;
      floatArray0[1] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte)0);
      assertArrayEquals(new float[] {567.7F}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (byte)0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2187L;
      longArray0[1] = (-1894L);
      longArray0[2] = 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1894L));
      assertEquals("{1}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-4412.965F));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-4412.965F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      int[] intArray0 = new int[1];
      intArray0[0] = (-2128695514);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-53), (-556));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -53, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      ArrayUtils.toPrimitive(characterArray0, 'i');
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.removeElements(booleanArray0, booleanArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'i';
      longArray0[1] = (long) 'i';
      longArray0[2] = (long) 'i';
      longArray0[3] = (long) 'i';
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-1597), (-1837L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1597, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 111L;
      longArray0[1] = 599L;
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      longArray0[4] = 0L;
      longArray0[5] = (-299L);
      longArray0[6] = 0L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-3061), 456L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3061, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-757);
      byte[] byteArray0 = new byte[5];
      ArrayUtils.contains(byteArray0, (byte)5);
      Short short0 = new Short((short) (-837));
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) short0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Short short0 = new Short((short)0);
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) short0);
      assertNull(object0);
      
      objectArray0[0] = null;
      Long[] longArray0 = new Long[3];
      Long long0 = Long.valueOf((-2069L));
      longArray0[0] = long0;
      Long long1 = new Long((short)0);
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[0]);
      longArray0[2] = long2;
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[3] = 7;
      intArray0[4] = 14;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) 14;
      objectArray0[4] = (Object) 7;
      objectArray0[5] = (Object) 7;
      objectArray0[6] = (Object) 7;
      ArrayUtils.get(objectArray0, 7);
      ArrayUtils.reverse(objectArray0, (-3602), 14);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      Object object0 = ArrayUtils.get(objectArray0, 128, (Object) byte1);
      objectArray0[0] = object0;
      Object[] objectArray1 = new Object[0];
      Object object1 = ArrayUtils.get(objectArray1, 128, (Object) byte1);
      objectArray0[1] = object1;
      ArrayUtils.get(objectArray0, 2478);
      objectArray0[2] = null;
      Object[] objectArray2 = new Object[9];
      Object object2 = new Object();
      objectArray2[0] = object2;
      Object object3 = ArrayUtils.get(objectArray1, 128, object2);
      objectArray2[1] = object3;
      objectArray2[2] = object0;
      objectArray2[3] = (Object) byte1;
      objectArray2[4] = (Object) byte1;
      objectArray2[5] = object1;
      objectArray2[6] = null;
      objectArray2[7] = object1;
      objectArray2[8] = object0;
      Object object4 = ArrayUtils.get(objectArray2, 0);
      objectArray0[3] = object4;
      int[] intArray0 = new int[3];
      intArray0[0] = 2478;
      intArray0[1] = 128;
      intArray0[2] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray2[5], intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = 'z';
      charArray0[2] = 'M';
      charArray0[3] = '~';
      charArray0[4] = '!';
      ArrayUtils.reverse(charArray0, 2021, 2021);
      assertArrayEquals(new char[] {'.', 'z', 'M', '~', '!'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1032;
      ArrayUtils.reverse(floatArray0, (-5277), (-5277));
      assertArrayEquals(new float[] {1032.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      Float float0 = new Float((float) (byte)0);
      Float float1 = new Float((float) (byte)0);
      Object[] objectArray0 = new Object[0];
      ArrayUtils.isSameLength(objectArray0, objectArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '+';
      ArrayUtils.swap(charArray0, 137, 137, 137);
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-2974), 56, (-3458));
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      Double.valueOf((-4115.49));
      ArrayUtils.swap((char[]) null, 16, 693, 16);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-872);
      shortArray0[1] = (short)440;
      ArrayUtils.shift(shortArray0, 1, 7, 32);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      Character.valueOf('5');
      Character character0 = new Character('c');
      Character.valueOf('5');
      Character.valueOf('5');
      Character character1 = new Character('5');
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.removeElements(shortArray0, shortArray0);
      Double double0 = new Double(737.252);
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(object0, (Object) "Index: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      Short short0 = new Short((short) (-982));
      ArrayUtils.toObject((float[]) null);
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (int) (short) (-982), (int) (short)2);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      Object object0 = new Object();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 2);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-5909.0F);
      floatArray0[2] = (-3080.0F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 3806.0F;
      floatArray0[5] = (-1277.3838F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 882, 477);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1668L;
      doubleArray0[1] = (double) 1668L;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 75.0F;
      floatArray0[1] = (float) 1668L;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 1668L;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)104;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)104, (int) (byte)104);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-925.0423F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-61);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)13, (int) (byte)9);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-4115.49), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) double2;
      objectArray0[1] = (Object) double1;
      objectArray0[2] = (Object) double1;
      objectArray0[3] = (Object) double2;
      objectArray0[4] = (Object) doubleArray0[1];
      objectArray0[5] = (Object) doubleArray0[3];
      objectArray0[6] = (Object) double2;
      objectArray0[7] = (Object) doubleArray0[1];
      objectArray0[8] = (Object) double3;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, (Object[]) doubleArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      float[] floatArray1 = new float[0];
      float[] floatArray2 = ArrayUtils.insert(0, floatArray0, floatArray1);
      assertEquals(3, floatArray2.length);
      assertNotNull(floatArray2);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      Long[] longArray0 = new Long[10];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(10, longArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)87, 437);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      short[] shortArray0 = new short[5];
      ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)0;
      short[] shortArray1 = new short[0];
      ArrayUtils.shuffle(shortArray1);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1771);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(1, shortArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-1771);
      longArray0[1] = (long) (short) (-1771);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-348);
      ArrayUtils.shift(longArray0, (int) (short) (-1771));
      assertArrayEquals(new long[] {(-1771L), 0L, 0L, (-348L), (-1771L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)119;
      ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), 711);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-99);
      ArrayUtils.nullToEmpty(shortArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = 1.5;
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = (double) (byte) (-99);
      doubleArray0[7] = 250.9;
      doubleArray0[8] = (-1.0);
      MockRandom mockRandom0 = new MockRandom((short) (-1));
      mockRandom0.nextBytes(byteArray0);
      // Undeclared exception!
      try { 
        mockRandom0.longs((-355L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-3036));
      Integer integer0 = new Integer(245);
      char[] charArray0 = new char[3];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'N');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 56);
      int[] intArray0 = ArrayUtils.add((int[]) null, 101);
      assertArrayEquals(new int[] {101}, intArray0);
      assertNotNull(intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'P';
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'K';
      objectArray0[1] = (Object) 'K';
      ArrayUtils.swap(objectArray0, (-2623), (-1771), Integer.MAX_VALUE);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 834.849831;
      doubleArray0[1] = (double) 101;
      doubleArray0[2] = (double) 'K';
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 56;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2417.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.shuffle(booleanArray0);
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      ArrayUtils.addFirst(booleanArray0, true);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs(1L, 375L);
      ArrayUtils.shuffle((Object[]) booleanArray1, (Random) mockRandom0);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short)37);
      ArrayUtils.shift((Object[]) shortArray0, (-236));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) (short)37;
      doubleArray0[4] = 2963.600399632686;
      doubleArray0[5] = 2963.600399632686;
      doubleArray0[6] = (double) (-236);
      doubleArray0[7] = (double) 2;
      ArrayUtils.add(doubleArray0, 2.0);
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) 2);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float(Double.NaN);
      floatArray0[0] = float0;
      Float float1 = new Float(Double.NaN);
      floatArray0[1] = float1;
      Float float2 = new Float((float) floatArray0[0]);
      floatArray0[2] = float2;
      Float float3 = new Float(Double.NaN);
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN, Float.NaN}, floatArray1, 0.01F);
      
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) floatArray0, (Object[]) floatArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'P');
      assertArrayEquals(new char[] {'\u0000', 'K', 'K'}, charArray1);
      
      ArrayUtils.shift(charArray0, 1225);
      assertArrayEquals(new char[] {'\u0000', 'P', 'P', 'K', 'K'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[1] = '}';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\"');
      assertEquals(3, charArray1.length);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 341.76646783959;
      doubleArray0[1] = 468.3602396985576;
      doubleArray0[2] = 2260.7579797797;
      doubleArray0[3] = 723.95535325;
      doubleArray0[4] = 1.5;
      ArrayUtils.clone(doubleArray0);
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = '/';
      charArray0[2] = 'V';
      charArray0[3] = 'H';
      charArray0[4] = 'N';
      charArray0[5] = 'O';
      ArrayUtils.nullToEmpty((Float[]) null);
      ArrayUtils.swap(charArray0, Integer.MAX_VALUE, (-114), 801);
      assertArrayEquals(new char[] {']', '/', 'V', 'H', 'N', 'O', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3764.090232940246;
      doubleArray0[2] = 29.86601489192;
      ArrayUtils.removeElement(doubleArray0, 3764.090232940246);
      Character.valueOf(' ');
      Character[] characterArray0 = new Character[0];
      ArrayUtils.toPrimitive(characterArray0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.toPrimitive((Float[]) null);
      Object[] objectArray0 = ArrayUtils.addAll((Object[]) null, (Object[]) null);
      assertNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ArrayUtils.subarray(doubleArray0, (-3471), (-3471));
      char[] charArray0 = new char[5];
      charArray0[0] = 'O';
      charArray0[1] = '8';
      charArray0[2] = 'O';
      charArray0[3] = 'N';
      charArray0[4] = 'O';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '4', Integer.MAX_VALUE);
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      charArray0[4] = 'd';
      int int0 = ArrayUtils.indexOf(charArray0, ' ', (-715827883));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-715827883);
      longArray0[1] = (long) '[';
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) 'p';
      longArray0[4] = (long) (-715827883);
      longArray0[5] = (long) '[';
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean[] booleanArray0 = new boolean[5];
      ArrayUtils.swap(booleanArray0, (-2681), (-2681), (-2146232928));
      ArrayUtils.isSorted((int[]) null);
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift(objectArray0, (-2146232928), 581, (-2681));
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-2681);
      floatArray0[1] = (float) (-2681);
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 68, 68);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      ArrayUtils.addFirst((short[]) null, (short)29362);
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('6');
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      ArrayUtils.shift((Object[]) characterArray1, 54);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)29362;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (int) (byte)7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(4584.2941053);
      Float float0 = new Float((-1.0));
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(1, floatArray1.length);
      
      Double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(10, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-89.03459692617));
      floatArray0[0] = float0;
      Float float1 = new Float((-1139.6858));
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      Short short0 = new Short((short) (-982));
      Short short1 = new Short((short) (-982));
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '7');
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'N';
      int int0 = ArrayUtils.indexOf(charArray0, '\u0000', 76);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      String[] stringArray0 = new String[6];
      ArrayUtils.swap((Object[]) stringArray0, (-1818), (-1818), (-1818));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 834.849831);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 53, 1114100, 2125965775);
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (-3544.29914));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      Long[] longArray0 = new Long[10];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray0, (-1572L));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-1572L), (-1572L), (-1572L), (-1572L), (-1572L), (-1572L), (-1572L), (-1572L), (-1572L), (-1572L)}, longArray2);
      assertSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)2);
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) (byte)2);
      floatArray0[0] = float0;
      Float float1 = new Float((float) (byte) (-1));
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      ArrayUtils.shift((Object[]) floatArray1, (-1069));
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 2.0F}, floatArray2, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = '';
      charArray0[2] = 'j';
      charArray0[3] = 'O';
      charArray0[4] = 'A';
      charArray0[5] = '8';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'O', (int) (byte)0);
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Short short0 = new Short((short)0);
      int int0 = 160;
      Float float0 = new Float((double) 0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) float0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Short short0 = new Short((short)0);
      BitSet bitSet0 = new BitSet((short)0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) short0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 2417.0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-1L));
      assertArrayEquals(new long[] {1L}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-1295));
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)37, (-1295));
      Object[] objectArray0 = ArrayUtils.removeAllOccurences((Object[]) byteArray0, (Object) bitSet0);
      assertNotNull(objectArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-757);
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)5);
      assertFalse(boolean0);
      
      Byte[] byteArray1 = new Byte[5];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)5);
      assertArrayEquals(new byte[] {(byte)5, (byte)5, (byte)5, (byte)5, (byte)5}, byteArray2);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((-4115.49));
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray0[3] = double3;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) double2;
      objectArray0[1] = (Object) double1;
      objectArray0[2] = (Object) double1;
      objectArray0[3] = (Object) double2;
      objectArray0[4] = (Object) doubleArray0[1];
      objectArray0[5] = (Object) doubleArray0[3];
      objectArray0[6] = (Object) double2;
      objectArray0[7] = (Object) doubleArray0[1];
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, (double) doubleArray0[3]);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-4115.49)}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 51;
      intArray0[3] = 0;
      intArray0[4] = (-219);
      intArray0[5] = 51;
      intArray0[6] = 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-76);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)40);
      assertArrayEquals(new byte[] {(byte) (-76)}, byteArray1);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 89.2017;
      doubleArray0[1] = (double) (byte) (-76);
      doubleArray0[2] = (double) (byte)40;
      doubleArray0[3] = (double) (byte)40;
      doubleArray0[4] = (double) (byte) (-76);
      doubleArray0[5] = (double) (byte)40;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 56.0, (int) (byte) (-76), (-742.488760145711));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      short[] shortArray0 = new short[3];
      BitSet bitSet0 = new BitSet();
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-24);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-51));
      assertArrayEquals(new byte[] {(byte)56, (byte) (-24)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      MutableInt[] mutableIntArray0 = new MutableInt[24];
      MutableInt[] mutableIntArray1 = ArrayUtils.add(mutableIntArray0, mutableIntArray0[4]);
      assertEquals(25, mutableIntArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-66), (-2467));
      assertEquals("{0, 1}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.toArray(booleanArray0);
      ArrayUtils.toPrimitive(booleanArray1);
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) (short)0;
      ArrayUtils.shift((Object[]) booleanArray0, (int) (short)0, 1, 1);
      Character.valueOf(' ');
      Character[] characterArray0 = new Character[0];
      ArrayUtils.toPrimitive(characterArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = new Boolean("yY6YW`zxwO\"m");
      booleanArray0[0] = boolean0;
      boolean boolean1 = true;
      Boolean boolean2 = Boolean.valueOf(true);
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf((String) null);
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.valueOf("yGf$SN6$yx<=B>S|r");
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.valueOf(boolean1);
      booleanArray0[5] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      booleanArray0[6] = boolean7;
      Boolean boolean8 = Boolean.FALSE;
      booleanArray0[7] = boolean8;
      Boolean boolean9 = Boolean.FALSE;
      booleanArray0[8] = boolean9;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertEquals(9, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-76));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-69), (byte)0, (byte) (-82), (byte)0, (byte)1}, byteArray1);
  }
}
